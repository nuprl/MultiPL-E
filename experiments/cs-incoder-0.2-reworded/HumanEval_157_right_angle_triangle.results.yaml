language: cs
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side9 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side15 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(a,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side21 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side22 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjy31toyn.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpjy31toyn.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fa211abae5349c794d4028ef36cb392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fa211abae5349c794d4028ef36cb392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqz0pb9a.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp34z2aplm.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp34z2aplm.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abac = ab * ac;\n        long abcab = ab * cab;\n\
    \        long abcabc = ab * cab * bc;\n        long abcabbc = ab * cab * bc *\
    \ bc;\n        long abcabac = ab * cab * ac * ac;\n        long abcabcab = ab\
    \ * cab * cab * ac;\n        long abcabcabc = ab * cab * cab * ac * ac;\n    \
    \    long abcabcabbc = ab * cab * cab * ac * ac * bc;\n        long abcabcabac\
    \ = ab * cab * cab * ac * ac * ac;\n        long abcabcabcab = ab * cab * cab\
    \ * ac * ac * ac * ac;\n        long abcabcabcabc = ab * cab * cab * ac * ac *\
    \ ac * ac;\n        long abcabcabcabbc = ab * cab * cab * ac * ac * ac * ac *\
    \ bc;\n        long abcabcabcabac = ab * cab * cab * ac * ac * ac * ac * ac;\n\
    \        long abcabcabcabcab = ab * cab * cab * ac * ac * ac * ac * ac * ac;\n\
    \        long abcabcabcabcabc = ab * cab * cab * ac * ac * ac * ac * ac * ac;\n\
    \        long abcabcabcabcabbc = ab * cab * cab * ac * ac * ac * ac * ac * ac\
    \ * bc;\n        long abcabcabcabcabac = ab * cab * cab * ac * ac * ac * ac *\
    \ ac * ac * ac;\n        long abcabcabcabcabcab = ab * cab * cab * ac * ac * ac\
    \ * ac * ac * ac * ac * ac;\n        long abcabcabcabcabcabc = ab * cab * cab\
    \ * ac * ac * ac * ac * ac * ac * ac * ac;\n        long abcabcabcabcabcabbc =\
    \ ab * cab * cab * ac * ac * ac * ac * ac * ac * ac * ac * bc;\n        long abcabcabcabcabcabac\
    \ = ab * cab * cab * ac * ac * ac\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn2yrarxi.cs(45,65): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbbc = abbbbbbc * bc;\n        long acbbbbbc = acbbbbbc * bc;\n\
    \        long abbbbbbbc = abbbbbbbc * bc;\n        long acbbbbbbc = acbbbbbbc\
    \ * bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long acbbbbbbbc =\
    \ acbbbbbbbc * bc;\n        long abbbbbbbbbc = abbbbbbbbbc * bc;\n        long\
    \ acbbbbbbbbc = acbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc *\
    \ bc;\n        long acbbbbbbbbbc = acbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc\
    \ = abbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbc = acbbbbbbbbbbc * bc;\n  \
    \      long abbbbbbbbbbbbc = abbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n\
    \        long acbbbbbbbbbbbbc = acbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbc = acbbbbbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc * bc;\n        long\
    \ acbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzuxam2gw.cs(55,60): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abbc = ab + bc;\n        long acab = ac + ab;\n        long abcab = ab + ac;\n\
    \        long acabc = ac + ab;\n        long abcabc = ab + ac;\n        long acabbc\
    \ = ac + ab;\n        long abcabbc = ab + ac;\n        long acabcab = ac + ab;\n\
    \        long abcabcab = ab + ac;\n        long acabcabc = ac + ab;\n        long\
    \ abcabcabc = ab + ac;\n        long acabcabbc = ac + ab;\n        long abcabcabbc\
    \ = ab + ac;\n        long acabcabcab = ac + ab;\n        long abcabcabcab = ab\
    \ + ac;\n        long acabcabcabc = ac + ab;\n        long abcabcabcabc = ab +\
    \ ac;\n        long acabcabcabbc = ac + ab;\n        long abcabcabcabbc = ab +\
    \ ac;\n        long acabcabcabcab = ac + ab;\n        long abcabcabcabcab = ab\
    \ + ac;\n        long acabcabcabcabc = ac + ab;\n        long abcabcabcabcabc\
    \ = ab + ac;\n        long acabcabcabcabbc = ac + ab;\n        long abcabcabcabcabbc\
    \ = ab + ac;\n        long acabcabcabcabcab = ac + ab;\n        long abcabcabcabcabcab\
    \ = ab + ac;\n        long acabcabcabcabcabc = ac + ab;\n        long abcabcabcabcabcabc\
    \ = ab + ac;\n        long acabcabcabcabcabbc = ac + ab;\n        long abcabcabcabcabcabbc\
    \ = ab + ac;\n        long acabcabcabcabcabcab = ac + ab;\n        long abcabcabcabcabcabcab\
    \ = ab + ac;\n        long acabcabcabcabcabcabbc = ac + ab;\n        long abcabcabcabcabcabcabbc\
    \ = ab + ac;\n        long acabcabcabcabcabcabcab = ac + ab;\n        long abcabcabcabcabcabcabcab\
    \ = ab + ac\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc3n6m16u.cs(60,47): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long acbc = ac * bc;\n        long abbcc = ab * bc\
    \ * bc;\n        long acbcc = ac * bc * bc;\n        long abbccc = ab * bc * bc\
    \ * bc;\n        long acbccc = ac * bc * bc * bc;\n        long abbcccb = ab *\
    \ bc * bc * bc * bc;\n        long acbcccb = ac * bc * bc * bc * bc;\n       \
    \ long abbcccbc = ab * bc * bc * bc * bc * bc;\n        long acbcccbc = ac * bc\
    \ * bc * bc * bc * bc;\n        long abbcccbcb = ab * bc * bc * bc * bc * bc *\
    \ bc;\n        long acbcccbcb = ac * bc * bc * bc * bc * bc * bc;\n        long\
    \ abbcccbcbc = ab * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcb = ab * bc\
    \ * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbcb = ac * bc * bc\
    \ * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcbc = ab * bc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbcbc = ac * bc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcbcb = ab * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbcbcb = ac * bc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcbcbc\
    \ = ab * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4_zoemqu.cs(45,21): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcac = abc * ac;\n        long abcabc = abcabc\
    \ * abc;\n        long acbcabc = acbcabc * acb;\n        long acbcabcb = acbcabcb\
    \ * acb;\n        long acbcabcbc = acbcabcbc * acb;\n        long acbcabcbcd =\
    \ acbcabcbcd * acb;\n        long acbcabcbcde = acbcabcbcde * acb;\n        long\
    \ acbcabcbcdef = acbcabcbcdef * acb;\n        long acbcabcbcdefg = acbcabcbcdefg\
    \ * acb;\n        long acbcabcbcdefgh = acbcabcbcdefgh * acb;\n        long acbcabcbcdefghi\
    \ = acbcabcbcdefghi * acb;\n        long acbcabcbcdefghij = acbcabcbcdefghij *\
    \ acb;\n        long acbcabcbcdefghijk = acbcabcbcdefghijk * acb;\n        long\
    \ acbcabcbcdefghijkl = acbcabcbcdefghijkl * acb;\n        long acbcabcbcdefghijkll\
    \ = acbcabcbcdefghijkll * acb;\n        long acbcabcbcdefghijklm = acbcabcbcdefghijklm\
    \ * acb;\n        long acbcabcbcdefghijklmn = acbcabcbcdefghijkln * acb;\n   \
    \     long acbcabcbcdefghijklno = acbcabcbcdefghijklno * acb;\n        long acbcabcbcdefghijklnop\
    \ = acbcabcbcdefghijklnop * acb;\n        long acbcabcbcdefghijklnopq = acbcabcbcdefghijklnopq\
    \ * acb;\n        long acbcabcbcdefghijklnopr = acbcabcbcdefghijklnopr * acb;\n\
    \        long acbcabcbcdefghijklno\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g65vifl.cs(46,34): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acab = ac * abc;\n        long abcab = ab * abc;\n        long acabc = ac *\
    \ abc;\n        long abcabc = ab * abc;\n        long acabcb = ac * abc;\n   \
    \     long abcabcb = ab * abc;\n        long acabcbc = ac * abc;\n        long\
    \ abcabcbc = ab * abc;\n        long acabcbcb = ac * abc;\n        long abcabcbcb\
    \ = ab * abc;\n        long acabcbcbc = ac * abc;\n        long abcabcbcbc = ab\
    \ * abc;\n        long acabcbcbcb = ac * abc;\n        long abcabcbcbcb = ab *\
    \ abc;\n        long acabcbcbcbc = ac * abc;\n        long abcabcbcbcbc = ab *\
    \ abc;\n        long acabcbcbcbcb = ac * abc;\n        long abcabcbcbcbcb = ab\
    \ * abc;\n        long acabcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcb\
    \ = ab * abc;\n        long acabcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcbcb\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcbcbcb\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcbc = ac * abc;\n        long abcabcbcbcbcbcbcbcbc\
    \ = ab * abc;\n        long acabcbcbcbcbcbcbcbcb = ac * abc;\n        long abcabcbcbcbcbcbcbcbcb\
    \ = ab * abc;\n        long acabcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpux3kn5og.cs(58,20): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcab\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk9j7tj26.cs(46,44): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbb * bc;\n     \
    \   long abbbbc = abbbbc * bc;\n        long acbbbcc = acbbb * bc * bc;\n    \
    \    long abbbbcc = abbbb * bc * bc;\n        long acbbbcbc = acbbb * bc * bc\
    \ * bc;\n        long abbbbcbc = abbbb * bc * bc * bc;\n        long acbbbcbcb\
    \ = acbbb * bc * bc * bc * bc;\n        long abbbbcbcb = abbbb * bc * bc * bc\
    \ * bc;\n        long acbbbcbcbc = acbbb * bc * bc * bc * bc * bc;\n        long\
    \ abbbbcbcbc = abbbb * bc * bc * bc * bc * bc;\n        long acbbbcbcbcb = acbbb\
    \ * bc * bc * bc * bc * bc * bc;\n        long abbbbcbcbcb = abbbb * bc * bc *\
    \ bc * bc * bc * bc;\n        long acbbbcbcbcbc = acbbb * bc * bc * bc * bc *\
    \ bc * bc * bc;\n        long abbbbcbcbcbc = abbbb * bc * bc * bc * bc * bc *\
    \ bc * bc;\n        long acbbbcbcbcbcb = acbbb * bc * bc * bc * bc * bc * bc *\
    \ bc * bc;\n        long abbbbcbcbcbcb = abbbb * bc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc;\n        long acbbbcbcbcbcbc = acbbb * bc * bc * bc * bc * bc\
    \ * bc * bc * bc * bc;\n        long abbbbcbcbcbcbc = abbbb * bc\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph10mlh9l.cs(47,41): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abcab = ab * abc;\n        long abcabc = ab *\
    \ abc * bc;\n        long abcabcb = ab * abc * bc * bc;\n        long abcabcbb\
    \ = ab * abc * bc * bc * bc;\n        long abcabcbbc = ab * abc * bc * bc * bc\
    \ * bc;\n        long abcabcbbcd = ab * abc * bc * bc * bc * bc * bc;\n      \
    \  long abcabcbbcde = ab * abc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdef\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefg =\
    \ ab * abc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefgh\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefghi\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long\
    \ abcabcbbcdefghij = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc\
    \ * bc;\n        long abcabcbbcdefghijk = ab * abc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefghijkl = ab * abc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefghijkll\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n\
    \        long abcabcbbcdefghijkllm = ab * abc * bc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long abcabc\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuwucnzet.cs(41,20): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbbc = abbb *\
    \ bc;\n        long abbbcd = abbbc * bc;\n        long abbbcde = abbbcd * bc;\n\
    \        long abbbcdef = abbbcde * bc;\n        long abbbcdefg = abbbcdef * bc;\n\
    \        long abbbcdefgh = abbbcdefg * bc;\n        long abbbcdefghi = abbbcdefgh\
    \ * bc;\n        long abbbcdefghij = abbbcdefghi * bc;\n        long abbbcdefghijk\
    \ = abbbcdefghij * bc;\n        long abbbcdefghijkl = abbbcdefghijk * bc;\n  \
    \      long abbbcdefghijklmn = abbbcdefghijklm * bc;\n        long abbbcdefghijklmn1\
    \ = abbbcdefghijklmn * bc;\n        long abbbcdefghijklmno = abbbcdefghijklmn1\
    \ * bc;\n        long abbbcdefghijklmnop = abbbcdefghijklmno * bc;\n        long\
    \ abbbcdefghijklmnopq = abbbcdefghijklmnop * bc;\n        long abbbcdefghijklmnopr\
    \ = abbbcdefghijklmnopq * bc;\n        long abbbcdefghijklmnoprs = abbbcdefghijklmnopr\
    \ * bc;\n        long abbbcdefghijklmnoprst = abbbcdefghijklmnoprs * bc;\n   \
    \     long abbbcdefghijklmnoprstu = abbbcdefghijklmnoprst * bc;\n        long\
    \ abbbcdefghijklmnoprstv = abbbcdefghijklmnoprstu * bc;\n        long abbbcdefghijklmnoprstuv\
    \ = abbbcdefghijklmnoprstv * bc;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcea1pidx.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpcea1pidx.cs(26,22): error CS0103: The name ''abbb'' does not exist in
    the current context

    /tmp/tmpcea1pidx.cs(36,33): error CS0103: The name ''abbbcdefghijklm'' does not
    exist in the current context

    /tmp/tmpcea1pidx.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp36xtpt30.cs(47,55): error CS1525: Invalid expression term ''}''

    /tmp/tmp36xtpt30.cs(47,55): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * abc;\n        long acbcabc =\
    \ acbcab * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc\
    \ = acbcabcb * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long\
    \ acbcabcbcbc = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n\
    \        long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7echj2em.cs(46,24): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long acbc = ac * bc;\n\
    \        long abcab = ab * ac;\n        long abcbc = ab * bc;\n        long acbca\
    \ = ac * bc;\n        long accab = ac * ab;\n        long acbcab = ac * bc * ab;\n\
    \        long abcabc = ab * ac * bc;\n        long abcbca = ab * bc * ac;\n  \
    \      long abcabca = ab * ac * bc * ab;\n        long abcbcabc = ab * bc * ac\
    \ * bc;\n        long abcabcbc = ab * ac * bc * ab * bc;\n        long abcabcabc\
    \ = ab * ac * bc * ab * ac * bc;\n        long abcabcbca = ab * bc * ac * ab *\
    \ bc * ac;\n        long abcabcabca = ab * ac * bc * ab * ac * bc * ab;\n    \
    \    long abcabcbcabc = ab * bc * ac * ab * bc * ac * bc;\n        long abcabcabcbca\
    \ = ab * ac * bc * ab * ac * bc * ab * bc;\n        long abcabcabcabc = ab * ac\
    \ * bc * ab * ac * bc * ab * ac * bc;\n        long abcabcabcbcabc = ab * bc *\
    \ ac * ab * ac * bc * ab * ac * bc * bc;\n        long abcabcabcabcbc = ab * ac\
    \ * bc * ab * ac * bc * ab * ac * bc * ab * bc * bc;\n        long abcabcabcabcabc\
    \ = ab * ac * bc * ab * ac * bc * ab * ac * bc * ab * ac * bc * ab * bc * ac *\
    \ bc;\n        long abcabcabcabcabcbc = ab * ac * bc * ab * ac * bc * ab * ac\
    \ * bc * ab * ac * bc * ab * ac * bc * ab * bc * ac * bc;\n        long abcabcabcabcabcabc\
    \ = ab * ac * bc * ab * ac * bc * ab * ac * bc * ab * ac * \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpamjolg9t.cs(47,89): error CS1525: Invalid expression term ''}''

    /tmp/tmpamjolg9t.cs(47,89): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbcb * bc;\n  \
    \      long abbbbcbc = abbbbcb * bc;\n        long acbbbcbcb = acbbbcbc * bc;\n\
    \        long abbbbcbcb = abbbbcbc * bc;\n        long acbbbcbcbb = acbbbcbcb\
    \ * bc;\n        long abbbbcbcbb = abbbbcbcb * bc;\n        long acbbbcbcbcb =\
    \ acbbbcbcbc * bc;\n        long abbbbcbcbcb = abbbbcbcbc * bc;\n        long\
    \ acbbbcbcbcbb = acbbbcbcbcb * bc;\n        long abbbbcbcbcbb = abbbbcbcbcb *\
    \ bc;\n        long acbbbcbcbcbb = acbbbcbcbcb * bc;\n        long abbbbcbcbcbb\
    \ = abbbbcbcbcb * bc;\n        long acbbbcbcbcbcb = acbbbcbcbcb * bc;\n      \
    \  long abbbbcbcbcbcb = abbbbcbcbcb * bc;\n        long acbbbcbcbcbcbb = acbbbcbcbcbcb\
    \ * bc;\n        long abbbbcbcbcbcbb = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbbcbcbcbcb * bc;\n        long abbbbcbcbcbcbcb = abbbbcbcbcbcb * bc;\n\
    \        long acbbbcbcbcbcbcbb = acbbbcbcbcbcbcb * bc;\n        long abbbbcbcbcbcbcbb\
    \ = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ynxv3ak.cs(51,32): error CS1525: Invalid expression term ''}''

    /tmp/tmp9ynxv3ak.cs(51,32): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 >= 0\
    \ && t1 <= 1 && t2 >= 0 && t2 <= 1;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <127122104f2e4450b7c9bd6ec799013e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <127122104f2e4450b7c9bd6ec799013e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = Math.Sqrt(d);\n            long f = (b + e) / (2 * a);\n         \
    \   long g = (c + e) / (2 * a);\n            if (f > 0 && g > 0) {\n         \
    \       return true;\n            }\n        }\n        return false;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdravjtqu.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        d = Math.Sqrt(d);\n        long x = (long) (-b + d) / (2 * a);\n\
    \        long y = (long) (-b - d) / (2 * a);\n        return (x * x + y * y) <=\
    \ 1;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ivn51aa.cs(22,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n     \
    \   long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * bc;\n        long acb\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5e4mn89m.cs(46,17): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcb * bc;\n       \
    \ long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1f3u2zix.cs(47,28): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ side7 = Math.Sqrt(a * a + c * c + b * b);\n        long side8 = Math.Sqrt(c\
    \ * c + a * a + b * b);\n        long side9 = Math.Sqrt(c * c + b * b + a * a);\n\
    \        long side10 = Math.Sqrt(a * a + c * c + b * b);\n        long side11\
    \ = Math.Sqrt(a * a + b * b + c * c);\n        long side12 = Math.Sqrt(c * c +\
    \ a * a + b * b);\n        long side13 = Math.Sqrt(c * c + b * b + a * a);\n \
    \       long side14 = Math.Sqrt(a * a + c * c + b * b);\n        long side15 =\
    \ Math.Sqrt(a * a + b * b + c * c);\n        long side16 = Math.Sqrt(c * c + a\
    \ * a + b * b);\n        long side17 = Math.Sqrt(c * c + b * b + a * a);\n   \
    \     long side18 = Math.Sqrt(a * a + c * c + b * b);\n        long side19 = Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long side20 = Math.Sqrt(c * c + a * a + b * b);\n\
    \        long side21 = Math.Sqrt(c * c + b * b + a * a);\n        long side22\
    \ = Math.Sqrt(a * a + c * c + b * b);\n        long side23 = Math.Sqrt(a * a +\
    \ b * b + c * c);\n        long side24 = Math.Sqrt(c * c + a * a + b * b);\n \
    \       long side25 = Math.Sqrt(c * c + b * b + a * a);\n        long side26 =\
    \ Math.Sqrt(a * a + c * c + b * b);\n        long side27 = Math.Sqrt(a * a + b\
    \ * b + c * c);\n        long side28 = Math.Sqrt(c * c + a * a + b * b);\n   \
    \     long side29 = Math.Sqrt(c * c + b * b + a * a);\n        long side30\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfzg_nw5y.cs(48,20): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpolszor11.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long root = (long) Math.Sqrt(d);\n            long t1 = (-b + root) / (2 *\
    \ a);\n            long t2 = (-b - root) / (2 * a);\n            if (t1 >= 0 &&\
    \ t1 <= 1 && t2 >= 0 && t2 <= 1) {\n                return true;\n           \
    \ }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576f8fc85394481eb803c585909e45e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <576f8fc85394481eb803c585909e45e6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acab = ac * abc;\n        long abcab = ab * abc;\n        long acabc = ac *\
    \ abc;\n        long abcabc = ab * abc;\n        long acabcb = ac * abcb;\n  \
    \      long abcabcb = ab * abcb;\n        long acabcbb = ac * abcbb;\n       \
    \ long abcabcbb = ab * abcbb;\n        long acabcbbc = ac * abcbbc;\n        long\
    \ abcabcbbc = ab * abcbbc;\n        long acabcbbcb = ac * abcbbcb;\n        long\
    \ abcabcbbcb = ab * abcbbcb;\n        long acabcbbcbc = ac * abcbbcbc;\n     \
    \   long abcabcbbcbc = ab * abcbbcbc;\n        long acabcbbcbcb = ac * abcbbcbcb;\n\
    \        long abcabcbbcbcb = ab * abcbbcbcb;\n        long acabcbbcbcbc = ac *\
    \ abcbbcbcbc;\n        long abcabcbbcbcbc = ab * abcbbcbcbc;\n        long acabcbbcbcbcb\
    \ = ac * abcbbcbcbcb;\n        long abcabcbbcbcbcb = ab * abcbbcbcbcb;\n     \
    \   long acabcbbcbcbcbc = ac * abcbbcbcbcbc;\n        long abcabcbbcbcbcbc = ab\
    \ * abcbbcbcbcbc;\n        long acabcbbcbcbcbcb = ac * abcbbcbcbcbcb;\n      \
    \  long abcabcbbcbcbcbcb = ab * abcbbcbcbcbcb;\n        long acabcbbcbcbcbcbc\
    \ = ac * abcbbcbcbcbcbc;\n        long abcabcbbcbcbcbcbc = ab * abcbbcbcbcbcbcb;\n\
    \        long acabcbbcbcbcbcbcb = ac * abcbbcbcbcbcbcbc;\n        long abcabcbbcbcbcbcbcbc\
    \ = ab * abcbbcbcbcbcbcbcb;\n        long acabcbbcbcbcbcbcbcb = ac * abcbbcbcbcbcbcbcbc;\n\
    \        long abcabcbbcbcbcbcb\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaqjquxyy.cs(53,30): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbbc = abbb *\
    \ bc;\n        long abbbbc = abbbbc * bc;\n        long abbbbcbc = abbbbcb * bc;\n\
    \        long abbbbcbcd = abbbbcbcd * bc;\n        long abbbbcbcde = abbbbcbcde\
    \ * bc;\n        long abbbbcbcdef = abbbbcbcdef * bc;\n        long abbbbcbcdefg\
    \ = abbbbcbcdefg * bc;\n        long abbbbcbcdefgh = abbbbcbcdefgh * bc;\n   \
    \     long abbbbcbcdefghi = abbbbcbcdefghi * bc;\n        long abbbbcbcdefghij\
    \ = abbbbcbcdefghij * bc;\n        long abbbbcbcdefghijk = abbbbcbcdefghijk *\
    \ bc;\n        long abbbbcbcdefghijkl = abbbbcbcdefghijkl * bc;\n        long\
    \ abbbbcbcdefghijklm = abbbbcbcdefghijklm * bc;\n        long abbbbcbcdefghijklmn\
    \ = abbbbcbcdefghijkln * bc;\n        long abbbbcbcdefghijklmnx = abbbbcbcdefghijklmn\
    \ * bc;\n        long abbbbcbcdefghijklmnxy = abbbbcbcdefghijklmnx * bc;\n   \
    \     long abbbbcbcdefghijklmnxz = abbbbcbcdefghijklmnxy * bc;\n        long abbbbcbcdefghijklmnxzz\
    \ = abbbbcbcdefghijklmnxzz * bc;\n        long abbbbcbcdefghijklmnxzzz = abbbbcbcdefghijklmnxzzz\
    \ * bc;\n        long abbbbcbcdefghijklmnxzzzz = abbbbcbcdefgh\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj9ah3ynh.cs(45,54): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpff0d22x9.cs(46,28): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long abcc = abc * ac;\n        long acbc = acb * bc;\n\
    \        long accc = acb * ac;\n        long abccc = abcc * ac;\n        long\
    \ acbcc = acbcc * ac;\n        long acccb = accc * bc;\n        long abcccb =\
    \ abccc * bc;\n        long acbccc = acbcc * bc;\n        long acccab = accc *\
    \ ab;\n        long abcccba = abccc * ba;\n        long acbcccba = acbccc * ba;\n\
    \        long acccabb = acccab * bc;\n        long abcccbac = abcccba * bc;\n\
    \        long acbcccbac = acbcccba * bc;\n        long acccabbc = acccabbc * bc;\n\
    \        long abcccbacb = abcccbacb * bc;\n        long acbcccbacb = acbcccbacb\
    \ * bc;\n        long acccabbca = acccabbca * ab;\n        long abcccbacba = abcccbacba\
    \ * ba;\n        long acbcccbacba = acbcccbacba * ba;\n        long acccabbcab\
    \ = acccabbcab * ab;\n        long abcccbacbacb = abcccbacbacb * bc;\n       \
    \ long acbcccbacbacb = acbcccbacbacb * bc;\n        long acccabbcabc = acccabbcabc\
    \ * ab;\n        long abcccbacbacba = abcccbacbacba * ba;\n        long acbcccbacbacba\
    \ = acbcccbacbacba * ba;\n        long acccabbcabcb = acccabbcabcb * ab;\n   \
    \     long abcccbacbacbacb = abcccbacbacbacb * bc;\n        long acbcccbacbacbacb\
    \ = acbcccbacbacbacb * bc;\n        long acccabbcab\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj39p0wme.cs(54,24): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcb * bc;\n       \
    \ long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc * bc;\n   \
    \     long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2ijhlf_z.cs(46,46): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = Math.Sqrt(d);\n            long f = (long) (e * e / 2);\n        \
    \    long g = (long) (e * e / 2);\n            long h = (long) (e * e / 2);\n\
    \            long i = (long) (e * e / 2);\n            long j = (long) (e * e\
    \ / 2);\n            long k = (long) (e * e / 2);\n            long l = (long)\
    \ (e * e / 2);\n            long m = (long) (e * e / 2);\n            long n =\
    \ (long) (e * e / 2);\n            long o = (long) (e * e / 2);\n            long\
    \ p = (long) (e * e / 2);\n            long q = (long) (e * e / 2);\n        \
    \    long r = (long) (e * e / 2);\n            long s = (long) (e * e / 2);\n\
    \            long t = (long) (e * e / 2);\n            long u = (long) (e * e\
    \ / 2);\n            long v = (long) (e * e / 2);\n            long w = (long)\
    \ (e * e / 2);\n            long x = (long) (e * e / 2);\n            long y =\
    \ (long) (e * e / 2);\n            long z = (long) (e * e / 2);\n            long\
    \ aa = (long) (e * e / 2);\n            long ab = (long) (e * e / 2);\n      \
    \      long ac = (long) (e * e / 2);\n            long ad = (long) (e * e / 2);\n\
    \            long ae = (long) (e * e / 2);\n            long af = (long) (e *\
    \ e / 2);\n            long ag = (long) (e * e / 2);\n            long ah = (long)\
    \ (e * e / 2);\n            long ai = (long) (e * e / 2);\n            long aj\
    \ = (long) (e * e / 2);\n            long ak = (long) (e * e / 2);\n         \
    \   long al = (long) (e * e / 2);\n            long am = (long) (e * e / 2);\n\
    \            long an = (long) (e * e / 2);\n            long ao = (long) (e *\
    \ e / 2);\n            long ap = (long) (e * e / 2);\n            long aq = (long)\
    \ (e * e / 2);\n            long ar = (long) (e * e / 2);\n            long as\
    \ = (long) (e * e / 2);\n            long at = (long) (e * e / 2);\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz58e16m9.cs(61,18): error CS1001: Identifier expected

    /tmp/tmpz58e16m9.cs(61,18): error CS1002: ; expected

    /tmp/tmpz58e16m9.cs(61,18): error CS1525: Invalid expression term ''as''

    /tmp/tmpz58e16m9.cs(61,21): error CS1031: Type expected

    /tmp/tmpz58e16m9.cs(64,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpz58e16m9.cs(78,2): error CS1513: } expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d == 0) {\n         \
    \   return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        return ((f\
    \ - g) * (f - g) + (h - g) * (h - g) == 0);\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyqg9a7kf.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyqg9a7kf.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyqg9a7kf.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyqg9a7kf.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = a - e * Math.Sqrt(a - e * 0.5);\n        return ((f - g) * (h - g) == 0);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkc414uv3.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkc414uv3.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkc414uv3.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkc414uv3.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abc * abc;\n        long acbccc = acbcc * abc;\n \
    \       long abcccc = abccc * abc;\n        long acbcccb = acbcc * abc;\n    \
    \    long abccccb = abccc * abc;\n        long acbcccbc = acbccc * abc;\n    \
    \    long abccccbc = abcccc * abc;\n        long acbcccbcb = acbcccb * abc;\n\
    \        long abccccbcb = abccccb * abc;\n        long acbcccbcbb = acbcccbc *\
    \ abc;\n        long abccccbcbb = abccccbc * abc;\n        long acbcccbcbb = acbcccbc\
    \ * abc;\n        long abccccbcbb = abccccbc * abc;\n        long acbcccbcbcb\
    \ = acbcccbc * abc;\n        long abccccbcbcb = abccccbc * abc;\n        long\
    \ acbcccbcbcbb = acbcccbcb * abc;\n        long abccccbcbcbb = abccccbcb * abc;\n\
    \        long acbcccbcbcbb = acbcccbcb * abc;\n        long abccccbcbcbb = abccccbcb\
    \ * abc;\n        long acbcccbcbcbcb = acbcccbcb * abc;\n        long abccccbcbcbcb\
    \ = abccccbcb * abc;\n        long acbcccbcbcbcbb = acbcccbcb * abc;\n       \
    \ long abccccbcbcbcbb = abccccbcb * abc;\n        long acbcccbcbcbcbb = acbcccbcb\
    \ * abc;\n        long abccccbcbcbcbb = abccccbcb * abc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * abc;\n        long abccccbcbcbcbcb = abccccbcb * abc;\n      \
    \  long acb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpezi91nzx.cs(54,17): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long acbb = ac - bb;\n        long abbbc = ab - bb;\n\
    \        long acbc = ac - bc;\n        long abbcd = ab - bc;\n        long acbbd\
    \ = ac - bb;\n        long abbbcd = ab - bb;\n        long acbcd = ac - bc;\n\
    \        long abbcde = ab - bc;\n        long acbbde = ac - bb;\n        long\
    \ abbbcde = ab - bb;\n        long acbcde = ac - bc;\n        long abbcdef = ab\
    \ - bc;\n        long acbbdef = ac - bb;\n        long abbbcdef = ab - bb;\n \
    \       long acbcdef = ac - bc;\n        long abbcdefg = ab - bc;\n        long\
    \ acbbdefg = ac - bb;\n        long abbbcdefg = ab - bb;\n        long acbcdefg\
    \ = ac - bc;\n        long abbcdefgh = ab - bc;\n        long acbbdefgh = ac -\
    \ bb;\n        long abbbcdefgh = ab - bb;\n        long acbcdefgh = ac - bc;\n\
    \        long abbcdefghi = ab - bc;\n        long acbbdefghi = ac - bb;\n    \
    \    long abbbcdefghi = ab - bb;\n        long acbcdefghi = ac - bc;\n       \
    \ long abbcdefghij = ab - bc;\n        long acbbdefghij = ac - bb;\n        long\
    \ abbbcdefghij = ab - bb;\n        long acbcdefghij = ac - bc;\n        long abbcdefghijk\
    \ = ab - bc;\n        long acbbdefghijk = ac - bb;\n        long abbbcdefghijk\
    \ = ab - bb;\n        long acbcdefghijk = ac - bc;\n        long abbcdefghijkl\
    \ = ab - bc;\n        long acbbdefghijkl = ac - bb;\n        long abbbcdefghijkl\
    \ = ab - bb;\n        long acbcdefghijkl = \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi7fqidlk.cs(63,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpi7fqidlk.cs(63,29): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(a * a + c * c);\n        long\
    \ side4 = Math.Sqrt(b * b + c * c);\n        long side5 = Math.Sqrt(a * a + b\
    \ * b);\n        long side6 = Math.Sqrt(c * c + a * a);\n        long side7 =\
    \ Math.Sqrt(a * a + c * c);\n        long side8 = Math.Sqrt(b * b + c * c);\n\
    \        long side9 = Math.Sqrt(a * a + b * b);\n        long side10 = Math.Sqrt(c\
    \ * c + a * a);\n        long side11 = Math.Sqrt(a * a + c * c);\n        long\
    \ side12 = Math.Sqrt(b * b + c * c);\n        long side13 = Math.Sqrt(a * a +\
    \ b * b);\n        long side14 = Math.Sqrt(c * c + a * a);\n        long side15\
    \ = Math.Sqrt(a * a + c * c);\n        long side16 = Math.Sqrt(b * b + c * c);\n\
    \        long side17 = Math.Sqrt(a * a + b * b);\n        long side18 = Math.Sqrt(c\
    \ * c + a * a);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(c * c + a * a);\n        long side23\
    \ = Math.Sqrt(a * a + c * c);\n        long side24 = Math.Sqrt(b * b + c * c);\n\
    \        long side25 = Math.Sqrt(a * a + b * b);\n        long side26 = Math.Sqrt(c\
    \ * c + a * a);\n        long side27 = Math.Sqrt(a * a + c * c);\n        long\
    \ side28 = Math.Sqrt(b * b + c * c);\n        long side29 = Math.Sqrt(a * a +\
    \ b * b);\n        long side30 = Math.Sqrt(c * c + a * a);\n        long side31\
    \ = Math.Sqrt(a * a + c * c);\n        long side32 = Math.Sqrt(b * b + c * c);\n\
    \        long side33 = Math.Sqrt(a * a + b * b);\n        long side34 = Math.Sqrt(c\
    \ * c + a * a);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplqsq8vw_.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmplqsq8vw_.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcb = abc + bc;\n        long abcc = abc - bc;\n        long acbc = acb + bc;\n\
    \        long abcca = abcc + acb;\n        long abccaa = abcca * 2;\n        long\
    \ abccaa2 = abccaa * 2;\n        long abccaa3 = abccaa * 3;\n        long abccaa4\
    \ = abccaa * 4;\n        long abccaa5 = abccaa * 5;\n        long abccaa6 = abccaa\
    \ * 6;\n        long abccaa7 = abccaa * 7;\n        long abccaa8 = abccaa * 8;\n\
    \        long abccaa9 = abccaa * 9;\n        long abccaa10 = abccaa * 10;\n  \
    \      long abccaa11 = abccaa * 11;\n        long abccaa12 = abccaa * 12;\n  \
    \      long abccaa13 = abccaa * 13;\n        long abccaa14 = abccaa * 14;\n  \
    \      long abccaa15 = abccaa * 15;\n        long abccaa16 = abccaa * 16;\n  \
    \      long abccaa17 = abccaa * 17;\n        long abccaa18 = abccaa * 18;\n  \
    \      long abccaa19 = abccaa * 19;\n        long abccaa20 = abccaa * 20;\n  \
    \      long abccaa21 = abccaa * 21;\n        long abccaa22 = abccaa * 22;\n  \
    \      long abccaa23 = abccaa * 23;\n        long abccaa24 = abccaa * 24;\n  \
    \      long abccaa25 = abccaa * 25;\n        long abccaa26 = abccaa * 26;\n  \
    \      long abccaa27 = abccaa * 27;\n        long abccaa28 = abccaa * 28;\n  \
    \      long abccaa29 = abccaa * 29;\n        long abccaa30 = abccaa * 30;\n  \
    \      long abccaa31 = abccaa * 31;\n        long abccaa32 = abccaa * 32;\n  \
    \      long abccaa33 = abccaa * 33;\n        long abcca\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8ci0mdu3.cs(61,19): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side15 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side16 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(c,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side21 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side22 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(c, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8501dypq.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8501dypq.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqz0pb9a.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root1 = (-b + Math.Sqrt(d)) / (2 * a);\n        long root2\
    \ = (-b - Math.Sqrt(d)) / (2 * a);\n        if (root1 == root2)\n            return\
    \ true;\n        if (root1 < 0)\n            return false;\n        if (root2\
    \ < 0)\n            return false;\n        long root3 = Math.Sqrt(d);\n      \
    \  if (root3 > root1)\n            return false;\n        if (root3 > root2)\n\
    \            return false;\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp25itbvyo.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp25itbvyo.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp25itbvyo.cs(30,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbca = acbc * ca;\n        long abca = abc *\
    \ ca;\n        long abcab = abca * ca;\n        long abcabc = abcab * ca;\n  \
    \      long abcabca = abcabc * ca;\n        long abcabcab = abcabca * ca;\n  \
    \      long abcabcabc = abcabcab * ca;\n        long abcabcabca = abcabcabc *\
    \ ca;\n        long abcabcabcab = abcabcabca * ca;\n        long abcabcabcabc\
    \ = abcabcabcab * ca;\n        long abcabcabcabca = abcabcabcabc * ca;\n     \
    \   long abcabcabcabcab = abcabcabcabca * ca;\n        long abcabcabcabcabc =\
    \ abcabcabcabcab * ca;\n        long abcabcabcabcabca = abcabcabcabcabc * ca;\n\
    \        long abcabcabcabcabcab = abcabcabcabcabca * ca;\n        long abcabcabcabcabcabc\
    \ = abcabcabcabcabcab * ca;\n        long abcabcabcabcabcabca = abcabcabcabcabcabc\
    \ * ca;\n        long abcabcabcabcabcabcab = abcabcabcabcabcabca * ca;\n     \
    \   long abcabcabcabcabcabcabc = abcabcabcabcabcabcab * ca;\n        long abcabcabcabcabcabcabca\
    \ = abcabcabcabcabcabcabc * ca;\n        long abcabcabcabcabcabcabcab = abcabcabcabcabcabcabca\
    \ * ca;\n        long abcabcabcabcabcabcabcabc = abcabcabcabcabcabcabcab * ca;\n\
    \        long abcabcabcabcabcabcabcabca = abcabcabcabcabcabcabcabc * ca;\n   \
    \     long abcabcabcabcabcabcabcabcab = abcabcabcabcabcabcabcabcabca * ca;\n \
    \       long abcabcabcabcabcabcabcabcabc = abcabcabcabcabcabcabcabcab * ca;\n\
    \        long abcabcabcabcabcabcabcabcabca = abcabcab\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbod7lu_x.cs(50,53): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag3fp2bw.cs(44,13): error CS1001: Identifier expected

    /tmp/tmpag3fp2bw.cs(44,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbbc = abbb *\
    \ bc;\n        long acbbc = acbb * bc;\n        long abbbcd = abbbc * bc;\n  \
    \      long abbbcde = abbbcd * bc;\n        long abbbcdef = abbbcde * bc;\n  \
    \      long abbbcdefg = abbbcdef * bc;\n        long abbbcdefgh = abbbcdefg *\
    \ bc;\n        long abbbcdefghi = abbbcdefgh * bc;\n        long abbbcdefghij\
    \ = abbbcdefghi * bc;\n        long abbbcdefghijk = abbbcdefghij * bc;\n     \
    \   long abbbcdefghijkl = abbbcdefghijk * bc;\n        long abbbcdefghijklmn =\
    \ abbbcdefghijklm * bc;\n        long abbbcdefghijklmnn = abbbcdefghijklmn * bc;\n\
    \        long abbbcdefghijklmno = abbbcdefghijklmno * bc;\n        long abbbcdefghijklmnop\
    \ = abbbcdefghijklmnop * bc;\n        long abbbcdefghijklmnopq = abbbcdefghijklmnopq\
    \ * bc;\n        long abbbcdefghijklmnopqr = abbbcdefghijklmnopqr * bc;\n    \
    \    long abbbcdefghijklmnopqrst = abbbcdefghijklmnopqrst * bc;\n        long\
    \ abbbcdefghijklmnopqrstu = abbbcdefghijklmnopqrstu * bc;\n        long abbbcdefghijklmnopqrstvw\
    \ = abbbcdefghijklmnopqrstvw * bc;\n        long abbbcdefghijklmnopqrstvwx = abbbcdefghijklmnopqrstvwx\
    \ * bc;\n        long abbbcdef\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwybaw7jh.cs(47,22): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbcb * bc;\n  \
    \      long abbbbcbc = abbbbcb * bc;\n        long acbbbcbcb = acbbbcbc * bc;\n\
    \        long abbbbcbcb = abbbbcbc * bc;\n        long acbbbcbcbc = acbbbcbcb\
    \ * bc;\n        long abbbbcbcbc = abbbbcbcb * bc;\n        long acbbbcbcbcb =\
    \ acbbbcbcbc * bc;\n        long abbbbcbcbcb = abbbbcbcbc * bc;\n        long\
    \ acbbbcbcbcbc = acbbbcbcbcb * bc;\n        long abbbbcbcbcbc = abbbbcbcbcb *\
    \ bc;\n        long acbbbcbcbcbcb = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbcb\
    \ = abbbbcbcbcbc * bc;\n        long acbbbcbcbcbcbc = acbbbcbcbcbcb * bc;\n  \
    \      long abbbbcbcbcbcbc = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcb = abbbbcbcbcbcbc * bc;\n\
    \        long acbbbcbcbcbcbcbc = acbbbcbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbc\
    \ = abbbbcbcbcbcbcbc * bc;\n        long acbbbcbcbcbcbcbcb = acbbbcbcbcbcbcbc\
    \ * \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkjcwyfxf.cs(50,52): error CS1525: Invalid expression term ''}''

    /tmp/tmpkjcwyfxf.cs(50,52): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbcd = abbc *\
    \ bc;\n        long abbcdc = abbcdc * bc;\n        long abbcdcd = abbcdc * bc;\n\
    \        long abbcdcde = abbcdcde * bc;\n        long abbcdcdef = abbcdcdef *\
    \ bc;\n        long abbcdcdefg = abbcdcdefg * bc;\n        long abbcdcdefgh =\
    \ abbcdcdefgh * bc;\n        long abbcdcdefghi = abbcdcdefghi * bc;\n        long\
    \ abbcdcdefghij = abbcdcdefghij * bc;\n        long abbcdcdefghijk = abbcdcdefghijk\
    \ * bc;\n        long abbcdcdefghijkl = abbcdcdefghijkl * bc;\n        long abbcdcdefghijklm\
    \ = abbcdcdefghijklm * bc;\n        long abbcdcdefghijklmn = abbcdcdefghijkln\
    \ * bc;\n        long abbcdcdefghijklmnx = abbcdcdefghijklmn * bc;\n        long\
    \ abbcdcdefghijklmnxy = abbcdcdefghijklmnx * bc;\n        long abbcdcdefghijklmnxz\
    \ = abbcdcdefghijklmnxy * bc;\n        long abbcdcdefghijklmnxzz = abbcdcdefghijklmnxzz\
    \ * bc;\n        long abbcdcdefghijklmnxzzz = abbcdcdefghijklmnxzzz * bc;\n  \
    \      long abbcdcdefghijklmnxzzzz = abbcdcdefghijklmnxzzzz * bc;\n        long\
    \ abbcdcdefghijklmnxzzzzz = abbcdcdefghijklmnxzzzzz * bc;\n        long abbcdc\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaboccbma.cs(46,20): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ahc_6vm.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * (b - a);\n\
    \        long g = a + e * (a - b);\n        long h = a + e * (b - c);\n      \
    \  long i = b + e * (a - c);\n        long j = a + e * (b - c);\n        long\
    \ k = b + e * (a - c);\n        long l = a + e * (b - c);\n        long m = b\
    \ + e * (a - c);\n        long n = a + e * (b - c);\n        long o = b + e *\
    \ (a - c);\n        long p = a + e * (b - c);\n        long q = a + e * (a - c);\n\
    \        long r = b + e * (a - c);\n        long s = a + e * (b - c);\n      \
    \  long t = a + e * (a - c);\n        long u = a + e * (b - c);\n        long\
    \ v = a + e * (a - c);\n        long w = b + e * (a - c);\n        long x = a\
    \ + e * (b - c);\n        long y = a + e * (a - c);\n        long z = a + e *\
    \ (b - c);\n        long a = b + e * (a - c);\n        long b = a + e * (b - c);\n\
    \        long c = a + e * (a - c);\n        long d = a + e * (b - c);\n      \
    \  long e = a + e * (a - c);\n        long f = a + e * (b - c);\n        long\
    \ g = a + e * (a - c);\n        long h = a + e * (b - c);\n        long i = a\
    \ + e * (a - c);\n        long j = a + e * (b - c);\n        long k = a + e *\
    \ (a - c);\n        long l = a + e * (b - c);\n        long m = a + e * (a - c);\n\
    \        long n = a + e * (b - c);\n        long o = a + e * (a - c);\n      \
    \  long p = a + e * (b - c);\n        long q = a + e * (a - c);\n        long\
    \ r = a + e * (a - c);\n        long s = a + e * (b - c);\n        long t = a\
    \ + e * (a - c);\n        long u = a + e * (b - c);\n        long v = a + e *\
    \ (a - c);\n        long w = a + e * (a - c);\n        long x = a + e * (b - c);\n\
    \        long y = a + e * (a - c);\n        long z = a + e * (b - c);\n      \
    \  long a = b + e * (a - c);\n        long b = a + e * (b - c);\n        long\
    \ c = a + e * (a - c);\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzlu41n1p.cs(73,13): error CS1001: Identifier expected

    /tmp/tmpzlu41n1p.cs(73,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * abc;\n        long acbcabc =\
    \ acbcab * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc\
    \ = acbcabcb * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long\
    \ acbcabcbcbc = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n\
    \        long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp98tedjqy.cs(46,24): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b - c * c);\n        long side2\
    \ = Math.Sqrt(a * a - b * b + c * c);\n        long side3 = Math.Sqrt(a * a -\
    \ b * b - c * c);\n        long side4 = Math.Sqrt(a * a + b * b + c * c);\n  \
    \      if (side1 == side2 && side2 == side3 && side3 == side4) {\n           \
    \ return true;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8jwk2d2d.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8jwk2d2d.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8jwk2d2d.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp8jwk2d2d.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag3fp2bw.cs(44,13): error CS1001: Identifier expected

    /tmp/tmpag3fp2bw.cs(44,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * ab;\n        long acbcabc = acbcab\
    \ * bc;\n        long acbcabcb = acbcabcb * bc;\n        long acbcabcbc = acbcabcbc\
    \ * bc;\n        long acbcabcbcb = acbcabcbcb * bc;\n        long acbcabcbcbc\
    \ = acbcabcbcbc * bc;\n        long acbcabcbcbcb = acbcabcbcbcb * bc;\n      \
    \  long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n  \
    \      long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqojacdp.cs(46,13): error CS1001: Identifier expected

    /tmp/tmprqojacdp.cs(46,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long acbc = ac * bc;\n\
    \        long acabc = ac * abc;\n        long acbcab = ac * bca;\n        long\
    \ acbcabc = ac * bcab;\n        long acbcabcb = ac * bcabc;\n        long acbcabcbc\
    \ = ac * bcabcb;\n        long acbcabcbcb = ac * bcabcbc;\n        long acbcabcbcbc\
    \ = ac * bcabcbcb;\n        long acbcabcbcbcb = ac * bcabcbcbc;\n        long\
    \ acbcabcbcbcbc = ac * bcabcbcbcb;\n        long acbcabcbcbcbcb = ac * bcabcbcbcbc;\n\
    \        long acbcabcbcbcbcbc = ac * bcabcbcbcbcb;\n        long acbcabcbcbcbcbc\
    \ = ac * bcabcbcbcbcbc;\n        long acbcabcbcbcbcbcb = ac * bcabcbcbcbcbc;\n\
    \        long acbcabcbcbcbcbcbc = ac * bcabcbcbcbcbcbc;\n        long acbcabcbcbcbcbcbcb\
    \ = ac * bcabcbcbcbcbcbcb;\n        long acbcabcbcbcbcbcbcbc = ac * bcabcbcbcbcbcbcbc;\n\
    \        long acbcabcbcbcbcbcbcbcb = ac * bcabcbcbcbcbcbcbcb;\n        long acbcabcbcbcbcbcbcbcb\
    \ = ac * bcabcbcbcbcbcbcbcb;\n        long acbcabcbcbcbcbcbcbcbc = ac * bcabcbcbcbcbcbcbcbcb;\n\
    \        long acbcabcbcbcbcbcbcbcbc = ac * bcabcbcbcbcbcbcbcbcbc;\n        long\
    \ acbcabcbcbcbcbcbcbcbcbc = ac * bcabcbcbcbcbcbcbcbcbcbc;\n        long acbcabcbcbcbcbcbcbcbcbcb\
    \ = ac * bcabcbcbcbcbcbcbcbcbcbcb;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9k623zzv.cs(28,28): error CS0103: The name ''bca'' does not exist in the
    current context

    /tmp/tmp9k623zzv.cs(29,29): error CS0103: The name ''bcab'' does not exist in
    the current context

    /tmp/tmp9k623zzv.cs(30,30): error CS0103: The name ''bcabc'' does not exist in
    the current context

    /tmp/tmp9k623zzv.cs(31,31): error CS0103: The name ''bcabcb'' does not exist in
    the current context

    /tmp/tmp9k623zzv.cs(32,32): error CS0103: The name ''bcabcbc'' does not exist
    in the current context

    /tmp/tmp9k623zzv.cs(33,33): error CS0103: The name ''bcabcbcb'' does not exist
    in the current context

    /tmp/tmp9k623zzv.cs(34,34): error CS0103: The name ''bcabcbcbc'' does not exist
    in the current context

    /tmp/tmp9k623zzv.cs(35,35): error CS0103: The name ''bcabcbcbcb'' does not exist
    in the current context

    /tmp/tmp9k623zzv.cs(36,36): error CS0103: The name ''bcabcbcbcbc'' does not exist
    in the current context

    /tmp/tmp9k623zzv.cs(37,37): error CS0103: The name ''bcabcbcbcbcb'' does not exist
    in the current context

    /tmp/tmp9k623zzv.cs(38,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbc''
    is already defined in this scope

    /tmp/tmp9k623zzv.cs(38,37): error CS0103: The name ''bcabcbcbcbcbc'' does not
    exist in the current context

    /tmp/tmp9k623zzv.cs(39,38): error CS0103: The name ''bcabcbcbcbcbc'' does not
    exist in the current context

    /tmp/tmp9k623zzv.cs(40,39): error CS0103: The name ''bcabcbcbcbcbcbc'' does not
    exist in the current context

    /tmp/tmp9k623zzv.cs(41,40): error CS0103: The name ''bcabcbcbcbcbcbcb'' does not
    exist in the current context

    /tmp/tmp9k623zzv.cs(42,41): error CS0103: The name ''bcabcbcbcbcbcbcbc'' does
    not exist in the current context

    /tmp/tmp9k623zzv.cs(43,42): error CS0103: The name ''bcabcbcbcbcbcbcbcb'' does
    not exist in the current context

    /tmp/tmp9k623zzv.cs(44,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmp9k623zzv.cs(4'
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abcc * bc;\n        long acbccc = acbcc * bc;\n  \
    \      long abcccb = abccc * bc;\n        long acbcccb = acbccc * bc;\n      \
    \  long abcccbc = abcccb * bc;\n        long acbcccbc = acbcccb * bc;\n      \
    \  long abcccbcb = abcccbc * bc;\n        long acbcccbcb = acbcccbc * bc;\n  \
    \      long abcccbcc = abcccbc * bc;\n        long acbcccbcc = acbcccbc * bc;\n\
    \        long abcccbccb = abcccbcc * bc;\n        long acbcccbccb = acbcccbcc\
    \ * bc;\n        long abcccbcccb = abcccbcc * bc;\n        long acbcccbcccb =\
    \ acbcccbcc * bc;\n        long abcccbcccbc = abcccbccc * bc;\n        long acbcccbcccbc\
    \ = acbcccbccc * bc;\n        long abcccbcccbcb = abcccbcccb * bc;\n        long\
    \ acbcccbcccbcb = acbcccbcccb * bc;\n        long abcccbcccbcc = abcccbcccb *\
    \ bc;\n        long acbcccbcccbcc = acbcccbcccb * bc;\n        long abcccbcccbccb\
    \ = abcccbcccbc * bc;\n        long acbcccbcccbccb = acbcccbcccbc * bc;\n    \
    \    long abcccbcccbcccb = abcccbcccbc * bc;\n        long acbcccbcccbcccb = acbcccbcccbc\
    \ * bc;\n        long abcccbcccbcccbc = abcccbcccbc * bc;\n        long acbcccbcccbcccb\
    \ = acbcccbcc\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8bw98o7p.cs(52,41): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnqz0pb9a.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long g = a + e * Math.Sqrt(b * b - 4 * a * c);\n\
    \        return ((f - g) > 0);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9cumvbzl.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9cumvbzl.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp9cumvbzl.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 >= 0 && t1 <= 1) {\n            return true;\n        }\n    \
    \    if (t2 >= 0 && t2 <= 1) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3f5f49d54b64081bc044f1d21d45984>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3f5f49d54b64081bc044f1d21d45984>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e * 0.5);\n        long\
    \ h = (b + e) / (2 * a);\n        long i = (c + e) / (2 * a);\n        long j\
    \ = (b + e) / (2 * c);\n        long k = (c + e) / (2 * c);\n        long l =\
    \ (b + e) / (2 * b);\n        long m = (c + e) / (2 * b);\n        long n = (b\
    \ + e) / (2 * d);\n        long o = (c + e) / (2 * d);\n        long p = (b +\
    \ e) / (2 * e);\n        long q = (c + e) / (2 * e);\n        long r = (b + e)\
    \ / (2 * f);\n        long s = (c + e) / (2 * f);\n        long t = (b + e) /\
    \ (2 * g);\n        long u = (c + e) / (2 * g);\n        long v = (b + e) / (2\
    \ * h);\n        long w = (c + e) / (2 * h);\n        long x = (b + e) / (2 *\
    \ i);\n        long y = (c + e) / (2 * i);\n        long z = (b + e) / (2 * j);\n\
    \        long A = (c + e) / (2 * j);\n        long B = (b + e) / (2 * k);\n  \
    \      long C = (c + e) / (2 * k);\n        long D = (b + e) / (2 * l);\n    \
    \    long E = (c + e) / (2 * l);\n        long F = (b + e) / (2 * m);\n      \
    \  long G = (c + e) / (2 * m);\n        long H = (b + e) / (2 * n);\n        long\
    \ I = (c + e) / (2 * n);\n        long J = (b + e) / (2 * o);\n        long K\
    \ = (c + e) / (2 * o);\n        long L = (b + e) / (2 * p);\n        long M =\
    \ (c + e) / (2 * p);\n        long N = (b + e) / (2 * q);\n        long O = (c\
    \ + e) / (2 * q);\n        long P = (b + e) / (2 * r);\n        long Q = (c +\
    \ e) / (2 * r);\n        long R = (b + e) / (2 * s);\n        long S = (c + e)\
    \ / (2 * s);\n        long T = (b + e) / (2 * t);\n        long U = (c + e) /\
    \ (2 * t);\n        long V = (b + e) / (2 * u);\n        long W = (c + e) / (2\
    \ * \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl9rxzoud.cs(66,32): error CS1525: Invalid expression term ''}''

    /tmp/tmpl9rxzoud.cs(66,32): error CS1026: ) expected

    /tmp/tmpl9rxzoud.cs(66,32): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * ac;\n        long acb = ac * bc;\n        long\
    \ bca = b * ca;\n        long abcb = abc * bc;\n        long acbc = acb * ca;\n\
    \        long abcca = abc * ca;\n        long acbca = acb * ca;\n        long\
    \ abccaab = abcca * ab;\n        long acbcabc = acbca * bc;\n        long acbcabca\
    \ = acbca * ca;\n        long acbcabcab = acbcab * ca;\n        long acbcabcabc\
    \ = acbcabc * ca;\n        long acbcabcabca = acbcabca * ca;\n        long acbcabcabcab\
    \ = acbcabcab * ca;\n        long acbcabcabcabc = acbcabcabc * ca;\n        long\
    \ acbcabcabcabca = acbcabcabca * ca;\n        long acbcabcabcabcab = acbcabcabcab\
    \ * ca;\n        long acbcabcabcabcabc = acbcabcabcabc * ca;\n        long acbcabcabcabcabca\
    \ = acbcabcabcabca * ca;\n        long acbcabcabcabcabcab = acbcabcabcabcab *\
    \ ca;\n        long acbcabcabcabcabcabc = acbcabcabcabcabc * ca;\n        long\
    \ acbcabcabcabcabcabca = acbcabcabcabcabca * ca;\n        long acbcabcabcabcabcabcab\
    \ = acbcabcabcabcabcab * ca;\n        long acbcabcabcabcabcabcabc = acbcabcabcabcabcabc\
    \ * ca;\n        long acbcabcabcabcabcabcabca = acbcabcabcabcabcabcabca * ca;\n\
    \        long acbcabcabcabcabcabcabcab = acbcabcabcabcabcabcabcab * ca;\n    \
    \    long acbcabcabcabcabcabcabcabc = acbcabcabcabcabcabcabcabc * ca;\n      \
    \  long acbcabcabcabcabcabcabcabca = acbcabcabcabcabcabcabcabcabca * ca;\n   \
    \     long acbcabcabcabcabcabcabcabcab = acbcabcab\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfw2xt6do.cs(50,53): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b - c * c);\n        long side2\
    \ = Math.Sqrt(a * a + c * c - b * b + c * c);\n        long side3 = Math.Sqrt(a\
    \ * a - b * b + c * c + b * b);\n        if (side1 == side2 && side2 == side3)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptn7flz9c.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptn7flz9c.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmptn7flz9c.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        if (t1\
    \ < 0 && t2 < 0) {\n            return false;\n        }\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0807b8ba36d42e9825501936c5e461a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b0807b8ba36d42e9825501936c5e461a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * b; // acb = ac * bc\n        long ac2b = ac\
    \ * bc; // ac2b = ac * b^2\n        long ac2c = ac * c; // ac2c = ac * c^2\n \
    \       long abc = ab * c; // abc = ab * c\n        long ab2c = ab * c; // ab2c\
    \ = ab * c^2\n        long ab2b = ab * bc; // ab2b = ab * bc^2\n        long ab2ab\
    \ = ab * ab; // ab2ab = ab * ab^2\n        long ab2cb = ab * bc; // ab2cb = ab\
    \ * bc^2\n        long ab2cac = ab * ac; // ab2cac = ab * ac^2\n        long ab2cacb\
    \ = ab * acb; // ab2cacb = ab * acb^2\n        long ab2cac2b = ab * ac2b; // ab2cac2b\
    \ = ab * ac2b^2\n        long ab2cac2cb = ab * ac2c; // ab2cac2cb = ab * ac2c^2\n\
    \        long ab2cac2b2c = ab * ac2b2c; // ab2cac2b2c = ab * ac2b2c^2\n      \
    \  long ab2cac2cac = ab * ac2cac; // ab2cac2cac = ab * ac2cac^2\n        long\
    \ ab2cac2cacb = ab * ac2cacb; // ab2cac2cacb = ab * ac2cacb^2\n        long ab2cac2cac2b\
    \ = ab * ac2cac2b; // ab2cac2cac2b = ab * ac2cac2b^2\n        long ab2cac2cac2cb\
    \ = ab * ac2cac2c; // ab2cac2cac2cb = ab * ac2cac2c^2\n        long ab2cac2cac2b2c\
    \ = ab * ac2cac2b2c; // ab2cac2cac2b2c = ab * ac2cac2b2c^2\n        long ab2cac2cac2cac\
    \ = ab * ac2cac2cac; // ab2cac2cac2cac = ab * ac2cac2cac^2\n        long ab2cac2cac2cacb\
    \ = ab * ac2cac2cacb; // ab2cac2cac2cacb = ab * ac2cac2cacb^2\n        long ab2cac2cac2cac2b\
    \ = ab * ac2cac2cac2b; // ab2c\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplxjs4uou.cs(34,32): error CS0103: The name ''ac2b2c'' does not exist in
    the current context

    /tmp/tmplxjs4uou.cs(35,32): error CS0103: The name ''ac2cac'' does not exist in
    the current context

    /tmp/tmplxjs4uou.cs(36,33): error CS0103: The name ''ac2cacb'' does not exist
    in the current context

    /tmp/tmplxjs4uou.cs(37,34): error CS0103: The name ''ac2cac2b'' does not exist
    in the current context

    /tmp/tmplxjs4uou.cs(38,35): error CS0103: The name ''ac2cac2c'' does not exist
    in the current context

    /tmp/tmplxjs4uou.cs(39,36): error CS0103: The name ''ac2cac2b2c'' does not exist
    in the current context

    /tmp/tmplxjs4uou.cs(40,36): error CS0103: The name ''ac2cac2cac'' does not exist
    in the current context

    /tmp/tmplxjs4uou.cs(41,37): error CS0103: The name ''ac2cac2cacb'' does not exist
    in the current context

    /tmp/tmplxjs4uou.cs(42,38): error CS0103: The name ''ac2cac2cac2b'' does not exist
    in the current context

    /tmp/tmplxjs4uou.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long root = (long) Math.Sqrt(d);\n            long t1 = (long) (-b + root)\
    \ / a;\n            long t2 = (long) (-b - root) / a;\n            if (t1 >= 0\
    \ && t1 <= b && t2 >= 0 && t2 <= b) {\n                return true;\n        \
    \    }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5358c93a8a51433c8b94bd95bfd8eef8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5358c93a8a51433c8b94bd95bfd8eef8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcb * bc;\n       \
    \ long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1f3u2zix.cs(47,28): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ a * a + b * b - 4 * a * c;\n        long g = Math.Sqrt(f);\n        long h =\
    \ (b * b + c * c - a * a) / (2 * e);\n        long i = Math.Sqrt(h);\n       \
    \ long j = (b * b + c * c - a * a) / (2 * g);\n        long k = Math.Sqrt(j);\n\
    \        long l = Math.Sqrt(k);\n        long m = Math.Sqrt(l);\n        long\
    \ n = Math.Sqrt(m);\n        long o = Math.Sqrt(n);\n        long p = a * a +\
    \ b * b + c * c - a * a;\n        long q = Math.Sqrt(p);\n        long r = Math.Sqrt(q);\n\
    \        long s = Math.Sqrt(r);\n        long t = Math.Sqrt(s);\n        long\
    \ u = t * t;\n        long v = t * u;\n        long w = t * v;\n        long x\
    \ = t * w;\n        long y = Math.Sqrt(x);\n        long z = Math.Sqrt(y);\n \
    \       long a = Math.Sqrt(z);\n        long b = Math.Sqrt(a);\n        long c\
    \ = Math.Sqrt(b);\n        long d = Math.Sqrt(c);\n        long e = Math.Sqrt(d);\n\
    \        long f = Math.Sqrt(e);\n        long g = Math.Sqrt(f);\n        long\
    \ h = Math.Sqrt(g);\n        long i = Math.Sqrt(h);\n        long j = Math.Sqrt(i);\n\
    \        long k = Math.Sqrt(j);\n        long l = Math.Sqrt(k);\n        long\
    \ m = Math.Sqrt(l);\n        long n = Math.Sqrt(m);\n        long o = Math.Sqrt(n);\n\
    \        long p = Math.Sqrt(o);\n        long q = Math.Sqrt(p);\n        long\
    \ r = Math.Sqrt(q);\n        long s = Math.Sqrt(r);\n        long t = Math.Sqrt(s);\n\
    \        long u = t * t;\n        long v = t * u;\n        long w = t * v;\n \
    \       long x = t * w;\n        long y = Math.Sqrt(x);\n        long z = Math.Sqrt(y);\n\
    \        long a = Math.Sqrt(z);\n        long b = Math.Sqrt(a);\n        long\
    \ c = Math.Sqrt(b);\n        long d = Math.Sqrt(c);\n        long e = \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcddc6yl7.cs(75,17): error CS1525: Invalid expression term ''}''

    /tmp/tmpcddc6yl7.cs(75,17): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ Math.Sqrt(a * a - b * b + c * c);\n        long g = Math.Sqrt(a * a + b * b\
    \ - c * c);\n        long h;\n        if (e < f) {\n            h = f / e;\n \
    \       } else {\n            h = e / f;\n        }\n        long i = g / h;\n\
    \        long j = (g - i * h) / h;\n        long k = a * i - b * j;\n        long\
    \ l = a * j + b * i;\n        long m = a * k + b * j;\n        long n = a * l\
    \ + b * k;\n        long o = a * m + b * n;\n        long p = a * n + b * o;\n\
    \        long q = a * o + b * p;\n        long r = a * p + b * q;\n        long\
    \ s = a * q + b * r;\n        long t = a * r + b * s;\n        long u = a * s\
    \ + b * t;\n        long v = a * t + b * u;\n        long w = a * u + b * v;\n\
    \        long x = a * v + b * w;\n        long y = a * w + b * x;\n        long\
    \ z = a * x + b * y;\n        long a = Math.Sqrt(a * a + b * b + c * c);\n   \
    \     long b = Math.Sqrt(a * b + b * c + c * c);\n        long c = Math.Sqrt(a\
    \ * c + b * c + c * c);\n        long d = Math.Sqrt(a * d + b * b + c * c);\n\
    \        long e = Math.Sqrt(a * e + b * b + c * c);\n        long f = Math.Sqrt(a\
    \ * f + b * b + c * c);\n        long g = Math.Sqrt(a * g + b * b + c * c);\n\
    \        long h = Math.Sqrt(a * h + b * b + c * c);\n        long i = Math.Sqrt(a\
    \ * i + b * b + c * c);\n        long j = Math.Sqrt(a * j + b * b + c * c);\n\
    \        long k = Math.Sqrt(a * k + b * b + c * c);\n        long l = Math.Sqrt(a\
    \ * l + b * b + c * c);\n        long m = Math.Sqrt(a * m + b * b + c * c);\n\
    \        long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpofmy9cp0.cs(63,13): error CS1001: Identifier expected

    /tmp/tmpofmy9cp0.cs(63,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7tdxxlg.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abcc = acb + abc;\n        long acbc = acb + bc;\n        long abcac = abcc\
    \ + acb;\n        long abcacb = abcac + acbc;\n        long abcacbc = abcacb +\
    \ abcac;\n        long abcacbcc = abcacbc + abcac;\n        long abcacbccc = abcacbcc\
    \ * abcac;\n        long abcacbcccb = abcacbcc * abcacb;\n        long abcacbcccbc\
    \ = abcacbcccb * abcac;\n        long abcacbcccbcb = abcacbcccb * abcacb;\n  \
    \      long abcacbcccbcbb = abcacbcccb * abcacb; \n        long abcacbcccbcbbc\
    \ = abcacbcccb * abcacbc;\n        long abcacbcccbcbbcb = abcacbcccb * abcacbcb;\n\
    \        long abcacbcccbcbbcbc = abcacbcccb * abcacbcbc;\n        long abcacbcccbcbbcbcb\
    \ = abcacbcccb * abcacbcbcb;\n        long abcacbcccbcbbcbcbc = abcacbcccb * abcacbcbcbc;\n\
    \        long abcacbcccbcbbcbcbcb = abcacbcccb * abcacbcbcbcb;\n        long abcacbcccbcbbcbcbcbc\
    \ = abcacbcccb * abcacbcbcbcbc;\n        long abcacbcccbcbbcbcbcbcb = abcacbcccb\
    \ * abcacbcbcbcbcb;\n        long abcacbcccbcbbcbcbcbcbc = abcacbcccb * abcacbcbcbcbcbc;\n\
    \        long abcacbcccbcbbcbcbcbcbcb = abcacbcccb * abcacbcbcbcbcbcb;\n     \
    \   long abcacbcccbcbbcbcbcbcbcbc = abcacbcccb * abcacbcbcbcbcbcbc;\n        long\
    \ abcacbcccbcbbcbcbcbcbcbcb = abcac\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd1ngdu7s.cs(46,47): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = abc * abc;\n        long acbc = acb * acb;\n        long acbcc = acbc\
    \ * acbc;\n        long abccc = abcc + acbcc + acbcc;\n        long abcccb = abccc\
    \ * abccc;\n        long abcccbc = abcccb * abcccb;\n        long abcccbcb = abcccbc\
    \ * abcccbc;\n        long abcccbcbc = abcccbcb * abcccbcb;\n        long abcccbcbcb\
    \ = abcccbcbc * abcccbcbc;\n        long abcccbcbcbc = abcccbcbcb * abcccbcbcb;\n\
    \        long abcccbcbcbcb = abcccbcbcbc * abcccbcbcbc;\n        long abcccbcbcbcbc\
    \ = abcccbcbcbc * abcccbcbcbcb;\n        long abcccbcbcbcbcb = abcccbcbcbcbc *\
    \ abcccbcbcbcbc;\n        long abcccbcbcbcbcbc = abcccbcbcbcbc * abcccbcbcbcbcb;\n\
    \        long abcccbcbcbcbcbcb = abcccbcbcbcbcbc * abcccbcbcbcbcbc;\n        long\
    \ abcccbcbcbcbcbcbc = abcccbcbcbcbcbc * abcccbcbcbcbcbcb;\n        long abcccbcbcbcbcbcbcb\
    \ = abcccbcbcbcbcbcbc * abcccbcbcbcbcbcbc;\n        long abcccbcbcbcbcbcbcbc =\
    \ abcccbcbcbcbcbcbc * abcccbcbcbcbcbcbcb;\n        long abcccbcbcbcbcbcbcbcb =\
    \ abcccbcbcbcbcbcbcbc * abcccbcbcbcbcbcbcbc;\n        long abcccbcbcbcbcbcbcbcbc\
    \ = abcccbcbcbcbcbcbcbc * abcccbcbcbcbcbcbcbc;\n        long abcccbcbcbcbcbcbcbcbcb\
    \ = abcccbcbcbcbcbcbcbcbc\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp43ycav_q.cs(44,60): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = Math.Sqrt(d);\n            long f = (b + e) / (2 * a);\n         \
    \   long g = (c + e) / (2 * a);\n            if (f > g) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph0i6o4kl.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbca = acb *\
    \ ca;\n        long acbcab = acb * cab;\n        long acbcabc = acb * cabc;\n\
    \        long acbcabcb = acb * cabcb;\n        long acbcabcbc = acb * cabcbc;\n\
    \        long acbcabcbcb = acb * cabcbcb;\n        long acbcabcbcbc = acb * cabcbcbc;\n\
    \        long acbcabcbcbcb = acb * cabcbcbcb;\n        long acbcabcbcbcbc = acb\
    \ * cabcbcbcbc;\n        long acbcabcbcbcbcb = acb * cabcbcbcbcb;\n        long\
    \ acbcabcbcbcbcbc = acb * cabcbcbcbcbc;\n        long acbcabcbcbcbcbc = acb *\
    \ cabcbcbcbcbcb;\n        long acbcabcbcbcbcbcbc = acb * cabcbcbcbcbcbc;\n   \
    \     long acbcabcbcbcbcbcbc = acb * cabcbcbcbcbcbcbc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acb * cabcbcbcbcbcbcbcb;\n        long acbcabcbcbcbcbcbcbcbc = acb * cabcbcbcbcbcbcbcbcb;\n\
    \        long acbcabcbcbcbcbcbcbcbc = acb * cabcbcbcbcbcbcbcbcb;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acb * cabcbcbcbcbcbcbcbcbc;\n        long acbcabcbcbcbcbcbcbcbcbc\
    \ = acb * cabcbcbcbcbcbcbcbcbcbc;\n        long acbcabcbcbcbcbcbcbcbcbc = acb\
    \ * cabcbcbcbcbcbcbcbcbcbcb;\n        long acbcabcbcbcbcbcbcbcbcbcbc = acb * cabcbcbcbcbcbcbcbcbcbcbc;\n\
    \        long acbcabcbcbcbcbcbcbcbcbcbc = acb * \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2nnu042m.cs(47,47): error CS1525: Invalid expression term ''}''

    /tmp/tmp2nnu042m.cs(47,47): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = (b + c) / 2;\n            long f = (a * a + b * b - 4 * a * c) / 2;\n\
    \            long g = Math.Sqrt(Math.Pow(e, 2) + Math.Pow(f, 2));\n          \
    \  long h = (a + b + c) / 2;\n            long i = Math.Sqrt(Math.Pow(e, 2) +\
    \ Math.Pow(h, 2));\n            long j = (a + b) / 2;\n            long k = Math.Sqrt(Math.Pow(e,\
    \ 2) + Math.Pow(j, 2));\n            long l = (a + b) / 2;\n            long m\
    \ = Math.Sqrt(Math.Pow(e, 2) + Math.Pow(l, 2));\n            long n = Math.Sqrt(Math.Pow(e,\
    \ 2) + Math.Pow(m, 2));\n            long o = (a + b) / 2;\n            long p\
    \ = Math.Sqrt(Math.Pow(e, 2) + Math.Pow(n, 2));\n            long q = (a + b)\
    \ / 2;\n            long r = Math.Sqrt(Math.Pow(e, 2) + Math.Pow(o, 2));\n   \
    \         long s = (a + b) / 2;\n            long t = Math.Sqrt(Math.Pow(e, 2)\
    \ + Math.Pow(p, 2));\n            long u = Math.Sqrt(Math.Pow(e, 2) + Math.Pow(q,\
    \ 2));\n            long v = (a + b) / 2;\n            long w = Math.Sqrt(Math.Pow(e,\
    \ 2) + Math.Pow(r, 2));\n            long x = (a + b) / 2;\n            long y\
    \ = Math.Sqrt(Math.Pow(e, 2) + Math.Pow(s, 2));\n            long z = (a + b)\
    \ / 2;\n            long A = (Math.Pow(e, 2) + Math.Pow(v, 2)) / 2;\n        \
    \    long B = (Math.Pow(e, 2) + Math.Pow(w, 2)) / 2;\n            long C = (Math.Pow(e,\
    \ 2) + Math.Pow(x, 2)) / 2;\n            long D = (Math.Pow(e, 2) + Math.Pow(y,\
    \ 2)) / 2;\n            long E = (Math.Pow(e, 2) + Math.Pow(z, 2)) / 2;\n    \
    \        long F = (Math.Pow(e, 2) + Math.Pow(A, 2)) / 2;\n            long G =\
    \ (Math.Pow(e, 2) + Math.Pow(B, 2)) / 2;\n            long H = (Math.Pow(e, 2)\
    \ + Math.Pow(C, 2)) / 2;\n            long I = (Math.Pow(e, 2) + Math.Pow(D, 2))\
    \ / 2;\n            long J = (Math.Pow(e, 2) + Math.Pow(E, 2)) / 2;\n        \
    \    long K = (Math.Pow(e, 2) + Math.Pow(F, 2)) / 2;\n            long L = (Math.Pow(e,\
    \ 2) + Math.Pow(G, \n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpps4ht497.cs(54,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpps4ht497.cs(54,51): error CS1026: ) expected

    /tmp/tmpps4ht497.cs(54,51): error CS1002: ; expected

    /tmp/tmpps4ht497.cs(56,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpps4ht497.cs(70,2): error CS1513: } expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = d; //Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / a;\n        long t2 = (-b - root) / a;\n        if (t1 == t2)\n          \
    \  return true;\n        if (t1 > t2)\n            return false;\n        long\
    \ t3 = t1 * t1;\n        long t4 = t2 * t2;\n        if (t3 > t4)\n          \
    \  return false;\n        long t5 = t3 * t3;\n        long t6 = t4 * t4;\n   \
    \     if (t5 > t6)\n            return false;\n        long t7 = t5 * t5;\n  \
    \      long t8 = t6 * t6;\n        if (t7 > t8)\n            return false;\n \
    \       long t9 = t7 * t7;\n        long t10 = t8 * t8;\n        if (t9 > t10)\n\
    \            return false;\n        return true;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5483d4b560eb4ab18f042ad69b1a7ec7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5483d4b560eb4ab18f042ad69b1a7ec7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) (-b + e);\n\
    \        long g = (long) (-b - e);\n        long h = (long) (-b + e);\n      \
    \  long i = (long) (-b - e);\n        long j = (long) (-b + e);\n        long\
    \ k = (long) (-b - e);\n        long l = (long) (-b + e);\n        long m = (long)\
    \ (-b - e);\n        long n = (long) (-b + e);\n        long o = (long) (-b -\
    \ e);\n        long p = (long) (-b + e);\n        long q = (long) (-b - e);\n\
    \        long r = (long) (-b + e);\n        long s = (long) (-b - e);\n      \
    \  long t = (long) (-b + e);\n        long u = (long) (-b - e);\n        long\
    \ v = (long) (-b + e);\n        long w = (long) (-b - e);\n        long x = (long)\
    \ (-b + e);\n        long y = (long) (-b - e);\n        long z = (long) (-b +\
    \ e);\n        long aa = (long) (-b - e);\n        long ab = (long) (-b + e);\n\
    \        long ac = (long) (-b - e);\n        long ad = (long) (-b + e);\n    \
    \    long ae = (long) (-b - e);\n        long af = (long) (-b + e);\n        long\
    \ ag = (long) (-b - e);\n        long ah = (long) (-b + e);\n        long ai =\
    \ (long) (-b - e);\n        long aj = (long) (-b + e);\n        long ak = (long)\
    \ (-b - e);\n        long al = (long) (-b + e);\n        long am = (long) (-b\
    \ - e);\n        long an = (long) (-b + e);\n        long ao = (long) (-b - e);\n\
    \        long ap = (long) (-b + e);\n        long aq = (long) (-b - e);\n    \
    \    long ar = (long) (-b + e);\n        long as = (long) (-b - e);\n        long\
    \ at = (long) (-b + e);\n        long au = (long) (-b - e);\n        long av =\
    \ (long) (-b + e);\n        long aw = (long) (-b - e);\n        long ax\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmps4394v0w.cs(62,14): error CS1001: Identifier expected

    /tmp/tmps4394v0w.cs(62,14): error CS1002: ; expected

    /tmp/tmps4394v0w.cs(62,14): error CS1525: Invalid expression term ''as''

    /tmp/tmps4394v0w.cs(62,17): error CS1031: Type expected

    /tmp/tmps4394v0w.cs(67,16): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbbc = abbb *\
    \ bc;\n        long abbcc = abbcc * bc;\n        long abbbcc = abbbcc * bc;\n\
    \        long abbbbc = abbbbc * bc;\n        long abbbbcc = abbbbcc * bc;\n  \
    \      long abbbbcbc = abbbbcb * bc;\n        long abbbbcbcc = abbbbcbc * bc;\n\
    \        long abbbbcbcbb = abbbbcbcb * bc;\n        long abbbbcbcbbc = abbbbcbcbb\
    \ * bc;\n        long abbbbcbcbbcc = abbbbcbcbbc * bc;\n        long abbbbcbcbbbc\
    \ = abbbbcbcbbbc * bc;\n        long abbbbcbcbbbcc = abbbbcbcbbbcc * bc;\n   \
    \     long abbbbcbcbbbcbc = abbbbcbcbbbcbc * bc;\n        long abbbbcbcbbbcbcc\
    \ = abbbbcbcbbbcbcc * bc;\n        long abbbbcbcbbbcbcbc = abbbbcbcbbbcbcbc *\
    \ bc;\n        long abbbbcbcbbbcbcbcc = abbbbcbcbbbcbcbcc * bc;\n        long\
    \ abbbbcbcbbbcbcbcb = abbbbcbcbbbcbcbcb * bc;\n        long abbbbcbcbbbcbcbcc\
    \ = abbbbcbcbbbcbcbcc * bc;\n        long abbbbcbcbbbcbcbcbc = abbbbcbcbbbcbcbcbc\
    \ * bc;\n        long abbbbcbcbbbcbcbcbcc = abbbbcbcbbbcbcbcbcc * bc;\n      \
    \  long abbbbcbcbbbcbcbcbcbc = abbbbcbcbbbcbcbcbcbc * bc;\n        long abbbbcbcbb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqlbbc72m.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 >= 0\
    \ && t1 <= 1 && t2 >= 0 && t2 <= 1;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <127122104f2e4450b7c9bd6ec799013e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <127122104f2e4450b7c9bd6ec799013e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ (long) Math.Sqrt(a + b + c);\n        long g = Math.Sqrt(a + b - c);\n     \
    \   long h = (long) Math.Sqrt(a + b + c - e);\n        long i = (long) Math.Sqrt(a\
    \ + b - e + f);\n        long j = (long) Math.Sqrt(a + b + e - f);\n        long\
    \ k = (long) Math.Sqrt(a + b - e + g);\n        long l = (long) Math.Sqrt(a +\
    \ b + e - g);\n        long m = (long) Math.Sqrt(a + b - e + h);\n        long\
    \ n = (long) Math.Sqrt(a + b + e - h);\n        long o = (long) Math.Sqrt(a +\
    \ b - e + i);\n        long p = (long) Math.Sqrt(a + b + e - i);\n        long\
    \ q = (long) Math.Sqrt(a + b - e + j);\n        long r = (long) Math.Sqrt(a +\
    \ b + e - j);\n        long s = (long) Math.Sqrt(a + b - e + k);\n        long\
    \ t = (long) Math.Sqrt(a + b + e - k);\n        long u = (long) Math.Sqrt(a +\
    \ b - e + l);\n        long v = (long) Math.Sqrt(a + b + e - l);\n        long\
    \ w = (long) Math.Sqrt(a + b - e + m);\n        long x = (long) Math.Sqrt(a +\
    \ b + e - m);\n        long y = (long) Math.Sqrt(a + b - e + n);\n        long\
    \ z = (long) Math.Sqrt(a + b + e - n);\n        long A = (long) Math.Sqrt(a +\
    \ b - e + o);\n        long B = (long) Math.Sqrt(a + b + e - o);\n        long\
    \ C = (long) Math.Sqrt(a + b - e + p);\n        long D = (long) Math.Sqrt(a +\
    \ b + e - p);\n        long E = (long) Math.Sqrt(a + b - e + q);\n        long\
    \ F = (long) Math.Sqrt(a + b + e - q);\n        long G = (long) Math.Sqrt(a +\
    \ b - e + r);\n        long H = (\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpos6_7sn0.cs(52,19): error CS1525: Invalid expression term ''}''

    /tmp/tmpos6_7sn0.cs(52,19): error CS1026: ) expected

    /tmp/tmpos6_7sn0.cs(52,19): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = acb + abc;\n        long acbc = acb - abc;\n        long acbcc = acbc\
    \ + acb;\n        long acbccc = acbcc * 2;\n        long acbccc2 = acbccc * 2;\n\
    \        long acbccc3 = acbccc * 3;\n        long acbccc4 = acbccc * 4;\n    \
    \    long acbccc5 = acbccc * 5;\n        long acbccc6 = acbccc * 6;\n        long\
    \ acbccc7 = acbccc * 7;\n        long acbccc8 = acbccc * 8;\n        long acbccc9\
    \ = acbccc * 9;\n        long acbccc10 = acbccc * 10;\n        long acbccc11 =\
    \ acbccc * 11;\n        long acbccc12 = acbccc * 12;\n        long acbccc13 =\
    \ acbccc * 13;\n        long acbccc14 = acbccc * 14;\n        long acbccc15 =\
    \ acbccc * 15;\n        long acbccc16 = acbccc * 16;\n        long acbccc17 =\
    \ acbccc * 17;\n        long acbccc18 = acbccc * 18;\n        long acbccc19 =\
    \ acbccc * 19;\n        long acbccc20 = acbccc * 20;\n        long acbccc21 =\
    \ acbccc * 21;\n        long acbccc22 = acbccc * 22;\n        long acbccc23 =\
    \ acbccc * 23;\n        long acbccc24 = acbccc * 24;\n        long acbccc25 =\
    \ acbccc * 25;\n        long acbccc26 = acbccc * 26;\n        long acbccc27 =\
    \ acbccc * 27;\n        long acbccc28 = acbccc * 28;\n        long acbccc29 =\
    \ acbccc * 29;\n        long acbccc30\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzogrrnvd.cs(56,22): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbcd = abbc *\
    \ bc;\n        long abbcdc = abbcdc * bc;\n        long abbcdcd = abbcdc * bc;\n\
    \        long abbcdcde = abbcdcde * bc;\n        long abbcdcdef = abbcdcdef *\
    \ bc;\n        long abbcdcdefg = abbcdcdefg * bc;\n        long abbcdcdefgh =\
    \ abbcdcdefgh * bc;\n        long abbcdcdefghi = abbcdcdefghi * bc;\n        long\
    \ abbcdcdefghij = abbcdcdefghij * bc;\n        long abbcdcdefghijk = abbcdcdefghijk\
    \ * bc;\n        long abbcdcdefghijkl = abbcdcdefghijkl * bc;\n        long abbcdcdefghijklm\
    \ = abbcdcdefghijklm * bc;\n        long abbcdcdefghijklmn = abbcdcdefghijkln\
    \ * bc;\n        long abbcdcdefghijklmnx = abbcdcdefghijklnx * bc;\n        long\
    \ abbcdcdefghijklmnxy = abbcdcdefghijklnxy * bc;\n        long abbcdcdefghijklmnxz\
    \ = abbcdcdefghijklnxz * bc;\n        long abbcdcdefghijklmnyz = abbcdcdefghijklnyz\
    \ * bc;\n        long abbcdcdefghijklmnyzx = abbcdcdefghijklnyzx * bc;\n     \
    \   long abbcdcdefghijklmnyzxy = abbcdcdefghijklnyzxy * bc;\n        long abbcdcdefghijklmnyzxz\
    \ = abbcdcdefghijklnyzxz * bc;\n        long abbcdcdef\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyenh4fyw.cs(46,23): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side9 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side10 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side15 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side16 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side21 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side22 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side27 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side28 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxctrel23.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpxctrel23.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long t1 = (-b + Math.Sqrt(d)) / (2 * a);\n            long t2 = (-b - Math.Sqrt(d))\
    \ / (2 * a);\n            if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n  \
    \              return true;\n            }\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpozi9rsvc.cs(21,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpozi9rsvc.cs(22,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * ab;\n        long acbcabc = acbcab\
    \ * bc;\n        long acbcabcb = acbcabcb * bc;\n        long acbcabcbc = acbcabcbc\
    \ * bc;\n        long acbcabcbcb = acbcabcbcb * bc;\n        long acbcabcbcbc\
    \ = acbcabcbcbc * bc;\n        long acbcabcbcbcb = acbcabcbcbcb * bc;\n      \
    \  long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n  \
    \      long ac\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8pg94vp1.cs(46,16): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcb * bc;\n       \
    \ long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1f3u2zix.cs(47,28): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long acbc = ac * bc;\n        long acbcbc = ac * bc\
    \ * bc;\n        long abbcac = ab * bc * ac;\n        long abbcacbc = ab * bc\
    \ * ac * bc;\n        long abbcacbcbc = ab * bc * ac * bc * bc;\n        long\
    \ acbcbcbac = ac * bc * bc * ac;\n        long acbcbcbacbac = ac * bc * bc * ac\
    \ * bc;\n        long acbcbcbacbacbac = ac * bc * bc * ac * bc * bc;\n       \
    \ long acbcbcbacbacbacbac = ac * bc * bc * ac * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbac\
    \ = ac * bc * bc * ac * bc * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbacbacbac\
    \ = ac * bc * bc * ac * bc * bc * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbacbacbacbacbac\
    \ = ac * bc * bc * ac * bc * bc * bc * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbacbacbacbacbacbacbac\
    \ = ac * bc * bc * ac * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbacbacbacbacbacbacbacbacbacbac\
    \ = ac * bc * bc * ac * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbac\
    \ = ac * bc * bc * ac * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbacbac\
    \ = ac * bc * bc * ac * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcbcbacbacbacbacbacbacbacbacbac\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprllydckw.cs(41,47): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbca = acbc *\
    \ abc;\n        long acbcab = acbca * abc;\n        long acbcabc = acbcab * abc;\n\
    \        long acbcabcd = acbcabc * abc;\n        long acbcabcde = acbcabcd * abc;\n\
    \        long acbcabcdef = acbcabcde * abc;\n        long acbcabcdefg = acbcabcdef\
    \ * abc;\n        long acbcabcdefgh = acbcabcdefg * abc;\n        long acbcabcdefghi\
    \ = acbcabcdefgh * abc;\n        long acbcabcdefghij = acbcabcdefghi * abc;\n\
    \        long acbcabcdefghijk = acbcabcdefghij * abc;\n        long acbcabcdefghijkl\
    \ = acbcabcdefghijk * abc;\n        long acbcabcdefghijklmn = acbcabcdefghijkl\
    \ * abc;\n        long acbcabcdefghijklmnn = acbcabcdefghijkln * abc;\n      \
    \  long acbcabcdefghijklmno = acbcabcdefghijklmn * abc;\n        long acbcabcdefghijklmnop\
    \ = acbcabcdefghijklmno * abc;\n        long acbcabcdefghijklmnopq = acbcabcdefghijklmnop\
    \ * abc;\n        long acbcabcdefghijklmnopr = acbcabcdefghijklmnopq * abc;\n\
    \        long acbcabcdefghijklmnopqrs = acbcabcdefghijklmnopr * abc;\n       \
    \ long acbcabcdefghijklmnopqrsst = acbcabcdefghijklmnopqrs * abc;\n        long\
    \ acbcabcdefghijklmnopqrsstv = acbcabcdefghijklm\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf437p6f3.cs(46,60): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcc = abc * bc;\n        long acbcc = acbc *\
    \ bc;\n        long abccc = abcc * bc;\n        long acbccc = acbcc * bc;\n  \
    \      long abcccc = abccc * bc;\n        long acbcccb = acbcc * bc;\n       \
    \ long abccccb = abccc * bc;\n        long acbcccbc = acbccc * bc;\n        long\
    \ abccccbc = abcccc * bc;\n        long acbcccbcb = acbcccb * bc;\n        long\
    \ abccccbcb = abccccb * bc;\n        long acbcccbcbb = acbcccb * bc;\n       \
    \ long abccccbcbb = abccccb * bc;\n        long acbcccbcbb = acbcccbc * bc;\n\
    \        long abccccbcbb = abccccbc * bc;\n        long acbcccbcbbc = acbcccbcb\
    \ * bc;\n        long abccccbcbbc = abccccbcb * bc;\n        long acbcccbcbcbc\
    \ = acbcccbcb * bc;\n        long abccccbcbcbc = abccccbcb * bc;\n        long\
    \ acbcccbcbcbcb = acbcccbcb * bc;\n        long abccccbcbcbc = abccccbcb * bc;\n\
    \        long acbcccbcbcbcbb = acbcccbcb * bc;\n        long abccccbcbcbcbb =\
    \ abccccbcb * bc;\n        long acbcccbcbcbcbb = acbcccbcb * bc;\n        long\
    \ abccccbcbcbcbb = abccccbcb * bc;\n        long acbcccbcbcbcbc = acbcccbcb *\
    \ bc;\n        long abccccbcbcbcbc = abccccbcb * bc;\n        long acbcccbcbcbcbcb\
    \ = acbcccbcb * bc;\n        long abccccbcbcbcbcb = abccccbcb * bc;\n        long\
    \ acbcccb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ic6unid.cs(54,21): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag3fp2bw.cs(44,13): error CS1001: Identifier expected

    /tmp/tmpag3fp2bw.cs(44,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag3fp2bw.cs(44,13): error CS1001: Identifier expected

    /tmp/tmpag3fp2bw.cs(44,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeuhg5yc5.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        d = Math.Sqrt(d);\n        long x = (-b + d) / (2 * a);\n  \
    \      long y = (-b - d) / (2 * a);\n        return Math.Abs(x) < Math.Abs(y)\
    \ && Math.Abs(x) > 0;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt09r3jum.cs(22,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n   \
    \     long abbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbbc * bc;\n  \
    \      long abbbbcbc = abbbbcc * bc;\n        long acbbbcbcb = acbbbcb * bc;\n\
    \        long abbbbcbcb = abbbbcc * bc;\n        long acbbbcbcbb = acbbbcbc *\
    \ bc;\n        long abbbbcbcbb = abbbbccc * bc;\n        long acbbbcbcbbc = acbbbcbcb\
    \ * bc;\n        long abbbbcbcbbc = abbbbccc * bc;\n        long acbbbcbcbcbb\
    \ = acbbbcbcbc * bc;\n        long abbbbcbcbcbb = abbbbcccc * bc;\n        long\
    \ acbbbcbcbcbbc = acbbbcbcbcb * bc;\n        long abbbbcbcbcbbc = abbbbccccc *\
    \ bc;\n        long acbbbcbcbcbcbb = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbcbb\
    \ = abbbbcccccc * bc;\n        long acbbbcbcbcbcbbc = acbbbcbcbcbcb * bc;\n  \
    \      long abbbbcbcbcbcbbc = abbbbccccccc * bc;\n        long acbbbcbcbcbcbcbb\
    \ = acbbbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbb = abbbbcccccccc * bc;\n\
    \        long acbbbcbcbcbcbcbbc = acbbbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1ncubdg1.cs(51,30): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fa211abae5349c794d4028ef36cb392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9fa211abae5349c794d4028ef36cb392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long) Math.Sqrt(d);\n        long t1 = (long) (-b\
    \ + root) / a;\n        long t2 = (long) (-b - root) / a;\n        return t1 ==\
    \ t2;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a437072f9893459d8c1dac9ab29e1a82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a437072f9893459d8c1dac9ab29e1a82>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2zmhj2__.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a);\n        long g = (long) Math.Sqrt(b * b);\n        long h = (long) Math.Sqrt(c\
    \ * c);\n        long i = (long) Math.Sqrt(a * a + b * b);\n        long j = (long)\
    \ Math.Sqrt(a * a + c * c);\n        long k = (long) Math.Sqrt(b * b + c * c);\n\
    \        long l = (long) Math.Sqrt(a * a * b + b * b + c * c);\n        long m\
    \ = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c);\n        long n = (long)\
    \ Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a);\n        long o = (long)\
    \ Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a + b * b);\n        long\
    \ p = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a + c * c);\n \
    \       long q = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a +\
    \ b * b + c * c);\n        long r = (long) Math.Sqrt(a * a * b + c * c + b * b\
    \ + c * c + a * a + b * b + c * c + a * a);\n        long s = (long) Math.Sqrt(a\
    \ * a * b + c * c + b * b + c * c + a * a + b * b + c * c + a * a + c * c);\n\
    \        long t = (long) Math.Sqrt(a * a * b + c * c + b * b + c * c + a * a +\
    \ b * b + c * c + a * a + c * c + b * b);\n        long u = (long) Math.Sqrt(a\
    \ * a * b + c * c + b * b + c * c + a * a + b * b + c * c + a * a + c * c + b\
    \ * b + c * c);\n        long v = (long) Math.Sqrt(a * a * b + c * c + b * b +\
    \ c * c + a * a + b * b + c * c + a * a + c * c + b * b + c * c + a * a);\n  \
    \      long w = (long) Math.Sqrt(a * a * b + c * \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_lf9jb19.cs(40,50): error CS1525: Invalid expression term ''}''

    /tmp/tmp_lf9jb19.cs(40,50): error CS1026: ) expected

    /tmp/tmp_lf9jb19.cs(40,50): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a + b * b);\n        long g = (long) Math.Sqrt(a * a + c * c);\n        long\
    \ h = (long) Math.Sqrt(b * b + c * c);\n        long i = (long) Math.Sqrt(a *\
    \ a + b * b + c * c);\n        long j = (long) Math.Sqrt(a * a + c * c + b * b\
    \ + e * e);\n        long k = (long) Math.Sqrt(a * a + c * c + e * e + b * b +\
    \ f * f);\n        long l = (long) Math.Sqrt(a * a + b * b + e * e + f * f + c\
    \ * c);\n        long m = (long) Math.Sqrt(a * a + b * b + c * c + e * e + f *\
    \ f + g * g);\n        long n = (long) Math.Sqrt(a * a + b * b + c * c + g * g\
    \ + e * e + f * f + h * h);\n        long o = (long) Math.Sqrt(a * a + b * b +\
    \ c * c + g * g + h * h + e * e + f * f + i * i);\n        long p = (long) Math.Sqrt(a\
    \ * a + b * b + c * c + g * g + h * h + i * i + e * e + f * f + j * j);\n    \
    \    long q = (long) Math.Sqrt(a * a + b * b + c * c + g * g + h * h + i * i +\
    \ j * j + e * e + f * f + k * k);\n        long r = (long) Math.Sqrt(a * a + b\
    \ * b + c * c + g * g + h * h + i * i + j * j + k * k + e * e + f * f + l * l);\n\
    \        long s = (long) Math.Sqrt(a * a + b * b + c * c + g * g + h * h + i *\
    \ i + j * j + k * k + l * l + e * e + f * f + m * m);\n        long t = (long)\
    \ Math.Sqrt(a * a + b * b + c * c + g * g + h * h + i * i + j * j + k * k + l\
    \ * l + m * m + e * e + f * f + n * n);\n        long u = (long) Math.Sqrt(a *\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy8u0idpi.cs(38,38): error CS1525: Invalid expression term ''}''

    /tmp/tmpy8u0idpi.cs(38,38): error CS1026: ) expected

    /tmp/tmpy8u0idpi.cs(38,38): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * bc;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bo6c07b.cs(35,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmp_bo6c07b.cs(37,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmp_bo6c07b.cs(40,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmp_bo6c07b.cs(41,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmp_bo6c07b.cs(43,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmp_bo6c07b.cs(45,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmp_bo6c07b.cs(42,37): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbcb''

    /tmp/tmp_bo6c07b.cs(44,38): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbcbc''

    /tmp/tmp_bo6c07b.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long abcab = abc * abc;\n        long acbc = acb *\
    \ bc;\n        long acbcab = acb * acb * bc;\n        long acbcabc = acb * acb\
    \ * acb * bc;\n        long acbcabcb = acb * acb * acb * acb * bc;\n        long\
    \ acbcabcbc = acb * acb * acb * acb * acb * bc;\n        long acbcabcbcb = acb\
    \ * acb * acb * acb * acb * acb * bc;\n        long acbcabcbcbc = acb * acb *\
    \ acb * acb * acb * acb * acb * bc;\n        long acbcabcbcbcb = acb * acb * acb\
    \ * acb * acb * acb * acb * acb * bc;\n        long acbcabcbcbcbc = acb * acb\
    \ * acb * acb * acb * acb * acb * acb * acb * bc;\n        long acbcabcbcbcbcb\
    \ = acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * bc;\n  \
    \      long acbcabcbcbcbcbc = acb * acb * acb * acb * acb * acb * acb * acb *\
    \ acb * acb * acb * acb * bc;\n        long acbcabcbcbcbcbcb = acb * acb * acb\
    \ * acb * acb * acb * acb * acb * acb * acb * acb * acb * acb * bc;\n        long\
    \ acbcabcbcbcbcbcbc = acb * acb * acb * acb * acb * acb * acb * acb * acb * acb\
    \ * acb * acb * acb * acb * bc;\n        long acbcabcbcbcbcbcbcbc = acb * acb\
    \ * acb * ac\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8c143u9a.cs(39,56): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root1 = (-b + Math.Sqrt(d)) / (2 * a);\n        long root2\
    \ = (-b - Math.Sqrt(d)) / (2 * a);\n        if (root1 == root2)\n            return\
    \ true;\n        if (root1 < 0 || root1 > 1)\n            return false;\n    \
    \    long root3 = Math.Sqrt(d);\n        long root4 = Math.Sqrt(d);\n        long\
    \ root5 = Math.Sqrt(d);\n        long root6 = Math.Sqrt(d);\n        long root7\
    \ = Math.Sqrt(d);\n        long root8 = Math.Sqrt(d);\n        long root9 = Math.Sqrt(d);\n\
    \        long root10 = Math.Sqrt(d);\n        long root11 = Math.Sqrt(d);\n  \
    \      long root12 = Math.Sqrt(d);\n        long root13 = Math.Sqrt(d);\n    \
    \    long root14 = Math.Sqrt(d);\n        long root15 = Math.Sqrt(d);\n      \
    \  long root16 = Math.Sqrt(d);\n        long root17 = Math.Sqrt(d);\n        long\
    \ root18 = Math.Sqrt(d);\n        long root19 = Math.Sqrt(d);\n        long root20\
    \ = Math.Sqrt(d);\n        long root21 = Math.Sqrt(d);\n        long root22 =\
    \ Math.Sqrt(d);\n        long root23 = Math.Sqrt(d);\n        long root24 = Math.Sqrt(d);\n\
    \        long root25 = Math.Sqrt(d);\n        long root26 = Math.Sqrt(d);\n  \
    \      long root27 = Math.Sqrt(d);\n        long root28 = Math.Sqrt(d);\n    \
    \    long root29 = Math.Sqrt(d);\n        long root30 = Math.Sqrt(d);\n      \
    \  long root31 = Math.Sqrt(d);\n        long root32 = Math.Sqrt(d);\n        long\
    \ root33 = Math.Sqrt(d);\n        long root34 = Math.Sqrt(d);\n        long root35\
    \ = Math.Sqrt(d);\n        long root36 = Math.Sqrt(d);\n        long root37 =\
    \ Math.Sqrt(d);\n        long root38 = Math.Sqrt(d);\n        long root39 = Math.Sqrt(d);\n\
    \        long root40 = Math.Sqrt(d);\n        long root41 = Math.Sqrt(d);\n  \
    \      long root42 = Math.Sqrt(d);\n        long root43 = Math.Sqrt(d);\n    \
    \    long root44 = Math.Sqrt(d);\n        long root45 = Math.Sqrt(d);\n      \
    \  long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9cor31yj.cs(71,13): error CS1001: Identifier expected

    /tmp/tmp9cor31yj.cs(71,13): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmte6g1e9.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpmte6g1e9.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root1 = (-b + Math.Sqrt(d)) / (2 * a);\n        long root2\
    \ = (-b - Math.Sqrt(d)) / (2 * a);\n        return (root1 == root2);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqfnbios.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprqfnbios.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a + b * b);\n        long g = (long) Math.Sqrt(a * a + c * c);\n        long\
    \ h = (long) Math.Sqrt(b * b + c * c);\n        long i = Math.Sqrt(a * a + b *\
    \ b + c * c);\n        long j = (long) Math.Sqrt(a * a + c * c + b * b + e * e);\n\
    \        long k = (long) Math.Sqrt(a * a + b * b + c * c + e * e);\n        long\
    \ l = (long) Math.Sqrt(a * b + c * c + e * e);\n        long m = (long) Math.Sqrt(a\
    \ * b + c * c + e * e + f * f);\n        long n = (long) Math.Sqrt(a * b + c *\
    \ c + e * e + f * f + g * g);\n        long o = (long) Math.Sqrt(a * b + c * c\
    \ + e * e + f * f + g * g + h * h);\n        long p = (long) Math.Sqrt(a * b +\
    \ c * c + e * e + f * f + g * g + h * h + i * i);\n        long q = (long) Math.Sqrt(a\
    \ * b + c * c + e * e + f * f + g * g + h * h + i * i + j * j);\n        long\
    \ r = (long) Math.Sqrt(a * b + c * c + e * e + f * f + g * g + h * h + i * i +\
    \ j * j + k * k);\n        long s = (long) Math.Sqrt(a * b + c * c + e * e + f\
    \ * f + g * g + h * h + i * i + j * j + k * k + l * l);\n        long t = (long)\
    \ Math.Sqrt(a * b + c * c + e * e + f * f + g * g + h * h + i * i + j * j + k\
    \ * k + l * l + m * m);\n        long u = (long) Math.Sqrt(a * b + c * c + e *\
    \ e + f * f + g * g + h * h + i * i + j * j + k * k + l * l + m * m + n * n);\n\
    \        long v = (long) Math.Sqrt(a * b + c * c + e * e + f * f + g * g\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkl295271.cs(39,72): error CS1026: ) expected

    /tmp/tmpkl295271.cs(39,72): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcb * bc;\n       \
    \ long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1f3u2zix.cs(47,28): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 >= 0\
    \ && t1 <= 1 && t2 >= 0 && t2 <= 1;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <127122104f2e4450b7c9bd6ec799013e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <127122104f2e4450b7c9bd6ec799013e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac + bc;\n        long\
    \ abcc = acb + abc;\n        long abbc = abc + bc;\n        long abcba = abcc\
    \ + abb;\n        long abcab = abcba * 2;\n        long abcabc = abcab * 2;\n\
    \        long abcabcb = abcabcb * 2;\n        long abcabcbc = abcabcbc * 2;\n\
    \        long abcabcbcd = abcabcbc * 3;\n        long abcabcbcde = abcabcbc *\
    \ 4;\n        long abcabcbcdef = abcabcbc * 5;\n        long abcabcbcdefg = abcabcbc\
    \ * 6;\n        long abcabcbcdefgh = abcabcbc * 7;\n        long abcabcbcdefghi\
    \ = abcabcbc * 8;\n        long abcabcbcdefghij = abcabcbc * 9;\n        long\
    \ abcabcbcdefghijk = abcabcbc * 10;\n        long abcabcbcdefghijkl = abcabcbc\
    \ * 11;\n        long abcabcbcdefghijklm = abcabcbc * 12;\n        long abcabcbcdefghijklmn\
    \ = abcabcbc * 13;\n        long abcabcbcdefghijklmno = abcabcbc * 14;\n     \
    \   long abcabcbcdefghijklmnop = abcabcbc * 15;\n        long abcabcbcdefghijklmnopq\
    \ = abcabcbc * 16;\n        long abcabcbcdefghijklmnopqr = abcabcbc * 17;\n  \
    \      long abcabcbcdefghijklmnopqrst = abcabcbc * 18;\n        long abcabcbcdefghijklmnopqrstu\
    \ = abcabcbc * 19;\n        long abcabcbcdefghijklmnopqrstuv = abcabcbc * 20;\n\
    \        long abcabcbcdefghijklmnopqrstuvw = abcabcbc * 21;\n        long abcabcbcdefghijklmnopqrstuvwx\
    \ = abcabcbc * 22;\n        long abcabcbcdefghijklmnopqrstuvwxy\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr20d5vhd.cs(51,44): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long abcab = ab + acb;\n        long abcabc = abc -\
    \ acb;\n        long abcabbc = abc - abbc;\n        long abcabcab = abc - abcab;\n\
    \        long abcabcabc = abcabc - abcab;\n        long abcabcabbc = abcabcab\
    \ - abcabc;\n        long abcabcabbcbc = abcabcabc - abcabbc;\n        long abcabcabbcbcbc\
    \ = abcabcabbc - abcabbcbc;\n        long abcabcabbcbcbcbc = abcabcabbcbc - abcabbcbcbc;\n\
    \        long abcabcabbcbcbcbcbc = abcabcabbcbcbc - abcabbcbcbcbc;\n        long\
    \ abcabcabbcbcbcbcbcbc = abcabcabbcbcbcbc - abcabbcbcbcbcbcbc;\n        long abcabcabbcbcbcbcbcbcbc\
    \ = abcabcabbcbcbcbcbcbc - abcabbcbcbcbcbcbcbc;\n        long abcabcabbcbcbcbcbcbcbc\
    \ = abcabcabbcbcbcbcbcbcbc - abcabbcbcbcbcbcbcbcbc;\n        long abcabcabbcbcbcbcbcbcbcbc\
    \ = abcabcabbcbcbcbcbcbcbcbc - abcabbcbcbcbcbcbcbcbcbc;\n        long abcabcabbcbcbcbcbcbcbcbcbc\
    \ = abcabcabbcbcbcbcbcbcbcbcbc - abcabbcbcbcbcbcbcbcbcbcbc;\n        long abcabcabbcbcbcbcbcbcbcbcbc\
    \ = abcabcabbcbcbcbcbcbcbcbcbcbc - abcabbcbcbcbcbcbcbcbcbcbc;\n        long abcabcabbcbcbcbcbcbcbcbcbc\
    \ = abcabcabbcbcbcbcbcbcbcbcbcbc - abcabbcbcbcbcbcbcbcbcbcbc;\n        long abcabcabbcbcbcbcbcbcbcbcbcbc\
    \ = abcabcabbcbcbcbcbcbcbcbcbcbc - abcabbcbcbcbcb\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8lg_nziw.cs(42,90): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = b + e * Math.Sqrt(b\
    \ + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e * 0.5);\n        long\
    \ h = a + e * Math.Sqrt(a + e * 0.5);\n        return ((f - g) * (h - g) == 0\
    \ && (f - h) * (g - h) == 0);\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpql0m8209.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpql0m8209.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpql0m8209.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpql0m8209.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = abc - acb;\n        long abbcd = abbc - ab;\n        long abbcdc = abbcd\
    \ - ab;\n        long abbcdcd = abbcdc - ab;\n        long abbcdcde = abbcdcd\
    \ - ab;\n        long abbcdcdef = abbcdcde - ab;\n        long abbcdcdefg = abbcdcdef\
    \ - ab;\n        long abbcdcdefgh = abbcdcdefg - ab;\n        long abbcdcdefghi\
    \ = abbcdcdefgh - ab;\n        long abbcdcdefghij = abbcdcdefghi - ab;\n     \
    \   long abbcdcdefghijk = abbcdcdefghij - ab;\n        long abbcdcdefghijkl =\
    \ abbcdcdefghijk - ab;\n        long abbcdcdefghijklm = abbcdcdefghijkl - ab;\n\
    \        long abbcdcdefghijklmm = abbcdcdefghijklm - ab;\n        long abbcdcdefghijklmmn\
    \ = abbcdcdefghijklmm - ab;\n        long abbcdcdefghijklmmnn = abbcdcdefghijklmmn\
    \ - ab;\n        long abbcdcdefghijklmmnnn = abbcdcdefghijklmmnnn - ab;\n    \
    \    long abbcdcdefghijklmmnnnn = abbcdcdefghijklmmnnnnn - ab;\n        long abbcdcdefghijklmmnnnnnn\
    \ = abbcdcdefghijklmmnnnnnnn - ab;\n        long abbcdcdefghijklmmnnnnnnnn = abbcdcdefghijklmmnnnnnnnnn\
    \ - ab;\n        long abbcdcdefghijklmmnnnnnnnnnn = abbcdcdefghijklmmnnnnnnnnn\
    \ - ab;\n        long abbcdcdefghijklmmnnnnnnnnnnnn = abbcd\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpumb09n92.cs(45,51): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 < t2)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe90817400024a36b9d37e022963df17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe90817400024a36b9d37e022963df17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ + b + c);\n        long g = (long) Math.Sqrt(a + b - c);\n        long h = (long)\
    \ Math.Sqrt(a + b + c - e);\n        long i = (long) Math.Sqrt(a + b - e + f);\n\
    \        long j = (long) Math.Sqrt(a + b + e - f);\n        long k = (long) Math.Sqrt(a\
    \ + b - e + g);\n        long l = (long) Math.Sqrt(a + b + e - g);\n        long\
    \ m = (long) Math.Sqrt(a + b - e + h);\n        long n = (long) Math.Sqrt(a +\
    \ b + e - h);\n        long o = (long) Math.Sqrt(a + b + e + i);\n        long\
    \ p = (long) Math.Sqrt(a + b - e + j);\n        long q = (long) Math.Sqrt(a +\
    \ b + e - j);\n        long r = (long) Math.Sqrt(a + b - e + k);\n        long\
    \ s = (long) Math.Sqrt(a + b + e - k);\n        long t = (long) Math.Sqrt(a +\
    \ b - e + l);\n        long u = (long) Math.Sqrt(a + b + e - l);\n        long\
    \ v = (long) Math.Sqrt(a + b + e + m);\n        long w = (long) Math.Sqrt(a +\
    \ b - e + n);\n        long x = (long) Math.Sqrt(a + b - e + o);\n        long\
    \ y = (long) Math.Sqrt(a + b + e - o);\n        long z = (long) Math.Sqrt(a +\
    \ b + e + p);\n        long A = (long) Math.Sqrt(a + b + e - q);\n        long\
    \ B = (long) Math.Sqrt(a + b - e + r);\n        long C = (long) Math.Sqrt(a +\
    \ b + e - s);\n        long D = (long) Math.Sqrt(a + b - e + t);\n        long\
    \ E = (long) Math.Sqrt(a + b + e - u);\n        long F = (long) Math.Sqrt(a +\
    \ b + e - v);\n        long G = (long) Math.Sqrt(a + b - e + w);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkq5xbop0.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkq5xbop0.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbc * bc;\n      \
    \  long acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd2cb341y.cs(47,24): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcc = abc * bc;\n\
    \        long abbbc = abbb * bc;\n        long abbcc = abbc * bc;\n        long\
    \ abccc = abcc * bc;\n        long abbbcc = abbbc * bc;\n        long abbccc =\
    \ abbcc * bc;\n        long abcccb = abccc * bc;\n        long abbbccc = abbbcc\
    \ * bc;\n        long abbcccb = abbccc * bc;\n        long abcccbc = abcccb *\
    \ bc;\n        long abbbcccb = abbbccc * bc;\n        long abbcccbc = abbcccb\
    \ * bc;\n        long abcccbcb = abcccbc * bc;\n        long abbbcccbb = abbbcccb\
    \ * bc;\n        long abbcccbcb = abbcccbc * bc;\n        long abcccbcbc = abcccbcb\
    \ * bc;\n        long abbbcccbcb = abbbcccb * bc;\n        long abbcccbcbc = abbcccbcb\
    \ * bc;\n        long abcccbcbcb = abcccbcbc * bc;\n        long abbbcccbcbc =\
    \ abbbcccbcb * bc;\n        long abbcccbcbcb = abbcccbcbc * bc;\n        long\
    \ abcccbcbcbc = abcccbcbcb * bc;\n        long abbbcccbcbcb = abbbcccbcb * bc;\n\
    \        long abbcccbcbcb = abbcccbcbc * bc;\n        long abcccbcbcbc = abcccbcbcb\
    \ * bc;\n        long abbbcccbcbcb = abbbcccbcb * bc;\n        long abbcccbcbcb\
    \ = abbcccbcbc * bc;\n        long abcccbcbcbc = abcccbcbcb * bc;\n        long\
    \ abbbcccbcbcb = abbbcccbcb * bc;\n        long ab\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvdmcjpvn.cs(55,16): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b - c * c);\n        long side2\
    \ = Math.Sqrt(a * a - b * b + c * c);\n        long side3 = Math.Sqrt(a * a -\
    \ b * b - c * c);\n        long side4 = Math.Sqrt(a * a + b * b + c * c);\n  \
    \      long side5 = Math.Sqrt(a * a + b * b - c * c);\n        long side6 = Math.Sqrt(a\
    \ * a - b * b + c * c);\n        long side7 = Math.Sqrt(a * a - b * b - c * c);\n\
    \        long side8 = Math.Sqrt(a * a + b * b + c * c);\n        long side9 =\
    \ Math.Sqrt(a * a + b * b - c * c);\n        long side10 = Math.Sqrt(a * a - b\
    \ * b + c * c);\n        long side11 = Math.Sqrt(a * a - b * b - c * c);\n   \
    \     long side12 = Math.Sqrt(a * a + b * b + c * c);\n        long side13 = Math.Sqrt(a\
    \ * a + b * b - c * c);\n        long side14 = Math.Sqrt(a * a - b * b + c * c);\n\
    \        long side15 = Math.Sqrt(a * a - b * b - c * c);\n        long side16\
    \ = Math.Sqrt(a * a + b * b + c * c);\n        long side17 = Math.Sqrt(a * a +\
    \ b * b - c * c);\n        long side18 = Math.Sqrt(a * a - b * b + c * c);\n \
    \       long side19 = Math.Sqrt(a * a - b * b - c * c);\n        long side20 =\
    \ Math.Sqrt(a * a + b * b + c * c);\n        long side21 = Math.Sqrt(a * a + b\
    \ * b - c * c);\n        long side22 = Math.Sqrt(a * a - b * b + c * c);\n   \
    \     long side23 = Math.Sqrt(a * a - b * b - c * c);\n        long side24 = Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long side25 = Math.Sqrt(a * a + b * b - c * c);\n\
    \        long side26 = Math.Sqrt(a * a - b * b + c * c);\n        long side27\
    \ = Math.Sqrt(a * a - b * b - c * c);\n        long side28 = Math.Sqrt(a * a +\
    \ b * b + c * c);\n        long side29 = Math.Sqr\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwe9jkysi.cs(47,31): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        if (t1\
    \ > t2) {\n            return false;\n        }\n        long t3 = t1 - t2;\n\
    \        long t4 = t1 + t2;\n        if (t3 > t4) {\n            return false;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3bd1233968846da9c977726ba4f7da1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3bd1233968846da9c977726ba4f7da1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a + b * b);\n        long g = (long) Math.Sqrt(a * a + c * c);\n        long\
    \ h = (long) Math.Sqrt(b * b + c * c);\n        long i = g - h;\n        long\
    \ j = f + e;\n        long k = f - e;\n        long l = g + e;\n        long m\
    \ = f - e;\n        long n = g - e;\n        long o = g + e;\n        long p =\
    \ f + e;\n        long q = f - e;\n        long r = g + e;\n        long s = f\
    \ - e;\n        long t = g + e;\n        long u = f + e;\n        long v = f -\
    \ e;\n        long w = g + e;\n        long x = f + e;\n        long y = f - e;\n\
    \        long z = g + e;\n        long A = a;\n        long B = b;\n        long\
    \ C = c; \n        long D = a;\n        long E = b;\n        long F = c; \n  \
    \      long G = a;\n        long H = b;\n        long I = c; \n        long J\
    \ = a;\n        long K = b;\n        long L = c; \n        long M = a;\n     \
    \   long N = b;\n        long O = c; \n        long P = a;\n        long Q = b;\n\
    \        long R = c; \n        long S = a;\n        long T = b;\n        long\
    \ U = c; \n        long V = a;\n        long W = b;\n        long X = c; \n  \
    \      long Y = a;\n        long Z = b;\n        long AA = a;\n        long AB\
    \ = b;\n        long AC = c; \n        long AD = a;\n        long AE = b;\n  \
    \      long AF = c; \n        long AG = a;\n        long AH = b;\n        long\
    \ AI = c; \n        long AJ = a;\n        long AK = b;\n        long AL = c; \n\
    \        long AM = a;\n        long AN = b;\n        long AO = c; \n        long\
    \ AP = a;\n        long AQ = b;\n        long AR = c; \n        long AS = a;\n\
    \        long AT = b;\n        long AU = c; \n        long AV = a;\n        long\
    \ AW = b;\n        long AX = c; \n        long AY = a;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyrtxyg3i.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpyrtxyg3i.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = d; //Math.Sqrt(d);\n        long\
    \ t1 = (-b + root) / a;\n        long t2 = (-b - root) / a;\n        if (t1 <\
    \ 0 || t2 < 0 || t1 > t2) {\n            return false;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51cba1e77ac74aaebb4ef6142cd82958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51cba1e77ac74aaebb4ef6142cd82958>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbb * bc;\n     \
    \   long abbbbbc = abbbbc * bc;\n        long acbbbcc = acbbbc * bc;\n       \
    \ long abbbbcc = abbbbc * bc;\n        long acbbbcbc = acbbb * bc;\n        long\
    \ abbbbcbc = abbbbc * bc;\n        long acbbbcbcb = acbbb * bc;\n        long\
    \ abbbbcbcb = abbbbc * bc;\n        long acbbbcbcbc = acbbb * bc;\n        long\
    \ abbbbcbcbc = abbbbc * bc;\n        long acbbbcbcbcb = acbbb * bc;\n        long\
    \ abbbbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbc = acbbb * bc;\n      \
    \  long abbbbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcb = acbbb * bc;\n\
    \        long abbbbcbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbcbc = acbbb\
    \ * bc;\n        long abbbbcbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbcbcbc\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcbcbcbc\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcbcbc = abbbbc * bc;\n        long\
    \ acbbbcbcbcbcbcbcbcb = acbbb * bc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdlwcxyan.cs(54,46): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d == 0) {\n         \
    \   return false;\n        }\n        long root = (long)Math.Sqrt(d);\n      \
    \  long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        return t1 == t2;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f3cf52c02af4c4497d2876d4d771cb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0f3cf52c02af4c4497d2876d4d771cb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * (b - a);\n        long g = a + e * (a - b);\n        long h = a - e\
    \ * (a - b);\n        long i = a + e * (b - a);\n        long j = b + e * (b -\
    \ a);\n        long k = a + e * (a - b);\n        long l = b + e * (b - a);\n\
    \        long m = a + e * (a - b);\n        long n = b + e * (b - a);\n      \
    \  long o = a + e * (a - b);\n        long p = b + e * (b - a);\n        long\
    \ q = a + e * (a - b);\n        long r = b + e * (b - a);\n        long s = a\
    \ + e * (a - b);\n        long t = b + e * (b - a);\n        long u = a + e *\
    \ (a - b);\n        long v = b + e * (b - a);\n        long w = a + e * (a - b);\n\
    \        long x = b + e * (b - a);\n        long y = a + e * (a - b);\n      \
    \  long z = a + e * (a - b);\n        long a = b + e * (b - a);\n        long\
    \ b = a + e * (a - b);\n        long c = a + e * (a - b);\n        long d = b\
    \ + e * (b - a);\n        long e = a + e * (a - b);\n        long f = a + e *\
    \ (a - b);\n        long g = a + e * (a - b);\n        long h = a + e * (a - b);\n\
    \        long i = a + e * (a - b);\n        long j = a + e * (a - b);\n      \
    \  long k = a + e * (a - b);\n        long l = a + e * (a - b);\n        long\
    \ m = a + e * (a - b);\n        long n = a + e * (a - b);\n        long o = a\
    \ + e * (a - b);\n        long p = a + e * (a - b);\n        long q = a + e *\
    \ (a - b);\n        long r = a + e * (a - b);\n        long s = a + e * (a - b);\n\
    \        long t = a + e * (a - b);\n        long u = a + e * (a - b);\n      \
    \  long v = a + e * (a - b);\n        long w = a + e * (a - b);\n        long\
    \ x = a + e * (a - b);\n        long y = a + e * (a - b);\n        long z = a\
    \ + e * (a - b);\n        long a = b + e * (b - a);\n        long b = a + e *\
    \ (a - b);\n        long c = a + e * (a - b);\n        long d = b + e * (b\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp984uf_cj.cs(74,28): error CS1026: ) expected

    /tmp/tmp984uf_cj.cs(74,28): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwy2jmzea.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpwy2jmzea.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        if (t1\
    \ < 0 && t2 < 0) {\n            return false;\n        }\n        if (t1 < 0)\
    \ {\n            return true;\n        }\n        if (t2 < 0) {\n            return\
    \ true;\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3169b22772142ec96390a19a0c00893>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3169b22772142ec96390a19a0c00893>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcbc = acbcbcb * bc;\n\
    \        long abcbcbc = abcbcb * bc;\n        long acbcbcbcbc = acbcbcbcb * bc;\n\
    \        long abcbcbcbc = abcbcbcb * bc;\n        long acbcbcbcbcbc = acbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcb * bc;\n        long acbcbcbcbcbcbc\
    \ = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcb * bc;\n   \
    \     long acbcbcbcbcbcbcbcbcbcbc = acbcbcbcbcbcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbcbcbcbcbc\
    \ = acbcbcbcbcbcbcbcbcbcb * bc;\n        long abcbcb\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnpnu5elg.cs(47,20): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abbbc = abbb *\
    \ bc;\n        long abbbcd = abbbc * bc;\n        long abbbcde = abbbcd * bc;\n\
    \        long abbbcdef = abbbcde * bc;\n        long abbbcdefg = abbbcdef * bc;\n\
    \        long abbbcdefgh = abbbcdefg * bc;\n        long abbbcdefghi = abbbcdefgh\
    \ * bc;\n        long abbbcdefghij = abbbcdefghi * bc;\n        long abbbcdefghijk\
    \ = abbbcdefghij * bc;\n        long abbbcdefghijkl = abbbcdefghijk * bc;\n  \
    \      long abbbcdefghijklm = abbbcdefghijkl * bc;\n        long abbbcdefghijklmn\
    \ = abbbcdefghijklm * bc;\n        long abbbcdefghijklmnx = abbbcdefghijklmn *\
    \ bc;\n        long abbbcdefghijklmnxy = abbbcdefghijklmnx * bc;\n        long\
    \ abbbcdefghijklmnxz = abbbcdefghijklmnxy * bc;\n        long abbbcdefghijklmnxzz\
    \ = abbbcdefghijklmnxz * bc;\n        long abbbcdefghijklmnxzzz = abbbcdefghijklmnxzz\
    \ * bc;\n        long abbbcdefghijklmnxzzzz = abbbcdefghijklmnxzzz * bc;\n   \
    \     long abbbcdefghijklmnxzzzzz = abbbcdefghijklmnxzzzz * bc;\n        long\
    \ abbbcdefghijklmnxzzzzzz = abbbcdefghijklmnxzzzzzz * bc;\n        long abbbcdefghijklmnxzzzzzzz\
    \ = abbbcdefghijklmnxzzzzzzz * bc;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmsyvr6dv.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpmsyvr6dv.cs(26,22): error CS0103: The name ''abbb'' does not exist in
    the current context

    /tmp/tmpmsyvr6dv.cs(45,40): error CS0165: Use of unassigned local variable ''abbbcdefghijklmnxzzzzzz''

    /tmp/tmpmsyvr6dv.cs(46,41): error CS0165: Use of unassigned local variable ''abbbcdefghijklmnxzzzzzzz''

    /tmp/tmpmsyvr6dv.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ acab = ac * ab;\n        long bcab = b * ab;\n        long bcabc = bcab * bc;\n\
    \        long bcabcb = bcab * bc;\n        long bcabcbc = bcabcb * bc;\n     \
    \   long bcabcbcb = bcabcb * bc;\n        long bcabcbcbc = bcabcbcb * bc;\n  \
    \      long bcabcbcbcb = bcabcbcb * bc;\n        long bcabcbcbcbc = bcabcbcbc\
    \ * bc;\n        long bcabcbcbcbcb = bcabcbcbcb * bc;\n        long bcabcbcbcbcbc\
    \ = bcabcbcbcbc * bc;\n        long bcabcbcbcbcbcb = bcabcbcbcbcb * bc;\n    \
    \    long bcabcbcbcbcbcbc = bcabcbcbcbcbc * bc;\n        long bcabcbcbcbcbcbc\
    \ = bcabcbcbcbcbcb * bc;\n        long bcabcbcbcbcbcbcb = bcabcbcbcbcbcb * bc;\n\
    \        long bcabcbcbcbcbcbcb = bcabcbcbcbcbcb * bc;\n        long bcabcbcbcbcbcbcbc\
    \ = bcabcbcbcbcbcbc * bc;\n        long bcabcbcbcbcbcbcbc = bcabcbcbcbcbcbc *\
    \ bc;\n        long bcabcbcbcbcbcbcbcb = bcabcbcbcbcbcbcb * bc;\n        long\
    \ bcabcbcbcbcbcbcbcb = bcabcbcbcbcbcbcb * bc;\n        long bcabcbcbcbcbcbcbcb\
    \ = bcabcbcbcbcbcbcb * bc;\n        long bcabcbcbcbcbcbcbcb = bcabcbcbcbcbcbcb\
    \ * bc;\n        long bcabcbcbcbcbcbcbcb = bcabcbcbcbcbcbcbcb * bc;\n        long\
    \ bcabcbcbcbcbcbcbcbc = bcabcbcbcbcbcbcbc * bc;\n        long bcabcbcbcbcbcbcbcbc\
    \ = bcabcbcbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwfj5h1xu.cs(48,52): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acbb = ac * bc;\n        long abcab = ab * ac;\n\
    \        long accab = ac * ac;\n        long abcabc = ab * ac * bc;\n        long\
    \ accabb = ac * ac * bc;\n        long abcabbc = ab * ac * bc * bc;\n        long\
    \ accabbb = ac * ac * bc * bc;\n        long abcabbbc = ab * ac * bc * bc * bc;\n\
    \        long accabbbb = ac * ac * bc * bc * bc;\n        long abcabbbbc = ab\
    \ * ac * bc * bc * bc * bc;\n        long accabbbbc = ac * ac * bc * bc * bc *\
    \ bc;\n        long abcabbbbcc = ab * ac * bc * bc * bc * bc * bc;\n        long\
    \ accabbbbcbc = ac * ac * bc * bc * bc * bc * bc;\n        long abcabbbbcbcb =\
    \ ab * ac * bc * bc * bc * bc * bc * bc;\n        long accabbbbcbcbc = ac * ac\
    \ * bc * bc * bc * bc * bc * bc;\n        long abcabbbbcbcbcb = ab * ac * bc *\
    \ bc * bc * bc * bc * bc * bc;\n        long accabbbbcbcbcbc = ac * ac * bc *\
    \ bc * bc * bc * bc * bc * bc;\n        long abcabbbbcbcbcbcb = ab * ac * bc *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long accabbbbcbcbcbcbc = ac * ac\
    \ * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabbbbcbcbcbcbcb =\
    \ ab * ac * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long accabbbbcbcbcbcbcbc\
    \ = ac * ac * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabbbbcbcbcbcbcbcb\
    \ = ab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq7euijd2.cs(46,39): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbcb = acbbc * bc;\n  \
    \      long abbbcb = abbbc * bc;\n        long acbbcbb = acbbcb * bc;\n      \
    \  long abbbcbb = abbbcb * bc;\n        long acbbcbbc = acbbcbb * bc;\n      \
    \  long abbbcbbc = abbbcbb * bc;\n        long acbbcbbcb = acbbcbbc * bc;\n  \
    \      long abbbcbbcb = abbbcbbc * bc;\n        long acbbcbbcbb = acbbcbbcb *\
    \ bc;\n        long abbbcbbcbb = abbbcbbcb * bc;\n        long acbbcbbcbbc = acbbcbbcbb\
    \ * bc;\n        long abbbcbbcbbc = abbbcbbcbb * bc;\n        long acbbcbbcbbcb\
    \ = acbbcbbcbbc * bc;\n        long abbbcbbcbbcb = abbbcbbcbbc * bc;\n       \
    \ long acbbcbbcbbcbb = acbbcbbcbbcb * bc;\n        long abbbcbbcbbcbb = abbbcbbcbbcb\
    \ * bc;\n        long acbbcbbcbbcbbc = acbbcbbcbbcbb * bc;\n        long abbbcbbcbbcbbc\
    \ = abbbcbbcbbcbb * bc;\n        long acbbcbbcbbcbbcb = acbbcbbcbbcbbc * bc;\n\
    \        long abbbcbbcbbcbbcb = abbbcbbcbbcbbc * bc;\n        long acbbcbbcbbcbbcbb\
    \ = acbbcbbcbbcbbcbb * bc;\n        long abbbcbbcbbcbbcbb = abbbcbbcbbcbbcbb *\
    \ bc;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbu5psz5t.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpbu5psz5t.cs(26,22): error CS0103: The name ''acbb'' does not exist in
    the current context

    /tmp/tmpbu5psz5t.cs(27,22): error CS0103: The name ''abbb'' does not exist in
    the current context

    /tmp/tmpbu5psz5t.cs(48,33): error CS0165: Use of unassigned local variable ''acbbcbbcbbcbbcbb''

    /tmp/tmpbu5psz5t.cs(49,33): error CS0165: Use of unassigned local variable ''abbbcbbcbbcbbcbb''

    /tmp/tmpbu5psz5t.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbb * bc;\n  \
    \      long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbbc * bc;\n    \
    \    long abbbbbc = abbbbbc * bc;\n        long acbbbcbc = acbbbcb * bc;\n   \
    \     long abbbbcbc = abbbbcb * bc;\n        long acbbbcbcb = acbbbcbc * bc;\n\
    \        long abbbbcbcb = abbbbcbcb * bc;\n        long acbbbcbcbb = acbbbcbcbb\
    \ * bc;\n        long abbbbcbcbb = abbbbcbcbb * bc;\n        long acbbbcbcbbc\
    \ = acbbbcbcbcb * bc;\n        long abbbbcbcbbc = abbbbcbcbbc * bc;\n        long\
    \ acbbbcbcbcbc = acbbbcbcbcbc * bc;\n        long abbbbcbcbcbc = abbbbcbcbcbc\
    \ * bc;\n        long acbbbcbcbcbcb = acbbbcbcbcbcb * bc;\n        long abbbbcbcbcbcb\
    \ = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbc = acbbbcbcbcbcbc * bc;\n\
    \        long abbbbcbcbcbcbc = abbbbcbcbcbcbc * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbbcbcbcbcbcb * bc;\n        long abbbbcbcbcbcbcb = abbbbcbcbcbcbcb * bc;\n\
    \        long acbbbcbcbcbcbcbc = acbbbcbcbcbcbcbc * bc;\n        long abbbbcbcbcbcbcbc\
    \ = abbbbcbcbcbcbcbc * bc;\n        long acbbbcbcbcbcbcbcb = acbbbcb\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ykkve5e.cs(50,41): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcc = abc * bc;\n\
    \        long acbcc = acbcc * bc;\n        long abbcc = abbcc * bc;\n        long\
    \ abccc = abcc * bc;\n        long acbccc = acbccc * bc;\n        long abbccc\
    \ = abbccc * bc;\n        long abcccb = abcccb * bc;\n        long acbcccb = acbcccb\
    \ * bc;\n        long abbcccb = abbcccb * bc;\n        long abcccbc = abcccbc\
    \ * bc;\n        long acbcccbb = acbcccbb * bc;\n        long abbcccbb = abbcccbb\
    \ * bc;\n        long abcccbbc = abcccbbc * bc;\n        long acbcccbbc = acbcccbbc\
    \ * bc;\n        long abbcccbbc = abbcccbbc * bc;\n        long abcccbbcb = abcccbbcb\
    \ * bc;\n        long acbcccbbcb = acbcccbbcb * bc;\n        long abbcccbbcb =\
    \ abbcccbbcb * bc;\n        long abcccbbcbc = abcccbbcbc * bc;\n        long acbcccbbcbc\
    \ = acbcccbbcbc * bc;\n        long abbcccbbcbc = abbcccbbcbc * bc;\n        long\
    \ abcccbbcbcb = abcccbbcbcb * bc;\n        long acbcccbbcbcb = acbcccbbcbcb *\
    \ bc;\n        long abbcccbbcbcb = abbcccbbcbcb * bc;\n        long abcccbbcbcbc\
    \ = abcccbbcbcbc * bc;\n        long acbcccbbcbcbc = acbcccbbcbcbc * bc;\n   \
    \     long abbcccbbcbcbc = abbcccbb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ltcll60.cs(52,38): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 > t2)\n            return false;\n \
    \       long t3 = t1 - t2;\n        long t4 = t1 + t2;\n        long t5 = t1 -\
    \ t2;\n        long t6 = t1 + t2;\n        long t7 = t1 - t2;\n        long t8\
    \ = t1 + t2;\n        long t9 = t1 - t2;\n        long t10 = t1 + t2;\n      \
    \  long t11 = t1 - t2;\n        long t12 = t1 + t2;\n        long t13 = t1 - t2;\n\
    \        long t14 = t1 + t2;\n        long t15 = t1 - t2;\n        long t16 =\
    \ t1 + t2;\n        long t17 = t1 - t2;\n        long t18 = t1 + t2;\n       \
    \ long t19 = t1 - t2;\n        long t20 = t1 + t2;\n        long t21 = t1 - t2;\n\
    \        long t22 = t1 + t2;\n        long t23 = t1 - t2;\n        long t24 =\
    \ t1 + t2;\n        long t25 = t1 - t2;\n        long t26 = t1 + t2;\n       \
    \ long t27 = t1 - t2;\n        long t28 = t1 + t2;\n        long t29 = t1 - t2;\n\
    \        long t30 = t1 + t2;\n        long t31 = t1 - t2;\n        long t32 =\
    \ t1 + t2;\n        long t33 = t1 - t2;\n        long t34 = t1 + t2;\n       \
    \ long t35 = t1 - t2;\n        long t36 = t1 + t2;\n        long t37 = t1 - t2;\n\
    \        long t38 = t1 + t2;\n        long t39 = t1 - t2;\n        long t40 =\
    \ t1 + t2;\n        long t41 = t1 - t2;\n        long t42 = t1 + t2;\n       \
    \ long t43 = t1 - t2;\n        long t44 = t1 + t2;\n        long t45 = t1 - t2;\n\
    \        long t46 = t1 + t2;\n        long t47 = t1 - t2;\n        long t48 =\
    \ t1 + t2;\n        long t49 = t1 - t2;\n        long t50 = t1 + t2;\n       \
    \ long t\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgeroqa6n.cs(77,15): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long abcab = ab * abc;\n        long abcabc = ab *\
    \ abc * abc;\n        long abcabcb = ab * abc * abc * abc;\n        long abcabcbb\
    \ = ab * abc * abc * abc * abc;\n        long abcabcbbc = ab * abc * abc * abc\
    \ * abc * abc;\n        long abcabcbbcd = ab * abc * abc * abc * abc * abc * abc;\n\
    \        long abcabcbbcde = ab * abc * abc * abc * abc * abc * abc * abc * abc;\n\
    \        long abcabcbbcdef = ab * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc;\n        long abcabcbbcdefg = ab * abc * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefgh = ab * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n       \
    \ long abcabcbbcdefghi = ab * abc * abc * abc * abc * abc * abc * abc * abc *\
    \ abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefghij = ab * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc;\n        long abcabcbbcdefghijk = ab * abc * abc * abc * abc * abc *\
    \ abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long\
    \ abcabcbbcdefghijkl = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc * abc * abc * abc;\n        long abcabcbbcdefghijkll\
    \ = ab * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc * abc\
    \ * abc * abc * abc * abc * abc * abc;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphp7mdb6e.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = Math.Sqrt(d);\n            long f = (b + e) / (2 * a);\n         \
    \   long g = (c + e) / (2 * a);\n            if (f > g) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph0i6o4kl.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * ab;\n        long acbcabc = acbcab\
    \ * bc;\n        long acbcabcb = acbcabcb * bc;\n        long acbcabcbc = acbcabcbc\
    \ * bc;\n        long acbcabcbcb = acbcabcbcb * bc;\n        long acbcabcbcbc\
    \ = acbcabcbcbc * bc;\n        long acbcabcbcbcb = acbcabcbcbcb * bc;\n      \
    \  long acbcabcbcbcbc = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n  \
    \      long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprqojacdp.cs(46,13): error CS1001: Identifier expected

    /tmp/tmprqojacdp.cs(46,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbcc * bc;\n   \
    \     long abbbbcc = abbbbcc * bc;\n        long acbbbccc = acbbbccc * bc;\n \
    \       long abbbbcccd = abbbbccc * bc;\n        long acbbbcccde = acbbbccc *\
    \ bc;\n        long abbbbcccdef = abbbbccc * bc;\n        long acbbbcccdefg =\
    \ acbbbccc * bc;\n        long abbbbcccdefgh = abbbbccc * bc;\n        long acbbbcccdefghi\
    \ = acbbbccc * bc;\n        long abbbbcccdefghij = abbbbccc * bc;\n        long\
    \ acbbbcccdefghijk = acbbbccc * bc;\n        long abbbbcccdefghijkl = abbbbccc\
    \ * bc;\n        long acbbbcccdefghijklm = acbbbccc * bc;\n        long abbbbcccdefghijklmn\
    \ = abbbbccc * bc;\n        long acbbbcccdefghijklmno = acbbbccc * bc;\n     \
    \   long abbbbcccdefghijklmnop = abbbbccc * bc;\n        long acbbbcccdefghijklmnopq\
    \ = acbbbccc * bc;\n        long abbbbcccdefghijklmnopqr = abbbbccc * bc;\n  \
    \      long acbbbcccdefghijklmnopqrst = acbbbccc * bc;\n        long abbbbcccdefghijklmnopqrstu\
    \ = abbbbccc * bc;\n\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl378y5pu.cs(25,21): error CS0103: The name ''abb'' does not exist in the
    current context

    /tmp/tmpl378y5pu.cs(26,22): error CS0103: The name ''acbb'' does not exist in
    the current context

    /tmp/tmpl378y5pu.cs(27,22): error CS0103: The name ''abbb'' does not exist in
    the current context

    /tmp/tmpl378y5pu.cs(30,24): error CS0103: The name ''acbbbcc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(33,26): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(35,28): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(37,30): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(39,32): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(41,34): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(43,36): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(45,38): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(47,40): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(49,43): error CS0103: The name ''abbbbccc'' does not exist
    in the current context

    /tmp/tmpl378y5pu.cs(28,23): error CS0165: Use of unassigned local variable ''acbbbc''

    /tmp/tmpl378y5pu.cs(29,23): error CS0165: Use of unassigned local variable ''abbbbc''

    /tmp/tmpl378y5pu.cs(31,24): error CS0165: Use of unassigned local variable ''abbbbcc''

    /tmp/tmpl378y5pu.cs(32,25): error CS0165: Use of unassigned local variable ''acbbbccc''

    /tmp/tmpl378y5pu.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abbc = ab - bc;\n        long acab = ac - ab;\n        long abcab = ab - ab;\n\
    \        long acabc = ac - abc;\n        long abcabc = ab - abc;\n        long\
    \ acabbc = ac - abbc;\n        long abcabbc = ab - abbc;\n        long acabcab\
    \ = ac - abcab;\n        long abcabcab = ab - abcab;\n        long acabcabc =\
    \ ac - abcabc;\n        long abcabcabc = ab - abcabc;\n        long acabcabbc\
    \ = ac - abcabbc;\n        long abcabcabbc = ab - abcabbc;\n        long acabcabcab\
    \ = ac - abcabcab;\n        long abcabcabcab = ab - abcabcab;\n        long acabcabcabc\
    \ = ac - abcabcabc;\n        long abcabcabcabc = ab - abcabcabc;\n        long\
    \ acabcabcabbc = ac - abcabcabbc;\n        long abcabcabcabbc = ab - abcabcabbc;\n\
    \        long acabcabcabcab = ac - abcabcabcab;\n        long abcabcabcabcab =\
    \ ab - abcabcabcab;\n        long acabcabcabcabc = ac - abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab - abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ - abcabcabcabbc;\n        long abcabcabcabcabbc = ab - abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac - abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab - abcabcabcabcab;\n        long acabcabcabcabcabc = ac - abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab - abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac - abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab - abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac - abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5wz6wc1e.cs(56,13): error CS1001: Identifier expected

    /tmp/tmp5wz6wc1e.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = acb + abc;\n        long abcc = abc - abc;\n        long abccc = abcc\
    \ * abcc;\n        long abcccb = abccc * abcc;\n        long abcccbc = abcccb\
    \ * abcc;\n        long abcccbcb = abcccbc * abcc;\n        long abcccbcc = abcccbc\
    \ * abcc;\n        long abcccbccb = abcccbcc * abcc;\n        long abcccbccbc\
    \ = abcccbccb * abcc;\n        long abcccbccbcc = abcccbccb * abcc;\n        long\
    \ abcccbccbccb = abcccbccbcc * abcc;\n        long abcccbccbccbc = abcccbccbccb\
    \ * abcc;\n        long abcccbccbccbcc = abcccbccbccb * abcc;\n        long abcccbccbccbccb\
    \ = abcccbccbccb * abcc;\n        long abcccbccbccbccbc = abcccbccbccbcc * abcc;\n\
    \        long abcccbccbccbccbcc = abcccbccbccbccb * abcc;\n        long abcccbccbccbccbccb\
    \ = abcccbccbccbccb * abcc;\n        long abcccbccbccbccbccbc = abcccbccbccbccbcc\
    \ * abcc;\n        long abcccbccbccbccbccbc = abcccbccbccbccbcc * abcc;\n    \
    \    long abcccbccbccbccbccbcc = abcccbccbccbccbccb * abcc;\n        long abcccbccbccbccbccbcc\
    \ = abcccbccbccbccbccb * abcc;\n        long abcccbccbccbccbccbccb = abcccbccbccbccbccb\
    \ * abcc;\n        long abcccbccbccb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoe3f8f50.cs(46,26): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ Math.Sqrt(a * a + b * b);\n        long g = Math.Sqrt(a * a - b * b + c * c);\n\
    \        long h = Math.Sqrt(a * a + b * b - c * c);\n        long i = Math.Sqrt(a\
    \ * a - b * b + c * c - d * d);\n        long j = Math.Sqrt(a * a + b * b + c\
    \ * c - d * d);\n        long k = Math.Sqrt(a * a - b * b - c * c + d * d);\n\
    \        long l = Math.Sqrt(a * a + b * b - c * c + d * d);\n        long m =\
    \ Math.Sqrt(a * a - b * b + c * c + d * d);\n        long n = Math.Sqrt(a * a\
    \ + b * b + c * c - d * d);\n        long o = Math.Sqrt(a * a - b * b - c * c\
    \ - d * d);\n        long p = Math.Sqrt(a * a + b * b + c * c + d * d);\n    \
    \    long q = Math.Sqrt(a * a - b * b + c * c + d * d);\n        long r = Math.Sqrt(a\
    \ * a + b * b - c * c - d * d);\n        long s = Math.Sqrt(a * a - b * b + c\
    \ * c + d * d);\n        long t = Math.Sqrt(a * a + b * b + c * c - d * d);\n\
    \        long u = Math.Sqrt(a * a - b * b - c * c - d * d);\n        long v =\
    \ Math.Sqrt(a * a + b * b + c * c + d * d);\n        long w = Math.Sqrt(a * a\
    \ - b * b + c * c + d * d);\n        long x = Math.Sqrt(a * a + b * b - c * c\
    \ - d * d);\n        long y = Math.Sqrt(a * a + b * b + c * c + d * d);\n    \
    \    long z = Math.Sqrt(a * a - b * b + c * c + d * d);\n        long A = Math.Sqrt(a\
    \ * a + b * b + c * c - d * d);\n        long B = Math.Sqrt(a * a - b * b + c\
    \ * c + d * d);\n        long C = Math.Sqrt(a * a - b * b - c * c + d * d);\n\
    \        long D = Math.Sqrt(a * a + b * b - c * c - d * d);\n        long E =\
    \ Math.Sqrt(a * a + b * b + c * c + d * \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe5yftill.cs(49,55): error CS1525: Invalid expression term ''}''

    /tmp/tmpe5yftill.cs(49,55): error CS1026: ) expected

    /tmp/tmpe5yftill.cs(49,55): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 > t2)\n            return false;\n \
    \       long t3 = t1 - t2;\n        if (t3 > 0)\n            return false;\n \
    \       long t4 = t1 + t2;\n        if (t4 > 0)\n            return false;\n \
    \       return true;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <606744e608374daea34d0ad81b5b776a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <606744e608374daea34d0ad81b5b776a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbb * bc;\n     \
    \   long abbbbbc = abbbbc * bc;\n        long acbbbcc = acbbbc * bc;\n       \
    \ long abbbbcc = abbbbc * bc;\n        long acbbbcbc = acbbb * bc;\n        long\
    \ abbbbcbc = abbbbc * bc;\n        long acbbbcbcb = acbbb * bc;\n        long\
    \ abbbbcbcb = abbbbc * bc;\n        long acbbbcbcbc = acbbb * bc;\n        long\
    \ abbbbcbcbc = abbbbc * bc;\n        long acbbbcbcbcb = acbbb * bc;\n        long\
    \ abbbbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbc = acbbb * bc;\n      \
    \  long abbbbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcb = acbbb * bc;\n\
    \        long abbbbcbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbcbc = acbbb\
    \ * bc;\n        long abbbbcbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcb = abbbbc * bc;\n        long acbbbcbcbcbcbcbc\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcbc = abbbbc * bc;\n        long acbbbcbcbcbcbcbcbc\
    \ = acbbb * bc;\n        long abbbbcbcbcbcbcbcbc = abbbbc * bc;\n        long\
    \ acbbbcbcbcbcbcbcbcb = acbbb * bc\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprixifgdq.cs(54,46): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 == t2) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b940e355ad524c8687d4442d08aa8191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b940e355ad524c8687d4442d08aa8191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ * a + b * b - 4 * a * c);\n        long g = (long) Math.Sqrt(a * a + b * b +\
    \ 4 * a * c);\n        long h = (long) Math.Sqrt(a * a + b * b + 4 * a * c + 4\
    \ * a * b * b);\n        long i = Math.Sqrt(a * b + b * c);\n        long j =\
    \ (long) Math.Sqrt(a * b + b * c + b * c * c);\n        long k = (long) Math.Sqrt(a\
    \ * b + b * c + b * c * c + b * c * c * c);\n        long l = (long) Math.Sqrt(a\
    \ * b + b * c + b * c * c + b * c * c * c + b * c * c * c * c);\n        long\
    \ m = Math.Sqrt(a * b + b * c + b * c * c + b * c * c * c + b * c * c * c * c\
    \ + b * c * c * c * c * c);\n        long n = Math.Sqrt(a * b + b * c + b * c\
    \ * c + b * c * c * c + b * c * c * c * c + b * c * c * c * c * c + b * c * c\
    \ * c * c * c * c);\n        long o = (long) Math.Sqrt(a * b + b * c + b * c *\
    \ c + b * c * c * c + b * c * c * c * c + b * c * c * c * c * c + b * c * c *\
    \ c * c * c * c + b * c * c * c * c * c * c * c);\n        long p = (long) Math.Sqrt(a\
    \ * b + b * c + b * c * c + b * c * c * c + b * c * c * c * c + b * c * c * c\
    \ * c * c + b * c * c * c * c * c * c + b * c * c * c * c * c * c * c + b * c\
    \ * c * c * c * c * c * c * c);\n        long q = (long) Math.Sqrt(a * b + b *\
    \ c + b * c * c + b * c * c * c + b * c * c * c * c + \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp522i4afq.cs(34,98): error CS1525: Invalid expression term ''}''

    /tmp/tmp522i4afq.cs(34,98): error CS1026: ) expected

    /tmp/tmp522i4afq.cs(34,98): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ side7 = Math.Sqrt(a * a + c * c + b * b);\n        long side8 = Math.Sqrt(c\
    \ * c + a * a + b * b);\n        long side9 = Math.Sqrt(c * c + b * b + a * a);\n\
    \        long side10 = Math.Sqrt(a * b + c * c + b * b);\n        long side11\
    \ = Math.Sqrt(a * c + b * b + c * c);\n        long side12 = Math.Sqrt(b * b +\
    \ a * a + c * c);\n        long side13 = Math.Sqrt(b * b + c * c + a * a);\n \
    \       long side14 = Math.Sqrt(c * c + a * b + b * b);\n        long side15 =\
    \ Math.Sqrt(c * c + b * b + a * a);\n        long side16 = Math.Sqrt(a * a + b\
    \ * b + c * c);\n        long side17 = Math.Sqrt(a * a + c * c + b * b);\n   \
    \     long side18 = Math.Sqrt(c * c + a * b + b * b);\n        long side19 = Math.Sqrt(c\
    \ * c + b * b + a * a);\n        long side20 = Math.Sqrt(a * b + c * c + b * b);\n\
    \        long side21 = Math.Sqrt(a * c + b * b + c * c);\n        long side22\
    \ = Math.Sqrt(b * b + a * a + c * c);\n        long side23 = Math.Sqrt(b * b +\
    \ c * c + a * a);\n        long side24 = Math.Sqrt(c * c + a * b + b * b);\n \
    \       long side25 = Math.Sqrt(c * c + b * b + a * a);\n        long side26 =\
    \ Math.Sqrt(a * a + b * b + c * c);\n        long side27 = Math.Sqrt(a * a + c\
    \ * c + b * b);\n        long side28 = Math.Sqrt(c * c + a * b + b * b);\n   \
    \     long side29 = Math.Sqrt(c * c + b * b + a * a);\n        long side30\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9uthbz6_.cs(48,20): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcc = abc * abc;\n        long acbc = acb * acb;\n        long acbcc = acbc\
    \ * acbc;\n        long abccc = abcc + acbcc + acbcc;\n        long acbccc = acbcc\
    \ * acbcc;\n        long abcccb = abccc + acbccc;\n        long acbcccb = acbccc\
    \ * acbccc;\n        long abcccbc = abcccb * abcccb;\n        long acbcccbc =\
    \ acbcccb * acbcccb;\n        long abcccbcb = abcccbc + acbcccbc;\n        long\
    \ acbcccbcb = acbcccbc * acbcccbc;\n        long abcccbcbb = abcccbcb * abcccbcb;\n\
    \        long acbcccbcbb = acbcccbcb * acbcccbcb;\n        long abcccbcbbc = abcccbcbb\
    \ * abcccbcbb;\n        long acbcccbcbbc = acbcccbcbb * acbcccbcbb;\n        long\
    \ abcccbcbbcb = abcccbcbbc * abcccbcbbc;\n        long acbcccbcbbcb = acbcccbcbbc\
    \ * acbcccbcbbc;\n        long abcccbcbbcbc = abcccbcbbcb * abcccbcbbcb;\n   \
    \     long acbcccbcbbcbc = acbcccbcbbcb * acbcccbcbbcb;\n        long abcccbcbbcbcb\
    \ = abcccbcbbcbc * abcccbcbbcbc;\n        long acbcccbcbbcbcb = acbcccbcbbcbc\
    \ * acbcccbcbbcbc;\n        long abcccbcbbcbcbc = abcccbcbbcbcb * abcccbcbbcbcb;\n\
    \        long acbcccbcbbcbcbc = acbcccbcbbcbcb * acbcccbcbbcbcb;\n        long\
    \ abcccbcbbcbcbc\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl8up4jpe.cs(47,28): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7tdxxlg.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) (a * a + b *\
    \ b - e * c);\n        long g = Math.Sqrt(f);\n        long h = (long) (a * a\
    \ - b * b + e * c);\n        long i = Math.Sqrt(h);\n        return ((f < g) &&\
    \ (f < i));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwk38ahrv.cs(22,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpwk38ahrv.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpwk38ahrv.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbb = acbcabcb\
    \ * bc;\n        long acbcabcbbc = acbcabcbb * bc;\n        long acbcabcbbcd =\
    \ acbcabcbbc * bc;\n        long acbcabcbbcde = acbcabcbbc * bc;\n        long\
    \ acbcabcbbcdef = acbcabcbbc * bc;\n        long acbcabcbbcdefg = acbcabcbbc *\
    \ bc;\n        long acbcabcbbcdefgh = acbcabcbbc * bc;\n        long acbcabcbbcdefghi\
    \ = acbcabcbbc * bc;\n        long acbcabcbbcdefghij = acbcabcbbc * bc;\n    \
    \    long acbcabcbbcdefghijk = acbcabcbbc * bc;\n        long acbcabcbbcdefghijkl\
    \ = acbcabcbbc * bc;\n        long acbcabcbbcdefghijkll = acbcabcbbc * bc;\n \
    \       long acbcabcbbcdefghijkllm = acbcabcbbc * bc;\n        long acbcabcbbcdefghijkllmm\
    \ = acbcabcbbc * bc;\n        long acbcabcbbcdefghijkllmmn = acbcabcbbc * bc;\n\
    \        long acbcabcbbcdefghijkllmnn = acbcabcbbc * bc;\n        long acbcabcbbcdefghijkllmnnn\
    \ = acbcabcbbc * bc;\n        long acbcabcbbcdefghijkllmnnnn = acbcabcbbc * bc;\n\
    \        long acbcabcbbcdefghijkllmnnnno = acbcabcbbc * bc;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpahf3_hxg.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc\
    \ * abc;\n        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb\
    \ * bc;\n        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc =\
    \ acbcabcbcb * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long\
    \ acbcabcbcbcbc = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkthi0sdh.cs(46,47): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d == 0) {\n         \
    \   return false;\n        }\n        long root = (long)Math.Sqrt(d);\n      \
    \  long t1 = (-b + root) / 2;\n        long t2 = (-b - root) / 2;\n        long\
    \ t3 = Math.Sqrt(Math.Pow(b, 2) - 4 * a * c);\n        if (t1 == t2 && t2 == t3)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnrp0bhyg.cs(26,19): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * a);\n        long side3 = Math.Sqrt(c * c + b * b); \n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b);\n        long side7 =\
    \ Math.Sqrt(c * c + a * a);\n        long side8 = Math.Sqrt(c * c + b * b);\n\
    \        long side9 = Math.Sqrt(a * a + c * c);\n        long side10 = Math.Sqrt(b\
    \ * b + c * c);\n        long side11 = Math.Sqrt(a * a + b * b);\n        long\
    \ side12 = Math.Sqrt(c * c + a * a);\n        long side13 = Math.Sqrt(c * c +\
    \ b * b);\n        long side14 = Math.Sqrt(a * a + c * c);\n        long side15\
    \ = Math.Sqrt(b * b + c * c);\n        long side16 = Math.Sqrt(a * a + b * b);\n\
    \        long side17 = Math.Sqrt(c * c + a * a);\n        long side18 = Math.Sqrt(c\
    \ * c + b * b);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(c * c + a * a);\n        long side23\
    \ = Math.Sqrt(c * c + b * b);\n        long side24 = Math.Sqrt(a * a + c * c);\n\
    \        long side25 = Math.Sqrt(b * b + c * c);\n        long side26 = Math.Sqrt(a\
    \ * a + b * b);\n        long side27 = Math.Sqrt(c * c + a * a);\n        long\
    \ side28 = Math.Sqrt(c * c + b * b);\n        long side29 = Math.Sqrt(a * a +\
    \ c * c);\n        long side30 = Math.Sqrt(b * b + c * c);\n        long side31\
    \ = Math.Sqrt(a * a + b * b);\n        long side32 = Math.Sqrt(c * c + a * a);\n\
    \        long side33 = Math.Sqrt(c * c + b * b);\n        long side34 = Math.Sqrt(a\
    \ * a + c * c);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpntp1xuuj.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpntp1xuuj.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ abbc = ab * bc;\n        long acbc = ac * bc;\n        long abcb = abc * bc;\n\
    \        long abbcc = abbc * bc;\n        long acbcb = acb * bc;\n        long\
    \ abcbb = abc * bc;\n        long abbcbc = abbc * bc;\n        long acbcbb = acb\
    \ * bc;\n        long abcbbc = abc * bc;\n        long abbcbcd = abbc * bc;\n\
    \        long acbcbcb = acb * bc;\n        long abcbbcd = abc * bc;\n        long\
    \ abbcbcdb = abbc * bc;\n        long acbcbcbb = acb * bc;\n        long abcbbcdb\
    \ = abc * bc;\n        long abbcbcdbb = abbc * bc;\n        long acbcbcbbc = acb\
    \ * bc;\n        long abcbbcdbb = abc * bc;\n        long abbcbcdbbc = abbc *\
    \ bc;\n        long acbcbcbbcd = acb * bc;\n        long abcbbcdbbc = abc * bc;\n\
    \        long abbcbcdbbcd = abbc * bc;\n        long acbcbcbbcdb = acb * bc;\n\
    \        long abcbbcdbbcd = abc * bc;\n        long abbcbcdbbcbd = abbc * bc;\n\
    \        long acbcbcbbcbc = acb * bc;\n        long abcbbcdbbcbc = abc * bc;\n\
    \        long abbcbcdbbcbcd = abbc * bc;\n        long acbcbcbbcbcb = acb * bc;\n\
    \        long abcbbcdbbcbcb = abc * bc;\n        long abbcbcdbbcbcbd = abbc *\
    \ bc;\n        long acbcbcbbcbcbc = acb * bc;\n        long abcbbcdbbcbcbc = abc\
    \ * bc;\n        long abbcbcdbbcbcbcd = abbc * bc;\n        long acbcbcbbcbcbcb\
    \ = acb * bc\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkvvc6zpk.cs(58,39): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcd = abcbc * bc;\n        long abcbcde = abcbcd * bc;\n\
    \        long abcbcdef = abcbcde * bc;\n        long abcbcdefg = abcbcdef * bc;\n\
    \        long abcbcdefgh = abcbcdefg * bc;\n        long abcbcdefghi = abcbcdefgh\
    \ * bc;\n        long abcbcdefghij = abcbcdefghi * bc;\n        long abcbcdefghijk\
    \ = abcbcdefghij * bc;\n        long abcbcdefghijkl = abcbcdefghijk * bc;\n  \
    \      long abcbcdefghijklm = abcbcdefghijkl * bc;\n        long abcbcdefghijklmn\
    \ = abcbcdefghijklm * bc;\n        long abcbcdefghijklmnx = abcbcdefghijklmn *\
    \ bc;\n        long abcbcdefghijklmno = abcbcdefghijklmnx * bc;\n        long\
    \ abcbcdefghijklmnop = abcbcdefghijklmno * bc;\n        long abcbcdefghijklmnopr\
    \ = abcbcdefghijklmnop * bc;\n        long abcbcdefghijklmnoprs = abcbcdefghijklmnopr\
    \ * bc;\n        long abcbcdefghijklmnoprst = abcbcdefghijklmnoprs * bc;\n   \
    \     long abcbcdefghijklmnoprstu = abcbcdefghijklmnoprst * bc;\n        long\
    \ abcbcdefghijklmnoprstv = abcbcdefghijklmnoprstu * bc;\n        long abcbcdefghijklmnoprstuv\
    \ = abcbcdefghijklmnoprstv * bc;\n        long abcbc\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkpa09d0q.cs(47,19): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 >= 0 &&\
    \ t1 <= 1)\n            return true;\n        if (t2 >= 0 && t2 <= 1)\n      \
    \      return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72e4b9eedb6e42a78ad827ae316709a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72e4b9eedb6e42a78ad827ae316709a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b - c * c);\n        long side2\
    \ = Math.Sqrt(a * a - b * b + c * c);\n        long side3 = Math.Sqrt(a * a -\
    \ b * b - c * c);\n        return (side1 == side2 && side2 == side3);\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpujf86rc3.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpujf86rc3.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpujf86rc3.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794128
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        return t1 == t2;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df6923f3531a49e3aa1339e2c5d2615a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df6923f3531a49e3aa1339e2c5d2615a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfcwlljad.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long abcab = abc *\
    \ acb;\n        long acbcab = acb * acb;\n        long abcabc = abcab * bc;\n\
    \        long acbcabc = acbcab * bc;\n        long abcabcb = abcabc * bc;\n  \
    \      long acbcabcb = acbcabc * bc;\n        long abcabcba = abcabc * acb;\n\
    \        long acbcabcba = acbcabc * acb;\n        long abcabcbac = abcabcba *\
    \ bc;\n        long acbcabcbac = acbcabcba * bc;\n        long abcabcbacb = abcabcba\
    \ * acb;\n        long acbcabcbacb = acbcabcba * acb;\n        long abcabcbacba\
    \ = abcabcba * acb;\n        long acbcabcbacba = acbcabcba * acb;\n        long\
    \ abcabcbacbac = abcabcbacba * bc;\n        long acbcabcbacbac = acbcabcbacba\
    \ * bc;\n        long abcabcbacbacb = abcabcbacba * acb;\n        long acbcabcbacbacb\
    \ = acbcabcbacba * acb;\n        long abcabcbacbacba = abcabcbacba * acb;\n  \
    \      long acbcabcbacbacba = acbcabcbacba * acb;\n        long abcabcbacbacbac\
    \ = abcabcbacbacba * bc;\n        long acbcabcbacbacbac = acbcabcbacbacba * bc;\n\
    \        long abcabcbacbacbacb = abcabcbacbacba * acb;\n        long acbcabcbacbacbacb\
    \ = acbcabcbacbacba * acb;\n        long abcabcbacbacbacba = abcabcbacbacba *\
    \ acb;\n        long acbcabcbacbacbacba = acbcabcbacbacba * acb;\n        long\
    \ abcabcbacbacbacbac = abcabcbacbacbacba * \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9nez6tqp.cs(52,54): error CS1525: Invalid expression term ''}''

    /tmp/tmp9nez6tqp.cs(52,54): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long) Math.Sqrt(d);\n        long x = (long) (-b\
    \ + root) / (2 * a);\n        long y = (long) (-b - root) / (2 * a);\n       \
    \ return (x == y);\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83b4db5f264e4d7ebbbdf70f1bcf2426>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83b4db5f264e4d7ebbbdf70f1bcf2426>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ side7 = Math.Sqrt(a * a + c * c + b * b);\n        long side8 = Math.Sqrt(c\
    \ * c + a * a + b * b);\n        long side9 = Math.Sqrt(c * c + b * b + a * a);\n\
    \        long side10 = Math.Sqrt(a * b + c * c + b * b);\n        long side11\
    \ = Math.Sqrt(a * b + c * c + a * a);\n        long side12 = Math.Sqrt(b * b +\
    \ a * a + c * c);\n        long side13 = Math.Sqrt(b * b + c * c + a * a);\n \
    \       long side14 = Math.Sqrt(b * b + a * a + c * c + a * a);\n        long\
    \ side15 = Math.Sqrt(c * c + a * b + b * b);\n        long side16 = Math.Sqrt(c\
    \ * c + b * b + a * b);\n        long side17 = Math.Sqrt(a * a + b * b + c * c\
    \ + a * a);\n        long side18 = Math.Sqrt(a * a + c * c + b * b + a * a);\n\
    \        long side19 = Math.Sqrt(b * b + c * c + a * a + a * a);\n        long\
    \ side20 = Math.Sqrt(a * a + b * b + c * c + b * b + a * a);\n        long side21\
    \ = Math.Sqrt(a * a + c * c + b * b + a * a + a * a);\n        long side22 = Math.Sqrt(b\
    \ * b + c * c + a * a + a * a + a * a);\n        long side23 = Math.Sqrt(a * a\
    \ + b * b + c * c + b * b + a * a + a * a + a * a);\n        long side24 = Math.Sqrt(a\
    \ * a + c * c + b * b + a * a + a * a + a * a + a * a + a * a + a * a + a * a\
    \ + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a * a + a\
    \ * a + a * \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3zr79098.cs(42,196): error CS1525: Invalid expression term ''}''

    /tmp/tmp3zr79098.cs(42,196): error CS1026: ) expected

    /tmp/tmp3zr79098.cs(42,196): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = a + e * Math.Sqrt(a + e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        long i = Math.Sqrt(f\
    \ * f + g * g);\n        long j = Math.Sqrt(f * f + h * h);\n        long k =\
    \ Math.Sqrt(g * g + h * h);\n        long l = Math.Sqrt(f * f + g * g + h * h);\n\
    \        return i == 0 && j == 0 && k == 0 && l == 0;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj35c96mw.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj35c96mw.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj35c96mw.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj35c96mw.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj35c96mw.cs(27,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj35c96mw.cs(28,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj35c96mw.cs(29,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj35c96mw.cs(30,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b - c * c);\n        long side2\
    \ = Math.Sqrt(a * a + c * c - b * b); \n        long side3 = Math.Sqrt(c * c +\
    \ a * a - b * b); \n        if (side1 == side2 && side2 == side3) {\n        \
    \    return true;\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvz37f21j.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvz37f21j.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpvz37f21j.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcabc = acbc * abc;\n        long acbcabcb\
    \ = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n        long acbcabcbcb\
    \ = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb * bc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * bc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n    \
    \    long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcb\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfcwlljad.cs(45,52): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n\
    \            return true;\n        if (t1 < 0)\n            return false;\n  \
    \      if (t2 < 0)\n            return false;\n        if (t1 == t2)\n       \
    \     return true;\n        if (t1 > t2)\n            return false;\n        if\
    \ (t1 < t2)\n            return true;\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4a394fb09704abc8174de644db782be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4a394fb09704abc8174de644db782be>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long e = Math.Sqrt(d);\n            long f = (b + e * c) / a;\n           \
    \ long g = (b - e * c) / a;\n            if (f > g) {\n                return\
    \ true;\n            }\n        }\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4v4sqs80.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        d = Math.Sqrt(d);\n        long x = (-b + d) / (2 * a);\n  \
    \      long y = (-b - d) / (2 * a);\n        return Math.Abs(x) < Math.Abs(y)\
    \ && Math.Abs(x) > 0;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt09r3jum.cs(22,13): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side5 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side6 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side9 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side10 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side11 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side12 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side15 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side17 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side18 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side21 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side22 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side23 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side24 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpag3fp2bw.cs(44,13): error CS1001: Identifier expected

    /tmp/tmpag3fp2bw.cs(44,13): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        if (t1 < 0 || t2 < 0 || t1 > t2) {\n            return false;\n     \
    \   }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2333697f5bf74f9d934b9330b80a1638>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2333697f5bf74f9d934b9330b80a1638>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbbc = acbb *\
    \ bc;\n        long abbbc = abbb * bc;\n        long acbbbc = acbbbc * bc;\n \
    \       long abbbbc = abbbbc * bc;\n        long acbbbbc = acbbbcc * bc;\n   \
    \     long abbbbcc = abbbbcc * bc;\n        long acbbbcbc = acbbbcc * bc;\n  \
    \      long abbbbcbc = abbbbcc * bc;\n        long acbbbcbcb = acbbbcc * bc;\n\
    \        long abbbbcbcb = abbbbcc * bc;\n        long acbbbcbcbc = acbbbcc * bc;\n\
    \        long abbbbcbcbc = abbbbcc * bc;\n        long acbbbcbcbcb = acbbbcc *\
    \ bc;\n        long abbbbcbcbcb = abbbbcc * bc;\n        long acbbbcbcbcbc = acbbbcc\
    \ * bc;\n        long abbbbcbcbcbc = abbbbcc * bc;\n        long acbbbcbcbcbcb\
    \ = acbbbcc * bc;\n        long abbbbcbcbcbcb = abbbbcc * bc;\n        long acbbbcbcbcbcbc\
    \ = acbbbcc * bc;\n        long abbbbcbcbcbcbc = abbbbcc * bc;\n        long acbbbcbcbcbcbcb\
    \ = acbbbcc * bc;\n        long abbbbcbcbcbcbcb = abbbbcc * bc;\n        long\
    \ acbbbcbcbcbcbcbc = acbbbcc * bc;\n        long abbbbcbcbcbcbcbc = abbbbcc *\
    \ bc;\n        long acbbbcbcbcbcbcbcbc = acbbbcc * bc;\n        long abbbbcbcbcbcbcbcbc\
    \ = abbbbcc * bc;\n        long acbbbcbcbcbcbcbcbcb = acbbbcc * bc;\n        long\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdd8zdk15.cs(53,13): error CS1001: Identifier expected

    /tmp/tmpdd8zdk15.cs(53,13): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abcb = abc * bc;\n        long acbc = acb * bc;\n        long acbca = acbc *\
    \ abc;\n        long acbcab = acbca * abc;\n        long acbcabc = acbcab * abc;\n\
    \        long acbcabcb = acbcabc * abc;\n        long acbcabcbc = acbcabcb * abc;\n\
    \        long acbcabcbcb = acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpewgfm86_.cs(37,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpewgfm86_.cs(40,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpewgfm86_.cs(42,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpewgfm86_.cs(43,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpewgfm86_.cs(45,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpewgfm86_.cs(46,37): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbcb''

    /tmp/tmpewgfm86_.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7tdxxlg.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwy2jmzea.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpwy2jmzea.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e *\
    \ 0.5);\n        long h = a - e * Math.Sqrt(a - e * 0.5);\n        long i = Math.Sqrt(a\
    \ * a + b * b + c * c);\n        long j = Math.Sqrt(a * a + c * c + b * b + e\
    \ * e);\n        long k = Math.Sqrt(c * c + a * a + b * b + e * e);\n        long\
    \ l = Math.Sqrt(a * a + b * b + c * c);\n        long m = Math.Sqrt(a * a + c\
    \ * c + b * b + e * e);\n        long n = Math.Sqrt(c * c + a * a + b * b + e\
    \ * e);\n        long o = Math.Sqrt(a * a + b * b + c * c);\n        long p =\
    \ Math.Sqrt(a * a + c * c + b * b + e * e);\n        long q = Math.Sqrt(c * c\
    \ + a * a + b * b + e * e);\n        long r = Math.Sqrt(a * a + b * b + c * c);\n\
    \        long s = Math.Sqrt(a * a + c * c + b * b + e * e);\n        long t =\
    \ Math.Sqrt(c * c + a * a + b * b + e * e);\n        long u = Math.Sqrt(a * a\
    \ + b * b + c * c);\n        long v = Math.Sqrt(a * a + c * c + b * b + e * e);\n\
    \        long w = Math.Sqrt(c * c + a * a + b * b + e * e);\n        long x =\
    \ Math.Sqrt(a * a + b * b + c * c);\n        long y = Math.Sqrt(a * a + c * c\
    \ + b * b + e * e);\n        long z = Math.Sqrt(c * c + a * a + b * b + e * e);\n\
    \        long A = Math.Sqrt(a * a + b * b + c * c);\n        long B = Math.Sqrt(a\
    \ * a + c * c + b * b + e * e);\n        long C = Math.Sqrt(c * c + a * a + b\
    \ * b + e * e);\n        long D = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ E = Math.Sqrt(a * a + c * c + b * b + e * e);\n\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L),\
    \ (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L),\
    \ (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L),\
    \ (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnhc4rpjg.cs(23,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(24,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(25,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(26,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(27,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(28,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(29,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(30,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(31,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(32,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(33,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(34,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpnhc4rpjg.cs(35,18): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794128
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d > 0) {\n          \
    \  long root = (long)Math.Sqrt(d);\n            long x = (long)((-b + root) /\
    \ (2 * a));\n            long y = (long)((-b - root) / (2 * a));\n           \
    \ if (Math.Abs(x - b) < Math.Abs(y - b)) {\n                return true;\n   \
    \         }\n        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fe853ec76994bd4892122bd16c50436>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2fe853ec76994bd4892122bd16c50436>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794129
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpplimpw1k.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long acbcbc = acbcb\
    \ * bc;\n        long abcbc = abcb * bc;\n        long acbcbcb = acbcbcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long acbcbcbc = acbcbcbc * bc;\n\
    \        long abcbcbc = abcbcbc * bc;\n        long acbcbcbcb = acbcbcbcb * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long acbcbcbcbc = acbcbcbcbc\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long acbcbcbcbcb =\
    \ acbcbcbcbcb * bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcbc = acbcbcbcbcbc * bc;\n        long abcbcbcbcbc = abcbcbcbcbc *\
    \ bc;\n        long acbcbcbcbcbcb = acbcbcbcbcbcb * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long acbcbcbcbcbcbc = acbcbcbcbcbcbc * bc;\n \
    \       long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcb\
    \ = acbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long acbcbcbcbcbcbcbc = acbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long acbcbcbcbcbcbcbcb = acbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcbcbcbcb\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj7tdxxlg.cs(50,25): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abac = ab * ac;\n        long acab = ac * ab;\n        long abcab = ab * abc;\n\
    \        long acbcab = ac * bc;\n        long acabcab = ac * abc;\n        long\
    \ acbcabcb = ac * b * c;\n        long acabcabcb = ac * ab * c;\n        long\
    \ acbcabcab = ac * b * c * ab;\n        long acabcabcab = ac * ab * c * ab;\n\
    \        long acbcabcabc = ac * b * c * ab * c;\n        long acabcabcabc = ac\
    \ * ab * c * ab * c;\n        long acbcabcabcb = ac * b * c * ab * c * b;\n  \
    \      long acabcabcabcb = ac * ab * c * ab * c * b;\n        long acbcabcabcab\
    \ = ac * b * c * ab * c * ab;\n        long acabcabcabcab = ac * ab * c * ab *\
    \ c * ab;\n        long acbcabcabcabc = ac * b * c * ab * c * ab * c;\n      \
    \  long acabcabcabcabc = ac * ab * c * ab * c * ab * c;\n        long acbcabcabcabcb\
    \ = ac * b * c * ab * c * ab * c * b;\n        long acabcabcabcabcb = ac * ab\
    \ * c * ab * c * ab * c * b;\n        long acbcabcabcabcab = ac * b * c * ab *\
    \ c * ab * c * ab;\n        long acabcabcabcabcab = ac * ab * c * ab * c * ab\
    \ * c * ab;\n        long acbcabcabcabcabc = ac * b * c * ab * c * ab * c * ab\
    \ * c;\n        long acabcabcabcabcabc = ac * ab * c * ab * c * ab * c * ab *\
    \ c;\n        long acbcabcabcabcabcab = ac * b * c * ab * c * ab * c * ab * c\
    \ * ab;\n        long acabcabcabcabcab = ac * ab * c * ab * c * ab * c * ab *\
    \ c\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr_4jmr5x.cs(48,71): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab + bc;\n        long acb = ac - bc;\n        long\
    \ abcb = abc + bc;\n        long abcab = abc - abc;\n        long acbcab = acb\
    \ - abc;\n        long acbcabc = acbcab + abc;\n        long acbcabcb = acbcabc\
    \ - abc;\n        long acbcabcbc = acbcabcb + abc;\n        long acbcabcbcb =\
    \ acbcabcbc - abc;\n        long acbcabcbcbc = acbcabcbcb + abc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc - abc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ + abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc - abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb + abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc - abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb + abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbc - abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcb\
    \ + abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc - abc;\n \
    \       long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcb + abc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc - abc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbcb - abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcb\
    \ + abc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcbc - abc;\n\
    \        long acbcabcbcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcbcb - \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplg4mdw0u.cs(46,67): error CS1525: Invalid expression term ''}''

    /tmp/tmplg4mdw0u.cs(46,67): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abac = ab * ac;\n        long acab = ac * ab;\n        long abcab = ab * abc;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * acbc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * acbcc;\n        long acabbcd\
    \ = ac * abbcd;\n        long abcabbcd = ab * acbcd;\n        long acabbcdd =\
    \ ac * abbcd;\n        long abcabbcdd = ab * acbcd;\n        long acabbcdde =\
    \ ac * abbcd;\n        long abcabbcdde = ab * acbcd;\n        long acabbcddef\
    \ = ac * abbcd;\n        long abcabbcddef = ab * acbcd;\n        long acabbcddefg\
    \ = ac * abbcd;\n        long abcabbcddefg = ab * acbcd;\n        long acabbcddefgh\
    \ = ac * abbcd;\n        long abcabbcddefgh = ab * acbcd;\n        long acabbcddefghi\
    \ = ac * abbcd;\n        long abcabbcddefghi = ab * acbcd;\n        long acabbcddefghij\
    \ = ac * abbcd;\n        long abcabbcddefghij = ab * acbcd;\n        long acabbcddefghijk\
    \ = ac * abbcd;\n        long abcabbcddefghijk = ab * acbcd;\n        long acabbcddefghijkl\
    \ = ac * abbcd;\n        long abcabbcddefghijkl = ab * acbcd;\n        long acabbcddefghijkll\
    \ = ac * abbcd;\n        long abcabbcddefghijkll = ab * acbcd;\n        long acabbcddefghijkllm\
    \ = ac * abbcd;\n        long abcabbcddefghijkllm = ab * acbcd;\n        long\
    \ acabbcddefgh\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsiecfd19.cs(55,26): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmte6g1e9.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpmte6g1e9.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long acbcab = acbc * abc;\n        long acbcabc =\
    \ acbcab * abc;\n        long acbcabcb = acbcabc * abc;\n        long acbcabcbc\
    \ = acbcabcb * abc;\n        long acbcabcbcb = acbcabcbc * abc;\n        long\
    \ acbcabcbcbc = acbcabcbcb * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n\
    \        long acbcabcbcbcbc = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb\
    \ = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n\
    \        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc * abc;\n       \
    \ long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcb\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L), (5L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) == (false));\n    Debug.Assert(RightAngleTriangle((10L),\
    \ (6L), (8L)) == (true));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (2L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((7L), (24L), (25L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((10L), (5L), (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L),\
    \ (12L), (13L)) == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L),\
    \ (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L), (55L), (73L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L)) == (false));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp98tedjqy.cs(46,24): error CS1002: ; expected

    '
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long e = Math.Sqrt(d);\n        long f = (long) Math.Sqrt(a\
    \ + b + c);\n        long g = (long) Math.Sqrt(a + b - c);\n        long h = (long)\
    \ Math.Sqrt(a + b + c - e);\n        long i = (long) Math.Sqrt(a + b - e + f);\n\
    \        long j = (long) Math.Sqrt(a + b + e - f);\n        long k = (long) Math.Sqrt(a\
    \ + b + e + g);\n        long l = (long) Math.Sqrt(a + b - e + g);\n        long\
    \ m = (long) Math.Sqrt(a + b - e + h);\n        long n = (long) Math.Sqrt(a +\
    \ b + e - h);\n        long o = (long) Math.Sqrt(a + b + e + i);\n        long\
    \ p = (long) Math.Sqrt(a + b - e + i);\n        long q = (long) Math.Sqrt(a +\
    \ b + e - i);\n        long r = (long) Math.Sqrt(a + b - e + j);\n        long\
    \ s = (long) Math.Sqrt(a + b + e - j);\n        long t = (long) Math.Sqrt(a +\
    \ b + e + k);\n        long u = (long) Math.Sqrt(a + b - e + k);\n        long\
    \ v = (long) Math.Sqrt(a + b - e + l);\n        long w = (long) Math.Sqrt(a +\
    \ b + e - l);\n        long x = (long) Math.Sqrt(a + b + e + m);\n        long\
    \ y = (long) Math.Sqrt(a + b - e + m);\n        long z = (long) Math.Sqrt(a +\
    \ b + e - m);\n        long A = (long) Math.Sqrt(a + b - e + n);\n        long\
    \ B = (long) Math.Sqrt(a + b + e - n);\n        long C = (long) Math.Sqrt(a +\
    \ b + e + o);\n        long D = (long) Math.Sqrt(a + b - e + o);\n        long\
    \ E = (long) Math.Sqrt(a + b + e - o);\n        long F = (long) Math.Sqrt(a +\
    \ b - e + p);\n        long G = (long) Math.Sqrt(a + b + e - p);\n        long\
    \ H\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq_zxakdg.cs(51,15): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b);\n        long side7 =\
    \ Math.Sqrt(a * a + c * c);\n        long side8 = Math.Sqrt(b * b + c * c);\n\
    \        long side9 = Math.Sqrt(a * a + b * b);\n        long side10 = Math.Sqrt(a\
    \ * a + c * c);\n        long side11 = Math.Sqrt(b * b + c * c);\n        long\
    \ side12 = Math.Sqrt(a * a + b * b);\n        long side13 = Math.Sqrt(a * a +\
    \ c * c);\n        long side14 = Math.Sqrt(b * b + c * c);\n        long side15\
    \ = Math.Sqrt(a * a + b * b);\n        long side16 = Math.Sqrt(a * a + c * c);\n\
    \        long side17 = Math.Sqrt(b * b + c * c);\n        long side18 = Math.Sqrt(a\
    \ * a + b * b);\n        long side19 = Math.Sqrt(a * a + c * c);\n        long\
    \ side20 = Math.Sqrt(b * b + c * c);\n        long side21 = Math.Sqrt(a * a +\
    \ b * b);\n        long side22 = Math.Sqrt(a * a + c * c);\n        long side23\
    \ = Math.Sqrt(b * b + c * c);\n        long side24 = Math.Sqrt(a * a + b * b);\n\
    \        long side25 = Math.Sqrt(a * a + c * c);\n        long side26 = Math.Sqrt(b\
    \ * b + c * c);\n        long side27 = Math.Sqrt(a * a + b * b);\n        long\
    \ side28 = Math.Sqrt(a * a + c * c);\n        long side29 = Math.Sqrt(b * b +\
    \ c * c);\n        long side30 = Math.Sqrt(a * a + b * b);\n        long side31\
    \ = Math.Sqrt(a * a + c * c);\n        long side32 = Math.Sqrt(b * b + c * c);\n\
    \        long side33 = Math.Sqrt(a * a + b * b);\n        long side34 = Math.Sqrt(a\
    \ * a + c * c);\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqybxtffw.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpqybxtffw.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794129
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb *\
    \ bc;\n        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n\
    \        long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc *\
    \ bc;\n        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc =\
    \ abcbcbcbcbc * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpplimpw1k.cs(47,58): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abcb = abc * bc;\n        long acbcab = acbc\
    \ * abc;\n        long acbcabc = acbcab * abc;\n        long acbcabcb = acbcabc\
    \ * abc;\n        long acbcabcbc = acbcabcb * abc;\n        long acbcabcbcb =\
    \ acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb * abc;\n        long\
    \ acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc = acbcabcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n        long acbcabcbcbcbcbc\
    \ = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n      \
    \  long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbc * abc;\n \
    \       long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * abc;\n        long\
    \ acbcabcbcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * abc;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmfkbc_n6.cs(38,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbc''
    is already defined in this scope

    /tmp/tmpmfkbc_n6.cs(42,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpmfkbc_n6.cs(43,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpmfkbc_n6.cs(44,14): error CS0128: A local variable or function named ''acbcabcbcbcbcbcbcbcb''
    is already defined in this scope

    /tmp/tmpmfkbc_n6.cs(44,37): error CS0841: Cannot use local variable ''acbcabcbcbcbcbcbcbcbc''
    before it is declared

    /tmp/tmpmfkbc_n6.cs(46,39): error CS0165: Use of unassigned local variable ''acbcabcbcbcbcbcbcbcbcb''

    /tmp/tmpmfkbc_n6.cs(18,24): error CS0161: ''Problem.RightAngleTriangle(long, long,
    long)'': not all code paths return a value

    '
  timestamp: 1659794129
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = a - c;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long abcab = ab * ab;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabbc = ac * abbc;\n        long abcabbc = ab * abbc;\n        long acabcab\
    \ = ac * abcab;\n        long abcabcab = ab * abcab;\n        long acabcabc =\
    \ ac * abcabc;\n        long abcabcabc = ab * abcabc;\n        long acabcabbc\
    \ = ac * abcabbc;\n        long abcabcabbc = ab * abcabbc;\n        long acabcabcab\
    \ = ac * abcabcab;\n        long abcabcabcab = ab * abcabcab;\n        long acabcabcabc\
    \ = ac * abcabcabc;\n        long abcabcabcabc = ab * abcabcabc;\n        long\
    \ acabcabcabbc = ac * abcabcabbc;\n        long abcabcabcabbc = ab * abcabcabbc;\n\
    \        long acabcabcabcab = ac * abcabcabcab;\n        long abcabcabcabcab =\
    \ ab * abcabcabcab;\n        long acabcabcabcabc = ac * abcabcabcabc;\n      \
    \  long abcabcabcabcabc = ab * abcabcabcabc;\n        long acabcabcabcabbc = ac\
    \ * abcabcabcabbc;\n        long abcabcabcabcabbc = ab * abcabcabcabbc;\n    \
    \    long acabcabcabcabcab = ac * abcabcabcabcab;\n        long abcabcabcabcabcab\
    \ = ab * abcabcabcabcab;\n        long acabcabcabcabcabc = ac * abcabcabcabcabc;\n\
    \        long abcabcabcabcabcabc = ab * abcabcabcabcabc;\n        long acabcabcabcabcabbc\
    \ = ac * abcabcabcabcabbc;\n        long abcabcabcabcabcabbc = ab * abcabcabcabcabbc;\n\
    \        long acabcabcabcabcabcab = ac * abcabcabcabcabcab;\n        long \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmte6g1e9.cs(56,13): error CS1001: Identifier expected

    /tmp/tmpmte6g1e9.cs(56,13): error CS1002: ; expected

    '
  timestamp: 1659794127
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long root = (long)Math.Sqrt(d);\n       \
    \ long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n\
    \        return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L), (4L),\
    \ (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L)) ==\
    \ (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc13e9a480c84fbb9f9553cafedfae39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dc13e9a480c84fbb9f9553cafedfae39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794129
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(a * a + b * b);\n        long side2 = Math.Sqrt(c\
    \ * c + a * b);\n        long side3 = Math.Sqrt(c * c + b * b);\n        long\
    \ side4 = Math.Sqrt(a * a + c * c);\n        long side5 = Math.Sqrt(b * b + c\
    \ * c);\n        long side6 = Math.Sqrt(a * a + b * b + c * c);\n        long\
    \ side7 = Math.Sqrt(a * a + c * c + b * b);\n        long side8 = Math.Sqrt(c\
    \ * c + a * a + b * b);\n        long side9 = Math.Sqrt(c * c + b * b + a * a);\n\
    \        long side10 = Math.Sqrt(a * b + c * c + a * a);\n        long side11\
    \ = Math.Sqrt(a * b + c * c + b * b);\n        long side12 = Math.Sqrt(a * b +\
    \ c * c + a * b + b * b);\n        long side13 = Math.Sqrt(a * b + c * c + b *\
    \ b + a * a);\n        long side14 = Math.Sqrt(a * b + c * c + a * b + b * b +\
    \ c * c);\n        long side15 = Math.Sqrt(a * b + c * c + b * b + a * b + c *\
    \ c + a * a);\n        long side16 = Math.Sqrt(a * b + c * c + b * b + a * b +\
    \ c * c + b * b);\n        long side17 = Math.Sqrt(a * b + c * c + a * b + b *\
    \ b + c * c + a * b + c * c);\n        long side18 = Math.Sqrt(a * b + c * c +\
    \ a * b + b * b + c * c + b * b + a * a);\n        long side19 = Math.Sqrt(a *\
    \ b + c * c + b * b + a * b + c * c + a * b + b * b);\n        long side20 = Math.Sqrt(a\
    \ * b + c * c + a * b + b * b + c * c + b * b + a * b + c * c);\n        long\
    \ side21 = Math.Sqrt(a * b + c * c + b * b + a * b + c * c + a * b + b * b + c\
    \ * c + a * a);\n        long side22 = Math.Sqrt(a * b + c * c + b * b + a * b\
    \ + c * c + b * b + a * b + c * c + b * b);\n        long side23 = Math.Sqrt(a\
    \ * b + c * \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5umnhih0.cs(41,44): error CS1525: Invalid expression term ''}''

    /tmp/tmp5umnhih0.cs(41,44): error CS1026: ) expected

    /tmp/tmp5umnhih0.cs(41,44): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n   \
    \     long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side3\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side9 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side10 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side15 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side16 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side21 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side22 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side27 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side28 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        \n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpft573qh_.cs(19,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(20,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(21,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(22,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(23,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(24,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(25,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(26,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(27,22): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(28,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(29,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(30,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpft573qh_.cs(31,23): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you m'
  timestamp: 1659794129
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n        long\
    \ acbc = acb * bc;\n        long abbc = abc * bc;\n        long abbbc = abbc *\
    \ bc;\n        long abbbbc = abbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n\
    \        long abbbbbbc = abbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc *\
    \ bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long abbbbbbbbbc =\
    \ abbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbc = abbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbc = abbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbc * bc;\n\
    \        long abbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbc * bc;\n      \
    \  long abbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long\
    \ abbbbbbbbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbb\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiu7m0sa6.cs(51,32): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b + e * 0.5);\n        long g = c - e * Math.Sqrt(c - e *\
    \ 0.5);\n        long h = (b + c) / 2;\n        long i = (a + b) / 2;\n      \
    \  long j = (a + c) / 2;\n        long k = (b + c) / 2;\n        long l = (a +\
    \ b) / 2;\n        long m = (a + c) / 2;\n        long n = (b + c) / 2;\n    \
    \    long o = (a + b) / 2;\n        long p = (a + c) / 2;\n        long q = (b\
    \ + c) / 2;\n        long r = (a + b) / 2;\n        long s = (a + c) / 2;\n  \
    \      long t = (b + c) / 2;\n        long u = (a + b) / 2;\n        long v =\
    \ (a + c) / 2;\n        long w = (b + c) / 2;\n        long x = (a + b) / 2;\n\
    \        long y = (a + c) / 2;\n        long z = (b + c) / 2;\n        long A\
    \ = (a + b) / 2;\n        long B = (a + c) / 2;\n        long C = (b + c) / 2;\n\
    \        long D = (a + b) / 2;\n        long E = (a + c) / 2;\n        long F\
    \ = (b + c) / 2;\n        long G = (a + b) / 2;\n        long H = (a + c) / 2;\n\
    \        long I = (b + c) / 2;\n        long J = (a + b) / 2;\n        long K\
    \ = (a + c) / 2;\n        long L = (b + c) / 2;\n        long M = (a + b) / 2;\n\
    \        long N = (a + c) / 2;\n        long O = (b + c) / 2;\n        long P\
    \ = (a + b) / 2;\n        long Q = (a + c) / 2;\n        long R = (b + c) / 2;\n\
    \        long S = (a + b) / 2;\n        long T = (a + c) / 2;\n        long U\
    \ = (b + c) / 2;\n        long V = (a + b) / 2;\n        long W = (a + c) / 2;\n\
    \        long X = (a + b) / 2;\n        long Y = (a + c) / 2;\n        long Z\
    \ = (b + c) / 2;\n        long aa = (a + b) / 2;\n        long ab = (a + c) /\
    \ 2;\n        long ac = (b + c) / 2;\n        long ad = (a + b) / \n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5g7dffum.cs(74,28): error CS1525: Invalid expression term ''}''

    /tmp/tmp5g7dffum.cs(74,28): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long ab = a - b;\n        long ac = c - a;\n        long bc =\
    \ b - c;\n        long abc = ab * bc;\n        long acb = ac * bc;\n        long\
    \ abbc = ab * bc;\n        long acab = ac * ab;\n        long acbc = ac * bc;\n\
    \        long acbb = ac * bb;\n        long abcab = ab * cab;\n        long abcbc\
    \ = ab * cba;\n        long abbca = ab * caba;\n        long abcabc = ab * cabc;\n\
    \        long abcabb = ab * cabb;\n        long abcabba = ab * cabba;\n      \
    \  long abcabcab = ab * cabcab;\n        long abcabcabc = ab * cabcabc;\n    \
    \    long abcabcabb = ab * cabcabb;\n        long abcabcabba = ab * cabcabba;\n\
    \        long abcabcabcab = ab * cabcabcab;\n        long abcabcabcabc = ab *\
    \ cabcabcabc;\n        long abcabcabcabb = ab * cabcabcabb;\n        long abcabcabcabba\
    \ = ab * cabcabcabba;\n        long abcabcabcabcab = ab * cabcabcabcab;\n    \
    \    long abcabcabcabcabc = ab * cabcabcabcabc;\n        long abcabcabcabcabb\
    \ = ab * cabcabcabcabb;\n        long abcabcabcabcabba = ab * cabcabcabcabba;\n\
    \        long abcabcabcabcabcab = ab * cabcabcabcabcab;\n        long abcabcabcabcabcabc\
    \ = ab * cabcabcabcabcabc;\n        long abcabcabcabcabcabb = ab * cabcabcabcabcabb;\n\
    \        long abcabcabcabcabcabba = ab * cabcabcabcabcabba;\n        long abcabcabcabcabcabcab\
    \ = ab * cabcabcabcabcabcab;\n        long abcabcabcabcabcabcabc = ab * cabcabcabcabcabcabc;\n\
    \        long abcabcabcabcabcabcabb = ab * cabcabcabcabcabcabb;\n        long\
    \ abcabcabcabcabcabcabba = ab * cabcabcabcabcabcabba;\n        long abcabcabcabcabcabcabcab\
    \ = ab * cabcabcabcabcabcabcab;\n        long abcabcabcabcabcabcabcabc = ab *\
    \ cabcabcab\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpai0r2263.cs(55,55): error CS1002: ; expected

    '
  timestamp: 1659794128
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0)\n            return\
    \ false;\n        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root)\
    \ / (2 * a);\n        long t2 = (-b - root) / (2 * a);\n        return t1 == t2;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <26a6dd212dbe482aa17f5949eacc83d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659794126
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given the lengths of the three sides of a triangle. Return\
    \ true if the three\n    // sides form a right-angled triangle, false otherwise.\n\
    \    // A right-angled triangle is a triangle in which one angle is right angle\
    \ or \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L),\
    \ (4L), (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n\
    \    // (false)\n    public static bool RightAngleTriangle(long a, long b, long\
    \ c) {\n        long d = b * b - 4 * a * c;\n        if (d < 0) {\n          \
    \  return false;\n        }\n        long e = Math.Sqrt(d);\n        long f =\
    \ b + e * Math.Sqrt(b * b - 4 * a * c);\n        long g = c - e * Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long h = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ i = Math.Sqrt(b * b - 4 * a * c);\n        long j = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long k = Math.Sqrt(b * b - 4 * a * c);\n        long l = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long m = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ n = Math.Sqrt(b * b - 4 * a * c);\n        long o = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long p = Math.Sqrt(b * b - 4 * a * c);\n        long q = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long r = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ s = Math.Sqrt(b * b - 4 * a * c);\n        long t = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long u = Math.Sqrt(b * b - 4 * a * c);\n        long v = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long w = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ x = Math.Sqrt(b * b - 4 * a * c);\n        long y = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long z = Math.Sqrt(b * b - 4 * a * c);\n        long a = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long b = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ c = Math.Sqrt(b * b - 4 * a * c);\n        long d = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long e = Math.Sqrt(b * b - 4 * a * c);\n        long f = Math.Sqrt(b\
    \ * b - 4 * a * c);\n        long g = Math.Sqrt(b * b - 4 * a * c);\n        long\
    \ h = Math.Sqrt(b * b - 4 * a * c);\n        long i = Math.Sqrt(b * b - 4 * a\
    \ * c);\n        long j = Math.Sqrt(b * b - 4 * a * c);\n        long k = Math.Sqrt(b\
    \ * b - 4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
    \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
    \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
    \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L),\
    \ (7L)) == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L))\
    \ == (true));\n    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n\
    \    Debug.Assert(RightAngleTriangle((48L), (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L),\
    \ (1L), (1L)) == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L))\
    \ == (false));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmg5qk11i.cs(55,37): error CS1026: ) expected

    /tmp/tmpmg5qk11i.cs(55,37): error CS1002: ; expected

    '
  timestamp: 1659794128
