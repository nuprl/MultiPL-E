language: cs
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        temp = temp
    + op;\n                        break;\n                    case \"-\":\n                        temp
    = temp - op;\n                        break;\n                    case \"*\":\n
    \                       temp = temp * op;\n                        break;\n                    case
    \"//\":\n                        temp = temp / op;\n                        break;\n
    \                   case \"**\":\n                        temp = temp ** op;\n
    \                       break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n            result
    = result + temp;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjk6_pxag.cs(31,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpjk6_pxag.cs(46,38): error CS0193: The * or -> operator must be applied
    to a pointer

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpletqhkp3.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a77d44b8c8524b31b499984eed2f29bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a77d44b8c8524b31b499984eed2f29bd>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.FirstOrDefault();\n            long operand1 = operand.Skip(1).FirstOrDefault();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result /= operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <727ce725b8e9416a82a153cb3ba4f3da>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <727ce725b8e9416a82a153cb3ba4f3da>:0
    \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by
    zero.\n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0009d] in <727ce725b8e9416a82a153cb3ba4f3da>:0 \n  at Problem.Main
    (System.String[] args) [0x000c4] in <727ce725b8e9416a82a153cb3ba4f3da>:0 \n[ERROR]
    F"
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzc5c_fox.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42c33fe0d9f0460da67bc565a1cf00ce>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <42c33fe0d9f0460da67bc565a1cf00ce>:0
    \n\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.Lis"
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb3aae3b4cb044f899d557b1a6d5434c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb3aae3b4cb044f899d557b1a6d5434c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n            operand[0] = operand1;\n            operand[1] = operand2;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98582882b6ee4309ac58959f7288aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98582882b6ee4309ac58959f7288aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        temp = temp
    + op;\n                        break;\n                    case \"-\":\n                        temp
    = temp - op;\n                        break;\n                    case \"*\":\n
    \                       temp = temp * op;\n                        break;\n                    case
    \"//\":\n                        temp = temp / op;\n                        break;\n
    \                   case \"**\":\n                        temp = temp ** op;\n
    \                       break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n            result
    = result + temp;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjk6_pxag.cs(31,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpjk6_pxag.cs(46,38): error CS0193: The * or -> operator must be applied
    to a pointer

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.ElementAt(operand.Count - 1);\n            long oprValue2 =
    operand.ElementAt(operand.Count - 2);\n            long oprValue3 = operand.ElementAt(operand.Count
    - 3);\n            long oprValue4 = operand.ElementAt(operand.Count - 4);\n            long
    oprValue5 = operand.ElementAt(operand.Count - 5);\n            long oprValue6
    = operand.ElementAt(operand.Count - 6);\n            long oprValue7 = operand.ElementAt(operand.Count
    - 7);\n            long oprValue8 = operand.ElementAt(operand.Count - 8);\n            long
    oprValue9 = operand.ElementAt(operand.Count - 9);\n            long oprValue10
    = operand.ElementAt(operand.Count - 10);\n            long oprValue11 = operand.ElementAt(operand.Count
    - 11);\n            long oprValue12 = operand.ElementAt(operand.Count - 12);\n
    \           long oprValue13 = operand.ElementAt(operand.Count - 13);\n            long
    oprValue14 = operand.ElementAt(operand.Count - 14);\n            long oprValue15
    = operand.ElementAt(operand.Count - 15);\n            long oprValue16 = operand.ElementAt(operand.Count
    - 16);\n            long oprValue17 = operand.ElementAt(operand.Count - 17);\n
    \           long oprValue18 = operand.ElementAt(operand.Count - 18);\n            long
    oprValue19 = operand.ElementAt(operand.Count - 19);\n            long oprValue20
    = operand.ElementAt(operand.Count - 20);\n            long oprValue21 = operand.ElementAt(operand.Count
    - 21);\n            long oprValue22 = operand.ElementAt(operand.Count - 22);\n
    \           long oprValue23 = operand.ElementAt(operand.Count - 23);\n            long
    oprValue24 = operand.ElementAt(operand.Count - 24);\n            long oprValue25
    = operand.ElementAt(operand.Count - 25);\n            long oprValue26 = operand.ElementAt(operand.Count
    - 26);\n            long oprValue27 = operand.ElementAt(operand.Count - 27);\n
    \           long oprValue28 = operand.ElementAt(operand.Count - 28);\n            long
    oprValue29 = operand.ElementAt(operand.Count - 29);\n            long oprValue30
    = operand\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9g5ix9ne.cs(59,38): error CS1002: ; expected

    /tmp/tmp9g5ix9ne.cs(61,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp9g5ix9ne.cs(67,2): error CS1513: } expected

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7gkfifr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bvtb2zx.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault(x => x.ToString() == opr);\n            if (oprValue
    != 0) {\n                result += oprValue;\n                operand.Remove(oprValue);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e74c447b68474a63ad4d7d7edf837d2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e74c447b68474a63ad4d7d7edf837d2f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator: \" + op1);\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <930c8825c8ff4c58b6706247c827234d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <930c8825c8ff4c58b6706247c827234d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpot3lkfd1.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentOutOfRangeException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8hshtfw.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76e02d2d67c14fafb9bac8e4791372f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <76e02d2d67c14fafb9bac8e4791372f6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"/\":\n                    result
    /= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1hizr26w.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            string
    opString = op.ToLower();\n            foreach (long operand in operand) {\n                switch
    (opString) {\n                    case \"+\":\n                        result
    += operand;\n                        break;\n                    case \"-\":\n
    \                       result -= operand;\n                        break;\n                    case
    \"*\":\n                        result *= operand;\n                        break;\n
    \                   case \"//\":\n                        result /= operand;\n
    \                       break;\n                    case \"**\":\n                        result
    *= operand;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi58pexga.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpi58pexga.cs(31,27): error CS0136: A local or parameter named ''operand''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bvtb2zx.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator: \" + opr);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87eace73c19c49bc964c13fc77e6992d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <87eace73c19c49bc964c13fc77e6992d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new ArgumentException(\"Invalid operator\");\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c544feba4ab2461bbaeab86588c85bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c544feba4ab2461bbaeab86588c85bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator: \" + op1);\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq7vvhrae.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n            operand[0] = result;\n            operand[1]
    = operand2;\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdklxnlzd.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            long
    operand5 = operand[4];\n            long operand6 = operand[5];\n            long
    operand7 = operand[6];\n            long operand8 = operand[7];\n            long
    operand9 = operand[8];\n            long operand10 = operand[9];\n            long
    operand11 = operand[10];\n            long operand12 = operand[11];\n            long
    operand13 = operand[12];\n            long operand14 = operand[13];\n            long
    operand15 = operand[14];\n            long operand16 = operand[15];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0003d] in <af177643d4da4229b4fa2cf73903e2b4>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <af177643d4da4229b4fa2cf73903e2b4>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0003d] in <af177643d4da4229b4fa2cf73903e2b4>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <af177643d4da4229b4fa2cf73903e2b4>:0 \n"
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (op) {\n                case \"+\":\n                    result
    += operand1;\n                    break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand2;\n                    break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppwfidl9w.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67128dadb16a469f9b9d5d1ab0397c70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67128dadb16a469f9b9d5d1ab0397c70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    **= operand1;\n                    result **= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi0xl6rj6.cs(50,29): error CS1525: Invalid expression term ''*=''

    /tmp/tmpi0xl6rj6.cs(51,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                oprVal
    = oprVal * op + op;\n            }\n            switch (opr) {\n                case
    \"+\":\n                    result = result + oprVal;\n                    break;\n
    \               case \"-\":\n                    result = result - oprVal;\n                    break;\n
    \               case \"*\":\n                    result = result * oprVal;\n                    break;\n
    \               case \"//\":\n                    result = result / oprVal;\n
    \                   break;\n                case \"**\":\n                    result
    = result ** oprVal;\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz9z2xfay.cs(31,27): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpz9z2xfay.cs(48,38): error CS0193: The * or -> operator must be applied
    to a pointer

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result /= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp51etglvh.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    result
    /= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f1c3f7bf3e46389a8d304babedc2fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <70f1c3f7bf3e46389a8d304babedc2fa>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb3aae3b4cb044f899d557b1a6d5434c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eb3aae3b4cb044f899d557b1a6d5434c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    **= operand1;\n                    result **= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n            operand[0] = result;\n            operand[1]
    = result;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphh3r7903.cs(50,29): error CS1525: Invalid expression term ''*=''

    /tmp/tmphh3r7903.cs(51,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    temp = 0;\n            foreach (long i in operand) {\n                switch (opr)
    {\n                    case \"+\":\n                        temp = temp + i;\n
    \                       break;\n                    case \"-\":\n                        temp
    = temp - i;\n                        break;\n                    case \"*\":\n
    \                       temp = temp * i;\n                        break;\n                    case
    \"//\":\n                        temp = temp / i;\n                        break;\n
    \                   case \"**\":\n                        temp = temp ** i;\n
    \                       break;\n                }\n            }\n            result
    = result + temp;\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ry83qwp.cs(46,38): error CS0193: The * or -> operator must be applied
    to a pointer

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bvtb2zx.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a40d68959824605ad23afb598eda8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5a40d68959824605ad23afb598eda8db>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1))\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp942gc2lv.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new ArgumentException(\"Invalid operator\");\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c544feba4ab2461bbaeab86588c85bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c544feba4ab2461bbaeab86588c85bb1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9792996147fb45c69bd2fb096154527f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9792996147fb45c69bd2fb096154527f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result **= op3;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04cr99o3.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string oper in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (oper) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec1f272b0a31495f9b8ede392682f7b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ec1f272b0a31495f9b8ede392682f7b3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long op in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += op;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= op;\n                        break;\n                    case \"*\":\n                        oprVal
    *= op;\n                        break;\n                    case \"//\":\n                        oprVal
    /= op;\n                        break;\n                    case \"**\":\n                        oprVal
    **= op;\n                        break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy9cttcis.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n            operand[0] = result;\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da11ee5dc8124990bae549447767a194>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <da11ee5dc8124990bae549447767a194>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.First();\n            long operand1 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result /= operand2;\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Operator not recognized.\");\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <feb5cf04d20c45feba092a97647eb3e4>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <feb5cf04d20c45feba092a97647eb3e4>:0
    \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by
    zero.\n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0009d] in <feb5cf04d20c45feba092a97647eb3e4>:0 \n  at Problem.Main
    (System.String[] args) [0x000c4] in <feb5cf04d20c45feba092a97647eb3e4>:0 \n[ERROR]
    F"
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7gkfifr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprVal = 0;\n            foreach (long oprInt in operand) {\n                switch
    (opr) {\n                    case \"+\":\n                        oprVal += oprInt;\n
    \                       break;\n                    case \"-\":\n                        oprVal
    -= oprInt;\n                        break;\n                    case \"*\":\n
    \                       oprVal *= oprInt;\n                        break;\n                    case
    \"//\":\n                        oprVal /= oprInt;\n                        break;\n
    \                   case \"**\":\n                        oprVal **= oprInt;\n
    \                       break;\n                }\n            }\n            result
    += oprVal;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqik_vuv2.cs(46,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string oper in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            long
    operand5 = operand[4];\n            long operand6 = operand[5];\n            long
    operand7 = operand[6];\n            long operand8 = operand[7];\n            long
    operand9 = operand[8];\n            long operand10 = operand[9];\n            long
    operand11 = operand[10];\n            long operand12 = operand[11];\n            long
    operand13 = operand[12];\n            long operand14 = operand[13];\n            long
    operand15 = operand[14];\n            long operand16 = operand[15];\n            long
    operand17 = operand[16];\n            long operand18 = operand[17];\n            long
    operand19 = operand[18];\n            long operand20 = operand[19];\n            long
    operand21 = operand[20];\n            long operand22 = operand[21];\n            long
    operand23 = operand[22];\n            long operand24 = operand[23];\n            long
    operand25 = operand[24];\n            long operand26 = operand[25];\n            long
    operand27 = operand[26];\n            long operand28 = operand[27];\n            long
    operand29 = operand[28];\n            long operand30 = operand[29];\n            long
    operand31 = operand[30];\n            long operand32 = operand[31];\n            long
    operand33 = operand[32];\n            long operand34 = operand[33];\n            long
    operand35 = operand[34];\n            long operand36 = operand[35];\n            long
    operand37 = operand[36];\n            long operand38 = operand[37];\n            long
    operand39 = operand[38];\n            long operand40 = operand[39];\n            long
    operand41 = operand[40];\n            long operand42 = operand[41];\n            long
    operand43 = operand[42];\n            long operand44 = operand[43];\n            long
    operand45 = operand[44];\n            long operand46 = operand[45];\n            long
    operand47 = operand[46];\n            long operand48 = operand[47];\n            long
    operand49 = operand[48];\n            long operand50 = operand[49];\n            long
    operand51 = operand[50];\n            long operand52 = operand[51];\n            long
    operand53 = operand[52];\n            \n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpryvk57cb.cs(85,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpryvk57cb.cs(91,2): error CS1513: } expected

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7gkfifr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result *= op3;\n                        result
    /= op3;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3626b76593d94b78b62b0681adb83093>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3626b76593d94b78b62b0681adb83093>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8p50gvnz.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7gkfifr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result **= operand1;\n                    break;\n                default:\n
    \                   throw new ArgumentException(\"Operator not recognized.\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp87c9ms7b.cs(46,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ey9j9dc.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator:
    \" + op);\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaurueez1.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67128dadb16a469f9b9d5d1ab0397c70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67128dadb16a469f9b9d5d1ab0397c70>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1062731410dd49049056ae4adcaa4d94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1062731410dd49049056ae4adcaa4d94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c344d6e8f92046308084289c7504dde7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c344d6e8f92046308084289c7504dde7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1062731410dd49049056ae4adcaa4d94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1062731410dd49049056ae4adcaa4d94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (op) {\n                case \"+\":\n                    result
    += operand1;\n                    break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp91m4x1ur.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80fc0dc3485f48de9574ab6acece009c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <80fc0dc3485f48de9574ab6acece009c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    operand.RemoveAt(0);\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23cef1347cff417c9abd040846b2e124>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23cef1347cff417c9abd040846b2e124>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = Convert.ToInt64(opr);\n            foreach (long oprValue in operand)
    {\n                result += oprValue;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsi2vrlez.cs(31,27): error CS0136: A local or parameter named ''oprValue''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string oper in op) {\n            long
    operand2 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand3 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand4 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand5 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand6 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand7 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand8 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand9 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand10 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand11 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand12 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand13 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand14 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand15 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand16 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand17 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand18 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand19 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand20 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand21 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand22 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand23 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand24 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand25 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand26 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand27 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand28 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand29 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand30 = operand.First();\n            operand.RemoveAt(0);\n            long
    operand31 = operand.First();\n            operand.RemoveAt(0);\n\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0ay5jqar.cs(92,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp0ay5jqar.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7gkfifr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23540215d12541b3ae58001abaeb2f49>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <23540215d12541b3ae58001abaeb2f49>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand[op.IndexOf(opr)];\n            long oprValue2 = operand[op.IndexOf(opr)
    + 1];\n            long oprValue3 = operand[op.IndexOf(opr) + 2];\n            long
    oprValue4 = operand[op.IndexOf(opr) + 3];\n            long oprValue5 = operand[op.IndexOf(opr)
    + 4];\n            long oprValue6 = operand[op.IndexOf(opr) + 5];\n            long
    oprValue7 = operand[op.IndexOf(opr) + 6];\n            long oprValue8 = operand[op.IndexOf(opr)
    + 7];\n            long oprValue9 = operand[op.IndexOf(opr) + 8];\n            long
    oprValue10 = operand[op.IndexOf(opr) + 9];\n            long oprValue11 = operand[op.IndexOf(opr)
    + 10];\n            long oprValue12 = operand[op.IndexOf(opr) + 11];\n            long
    oprValue13 = operand[op.IndexOf(opr) + 12];\n            long oprValue14 = operand[op.IndexOf(opr)
    + 13];\n            long oprValue15 = operand[op.IndexOf(opr) + 14];\n            long
    oprValue16 = operand[op.IndexOf(opr) + 15];\n            long oprValue17 = operand[op.IndexOf(opr)
    + 16];\n            long oprValue18 = operand[op.IndexOf(opr) + 17];\n            long
    oprValue19 = operand[op.IndexOf(opr) + 18];\n            long oprValue20 = operand[op.IndexOf(opr)
    + 19];\n            long oprValue21 = operand[op.IndexOf(opr) + 20];\n            long
    oprValue22 = operand[op.IndexOf(opr) + 21];\n            long oprValue23 = operand[op.IndexOf(opr)
    + 22];\n            long oprValue24 = operand[op.IndexOf(opr) + 23];\n            long
    oprValue25 = operand[op.IndexOf(opr) + 24];\n            long oprValue26 = operand[op.IndexOf(opr)
    + 25];\n            long oprValue27 = operand[op.IndexOf(opr) + 26];\n            long
    oprValue28 = operand[op.IndexOf(opr) + 27];\n            long oprValue29 = operand[op.IndexOf(op\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7_01gkko.cs(58,52): error CS1026: ) expected

    /tmp/tmp7_01gkko.cs(58,52): error CS1003: Syntax error, '']'' expected

    /tmp/tmp7_01gkko.cs(58,52): error CS1002: ; expected

    /tmp/tmp7_01gkko.cs(60,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp7_01gkko.cs(66,2): error CS1513: } expected

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9b4c7a5ca21418aa19246d355e5aa35>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d9b4c7a5ca21418aa19246d355e5aa35>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    **= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphnc_aung.cs(48,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op2 in op) {\n            switch
    (op2) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67a5aa06f46e47c99c0099d3c27cfb98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67a5aa06f46e47c99c0099d3c27cfb98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op2 in op) {\n            foreach
    (long op3 in operand) {\n                switch (op2) {\n                    case
    \"+\":\n                        result += op3;\n                        break;\n
    \                   case \"-\":\n                        result -= op3;\n                        break;\n
    \                   case \"*\":\n                        result *= op3;\n                        break;\n
    \                   case \"//\":\n                        result /= op3;\n                        break;\n
    \                   case \"**\":\n                        result **= op3;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp04cr99o3.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n            operand[0] = operand1;\n            operand[1] = operand2;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98582882b6ee4309ac58959f7288aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98582882b6ee4309ac58959f7288aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.FirstOrDefault();\n            long oprValue2 = operand.LastOrDefault();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += oprValue;\n                    break;\n                case \"-\":\n                    result
    -= oprValue;\n                    break;\n                case \"*\":\n                    result
    *= oprValue;\n                    break;\n                case \"//\":\n                    result
    /= oprValue;\n                    break;\n                case \"**\":\n                    result
    *= oprValue;\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24f32a0710664c1284ff386c805d0567>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <24f32a0710664c1284ff386c805d0567>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f827a178fd14d70b1433aa81d169644>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f827a178fd14d70b1433aa81d169644>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <266fc2af3e8e4d3eb552310bb65f22df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <266fc2af3e8e4d3eb552310bb65f22df>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f85d835f0314ae6b7eb6e5bcbec6d3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7f85d835f0314ae6b7eb6e5bcbec6d3c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn13x6u7i.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5637be6a5194134b2303526518a4b4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5637be6a5194134b2303526518a4b4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ey9j9dc.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    /= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e073f7d1228740b89290807b9e0acac5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e073f7d1228740b89290807b9e0acac5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    oprValue = operand.ElementAt(operand.Count - 1);\n            switch (opr) {\n
    \               case \"+\":\n                    result += oprValue;\n                    break;\n
    \               case \"-\":\n                    result -= oprValue;\n                    break;\n
    \               case \"*\":\n                    result *= oprValue;\n                    break;\n
    \               case \"//\":\n                    result /= oprValue;\n                    break;\n
    \               case \"**\":\n                    result *= oprValue;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + opr);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba44e464e1ef4a889cc1e44e0296ece6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ba44e464e1ef4a889cc1e44e0296ece6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"/\":\n                        if (op2 == 0) {\n                            throw
    new DivideByZeroException();\n                        }\n                        result
    /= op2;\n                        break;\n                    case \"**\":\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b1f60defbe542af956288c1c471d8bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3b1f60defbe542af956288c1c471d8bf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5637be6a5194134b2303526518a4b4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5637be6a5194134b2303526518a4b4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    /= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e073f7d1228740b89290807b9e0acac5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e073f7d1228740b89290807b9e0acac5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result /= operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef8ad589ba15413f85ef6b67e486c3de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <ef8ad589ba15413f85ef6b67e486c3de>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8p50gvnz.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           long operand3 = operand.Skip(2).First();\n            switch (opr)
    {\n                case \"+\":\n                    result += operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9845bfd889f14e0ba8b9c0bb01714dfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9845bfd889f14e0ba8b9c0bb01714dfe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    **= operand1 ** operand2;\n                    break;\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ucx96tb.cs(46,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp77bstxfm.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    /= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19cc0f08dab44f758060ea3d6cc3a61c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19cc0f08dab44f758060ea3d6cc3a61c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n            operand[0] = result;\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b885649d5cd2435a9244e6609f1b5a4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <b885649d5cd2435a9244e6609f1b5a4a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc12040fad174f37af72ba00451e5adf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <bc12040fad174f37af72ba00451e5adf>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcead8a29f1941309d1fa061513f86fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcead8a29f1941309d1fa061513f86fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplrn2wpdx.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    /= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e073f7d1228740b89290807b9e0acac5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e073f7d1228740b89290807b9e0acac5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            result
    += operand[op.IndexOf(opr)];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b5632238be2422494a0ccb3fe285493>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7b5632238be2422494a0ccb3fe285493>:0
    \n"
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (op) {\n                case \"+\":\n                    result
    += operand1;\n                    break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptuphtvvu.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"/\":\n                    result
    /= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3279ab986d1e40a8bba2ede2eb88db81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3279ab986d1e40a8bba2ede2eb88db81>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ey9j9dc.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                    default:\n                        throw
    new Exception(\"Invalid operator\");\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcead8a29f1941309d1fa061513f86fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <fcead8a29f1941309d1fa061513f86fe>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6950c661fc674c439ec55cd80355265f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <6950c661fc674c439ec55cd80355265f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand2 = operand.FirstOrDefault();\n            long operand1 = operand.Skip(1).FirstOrDefault();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result /= operand2;\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ec49cd1bec44ea9a9e44e6ef901850a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ec49cd1bec44ea9a9e44e6ef901850a>:0
    \n\nUnhandled Exception:\nSystem.DivideByZeroException: Attempted to divide by
    zero.\n  at Problem.DoAlgebra (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0009d] in <8ec49cd1bec44ea9a9e44e6ef901850a>:0 \n  at Problem.Main
    (System.String[] args) [0x000c4] in <8ec49cd1bec44ea9a9e44e6ef901850a>:0 \n[ERROR]
    F"
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bvtb2zx.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn1vrrmpr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Last();\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4e627f8575a42f1a7158223df791f87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d4e627f8575a42f1a7158223df791f87>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9792996147fb45c69bd2fb096154527f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <9792996147fb45c69bd2fb096154527f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand.First();\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand.First();\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand.First();\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand.First();\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"**\":\n                    result *= operand.First();\n                    operand.RemoveAt(0);\n
    \                   result /= operand.First();\n                    operand.RemoveAt(0);\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19fd437206404f1694ffdd7ddcf281c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <19fd437206404f1694ffdd7ddcf281c9>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1 +
    operand2;\n                    break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6c70977ada54ce3bc2858b24418cba6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d6c70977ada54ce3bc2858b24418cba6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (op) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"/\":\n                    result
    /= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    break;\n            }\n            operand[0]
    = operand2;\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiggl8pgn.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplrn2wpdx.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new ArgumentOutOfRangeException(\"Operator
    not found.\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpasj3i6jx.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzx1d2fxl.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                default:\n                    throw
    new ArgumentException(\"Invalid operator: \" + opr);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8752c8ebc87c492a83b562d00993bdd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8752c8ebc87c492a83b562d00993bdd3>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7gkfifr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Operator
    \" + s + \" is not supported\");\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12c56e3c4dda411ca877427f6e3def4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <12c56e3c4dda411ca877427f6e3def4d>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator: \" + op1);\n                }\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <763cb35977404028b19cef211259062c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <763cb35977404028b19cef211259062c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzc5c_fox.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           long oprValue = Convert.ToInt64(opr);\n            switch (opr) {\n
    \               case \"+\":\n                    result += operand1 + operand2;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1 - operand2;\n                    break;\n                case \"*\":\n
    \                   result *= operand1 * operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1 / operand2;\n
    \                   break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in
    a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean
    overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0002f] in <9186baf20ffb45da9c4645341a595ac8>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <9186baf20ffb45da9c4645341a595ac8>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.FormatException: Input string was not in a correct
    format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow,
    System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Number.ParseInt64 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles
    styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at System.Int64.Parse (System.String s, System.IFormatProvider provider) [0x00017]
    in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at System.Convert.ToInt64 (System.String
    value) [0x0000c] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0002f] in <9186baf20ffb45da9c4645341a595ac8>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <9186baf20ffb45da9c4645341a595ac8>:0 \n"
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    /= op2;\n                        break;\n                    default:\n                        throw
    new ArgumentException(\"Invalid operator\");\n                }\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47eb35844f0e4fd981ca3a0cdbd93764>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <47eb35844f0e4fd981ca3a0cdbd93764>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"/\":\n                    result
    /= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1hizr26w.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            long
    operand3 = operand[2];\n            long operand4 = operand[3];\n            long
    operand5 = operand[4];\n            switch (op) {\n                case \"+\":\n
    \                   result = operand1 + operand2 + operand3 + operand4 + operand5;\n
    \                   break;\n                case \"-\":\n                    result
    = operand1 - operand2 - operand3 - operand4 - operand5;\n                    break;\n
    \               case \"*\":\n                    result = operand1 * operand2
    * operand3 * operand4 * operand5;\n                    break;\n                case
    \"/\":\n                    result = operand1 / operand2 / operand3 / operand4
    / operand5;\n                    break;\n                case \"//\":\n                    result
    = operand1 / (operand2 / (operand3 / (operand4 / (operand5))));\n                    break;\n
    \               case \"**\":\n                    result = operand1 * (operand2
    * operand3 * operand4 * operand5);\n                    break;\n                default:\n
    \                   throw new Exception(\"Invalid operator\");\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpso_zn4v1.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb7gkfifr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bvtb2zx.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand[0];\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"**\":\n                    result
    *= operand[0];\n                    operand.RemoveAt(0);\n                    result
    /= operand[0];\n                    operand.RemoveAt(0);\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bfc202346e54dcebffc4c3a1de1843f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8bfc202346e54dcebffc4c3a1de1843f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1))\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"/\":\n                        result /= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c87b4be7bd54c67befca1c69f8d5a17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <0c87b4be7bd54c67befca1c69f8d5a17>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result *= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + s);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3eff9f51f46d467a9e1b1abbe3b19596>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3eff9f51f46d467a9e1b1abbe3b19596>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op2 in op) {\n            string
    op2String = op2;\n            long operand2 = 0;\n            foreach (long op3
    in operand) {\n                string op3String = op3;\n                switch
    (op2String) {\n                    case \"+\":\n                        operand2
    = operand2 + op3;\n                        break;\n                    case \"-\":\n
    \                       operand2 = operand2 - op3;\n                        break;\n
    \                   case \"*\":\n                        operand2 = operand2 *
    op3;\n                        break;\n                    case \"//\":\n                        operand2
    = operand2 // op3;\n                        break;\n                    case \"**\":\n
    \                       operand2 = operand2 **op3;\n                        break;\n
    \               }\n            }\n            switch (op2String) {\n                case
    \"+\":\n                    result = result + operand2;\n                    break;\n
    \               case \"-\":\n                    result = result - operand2;\n
    \                   break;\n                case \"*\":\n                    result
    = result * operand2;\n                    break;\n                case \"//\":\n
    \                   result = result // operand2;\n                    break;\n
    \               case \"**\":\n                    result = result ** operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3568p8zt.cs(45,44): error CS1002: ; expected

    /tmp/tmp3568p8zt.cs(63,36): error CS1002: ; expected

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn13x6u7i.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792766
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string oper in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (oper) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"/\":\n                    result
    /= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n            operand[0] =
    operand2;\n        }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2255dcc8fc17448594821af21e132a94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2255dcc8fc17448594821af21e132a94>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <a3cc99e2f52643c99afaae47183545ff>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5774b25b49d54606b3a461785aa962d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <5774b25b49d54606b3a461785aa962d2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            long
    op1 = Convert.ToInt64(operand[0]);\n            long op2 = Convert.ToInt64(operand[1]);\n
    \           switch (s) {\n                case \"+\":\n                    result
    += op1 + op2;\n                    break;\n                case \"-\":\n                    result
    -= op1 - op2;\n                    break;\n                case \"*\":\n                    result
    *= op1 * op2;\n                    break;\n                case \"//\":\n                    result
    /= op1 // op2;\n                    break;\n                case \"**\":\n                    result
    *= op1 ** op2;\n                    break;\n            }\n            operand.RemoveAt(0);\n
    \           operand.RemoveAt(0);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpviuav5r8.cs(43,34): error CS1002: ; expected

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            long
    op1 = Convert.ToInt64(operand[0]);\n            long op2 = Convert.ToInt64(operand[1]);\n
    \           long op3 = Convert.ToInt64(operand[2]);\n            long op4 = Convert.ToInt64(operand[3]);\n
    \           switch (s) {\n                case \"+\":\n                    result
    += op1 + op2;\n                    break;\n                case \"-\":\n                    result
    -= op1 - op2;\n                    break;\n                case \"*\":\n                    result
    *= op1 * op2;\n                    break;\n                case \"//\":\n                    result
    /= op1 / op2;\n                    break;\n                case \"**\":\n                    result
    *= op1;\n                    result *= op2;\n                    break;\n                default:\n
    \                   throw new Exception(\"Invalid operator\");\n            }\n
    \           operand.RemoveAt(0);\n            operand.RemoveAt(0);\n            operand.RemoveAt(0);\n
    \           operand.RemoveAt(0);\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index was out
    of range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0001a] in <e250e29c8eae450e898e9323b3f6128b>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <e250e29c8eae450e898e9323b3f6128b>:0 \n[ERROR]
    FATAL UNHANDLED EXCEPTION: System.ArgumentOutOfRangeException: Index was out of
    range. Must be non-negative and less than the size of the collection.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].get_Item (System.Int32
    index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.DoAlgebra
    (System.Collections.Generic.List`1[T] op, System.Collections.Generic.List`1[T]
    operand) [0x0001a] in <e250e29c8eae450e898e9323b3f6128b>:0 \n  at Problem.Main
    (System.String[] args) [0x0003a] in <e250e29c8eae450e898e9323b3f6128b>:0 \n"
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpky3zo_hc.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string oper in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (oper) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    **= operand1;\n                    result **= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprd18ukai.cs(50,29): error CS1525: Invalid expression term ''*=''

    /tmp/tmprd18ukai.cs(51,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzdc7pa40.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string s in op) {\n            switch
    (s) {\n                case \"+\":\n                    result += operand.First();\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"-\":\n                    result -= operand.First();\n                    operand.RemoveAt(0);\n
    \                   break;\n                case \"*\":\n                    result
    *= operand.First();\n                    operand.RemoveAt(0);\n                    break;\n
    \               case \"//\":\n                    result /= operand.First();\n
    \                   operand.RemoveAt(0);\n                    break;\n                case
    \"**\":\n                    result *= operand.First();\n                    operand.RemoveAt(0);\n
    \                   result /= operand.First();\n                    operand.RemoveAt(0);\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7141a8714281481483b57bb71117d0dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <7141a8714281481483b57bb71117d0dc>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxq2w26vv.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        break;\n
    \               }\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <16a1b0904fbf4200a619c9a2aa5d8ea1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a55add52e0a4380af3c6f26aaec1fda>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2a55add52e0a4380af3c6f26aaec1fda>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string oper in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (oper) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8f49ae9d88649ec80d49a25db613b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e8f49ae9d88649ec80d49a25db613b34>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplrn2wpdx.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1)) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new Exception(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzim2h1wn.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \                   default:\n                        throw new ArgumentException(\"Invalid
    operator\");\n                }\n            }\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo1evvsu0.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n            operand[0] = operand1;\n            operand[1] = operand2;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98582882b6ee4309ac58959f7288aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <98582882b6ee4309ac58959f7288aa40>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792765
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpky3zo_hc.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (opr) {\n                case \"+\":\n                    result += operand1;\n
    \                   break;\n                case \"-\":\n                    result
    -= operand1;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    break;\n                case \"//\":\n                    result
    /= operand1;\n                    break;\n                case \"**\":\n                    result
    *= operand1;\n                    result /= operand2;\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5984f01925f42afb4654728988542b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <c5984f01925f42afb4654728988542b6>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    **= operand[0];\n                    break;\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpib54_rdi.cs(44,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1))\n                result += op1 == op2 ? 1 : 0;\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt38radjl.cs(31,27): error CS0019: Operator ''=='' cannot be applied to
    operands of type ''string'' and ''long''

    '
  timestamp: 1659792767
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            switch
    (op) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator: \" + op);\n            }\n        }\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqi6so3k3.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op2 in op) {\n            switch
    (op2) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[1];\n                    break;\n
    \               default:\n                    throw new ArgumentException(\"Invalid
    operator\");\n            }\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67a5aa06f46e47c99c0099d3c27cfb98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <67a5aa06f46e47c99c0099d3c27cfb98>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op in op) {\n            result
    += operand[op.Length - 1];\n        }\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new List<long>(new
    long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new
    long[]{(long)7L, (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn1vrrmpr.cs(29,25): error CS0136: A local or parameter named ''op'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    result /= operand[0];\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5637be6a5194134b2303526518a4b4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <f5637be6a5194134b2303526518a4b4c>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand.Skip(1))\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result **= op2;\n                        break;\n
    \               }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp942gc2lv.cs(45,33): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792765
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            switch
    (opr) {\n                case \"+\":\n                    result += operand[0];\n
    \                   break;\n                case \"-\":\n                    result
    -= operand[0];\n                    break;\n                case \"*\":\n                    result
    *= operand[0];\n                    break;\n                case \"//\":\n                    result
    /= operand[0];\n                    break;\n                case \"**\":\n                    result
    *= operand[0];\n                    for (int i = 1; i < operand.Count; i++) {\n
    \                       result *= operand[i];\n                    }\n                    break;\n
    \               default:\n                    throw new Exception(\"Invalid operator\");\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2352c17f95ca4a82bd2f4c329018a193>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2352c17f95ca4a82bd2f4c329018a193>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792768
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string opr in op) {\n            long
    operand1 = operand.First();\n            long operand2 = operand.Skip(1).First();\n
    \           switch (opr) {\n                case \"+\":\n                    result
    += operand1 + operand2;\n                    break;\n                case \"-\":\n
    \                   result -= operand1 - operand2;\n                    break;\n
    \               case \"*\":\n                    result *= operand1 * operand2;\n
    \                   break;\n                case \"//\":\n                    result
    /= operand1 / operand2;\n                    break;\n                case \"**\":\n
    \                   result *= operand1;\n                    result *= operand2;\n
    \                   break;\n                default:\n                    throw
    new Exception(\"Invalid operator\");\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new
    List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new
    List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"*\",
    (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"//\",
    (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))
    == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9458810a4934532bc62907b20047393>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <e9458810a4934532bc62907b20047393>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792768
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string oper in op) {\n            long
    operand1 = operand[0];\n            long operand2 = operand[1];\n            switch
    (oper) {\n                case \"+\":\n                    result += operand1;\n
    \                   result += operand2;\n                    break;\n                case
    \"-\":\n                    result -= operand1;\n                    result -=
    operand2;\n                    break;\n                case \"*\":\n                    result
    *= operand1;\n                    result *= operand2;\n                    break;\n
    \               case \"//\":\n                    result /= operand1;\n                    result
    /= operand2;\n                    break;\n                case \"**\":\n                    result
    **= operand1;\n                    result **= operand2;\n                    break;\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\",
    (string)\"*\", (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"+\", (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L,
    (long)3L, (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprd18ukai.cs(50,29): error CS1525: Invalid expression term ''*=''

    /tmp/tmprd18ukai.cs(51,29): error CS1525: Invalid expression term ''*=''

    '
  timestamp: 1659792767
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Given two lists operator, and operand. The first list has basic
    algebra operations, and \n    // the second list is a list of integers. Use the
    two given lists to build the algebric \n    // expression and return the evaluation
    of this expression.\n    // The basic algebra operations:\n    // Addition ( +
    ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division
    ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',
    '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>
    result = 9\n    // Note:\n    // The length of operator list is equal to the length
    of operand list minus one.\n    // Operand is a list of of non-negative integers.\n
    \   // Operator list has at least one operator, and operand list has at least
    two operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)
    {\n        long result = 0;\n        foreach (string op1 in op) {\n            foreach
    (long op2 in operand) {\n                switch (op1) {\n                    case
    \"+\":\n                        result += op2;\n                        break;\n
    \                   case \"-\":\n                        result -= op2;\n                        break;\n
    \                   case \"*\":\n                        result *= op2;\n                        break;\n
    \                   case \"//\":\n                        result /= op2;\n                        break;\n
    \                   case \"**\":\n                        result *= op2;\n                        result
    *= op2;\n                        break;\n                }\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"**\", (string)\"*\",
    (string)\"+\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L})))
    == (37L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\",
    (string)\"*\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L,
    (long)4L, (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new
    string[]{(string)\"//\", (string)\"*\"})), (new List<long>(new long[]{(long)7L,
    (long)3L, (long)4L}))) == (8L));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <8ba91988ed834617a5ef98fd12a656d1>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659792766
