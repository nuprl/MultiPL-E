name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given a list representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ == arr[i]) {\n                    smallestIndex = i;\n                }\n  \
    \              else {\n                    smallestEvenValue = arr[i];\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        int smallest_even_index = 0;\n  \
    \      foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n \
    \               if (smallest_even_value < node.Value) {\n                    smallest_even_value\
    \ = node.Value;\n                    smallest_even_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (foundSmallestEvenValue)\
    \ {\n                    smallestIndex = value;\n                    foundSmallestEvenValue\
    \ = false;\n                }\n                else {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = value;\n                }\n\
    \            }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value == value) {\n                    found = true;\n      \
    \              break;\n                }\n                if (smallest_even_index\
    \ < arr.IndexOf(value)) {\n                    smallest_even_value = value;\n\
    \                    smallest_even_index = arr.IndexOf(value);\n             \
    \       found = true;\n                    break;\n                }\n       \
    \     }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = arr.Min();\n\
    \        int smalest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smalest_value < arr[i])\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count > 0) {\n            long smallest_even_value\
    \ = arr.Min();\n            long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \            bool found = false;\n            foreach (long value in arr) {\n\
    \                if (value % 2 == 0) {\n                    if (smallest_even_value\
    \ == value) {\n                        found = true;\n                       \
    \ break;\n                    }\n                    if (smallest_even_index <\
    \ arr.IndexOf(value)) {\n                        smallest_even_value = value;\n\
    \                        smallest_even_index = arr.IndexOf(value);\n         \
    \               found = true;\n                        break;\n              \
    \      }\n                }\n            }\n            if (found) {\n       \
    \         result.Add(smallest_even_value);\n                result.Add(smallest_even_index);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                found = true;\n              \
    \  if (smallest_value < item) {\n                    smallest_value = item;\n\
    \                    smallest_index = arr.IndexOf(item);\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       bool is_even = true;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                is_even = true;\n                smallest_even_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                smallest_value\
    \ = n;\n            } else {\n                is_even = false;\n            }\n\
    \        }\n        if (is_even) {\n            smallest_value = smallest_even_value;\n\
    \            smallest_index = smallest_index;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        if (arr.Count\
    \ == 0)\n            return new List<long>();\n        List<long> result = new\
    \ List<long>();\n        long smallestEvenValue = 0;\n        long smallestIndex\
    \ = 0;\n        bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex\
    \ = false;\n        long currentSmallestEvenValue = 0;\n        long currentSmallestIndex\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (foundSmallestEvenValue) {\n                    currentSmallestEvenValue\
    \ = smallestEvenValue;\n                    currentSmallestIndex = smallestIndex;\n\
    \                }\n                foundSmallestEvenValue = true;\n         \
    \       smallestEvenValue = node;\n                smallestIndex = arr.IndexOf(node);\n\
    \            }\n            else {\n                if (foundSmallestIndex) {\n\
    \                    if (currentSmallestEvenValue == smallestEvenValue) {\n  \
    \                      currentSmallestIndex = smallestIndex;\n               \
    \     }\n                    else {\n                        foundSmallestIndex\
    \ = false;\n                    }\n                }\n                else {\n\
    \                    if (currentSmallestEvenValue == smallestEvenValue) {\n  \
    \                      currentSmallestIndex = smallestIndex;\n               \
    \     }\n                    else {\n                        foundSmallestIndex\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(currentSmallestIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index < arr.IndexOf(value)) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (arr[i] < smallestEvenValue) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        bool is_even = true;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (is_even) {\n          \
    \      if (value < smallest_value) {\n                    smallest_value = value;\n\
    \                    smallest_index = i;\n                }\n            } else\
    \ {\n                if (value > smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n            is_even = !is_even;\n        }\n        if (smallest_index\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallest_value_2\
    \ = arr[smallest_index];\n        bool is_even_2 = true;\n        for (int i =\
    \ smallest_index + 1; i < arr.Count; i++) {\n            long value = arr[i];\n\
    \            if (is_even_2) {\n                if (value < smallest_value_2) {\n\
    \                    smallest_value_2 = value;\n                    smallest_index\
    \ = i;\n                }\n            } else {\n                if (value > smallest_value_2)\
    \ {\n                    smallest_value_2 = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n            is_even_2 = !is_even_2;\n\
    \        }\n        result.Add(smallest_value_2);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        foreach (long value in arr) {\n \
    \           if (value % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                    smallest_even_value = value / 2;\n\
    \                } else {\n                    if (value < smallest_even_value)\
    \ {\n                        smallest_even_value = value;\n                  \
    \      smallest_index = arr.IndexOf(value);\n                    }\n         \
    \       }\n            }\n        }\n        result.Add(smallest_value);\n   \
    \     result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                smallest_value = n;\n             \
    \   smallest_index = arr.IndexOf(n);\n                found = true;\n        \
    \        break;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        int smallestIndex = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smallestEven == arr[i])\
    \ {\n                    smallestIndex = i;\n                }\n             \
    \   else if (smallestEven == arr[i] && smallestIndex == -1) {\n              \
    \      smallestIndex = i;\n                }\n            }\n        }\n     \
    \   if (smallestIndex != -1) {\n            result.Add(smallestEven);\n      \
    \      result.Add(smallestIndex);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue == arr[i]) {\n                 \
    \   foundSmallestEvenValue = true;\n                    smallestIndex = i;\n \
    \               }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (smallest_value == 0) {\n          \
    \          smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                    found = true;\n                } else {\n               \
    \     if (arr[i] < smallest_value) {\n                        smallest_value =\
    \ arr[i];\n                        smallest_index = i;\n                     \
    \   found = true;\n                    }\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (long node in arr) {\n            if (node % 2 == 0) {\n                found\
    \ = true;\n                if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;"]
stop_tokens:
- "\n    }\n"
