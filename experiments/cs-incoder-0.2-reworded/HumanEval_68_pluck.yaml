name: HumanEval_68_pluck
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // \"Given a list representing a branch of a tree that has non-negative\
  \ integer nodes\n    // your task is to pluck one of the nodes and return it.\n\
  \    // The plucked node should be the node with the smallest even value.\n    //\
  \ If multiple nodes with the same smallest even value are found return the node\
  \ that has smallest index.\n    // The plucked node should be returned in a list,\
  \ [ smalest_value, its index ],\n    // If there are no even values or the given\
  \ list is empty, return [].\n    // Example 1:\n    // >>> Pluck((new List<long>(new\
  \ long[]{(long)4L, (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L,\
  \ (long)1L}))\n    // Explanation: 2 has the smallest even value, and 2 has the\
  \ smallest index.\n    // Example 2:\n    // >>> Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})))\n    // (new List<long>(new long[]{(long)2L, (long)1L}))\n\
  \    // Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\
  \    // Example 3:\n    // >>> Pluck((new List<long>()))\n    // (new List<long>())\n\
  \    // Example 4:\n    // >>> Pluck((new List<long>(new long[]{(long)5L, (long)0L,\
  \ (long)3L, (long)0L, (long)4L, (long)2L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)1L}))\n    // Explanation: 0 is the smallest value, but  there are two zeros,\n\
  \    // so we will choose the first zero, which has the smallest index.\n    //\
  \ Constraints:\n    // * 1 <= nodes.length <= 10000\n    // * 0 <= node.value\n\
  \    public static List<long> Pluck(List<long> arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new\
  \ List<long>(new long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
  \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
  \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
  \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L,\
  \ (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new long[]{(long)6L, (long)1L}))));\n\
  \    Debug.Assert(Pluck((new List<long>(new long[]{(long)7L, (long)9L, (long)7L,\
  \ (long)1L}))).Equals((new List<long>())));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ == arr[i]) {\n                    smallestIndex = i;\n                }\n  \
    \              else {\n                    smallestEvenValue = arr[i];\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        int smallest_even_index = 0;\n  \
    \      foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n \
    \               if (smallest_even_value < node.Value) {\n                    smallest_even_value\
    \ = node.Value;\n                    smallest_even_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (foundSmallestEvenValue)\
    \ {\n                    smallestIndex = value;\n                    foundSmallestEvenValue\
    \ = false;\n                }\n                else {\n                    foundSmallestEvenValue\
    \ = true;\n                    smallestEvenValue = value;\n                }\n\
    \            }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value == value) {\n                    found = true;\n      \
    \              break;\n                }\n                if (smallest_even_index\
    \ < arr.IndexOf(value)) {\n                    smallest_even_value = value;\n\
    \                    smallest_even_index = arr.IndexOf(value);\n             \
    \       found = true;\n                    break;\n                }\n       \
    \     }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smalest_value = arr.Min();\n\
    \        int smalest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smalest_value < arr[i])\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count > 0) {\n            long smallest_even_value\
    \ = arr.Min();\n            long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \            bool found = false;\n            foreach (long value in arr) {\n\
    \                if (value % 2 == 0) {\n                    if (smallest_even_value\
    \ == value) {\n                        found = true;\n                       \
    \ break;\n                    }\n                    if (smallest_even_index <\
    \ arr.IndexOf(value)) {\n                        smallest_even_value = value;\n\
    \                        smallest_even_index = arr.IndexOf(value);\n         \
    \               found = true;\n                        break;\n              \
    \      }\n                }\n            }\n            if (found) {\n       \
    \         result.Add(smallest_even_value);\n                result.Add(smallest_even_index);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                found = true;\n              \
    \  if (smallest_value < item) {\n                    smallest_value = item;\n\
    \                    smallest_index = arr.IndexOf(item);\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       bool is_even = true;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                is_even = true;\n                smallest_even_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                smallest_value\
    \ = n;\n            } else {\n                is_even = false;\n            }\n\
    \        }\n        if (is_even) {\n            smallest_value = smallest_even_value;\n\
    \            smallest_index = smallest_index;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        if (arr.Count\
    \ == 0)\n            return new List<long>();\n        List<long> result = new\
    \ List<long>();\n        long smallestEvenValue = 0;\n        long smallestIndex\
    \ = 0;\n        bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex\
    \ = false;\n        long currentSmallestEvenValue = 0;\n        long currentSmallestIndex\
    \ = 0;\n        foreach (long node in arr) {\n            if (node % 2 == 0) {\n\
    \                if (foundSmallestEvenValue) {\n                    currentSmallestEvenValue\
    \ = smallestEvenValue;\n                    currentSmallestIndex = smallestIndex;\n\
    \                }\n                foundSmallestEvenValue = true;\n         \
    \       smallestEvenValue = node;\n                smallestIndex = arr.IndexOf(node);\n\
    \            }\n            else {\n                if (foundSmallestIndex) {\n\
    \                    if (currentSmallestEvenValue == smallestEvenValue) {\n  \
    \                      currentSmallestIndex = smallestIndex;\n               \
    \     }\n                    else {\n                        foundSmallestIndex\
    \ = false;\n                    }\n                }\n                else {\n\
    \                    if (currentSmallestEvenValue == smallestEvenValue) {\n  \
    \                      currentSmallestIndex = smallestIndex;\n               \
    \     }\n                    else {\n                        foundSmallestIndex\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(currentSmallestIndex);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index < arr.IndexOf(value)) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (arr[i] < smallestEvenValue) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        bool is_even = true;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (is_even) {\n          \
    \      if (value < smallest_value) {\n                    smallest_value = value;\n\
    \                    smallest_index = i;\n                }\n            } else\
    \ {\n                if (value > smallest_value) {\n                    smallest_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       }\n            is_even = !is_even;\n        }\n        if (smallest_index\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallest_value_2\
    \ = arr[smallest_index];\n        bool is_even_2 = true;\n        for (int i =\
    \ smallest_index + 1; i < arr.Count; i++) {\n            long value = arr[i];\n\
    \            if (is_even_2) {\n                if (value < smallest_value_2) {\n\
    \                    smallest_value_2 = value;\n                    smallest_index\
    \ = i;\n                }\n            } else {\n                if (value > smallest_value_2)\
    \ {\n                    smallest_value_2 = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n            is_even_2 = !is_even_2;\n\
    \        }\n        result.Add(smallest_value_2);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     long smallest_even_value = 0;\n        foreach (long value in arr) {\n \
    \           if (value % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                    smallest_even_value = value / 2;\n\
    \                } else {\n                    if (value < smallest_even_value)\
    \ {\n                        smallest_even_value = value;\n                  \
    \      smallest_index = arr.IndexOf(value);\n                    }\n         \
    \       }\n            }\n        }\n        result.Add(smallest_value);\n   \
    \     result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (long n in arr) {\n     \
    \       if (n % 2 == 0) {\n                smallest_value = n;\n             \
    \   smallest_index = arr.IndexOf(n);\n                found = true;\n        \
    \        break;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEven = arr.Min();\n\
    \        int smallestIndex = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smallestEven == arr[i])\
    \ {\n                    smallestIndex = i;\n                }\n             \
    \   else if (smallestEven == arr[i] && smallestIndex == -1) {\n              \
    \      smallestIndex = i;\n                }\n            }\n        }\n     \
    \   if (smallestIndex != -1) {\n            result.Add(smallestEven);\n      \
    \      result.Add(smallestIndex);\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallestEvenValue = arr.Min();\n\
    \        long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallestEvenValue == arr[i]) {\n                 \
    \   foundSmallestEvenValue = true;\n                    smallestIndex = i;\n \
    \               }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (smallest_value == 0) {\n          \
    \          smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                    found = true;\n                } else {\n               \
    \     if (arr[i] < smallest_value) {\n                        smallest_value =\
    \ arr[i];\n                        smallest_index = i;\n                     \
    \   found = true;\n                    }\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (long node in arr) {\n            if (node % 2 == 0) {\n                found\
    \ = true;\n                if (smallest_value < node) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ if (arr.Count > 0) {\n            long smallest_value = arr.Min();\n       \
    \     int smallest_index = arr.FindIndex(x => x == smallest_value);\n        \
    \    if (smallest_value % 2 == 0) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n            } else {\n         \
    \       for (int i = 0; i < arr.Count; i++) {\n                    if (arr[i]\
    \ == smallest_value) {\n                        result.Add(arr[i]);\n        \
    \                result.Add(smallest_index);\n                        break;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        long smallest_value = 0;\n        int smallest_index = 0;\n\
    \        List<long> result = new List<long>();\n        foreach (var node in arr)\
    \ {\n            if (node.Value % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = node.Value;\n                \
    \    smallest_index = arr.IndexOf(node);\n                }\n                else\
    \ if (smallest_value < node.Value) {\n                    smallest_value = node.Value;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        int smallest_even_index = 0;\n  \
    \      foreach (var item in arr) {\n            if (item % 2 == 0) {\n       \
    \         if (smallest_even_value < item) {\n                    smallest_even_value\
    \ = item;\n                    smallest_even_index = arr.IndexOf(item);\n    \
    \            }\n            }\n        }\n        if (smallest_even_value == 0)\
    \ {\n            return result;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = -1;\n        long smallest_even_value = -1;\n      \
    \  foreach (long value in arr) {\n            if (value % 2 == 0) {\n        \
    \        if (smallest_even_value == -1) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = value;\n                } else\
    \ if (value < smallest_even_value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = value;\n                }\n \
    \           }\n        }\n        if (smallest_even_value == -1) {\n         \
    \   return result;\n        }\n        result.Add(smallest_even_value);\n    \
    \    result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        long\
    \ smallest_index = 0;\n        bool found = false;\n        foreach (long n in\
    \ arr) {\n            if (n % 2 == 0) {\n                if (smallest_even_value\
    \ < n) {\n                    smallest_even_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n                found = true;\n      \
    \      }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = 0;\n        long smalest_index = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (var node in arr) {\n          \
    \  if (node.Value % 2 == 0) {\n                smalest_value = Math.Min(smalest_value,\
    \ node.Value);\n                smalest_index = Math.Min(smalest_index, node.Index);\n\
    \            }\n        }\n        if (smalest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool found = false;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallestEven < n) {\n                  \
    \  smallestEven = n;\n                    smallestIndex = arr.IndexOf(n);\n  \
    \              }\n                found = true;\n            }\n        }\n  \
    \      if (found) {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min(x => x % 2 == 0 ? x : 0);\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        if (smallestIndex == -1) {\n         \
    \   return result;\n        }\n        bool found = false;\n        foreach (var\
    \ item in arr) {\n            if (item % 2 == 0) {\n                if (smallestEven\
    \ < item) {\n                    smallestEven = item;\n                    smallestIndex\
    \ = arr.IndexOf(item);\n                }\n                found = true;\n   \
    \         }\n        }\n        if (!found) {\n            return result;\n  \
    \      }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        long smallest_index = 0;\n      \
    \  foreach (var item in arr) {\n            if (item % 2 == 0) {\n           \
    \     smallest_even_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (smallest_even_value == 0) {\n         \
    \   return new List<long>();\n        }\n        List<long> evens = new List<long>();\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           evens.Add(item);\n            }\n        }\n        evens.Sort();\n\
    \        smallest_even_value = evens[0];\n        smallest_index = evens.IndexOf(smallest_even_value);\n\
    \        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ smallest_value = arr.Min();\n        long smallest_index = -1;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_value) {\n                found = true;\n              \
    \  smallest_index = i;\n            }\n        }\n        if (found) {\n     \
    \       result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            smallestEvenValue = smallestEvenValue\
    \ / 2;\n        }\n        if (smallestIndex != -1) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        long smallest_even_value = 0;\n   \
    \     bool found = false;\n        foreach (long value in arr) {\n           \
    \ if (value % 2 == 0) {\n                found = true;\n                smallest_even_value\
    \ = value;\n            }\n            if (value == smallest_value) {\n      \
    \          smallest_index = arr.IndexOf(value);\n            }\n        }\n  \
    \      if (found) {\n            result.Add(smallest_even_value);\n          \
    \  result.Add(smallest_index);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        int smallest_even_index = arr.IndexOf(smallest_even_value);\n       \
    \ if (smallest_even_index == -1) {\n            return result;\n        }\n  \
    \      List<long> even_values = new List<long>();\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                even_values.Add(arr[i]);\n\
    \            }\n        }\n        long smallest_value = even_values.Min();\n\
    \        int smallest_index = even_values.IndexOf(smallest_value);\n        if\
    \ (smallest_index == -1) {\n            return result;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEven = arr.Min();\n       \
    \ int smallestIndex = arr.IndexOf(smallestEven);\n        if (smallestIndex >\
    \ 0) {\n            result.Add(smallestEven);\n        }\n        else {\n   \
    \         result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_even_value\
    \ == n) {\n                    found = true;\n                    break;\n   \
    \             }\n                if (smallest_even_index < arr.IndexOf(n)) {\n\
    \                    smallest_even_value = n;\n                    smallest_even_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            for (int i = 0; i < arr.Count; i++)\
    \ {\n                if (arr[i] == smallest_value) {\n                    smallest_index\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        bool found2 = false;\n        for (int i = smallest_index\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n  \
    \              found2 = true;\n                break;\n            }\n       \
    \ }\n        if (found2) {\n            for (int i = smallest_index + 1; i < arr.Count;\
    \ i++) {\n                if (arr[i] == smallest_value) {\n                  \
    \  smallest_index = i;\n                    break;\n                }\n      \
    \      }\n        }\n        if (smallest_index == arr.Count - 1) {\n        \
    \    return result;\n        }\n        bool found3 = false;\n        for (int\
    \ i = smallest_index + 1; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found3 = true;\n                break;\n            }\n \
    \       }\n        if (found3) {\n            for (int i = smallest_index + 1;\
    \ i < arr.Count; i++) {\n                if (arr[i] == smallest_value) {\n   \
    \                 smallest_index = i;\n                    break;\n          \
    \      }\n            }\n        }\n        if (smallest_index == arr.Count -\
    \ 1) {\n            return result;\n        }\n        bool found4 = false;\n\
    \        for (int i = smallest_index + 1; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_value) {\n                found4 = true;\n             \
    \   break;\n            }\n        }\n        if (found4) {\n            for (int\
    \ i = smallest_index + 1; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    smallest_index = i;\n               \
    \     break;\n                }\n            }\n        }\n        if (smallest_index\
    \ == arr.Count - 1) {\n            return result;\n        }\n        bool found5\
    \ = false;\n        for (int i = smallest_index + 1; i < arr.Count; i++) {\n \
    \           if (arr[i] == smallest_value) {\n                found5 = true;\n\
    \                break;\n            }\n        }\n        if (found5) {\n   \
    \         for (int i = smallest_index + 1; i < arr.Count; i++) {\n           \
    \     if (arr[i] == smallest_value) {\n                    smallest_index = i;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (smallest_index == arr.Count - 1) {\n            return result;\n   \
    \     }\n        bool found6 = false;\n        for (int i = smallest_", "    \
    \    List<long> result = new List<long>();\n        long smallest_even_value =\
    \ arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index < arr.IndexOf(value)) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                    found = true;\n                 \
    \   break;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        int smalest_index = arr.IndexOf(smalest_value);\n\
    \        long smalest_even_value = smalest_value % 2 == 0 ? smalest_value : smalest_value\
    \ - 1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (value == smalest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \          if (value == smalest_even_value) {\n                found = true;\n\
    \                break;\n            }\n            if (value == smalest_index)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smalest_value);\n     \
    \       result.Add(smalest_index);\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        long smallest_even_value =\
    \ arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value == arr[i]) {\n                    found = true;\n          \
    \          smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        if (arr.Count == 0)\n            return\
    \ new List<long>();\n        List<long> result = new List<long>();\n        long\
    \ smalest_value = arr.Min();\n        int smalest_index = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       if (smalest_value < arr[i]) {\n                    smalest_value = arr[i];\n\
    \                    smalest_index = i;\n                }\n            }\n  \
    \      }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallest_value == smallest_even_value) {\n       \
    \             smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                    found = true;\n                }\n                else if\
    \ (smallest_value < arr[i]) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        long smallestValue =\
    \ smallestEvenValue;\n        long largestEvenValue = arr.Max();\n        long\
    \ largestIndex = 0;\n        long largestValue = largestEvenValue;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (value < smallestValue) {\n                    smallestValue = value;\n    \
    \                smallestIndex = arr.IndexOf(value);\n                }\n    \
    \            if (value > largestValue) {\n                    largestValue = value;\n\
    \                    largestIndex = arr.IndexOf(value);\n                }\n \
    \           }\n        }\n        if (smallestValue == smallestEvenValue) {\n\
    \            result.Add(smallestValue);\n            result.Add(smallestIndex);\n\
    \        } else {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        if (largestValue == largestEvenValue) {\n            result.Add(largestValue);\n\
    \            result.Add(largestIndex);\n        } else {\n            result.Add(largestEvenValue);\n\
    \            result.Add(largestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallest_even_value < n) {\n           \
    \         smallest_even_value = n;\n                    smallest_even_index =\
    \ arr.IndexOf(n);\n                    found = true;\n                }\n    \
    \        }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        foreach (var item in arr) {\n            if\
    \ (item % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    if (smallest_index == arr.IndexOf(item)) {\n        \
    \                result.Add(smallest_value);\n                        result.Add(smallest_index);\n\
    \                        break;\n                    }\n                    else\
    \ {\n                        smallest_value = item;\n                        smallest_index\
    \ = arr.IndexOf(item);\n                    }\n                }\n           \
    \     else {\n                    smallest_value = item;\n                   \
    \ smallest_index = arr.IndexOf(item);\n                }\n            }\n    \
    \    }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        else {\n            return result;\n        }", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        bool foundSmallestEvenValue = false;\n\
    \        bool foundSmallestIndex = false;\n        foreach (long value in arr)\
    \ {\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     foundSmallestEvenValue = true;\n                }\n                if (smallestIndex\
    \ < value) {\n                    smallestIndex = value;\n                   \
    \ foundSmallestIndex = true;\n                }\n            }\n        }\n  \
    \      if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        if (result.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        return result;",
  "        long smallest_even_value = arr.Min(x => x % 2 == 0 ? x : 0);\n        List<long>\
    \ result = new List<long>();\n        long smallest_index = 0;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       if (arr[i] < smallest_even_value) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                }\n    \
    \        }\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEven = arr.Min();\n        int smallestIndex = 0;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (smallestEven < arr[i]) {\n                    smallestEven\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;", "        long smalest_value = arr.Min();\n        long\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr.Min();\n \
    \           smalest_index = 0;\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        foreach (var item in arr) {\n            if (item\
    \ % 2 == 0) {\n                smallestEvenValue = item;\n                smallestIndex\
    \ = arr.IndexOf(item);\n            }\n        }\n        if (smallestEvenValue\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                if (smallest_value == 0) {\n \
    \                   smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                    found = true;\n                } else\
    \ if (smallest_value < item) {\n                    smallest_value = item;\n \
    \                   smallest_index = arr.IndexOf(item);\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestIndex = arr.IndexOf(value);\n        \
    \        }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long smalest_value = arr.Min();\n      \
    \  long smalest_index = 0;\n        bool found = false;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n             \
    \   if (smalest_value < arr[i]) {\n                    smalest_value = arr[i];\n\
    \                    smalest_index = i;\n                    found = true;\n \
    \               }\n            }\n        }\n        if (found) {\n          \
    \  result.Add(smalest_value);\n            result.Add(smalest_index);\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     long smallest_value = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n           \
    \ if (value % 2 == 0) {\n                if (smallest_even_value < value) {\n\
    \                    smallest_even_value = value;\n                    smallest_index\
    \ = i;\n                }\n                if (smallest_even_value == value) {\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            smallest_value = arr[smallest_index];\n\
    \            result.Add(smallest_value);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smallest_index = -1;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_index\
    \ == -1) {\n                    smallest_index = n;\n                    found\
    \ = true;\n                } else {\n                    if (n < smallest_index)\
    \ {\n                        smallest_index = n;\n                        found\
    \ = true;\n                    }\n                }\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_index);\n            result.Add(smalest_value);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var item in arr) {\n            if (item %\
    \ 2 == 0) {\n                found = true;\n                smallest_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long smalest_value = 0;\n      \
    \  long smalest_index = 0;\n        long smalest_even_value = 0;\n        long\
    \ smalest_even_index = 0;\n        long smalest_even_index_2 = 0;\n        long\
    \ smalest_even_index_3 = 0;\n        long smalest_even_index_4 = 0;\n        long\
    \ smalest_even_index_5 = 0;\n        long smalest_even_index_6 = 0;\n        long\
    \ smalest_even_index_7 = 0;\n        long smalest_even_index_8 = 0;\n        long\
    \ smalest_even_index_9 = 0;\n        long smalest_even_index_10 = 0;\n       \
    \ long smalest_even_index_11 = 0;\n        long smalest_even_index_12 = 0;\n \
    \       long smalest_even_index_13 = 0;\n        long smalest_even_index_14 =\
    \ 0;\n        long smalest_even_index_15 = 0;\n        long smalest_even_index_16\
    \ = 0;\n        long smalest_even_index_17 = 0;\n        long smalest_even_index_18\
    \ = 0;\n        long smalest_even_index_19 = 0;\n        long smalest_even_index_20\
    \ = 0;\n        long smalest_even_index_21 = 0;\n        long smalest_even_index_22\
    \ = 0;\n        long smalest_even_index_23 = 0;\n        long smalest_even_index_24\
    \ = 0;\n        long smalest_even_index_25 = 0;\n        long smalest_even_index_26\
    \ = 0;\n        long smalest_even_index_27 = 0;\n        long smalest_even_index_28\
    \ = 0;\n        long smalest_even_index_29 = 0;\n        long smalest_even_index_30\
    \ = 0;\n        long smalest_even_index_31 = 0;\n        long smalest_even_index_32\
    \ = 0;\n        long smalest_even_index_33 = 0;\n        long smalest_even_index_34\
    \ = 0;\n        long smalest_even_index_35 = 0;\n        long smalest_even_index_36\
    \ = 0;\n        long smalest_even_index_37 = 0;\n        long smalest_even_index_38\
    \ = 0;\n        long smalest_even_index_39 = 0;\n        long smalest_even_index_40\
    \ = 0;\n        long smalest_even_index_41 = 1;\n        long smalest_even_index_42\
    \ = 1;\n        long smalest_even_index_43 = 1;\n        long smalest_even_index_44\
    \ = 1;\n        long smalest_even_index_45 = 1;\n        long smalest_even_index_46\
    \ = 1;\n        long smalest_even_index_47 = 1;\n        long smalest_even_index_48\
    \ = 1;\n        long smalest_even_index_49 = 1;\n", "        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = 0;\n        long smallestIndex\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             smallestEvenValue = n;\n                smallestIndex = arr.IndexOf(n);\n\
    \            }\n        }\n        if (smallestEvenValue == 0) {\n           \
    \ return result;\n        }\n        List<long> evenValues = new List<long>();\n\
    \        List<long> evenIndexes = new List<long>();\n        foreach (long n in\
    \ arr) {\n            if (n % 2 == 0) {\n                evenValues.Add(n);\n\
    \                evenIndexes.Add(arr.IndexOf(n));\n            }\n        }\n\
    \        smallestEvenValue = evenValues.Min();\n        smallestIndex = evenIndexes.Min();\n\
    \        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        long smallest_index = 0;\n      \
    \  bool found = false;\n        foreach (var item in arr) {\n            if (item\
    \ % 2 == 0) {\n                smallest_even_value = item;\n                smallest_index\
    \ = arr.IndexOf(item);\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = smallest_even_index\
    \ + 1; i < arr.Count; i++) {\n            long value = arr[i];\n            if\
    \ (value % 2 == 0) {\n                found = true;\n                if (value\
    \ < smallest_value) {\n                    smallest_value = value;\n         \
    \           smallest_index = i;\n                }\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        int smalest_index = 0;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smalest_value < arr[i]) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (smallest_value == smallest_even_value) {\n                   \
    \ smallest_value = item;\n                    smallest_index = arr.IndexOf(item);\n\
    \                    found = true;\n                }\n                else if\
    \ (smallest_value == item) {\n                    smallest_value = item;\n   \
    \                 smallest_index = arr.IndexOf(item);\n                    found\
    \ = true;\n                }\n                else if (smallest_value < item)\
    \ {\n                    smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                    found = true;\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                smallest_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value < n) {\n   \
    \                 smalest_value = n;\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (smalest_index != 0)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == arr.Count\
    \ - 1) {\n            result.Add(smallest_even_value);\n            return result;\n\
    \        }\n        long smallest_odd_value = arr[smallest_even_index + 1];\n\
    \        long smallest_odd_index = arr.IndexOf(smallest_odd_value);\n        if\
    \ (smallest_odd_index == arr.Count - 1) {\n            result.Add(smallest_odd_value);\n\
    \            return result;\n        }\n        long smallest_odd_value_2 = arr[smallest_odd_index\
    \ + 1];\n        long smallest_odd_index_2 = arr.IndexOf(smallest_odd_value_2);\n\
    \        if (smallest_odd_index_2 == arr.Count - 1) {\n            result.Add(smallest_odd_value_2);\n\
    \            return result;\n        }\n        long smallest_odd_value_3 = arr[smallest_odd_index_2\
    \ + 1];\n        long smallest_odd_index_3 = arr.IndexOf(smallest_odd_value_3);\n\
    \        if (smallest_odd_index_3 == arr.Count - 1) {\n            result.Add(smallest_odd_value_3);\n\
    \            return result;\n        }\n        long smallest_odd_value_4 = arr[smallest_odd_index_3\
    \ + 1];\n        long smallest_odd_index_4 = arr.IndexOf(smallest_odd_value_4);\n\
    \        if (smallest_odd_index_4 == arr.Count - 1) {\n            result.Add(smallest_odd_value_4);\n\
    \            return result;\n        }\n        long smallest_odd_value_5 = arr[smallest_odd_index_4\
    \ + 1];\n        long smallest_odd_index_5 = arr.IndexOf(smallest_odd_value_5);\n\
    \        if (smallest_odd_index_5 == arr.Count - 1) {\n            result.Add(smallest_odd_value_5);\n\
    \            return result;\n        }\n        long smallest_odd_value_6 = arr[smallest_odd_index_5\
    \ + 1];\n        long smallest_odd_index_6 = arr.IndexOf(smallest_odd_value_6);\n\
    \        if (smallest_odd_index_6 == arr.Count - 1) {\n            result.Add(smallest_odd_value_6);\n\
    \            return result;\n        }\n        long smallest_odd_value_7 = arr[smallest_odd_index_6\
    \ + 1];\n        long smallest_odd_index_7 = arr.IndexOf(smallest_odd_value_7);\n\
    \        if (smallest_odd_index_7 == arr.Count - 1) {\n            result.Add(smallest_odd_value_7);\n\
    \            return result;\n        }\n        long smallest_odd_value_8 = arr[smallest_odd_index_7\
    \ + 1];\n        long smallest_od", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            int smallest_index = smallest_even_index;\n \
    \           while (smallest_index != -1) {\n                if (arr[smallest_index]\
    \ % 2 == 0) {\n                    smallest_value = arr[smallest_index];\n   \
    \                 smallest_index = smallest_even_index;\n                } else\
    \ {\n                    smallest_index--;\n                }\n            }\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            return result;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    smallest_index\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        if (smallest_index != smallest_even_index) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            int index = smallest_even_index;\n\
    \            while (index > 0) {\n                index--;\n                if\
    \ (arr[index] % 2 == 0) {\n                    break;\n                }\n   \
    \         }\n            result.Add(smallest_value);\n            result.Add(index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        foreach (var item in arr) {\n            if\
    \ (item % 2 == 0) {\n                smallest_even_value = item;\n           \
    \     smallest_index = arr.IndexOf(item);\n                found = true;\n   \
    \         }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        if (arr.Count == 0)\n            return new List<long>();\n        long\
    \ smallest_even_value = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        List<long> result = new List<long>();\n        if (smallest_even_index\
    \ != -1)\n            result.Add(smallest_even_value);\n        if (arr.Count\
    \ > 1)\n            result.Add(smallest_even_index);\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long i in arr) {\n            if\
    \ (i % 2 == 0) {\n                if (i == smallest_even_value) {\n          \
    \          found = true;\n                }\n            }\n        }\n      \
    \  if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        bool\
    \ found = false;\n        foreach (var node in arr) {\n            if (found ==\
    \ true) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \           smallest_even_value = smallest_value % 2;\n                    smallest_even_index\
    \ = smallest_index;\n                }\n                else if (smallest_value\
    \ == node % 2) {\n                    smallest_even_value = smallest_value % 2;\n\
    \                    smallest_even_index = arr.IndexOf(node);\n              \
    \  }\n                else {\n                    if (smallest_value == smallest_even_value)\
    \ {\n                        smallest_index = arr.IndexOf(node);\n           \
    \         }\n                }\n            }\n            else {\n          \
    \      if (node % 2 == 0) {\n                    smallest_even_value = node %\
    \ 2;\n                    smallest_even_index = arr.IndexOf(node);\n         \
    \       }\n                else {\n                    if (node < smallest_value)\
    \ {\n                        smallest_value = node;\n                        smallest_index\
    \ = arr.IndexOf(node);\n                    }\n                }\n           \
    \ }\n            found = true;\n        }\n        if (smallest_value == 0) {\n\
    \            result.Add(0);\n        }\n        else if (smallest_value == smallest_even_value)\
    \ {\n            result.Add(smallest_even_index);\n        }\n        else {\n\
    \            result.Add(smallest_value);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallest_even_value == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result_list = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smallest_even_value) {\n                    result_list.Add(item);\n     \
    \           }\n            }\n        }\n        if (result_list.Count > 0) {\n\
    \            result_list.Insert(smallest_index, smallest_even_value);\n      \
    \  }\n        return result_list;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool isSmallestEvenValue = true;\n        bool isSmallestIndex = true;\n\
    \        long smallestIndexValue = arr.Min();\n        long smallestEvenValueValue\
    \ = arr.Min();\n        bool isSmallestIndexValue = true;\n        bool isSmallestEvenValueValue\
    \ = true;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                if (smallestEvenValue < value) {\n                   \
    \ smallestEvenValue = value;\n                    smallestEvenValueValue = value;\n\
    \                    isSmallestEvenValue = true;\n                }\n        \
    \        if (smallestIndex < value) {\n                    smallestIndex = value;\n\
    \                    isSmallestIndex = true;\n                }\n            \
    \    if (smallestIndexValue < value) {\n                    smallestIndexValue\
    \ = value;\n                    isSmallestIndexValue = true;\n               \
    \ }\n                if (smallestEvenValueValue < value) {\n                 \
    \   smallestEvenValueValue = value;\n                    isSmallestEvenValueValue\
    \ = true;\n                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \            result.Add(smallestIndexValue);\n            result.Add(smallestEvenValueValue);\n\
    \        }\n        return result;", "        long smalest_value = 0;\n      \
    \  int smalest_index = 0;\n        List<long> result = new List<long>();\n   \
    \     foreach (var item in arr) {\n            if (item % 2 == 0) {\n        \
    \        if (smalest_value < item) {\n                    smalest_value = item;\n\
    \                    smalest_index = arr.IndexOf(item);\n                }\n \
    \           }\n        }\n        if (smalest_index != arr.Count - 1) {\n    \
    \        result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n                found = false;\n\
    \            }\n            else if (arr[i] == smallest_value) {\n           \
    \     found = true;\n            }\n        }\n        if (found) {\n        \
    \    result.Add(smallest_value);\n            result.Add(smallest_index);\n  \
    \      }\n        else {\n            result.Add(smallest_value);\n        }\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        bool\
    \ found = false;\n        foreach (long n in arr) {\n            if (n % 2 ==\
    \ 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = n;\n                    smallest_index = arr.IndexOf(n);\n               \
    \     smallest_even_value = n % 2;\n                    smallest_even_index =\
    \ arr.IndexOf(n % 2);\n                    found = true;\n                } else\
    \ if (smallest_value == n) {\n                    smallest_even_value = n % 2;\n\
    \                    smallest_even_index = arr.IndexOf(n % 2);\n             \
    \       found = true;\n                } else if (smallest_value == n % 2) {\n\
    \                    smallest_even_value = n % 2;\n                    smallest_even_index\
    \ = arr.IndexOf(n % 2);\n                    found = true;\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        } else {\n            result.Add(0);\n\
    \            result.Add(0);\n            result.Add(0);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (arr[i] < smallestEvenValue) {\n                  \
    \  smallestEvenValue = arr[i];\n                    smallestIndex = i;\n     \
    \           }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue % 2\
    \ == 0) {\n                    smallestEvenValue = arr[i];\n                 \
    \   smallestIndex = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        long\
    \ smallest_index = 0;\n        bool has_even_values = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                has_even_values\
    \ = true;\n                smallest_even_value = n;\n                smallest_index\
    \ = arr.IndexOf(n);\n            }\n        }\n        if (has_even_values) {\n\
    \            smallest_even_value = smallest_even_value % 2;\n            smallest_index\
    \ = smallest_index % 2;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = -1;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n  \
    \              found = true;\n                result.Add(smallest_value);\n  \
    \              result.Add(smallest_index);\n                break;\n         \
    \   }\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       if (!found) {\n            return result;\n        }\n        List<long>\
    \ even_values = new List<long>();\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                even_values.Add(arr[i]);\n\
    \            }\n        }\n        if (even_values.Count == 0) {\n           \
    \ return result;\n        }\n        long smallest_even_value = even_values.Min();\n\
    \        long smallest_even_index = -1;\n        for (int i = 0; i < even_values.Count;\
    \ i++) {\n            if (even_values[i] == smallest_even_value) {\n         \
    \       smallest_even_index = i;\n                break;\n            }\n    \
    \    }\n        if (smallest_even_index == -1) {\n            return result;\n\
    \        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<long>();\n        }\n        long smallest_value = arr.Min();\n       \
    \ long smallest_index = 0;\n        List<long> result = new List<long>();\n  \
    \      foreach (long node in arr) {\n            if (node % 2 == 0) {\n      \
    \          if (smallest_value < node) {\n                    smallest_value =\
    \ node;\n                    smallest_index = arr.IndexOf(node);\n           \
    \     }\n            }\n        }\n        result.Add(smallest_value);\n     \
    \   result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] < smallest_value) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     result.Add(smallest_value);\n        result.Add(smallest_index);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ smallest_even_value = arr.Min();\n        int smallest_even_index = arr.FindIndex(x\
    \ => x == smallest_even_value);\n        if (smallest_even_index == -1) {\n  \
    \          return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            int index = smallest_even_index;\n\
    \            while (index > 0) {\n                if (arr[index / 2] == smallest_value)\
    \ {\n                    result.Add(smallest_value);\n                    result.Add(smallest_index);\n\
    \                    break;\n                }\n                index--;\n   \
    \         }\n        }\n        return result;", "        List<long> result =\
    \ new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        foreach (var item in arr) {\n            if (item % 2 == 0) {\n\
    \                smallest_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (smallest_index > 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_even_value);\n\
    \            return result;\n        }\n        long smallest_odd_value = arr[smallest_even_index\
    \ + 1];\n        long smallest_odd_index = arr.IndexOf(smallest_odd_value);\n\
    \        if (smallest_odd_index == arr.Count - 1) {\n            result.Add(smallest_odd_value);\n\
    \            return result;\n        }\n        long smallest_odd_value_2 = arr[smallest_odd_index\
    \ + 1];\n        long smallest_odd_index_2 = arr.IndexOf(smallest_odd_value_2);\n\
    \        if (smallest_odd_index_2 == arr.Count - 1) {\n            result.Add(smallest_odd_value_2);\n\
    \            return result;\n        }\n        long smallest_odd_value_3 = arr[smallest_odd_index_2\
    \ + 1];\n        long smallest_odd_index_3 = arr.IndexOf(smallest_odd_value_3);\n\
    \        if (smallest_odd_index_3 == arr.Count - 1) {\n            result.Add(smallest_odd_value_3);\n\
    \            return result;\n        }\n        long smallest_odd_value_4 = arr[smallest_odd_index_3\
    \ + 1];\n        long smallest_odd_index_4 = arr.IndexOf(smallest_odd_value_4);\n\
    \        if (smallest_odd_index_4 == arr.Count - 1) {\n            result.Add(smallest_odd_value_4);\n\
    \            return result;\n        }\n        long smallest_odd_value_5 = arr[smallest_odd_index_4\
    \ + 1];\n        long smallest_odd_index_5 = arr.IndexOf(smallest_odd_value_5);\n\
    \        if (smallest_odd_index_5 == arr.Count - 1) {\n            result.Add(smallest_odd_value_5);\n\
    \            return result;\n        }\n        long smallest_odd_value_6 = arr[smallest_odd_index_5\
    \ + 1];\n        long smallest_odd_index_6 = arr.IndexOf(smallest_odd_value_6);\n\
    \        if (smallest_odd_index_6 == arr.Count - 1) {\n            result.Add(smallest_odd_value_6);\n\
    \            return result;\n        }\n        long smallest_odd_value_7 = arr[smallest_odd_index_6\
    \ + 1];\n        long smallest_odd_index_7 = arr.IndexOf(smallest_odd_value_7);\n\
    \        if (smallest_odd_index_7 == arr.Count - 1) {\n            result.Add(smallest_odd_value_7);\n\
    \            return result;\n        }\n        long smallest_odd_value_8 = arr[smallest_odd_index_7\
    \ + 1];\n        long smallest_od", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        long\
    \ smallest_even_value = 0;\n        long smallest_even_index = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                if (smallest_value == 0) {\n          \
    \          smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                    smallest_even_value = arr[i];\n                    smallest_even_index\
    \ = i;\n                    found = true;\n                }\n               \
    \ else {\n                    if (arr[i] < smallest_even_value) {\n          \
    \              smallest_even_value = arr[i];\n                        smallest_even_index\
    \ = i;\n                    }\n                }\n            }\n        }\n \
    \       if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        else {\n            result.Add(0);\n            result.Add(0);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value == value) {\n                    found = true;\n      \
    \              break;\n                }\n                if (smallest_even_index\
    \ == arr.IndexOf(value)) {\n                    found = true;\n              \
    \      break;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        } else {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                found = true;\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long smallest_value = arr.Min();\n        long smallest_index = -1;\n     \
    \   bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n     \
    \       long value = arr[i];\n            if (value % 2 == 0) {\n            \
    \    if (smallest_value < value) {\n                    smallest_value = value;\n\
    \                    smallest_index = i;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;", "        long smalest_value = 0;\n        int\
    \ smalest_index = 0;\n        List<long> result = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smalest_index = arr.IndexOf(item);\n                }\n            }\n\
    \        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index != arr.Count - 1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        if (arr.Count == 0) {\n            return result;\n        }\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_value == arr[i]) {\n                 \
    \   found = true;\n                    break;\n                }\n           \
    \     if (smallest_value == arr[i] && smallest_index == i) {\n               \
    \     found = true;\n                    break;\n                }\n         \
    \   }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = 0;\n        long smallestIndex = 0;\n      \
    \  bool foundSmallestEvenValue = false;\n        bool foundSmallestIndex = false;\n\
    \        foreach (long node in arr) {\n            if (node % 2 == 0) {\n    \
    \            if (!foundSmallestEvenValue) {\n                    smallestEvenValue\
    \ = node;\n                    foundSmallestEvenValue = true;\n              \
    \  }\n                if (foundSmallestEvenValue && node < smallestEvenValue)\
    \ {\n                    smallestEvenValue = node;\n                    foundSmallestEvenValue\
    \ = true;\n                }\n                if (foundSmallestEvenValue && node\
    \ == smallestEvenValue) {\n                    foundSmallestIndex = true;\n  \
    \              }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        if (foundSmallestIndex) {\n            result.Add(smallestIndex);\n\
    \        }\n        if (result.Count == 0) {\n            result.Add(0);\n   \
    \     }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] % 2 == 0) {\n                smallest_even_value = arr[i];\n\
    \                smallest_index = i;\n                found = true;\n        \
    \        break;\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallestEvenValue =\
    \ arr.Min(x => x % 2 == 0 ? x : 0);\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    long smallest_even_value = 0;\n        int smallest_even_index = 0;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smallest_even_value < arr[i]) {\n                   \
    \ smallest_even_value = arr[i];\n                    smallest_even_index = i;\n\
    \                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        return result;", "        if\
    \ (arr.Count == 0) {\n            return new List<long>();\n        }\n      \
    \  List<long> result = new List<long>();\n        long smallest_value = 0;\n \
    \       long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n         \
    \       found = true;\n                smallest_value = arr[i];\n            \
    \    smallest_index = i;\n            }\n        }\n        if (found) {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        foreach (long node in arr) {\n            if (node % 2 == 0) {\n    \
    \            if (smallestEvenValue < node) {\n                    smallestEvenValue\
    \ = node;\n                    smallestIndex = arr.IndexOf(node);\n          \
    \      }\n            }\n        }\n        result.Add(smallestEvenValue);\n \
    \       result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = -1;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        if (arr.Count <= 0) {\n        \
    \    return new List<long>();\n        }\n        List<long> result = new List<long>();\n\
    \        long smalest_value = arr.Min();\n        int smalest_index = 0;\n   \
    \     for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smalest_value < arr[i]) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        int smallestIndex = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (arr[i] < smallestEvenValue) {\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n \
    \       bool foundSmallestEvenValue = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ == arr[i]) {\n                    foundSmallestEvenValue = true;\n         \
    \           smallestIndex = i;\n                }\n            }\n        }\n\
    \        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            int index = smallest_even_index;\n\
    \            while (index > 0 && arr[index] == smallest_value) {\n           \
    \     index--;\n            }\n            result.Add(smallest_value);\n     \
    \       result.Add(index);\n        }\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                if (smallest_value == 0) {\n \
    \                   smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                    smallest_even_value = item / 2;\n\
    \                    smallest_even_index = smallest_index;\n                 \
    \   found = true;\n                } else if (smallest_value == item) {\n    \
    \                smallest_even_index = arr.IndexOf(item);\n                  \
    \  found = true;\n                } else if (smallest_value == item / 2) {\n \
    \                   smallest_even_index = arr.IndexOf(item);\n               \
    \     found = true;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_even_index);\n\
    \        } else {\n            result.Add(0);\n            result.Add(0);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                found = true;\n                if (value < smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value == value) {\n                    found = true;\n      \
    \              break;\n                }\n                if (smallest_even_index\
    \ < arr.IndexOf(value)) {\n                    smallest_even_value = value;\n\
    \                    smallest_even_index = arr.IndexOf(value);\n             \
    \   }\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long n in arr) {\n\
    \            if (n % 2 == 0) {\n                if (smalest_value == n) {\n  \
    \                  smalest_index = arr.IndexOf(n);\n                }\n      \
    \          else if (smalest_value < n) {\n                    smalest_value =\
    \ n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  if (smallest_even_index == -1) {\n            return result;\n        }\n \
    \       long smallest_value = arr[smallest_even_index];\n        List<long> even_values\
    \ = new List<long>();\n        List<long> even_indexes = new List<long>();\n \
    \       for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                even_values.Add(arr[i]);\n                even_indexes.Add(i);\n\
    \            }\n        }\n        if (even_values.Count > 0) {\n            long\
    \ smallest_even_value = even_values.Min();\n            long smallest_even_index\
    \ = even_indexes.IndexOf(smallest_even_value);\n            if (smallest_even_index\
    \ == -1) {\n                return result;\n            }\n            long smallest_value\
    \ = even_values[smallest_even_index];\n            if (smallest_value == smallest_even_value)\
    \ {\n                result.Add(smallest_value);\n                result.Add(smallest_even_index);\n\
    \            } else {\n                result.Add(smallest_even_value);\n    \
    \            result.Add(smallest_even_index);\n            }\n        } else {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                break;\n            }\n            if (arr[i] < smallest_value\
    \ && !found) {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        return result.Count == 0 ? new List<long>()\
    \ : result;", "        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        long smallest_even_value\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_even_value == -1) {\n            \
    \        smallest_even_value = arr[i];\n                    smallest_index = i;\n\
    \                } else if (arr[i] < smallest_even_value) {\n                \
    \    smallest_even_value = arr[i];\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  if (smallest_even_index == -1) {\n            return result;\n        }\n \
    \       long smallest_value = arr[smallest_even_index];\n        List<long> even_values\
    \ = new List<long>();\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                even_values.Add(value);\n            }\n      \
    \  }\n        if (even_values.Count == 1) {\n            smallest_value = even_values[0];\n\
    \        }\n        if (even_values.Count > 1) {\n            smallest_value =\
    \ even_values.Min();\n        }\n        result.Add(smallest_value);\n       \
    \ result.Add(smallest_even_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min(x =>\
    \ x % 2 == 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var node in arr) {\n\
    \            if (node.Value % 2 == 0) {\n                if (smallest_even_value\
    \ < node.Value) {\n                    smallest_even_value = node.Value;\n   \
    \                 smallest_index = node.Index;\n                }\n          \
    \  }\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        long smallest_index = 0;\n      \
    \  bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] % 2 == 0) {\n                if (smallest_even_value < arr[i])\
    \ {\n                    smallest_even_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long node in arr) {\n            if (node % 2 == 0) {\n          \
    \      if (smallest_even_value < node) {\n                    smallest_even_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \           found = true;\n                }\n            }\n        }\n     \
    \   if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  List<long> result = new List<long>();\n        if (smallest_even_index != -1)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n\
    \        bool foundSmallestEvenValue = false;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    foundSmallestEvenValue = true;\n          \
    \          smallestEvenValue = value;\n                    smallestIndex = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == arr.Count\
    \ - 1) {\n            return result;\n        }\n        long smallest_value =\
    \ arr[smallest_even_index];\n        bool found = false;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n    \
    \            found = true;\n                break;\n            }\n        }\n\
    \        if (!found) {\n            return result;\n        }\n        long smallest_index\
    \ = smallest_even_index;\n        for (int i = smallest_even_index + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n                break;\n     \
    \       }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        int smallest_index = 0;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ < n) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = 0;\n        bool found = false;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n   \
    \             smallest_value = arr[i];\n                smallest_index = i;\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     long smallest_value = 0;\n        bool found = false;\n        foreach (long\
    \ n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_even_value\
    \ < n) {\n                    smallest_even_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                    smallest_value = n;\n               \
    \     found = true;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallestEven = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        bool hasEven = arr.Any(x => x % 2 == 0);\n        if (hasEven) {\n  \
    \          smallestEven = arr.Min(x => x % 2 == 0);\n            smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = arr.Min();\n  \
    \      long smallestEvenIndex = 0;\n        bool isSmallestEvenValueFound = false;\n\
    \        bool isSmallestEvenIndexFound = false;\n        long smallestEvenValueFoundIndex\
    \ = -1;\n        foreach (long value in arr) {\n            if (value % 2 == 0)\
    \ {\n                if (smallestEvenValue % 2 == 0) {\n                    isSmallestEvenValueFound\
    \ = true;\n                    smallestEvenValueFoundIndex = value;\n        \
    \        }\n                if (value < smallestEvenValue) {\n               \
    \     isSmallestEvenValueFound = true;\n                    smallestEvenValue\
    \ = value;\n                    smallestEvenIndex = value;\n                }\n\
    \            } else {\n                if (smallestEvenValue % 2 != 0) {\n   \
    \                 isSmallestEvenValueFound = true;\n                    smallestEvenValueFoundIndex\
    \ = value;\n                }\n                if (value < smallestEvenValue)\
    \ {\n                    isSmallestEvenValueFound = true;\n                  \
    \  smallestEvenValue = value;\n                    smallestEvenIndex = value;\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestEvenIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        int smallest_index = 0;\n    \
    \    foreach (long node in arr) {\n            if (node % 2 == 0) {\n        \
    \        if (smallest_even_value < node) {\n                    smallest_even_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       }\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long smallestEvenValue = 0;\n        long\
    \ smallestIndex = 0;\n        long currentValue = 0;\n        long currentIndex\
    \ = 0;\n        foreach (var node in arr) {\n            if (node % 2 == 0) {\n\
    \                currentValue = node;\n                currentIndex = currentIndex\
    \ + 1;\n            }\n            else {\n                if (currentValue <\
    \ smallestEvenValue) {\n                    smallestEvenValue = currentValue;\n\
    \                    smallestIndex = currentIndex;\n                }\n      \
    \          currentValue = node;\n                currentIndex = currentIndex +\
    \ 1;\n            }\n        }\n        result.Add(smallestEvenValue);\n     \
    \   result.Add(smallestIndex);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallest_even_value = 0;\n        long smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n                found =\
    \ true;\n                break;\n            }\n        }\n        if (!found)\
    \ {\n            return result;\n        }\n        if (smallest_even_value ==\
    \ 0) {\n            return result;\n        }\n        List<long> evens = new\
    \ List<long>();\n        foreach (var item in arr) {\n            if (item % 2\
    \ == 0) {\n                evens.Add(item);\n            }\n        }\n      \
    \  evens.Sort();\n        smallest_even_value = evens[0];\n        smallest_index\
    \ = evens.IndexOf(smallest_even_value);\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long smallest_value = arr.Min();\n     \
    \   long smallest_index = -1;\n        long smallest_even_value = -1;\n      \
    \  long smallest_even_index = -1;\n        foreach (long value in arr) {\n   \
    \         if (value % 2 == 0) {\n                if (smallest_even_value == -1)\
    \ {\n                    smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n                if (value < smallest_even_value)\
    \ {\n                    smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n            if (value\
    \ < smallest_value) {\n                smallest_value = value;\n             \
    \   smallest_index = arr.IndexOf(value);\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        if (smallest_even_value == -1) {\n\
    \            return result;\n        }\n        List<long> evens = new List<long>();\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              evens.Add(value);\n            }\n        }\n        List<long>\
    \ evens_pluck_result = Pluck(evens);\n        evens_pluck_result.Add(smallest_even_value);\n\
    \        evens_pluck_result.Add(smallest_even_index);\n        return evens_pluck_result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.FindIndex(x => x == smallest_value);\n    \
    \    if (smallest_index == -1) {\n            return result;\n        }\n    \
    \    long smallest_even_value = arr.FindIndex(x => x % 2 == 0);\n        if (smallest_even_value\
    \ == -1) {\n            return result;\n        }\n        if (smallest_even_value\
    \ == smallest_index) {\n            smallest_value = smallest_even_value;\n  \
    \          smallest_index = smallest_even_value;\n        }\n        if (smallest_index\
    \ == arr.Count - 1) {\n            return result;\n        }\n        long smallest_even_next_value\
    \ = arr.FindIndex(x => x % 2 == 1);\n        if (smallest_even_next_value == -1)\
    \ {\n            return result;\n        }\n        if (smallest_even_next_value\
    \ == smallest_index) {\n            smallest_value = smallest_even_next_value;\n\
    \            smallest_index = smallest_even_next_value;\n        }\n        if\
    \ (smallest_index == arr.Count - 1) {\n            return result;\n        }\n\
    \        long smallest_even_next_next_value = arr.FindIndex(x => x % 3 == 1);\n\
    \        if (smallest_even_next_next_value == -1) {\n            return result;\n\
    \        }\n        if (smallest_even_next_next_value == smallest_index) {\n \
    \           smallest_value = smallest_even_next_next_value;\n            smallest_index\
    \ = smallest_even_next_next_value;\n        }\n        if (smallest_index == arr.Count\
    \ - 1) {\n            return result;\n        }\n        long smallest_even_next_next_next_value\
    \ = arr.FindIndex(x => x % 5 == 1);\n        if (smallest_even_next_next_next_value\
    \ == -1) {\n            return result;\n        }\n        if (smallest_even_next_next_next_value\
    \ == smallest_index) {\n            smallest_value = smallest_even_next_next_next_value;\n\
    \            smallest_index = smallest_even_next_next_next_value;\n        }\n\
    \        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_even_next_next_next_next_value = arr.FindIndex(x\
    \ => x % 7 == 1);\n        if (smallest_even_next_next_next_next_value == -1)\
    \ {\n            return result;\n        }\n        if (smallest_even_next_next_next_next_value\
    \ == smallest_index) {\n            smallest_value = smallest_even_next_next_next_next_value;\n\
    \            smallest_index = smallest_even_next_next_next_next_value;\n     \
    \   }\n        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_even_next_next_next_next_next_value = arr.FindIndex(x\
    \ => x % 11 == 1);\n        if (smallest_even_next_next_", "        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        long smallest_even_value = 0;\n        long smallest_even_index\
    \ = 0;\n        bool found = false;\n        foreach (var item in arr) {\n   \
    \         if (item % 2 == 0) {\n                smallest_even_value = item;\n\
    \                smallest_even_index = arr.IndexOf(item);\n                found\
    \ = true;\n            }\n            else if (item < smallest_value) {\n    \
    \            smallest_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else {\n   \
    \         result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        List<long> even_values = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                even_values.Add(value);\n\
    \            }\n        }\n        if (even_values.Count > 0) {\n            smallest_value\
    \ = even_values.Min();\n        }\n        result.Add(smallest_value);\n     \
    \   result.Add(smallest_even_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        if (arr.Count > 0) {\n            long smallestEvenValue\
    \ = arr.Min();\n            long smallestIndex = 0;\n            int index = 0;\n\
    \            while (index < arr.Count) {\n                if (arr[index] % 2 ==\
    \ 0) {\n                    if (smallestEvenValue < arr[index]) {\n          \
    \              smallestEvenValue = arr[index];\n                        smallestIndex\
    \ = index;\n                    }\n                }\n                index++;\n\
    \            }\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        int smallest_even_index = 0;\n\
    \        bool found = false;\n        foreach (var item in arr) {\n          \
    \  if (item % 2 == 0) {\n                if (smallest_even_value < item) {\n \
    \                   smallest_even_value = item;\n                    smallest_even_index\
    \ = arr.IndexOf(item);\n                    found = true;\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        long smalest_value = arr.Min();\n        long smalest_index = 0;\n    \
    \    List<long> result = new List<long>();\n        foreach (long i in arr) {\n\
    \            if (i % 2 == 0) {\n                if (smalest_value == i) {\n  \
    \                  smalest_index = i;\n                }\n                else\
    \ if (smalest_value < i) {\n                    smalest_value = i;\n         \
    \           smalest_index = i;\n                }\n            }\n        }\n\
    \        result.Add(smalest_value);\n        result.Add(smalest_index);\n    \
    \    return result;", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                break;\n       \
    \     }\n            if (arr[i] != smallest_value && arr[i] % 2 == 0) {\n    \
    \            smallest_value = arr[i];\n                smallest_index = i;\n \
    \           }\n        }\n        if (!found) {\n            return new List<long>();\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                continue;\n            }\n            found = true;\n   \
    \         long value = arr[i];\n            long index = i;\n            if (value\
    \ % 2 == 0) {\n                smallest_value = value;\n                smallest_index\
    \ = index;\n            }\n        }\n        if (!found) {\n            return\
    \ result;\n        }\n        List<long> even_values = new List<long>();\n   \
    \     even_values.Add(smallest_value);\n        even_values.Add(smallest_index);\n\
    \        return even_values;", "        if (arr.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        long smallest_value = 0;\n        int\
    \ smallest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n       \
    \     if (arr[i] % 2 == 0) {\n                if (smallest_value == 0) {\n   \
    \                 smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                } else if (arr[i] < smallest_value) {\n              \
    \      smallest_value = arr[i];\n                    smallest_index = i;\n   \
    \             }\n            }\n        }\n        if (smallest_value == 0) {\n\
    \            return new List<long>();\n        }\n        List<long> result =\
    \ new List<long>();\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = arr.Min();\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n   \
    \         if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n                found = true;\n        \
    \    }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       long smallest_index2 = 0;\n        long smallest_value2 = 0;\n       \
    \ bool found = false;\n        foreach (long i in arr) {\n            if (i %\
    \ 2 == 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = i;\n                    smallest_index = i;\n                    found = true;\n\
    \                } else if (smallest_value == i) {\n                    found\
    \ = true;\n                } else {\n                    if (smallest_index ==\
    \ i) {\n                        found = true;\n                    } else {\n\
    \                        if (smallest_index2 < smallest_index) {\n           \
    \                 smallest_index2 = smallest_index;\n                        \
    \    smallest_value2 = smallest_value;\n                            found = true;\n\
    \                        } else if (smallest_index2 < i) {\n                 \
    \           smallest_index2 = i;\n                            smallest_value2\
    \ = i;\n                            found = true;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index2);\n\
    \        } else {\n            result.Add(0);\n            result.Add(0);\n  \
    \      }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     bool has_even_value = false;\n        foreach (long n in arr) {\n      \
    \      if (n % 2 == 0) {\n                has_even_value = true;\n           \
    \     smallest_even_value = n;\n                smallest_index = arr.IndexOf(n);\n\
    \            }\n        }\n        if (has_even_value) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (arr.Count > 0) {\n \
    \           long smallest_even_value = arr.Min();\n            long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n            bool is_even = true;\n    \
    \        long smallest_value = smallest_even_value;\n            int smallest_index\
    \ = smallest_even_index;\n            for (int i = 0; i < arr.Count; i++) {\n\
    \                if (arr[i] != smallest_value) {\n                    is_even\
    \ = false;\n                    smallest_value = arr[i];\n                   \
    \ smallest_index = i;\n                }\n            }\n            if (is_even)\
    \ {\n                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \            } else {\n                result.Add(smallest_value);\n         \
    \   }\n        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        result.Add(smallest_value);\n      \
    \  result.Add(smallest_index);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (arr.Count > 0) {\n            long smallest_value\
    \ = arr.Min();\n            long smallest_index = -1;\n            long smallest_even_value\
    \ = smallest_value;\n            int smallest_even_index = -1;\n            for\
    \ (int i = 0; i < arr.Count; i++) {\n                if (arr[i] % 2 == 0) {\n\
    \                    if (smallest_even_value < arr[i]) {\n                   \
    \     smallest_even_value = arr[i];\n                        smallest_even_index\
    \ = i;\n                    }\n                }\n            }\n            if\
    \ (smallest_even_value == smallest_value) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_even_index);\n            } else {\n    \
    \            result.Add(smallest_even_value);\n                result.Add(smallest_even_index);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        if (arr.Count == 0)\n            return result;\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            long value = arr[i];\n            if (value % 2 == 0) {\n       \
    \         if (value < smallest_value) {\n                    smallest_value =\
    \ value;\n                    smallest_index = i;\n                    found =\
    \ true;\n                }\n            }\n        }\n        if (found)\n   \
    \         result.Add(smallest_value);\n        else\n            return result;\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_value = 0;\n        long smallest_index = 0;\n        foreach\
    \ (var node in arr) {\n            if (smallest_value == 0) {\n              \
    \  smallest_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \            } else if (smallest_value == node) {\n                smallest_index\
    \ = arr.IndexOf(node);\n            } else if (smallest_value % 2 == 0) {\n  \
    \              smallest_value = node;\n                smallest_index = arr.IndexOf(node);\n\
    \            }\n        }\n        if (smallest_value % 2 == 0) {\n          \
    \  result.Add(smallest_value);\n            result.Add(smallest_index);\n    \
    \    } else {\n            result.Add(smallest_value);\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValue\
    \ = true;\n        bool isSmallestIndex = true;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] != 0) {\n                long currentValue =\
    \ arr[i];\n                if (currentValue == smallestEvenValue) {\n        \
    \            isSmallestEvenValue = true;\n                    isSmallestIndex\
    \ = true;\n                    smallestIndex = i;\n                } else if (currentValue\
    \ == smallestEvenValue && isSmallestEvenValue) {\n                    isSmallestEvenValue\
    \ = false;\n                    smallestIndex = i;\n                } else if\
    \ (currentValue == smallestEvenValue && !isSmallestEvenValue) {\n            \
    \        isSmallestEvenValue = true;\n                    smallestIndex = i;\n\
    \                } else if (currentValue != smallestEvenValue && isSmallestEvenValue\
    \ && !isSmallestIndex) {\n                    isSmallestIndex = true;\n      \
    \              smallestIndex = i;\n                } else if (currentValue !=\
    \ smallestEvenValue && !isSmallestEvenValue && isSmallestIndex) {\n          \
    \          isSmallestIndex = false;\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = 0;\n\
    \        long smallest_even_value = 0;\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_value == 0) {\n                    smallest_even_value = value;\n\
    \                    smallest_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                    found = true;\n                }\
    \ else if (smallest_value == value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                } else if (smallest_even_value <\
    \ value) {\n                    smallest_even_value = value;\n               \
    \     smallest_index = arr.IndexOf(value);\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long smallest_even_value = arr.Min();\n        long smallest_index = -1;\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_even_value) {\n                found = true;\n\
    \                smallest_index = i;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = -1;\n\
    \        bool has_even_value = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                has_even_value =\
    \ true;\n            }\n            if (arr[i] < smallest_value) {\n         \
    \       smallest_value = arr[i];\n                smallest_index = i;\n      \
    \      }\n        }\n        if (has_even_value) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            if (smallest_index\
    \ == -1) {\n                result.Add(smallest_value);\n            } else {\n\
    \                result.Add(smallest_value, smallest_index);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        int smallest_index = 0;\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] % 2 == 0) {\n                found = true;\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        long smallest_value = smallest_even_value;\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallest_value == smallest_even_value) {\n                \
    \    smallest_value = value;\n                    smallest_index = arr.IndexOf(value);\n\
    \                    found = true;\n                }\n                else {\n\
    \                    if (smallest_value < smallest_even_value) {\n           \
    \             smallest_value = value;\n                        smallest_index\
    \ = arr.IndexOf(value);\n                        found = true;\n             \
    \       }\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        else {\n            result.Add(smallest_value);\n        \
    \    result.Add(smallest_index);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long smallest_value = 0;\n \
    \       long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smallest_value\
    \ = item;\n                smallest_index = arr.IndexOf(item);\n             \
    \   found = true;\n            }\n        }\n        if (found) {\n          \
    \  result.Add(smallest_value);\n            result.Add(smallest_index);\n    \
    \    }\n        return result;", "        long smallest_even_value = 0;\n    \
    \    long smallest_index = 0;\n        List<long> result = new List<long>();\n\
    \        foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n\
    \                if (smallest_even_value < node.Value) {\n                   \
    \ smallest_even_value = node.Value;\n                    smallest_index = node.Index;\n\
    \                }\n            }\n        }\n        if (smallest_even_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        int smallest_even_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        for (int i = smallest_even_index + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     result.Add(smallest_value);\n        result.Add(smallest_index);\n     \
    \   return result;", "        List<long> result = new List<long>();\n        long\
    \ smallest_value = 0;\n        int smallest_index = 0;\n        bool has_even_value\
    \ = false;\n        bool has_multiple_even_values = false;\n        long smallest_even_value\
    \ = 0;\n        long smallest_even_index = 0;\n        foreach (var node in arr)\
    \ {\n            if (node.Value % 2 == 0) {\n                has_even_value =\
    \ true;\n                smallest_even_value = node.Value;\n                smallest_even_index\
    \ = node.Index;\n            }\n            if (node.Value < smallest_value) {\n\
    \                smallest_value = node.Value;\n                smallest_index\
    \ = node.Index;\n            }\n            if (node.Value == smallest_value &&\
    \ node.Index < smallest_index) {\n                smallest_value = node.Value;\n\
    \                smallest_index = node.Index;\n            }\n            if (node.Value\
    \ == smallest_value && node.Index == smallest_index) {\n                has_multiple_even_values\
    \ = true;\n            }\n        }\n        if (has_even_value) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        if (has_multiple_even_values) {\n            int smallest_even_value_counter\
    \ = 0;\n            int smallest_even_index_counter = 0;\n            foreach\
    \ (var node in arr) {\n                if (node.Value % 2 == 0) {\n          \
    \          smallest_even_value_counter++;\n                    if (smallest_even_value_counter\
    \ == smallest_even_index) {\n                        result.Add(node.Value);\n\
    \                        result.Add(node.Index);\n                    }\n    \
    \            }\n                if (node.Value < smallest_value) {\n         \
    \           smallest_even_value_counter = 0;\n                    smallest_even_index_counter++;\n\
    \                    if (smallest_even_index_counter == smallest_index) {\n  \
    \                      result.Add(node.Value);\n                        result.Add(node.Index);\n\
    \                    }\n                }\n                if (node.Value == smallest_value\
    \ && node.Index < smallest_index) {\n                    smallest_even_value_counter\
    \ = 0;\n                    smallest_even_index_counter++;\n                 \
    \   if (smallest_even_index_counter == smallest_index) {\n                   \
    \     result.Add(node.Value);\n                        result.Add(node.Index);\n\
    \                    }\n                }\n                if (node.Value == smallest_value\
    \ && node.Index == smallest_index) {\n                    smallest_even_value_counter++;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<long> result = new List<long>();\n        long smallest_even_value =\
    \ arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index > 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        if (arr.Count == 0) return new List<long>();\n        var minValue = arr.Min();\n\
    \        var minIndex = 0;\n        var minEvenValue = minValue % 2 == 0 ? minValue\
    \ : minValue + 1;\n        var minEvenIndex = 0;\n        var minEvenValueIndex\
    \ = -1;\n        var minEvenValueIndexCount = 0;\n        var minEvenValueIndexCountMax\
    \ = arr.Count - 1;\n        for (int i = 0; i < arr.Count; i++) {\n          \
    \  if (arr[i] == minEvenValue) {\n                if (minEvenValueIndex == -1)\
    \ {\n                    minEvenValueIndex = i;\n                    minEvenValueIndexCount\
    \ = 0;\n                }\n                minEvenValueIndexCount++;\n       \
    \         if (minEvenValueIndexCount > minEvenValueIndexCountMax) {\n        \
    \            minEvenValueIndexCountMax = minEvenValueIndexCount;\n           \
    \         minEvenValueIndex = i;\n                }\n            }\n        }\n\
    \        if (minEvenValueIndexCount > 1) return new List<long>();\n        var\
    \ result = new List<long>();\n        result.Add(minEvenValue);\n        result.Add(minEvenIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        bool found = false;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_even_value == value) {\n                    found = true;\n      \
    \          }\n                else {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = arr.IndexOf(value);\n  \
    \              }\n            }\n        }\n        if (found) {\n           \
    \ result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        bool\
    \ found = false;\n        foreach (var node in arr) {\n            if (found ==\
    \ true) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \       } else {\n                    if (smallest_value < node) {\n         \
    \               smallest_value = node;\n                        smallest_index\
    \ = arr.IndexOf(node);\n                    }\n                }\n           \
    \ } else {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \           found = true;\n                } else {\n                    if (smallest_value\
    \ < node) {\n                        smallest_value = node;\n                \
    \        smallest_index = arr.IndexOf(node);\n                        found =\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        if (found == true) {\n            result.Add(smallest_value);\n     \
    \       result.Add(smallest_index);\n        }\n        return result;", "   \
    \     List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n       \
    \         continue;\n            }\n            if (found == false) {\n      \
    \          smallest_value = arr[i];\n                smallest_index = i;\n   \
    \             found = true;\n            }\n            if (arr[i] % 2 == 0) {\n\
    \                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_even_value\
    \ = arr[smallest_even_index];\n        long smallest_even_index = smallest_even_index;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                continue;\n            }\n            if (found == false)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n            if (arr[i] %\
    \ 2 == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n                found = true;\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        long smalest_value\
    \ = arr.Min();\n        List<long> result = new List<long>();\n        long smalest_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smalest_value == n) {\n                    smalest_index = arr.IndexOf(n);\n\
    \                }\n                else {\n                    if (smalest_value\
    \ < n) {\n                        smalest_value = n;\n                       \
    \ smalest_index = arr.IndexOf(n);\n                    }\n                }\n\
    \            }\n        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n \
    \               smallestEvenValue = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     if (arr.Count == 0) {\n            return result;\n        }\n        long\
    \ smallest_even_value = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_even_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.", "        List<long> result = new List<long>();\n        long\
    \ smallest_value = arr.Min();\n        long smallest_index = -1;\n        long\
    \ smallest_even_value = -1;\n        bool found_even = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n           \
    \ if (found_even) {\n                if (value == smallest_even_value) {\n   \
    \                 result.Add(smallest_value);\n                    result.Add(smallest_index);\n\
    \                    break;\n                }\n            }\n            if\
    \ (value < smallest_value) {\n                smallest_value = value;\n      \
    \          smallest_index = i;\n                smallest_even_value = value;\n\
    \                found_even = true;\n            }\n        }\n        if (result.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                } else {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                } else {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n        long smallest_index = arr.FindIndex(x =>\
    \ x % 2 == 0);\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        if (smallest_index == 0) {\n            result.Add(smallest_even_value);\n\
    \            return result;\n        }\n        long smallest_value = arr[smallest_index];\n\
    \        long smallest_even_value = arr[smallest_index] % 2 == 0;\n        if\
    \ (smallest_even_value == 0) {\n            result.Add(smallest_value);\n    \
    \        return result;\n        }\n        List<long> result_2 = Pluck(arr.Where(x\
    \ => x % 2 == 0));\n        if (result_2.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value_2 = result_2.Min(x => x % 2 == 0);\n \
    \       if (smallest_value_2 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_index_2 = result_2.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_index_2 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_value_3 = arr[smallest_index_2];\n\
    \        long smallest_even_value_3 = arr[smallest_index_2] % 2 == 0;\n      \
    \  if (smallest_even_value_3 == 0) {\n            result.Add(smallest_value_3);\n\
    \            return result;\n        }\n        List<long> result_3 = Pluck(arr.Where(x\
    \ => x % 2 == 0));\n        if (result_3.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value_4 = result_3.Min(x => x % 2 == 0);\n \
    \       if (smallest_value_4 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_index_4 = result_3.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_index_4 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_value_5 = arr[smallest_index_4];\n\
    \        long smallest_even_value_5 = arr[smallest_index_4] % 2 == 0;\n      \
    \  if (smallest_even_value_5 == 0) {\n            result.Add(smallest_value_5);\n\
    \            return result;\n        }\n        List<long> result_4 = Pluck(arr.Where(x\
    \ => x % 2 == 0));\n        if (result_4.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value_6 = result_4.Min(x => x % 2 == 0);\n \
    \       if (smallest_value_6 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_index_6 = result_4.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_index_6 == 0) {\n            result.",
  "        long smalest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smalest_value) {\n                    smalest_value = item;\n            \
    \        smallest_index = arr.IndexOf(item);\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smalest_value);\n            result.Add(smallest_index);\n    \
    \    }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     bool found = false;\n        foreach (long n in arr) {\n            if (n\
    \ % 2 == 0) {\n                smallest_even_value = n;\n                smallest_index\
    \ = arr.IndexOf(n);\n                found = true;\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_even_value);\n        \
    \    result.Add(smallest_index);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long smallest_value = 0;\n \
    \       int smallest_index = 0;\n        foreach (long node in arr) {\n      \
    \      if (node % 2 == 0) {\n                if (smallest_value < node) {\n  \
    \                  smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_index != 0) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n      \
    \      if (arr[i] == smallest_even_value) {\n                found = true;\n \
    \               break;\n            }\n        }\n        if (found) {\n     \
    \       result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = arr.Min();\n        int smallest_index = -1;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n            }\n        }\n        result.Add(smallest_value);\n      \
    \  result.Add(smallest_index);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long smallestEvenValue = arr.Min();\n        long\
    \ smallestIndex = 0;\n        foreach (long value in arr) {\n            if (value\
    \ % 2 == 0) {\n                if (value < smallestEvenValue) {\n            \
    \        smallestEvenValue = value;\n                    smallestIndex = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        int smallest_even_index = arr.IndexOf(smallest_even_value);\n       \
    \ if (smallest_even_index == -1) {\n            return result;\n        }\n  \
    \      long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        for (int i = smallest_even_index + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     result.Add(smallest_value);\n        result.Add(smallest_index);\n     \
    \   return result;", "        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long smalest_value = arr.Min();\n        List<long> result\
    \ = new List<long>();\n        List<long> even_values = new List<long>();\n  \
    \      List<long> index_values = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                even_values.Add(value);\n\
    \                index_values.Add(arr.IndexOf(value));\n            } else {\n\
    \                if (value < smalest_value) {\n                    smalest_value\
    \ = value;\n                }\n            }\n        }\n        if (even_values.Count\
    \ == 0) {\n            return result;\n        }\n        long smalest_even_value\
    \ = even_values.Min();\n        int smalest_index = index_values.IndexOf(even_values.IndexOf(smalest_even_value));\n\
    \        result.Add(smalest_even_value);\n        result.Add(smalest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (!found) {\n            return result;\n        }\n     \
    \   long smallest_value_index = arr.IndexOf(smallest_value);\n        if (smallest_value_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_value_index_plus_one\
    \ = smallest_value_index + 1;\n        if (smallest_value_index_plus_one == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_two\
    \ = smallest_value_index + 2;\n        if (smallest_value_index_plus_two == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_three\
    \ = smallest_value_index + 3;\n        if (smallest_value_index_plus_three ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value_index_plus_four\
    \ = smallest_value_index + 4;\n        if (smallest_value_index_plus_four == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_five\
    \ = smallest_value_index + 5;\n        if (smallest_value_index_plus_five == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_six\
    \ = smallest_value_index + 6;\n        if (smallest_value_index_plus_six == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_seven\
    \ = smallest_value_index + 7;\n        if (smallest_value_index_plus_seven ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value_index_plus_eight\
    \ = smallest_value_index + 8;\n        if (smallest_value_index_plus_eight ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value_index_plus_nine\
    \ = smallest_value_index + 9;\n        if (smallest_value_index_plus_nine == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_ten\
    \ = smallest_value_index + 10;\n        if (smallest_value_index_plus_ten == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_eleven\
    \ = smallest_value_index + 11;\n        if (smallest_value_index_plus_eleven ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool has_even_values = false;\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           has_even_values = true;\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (has_even_values) {\n            int smallest_even_value_index = arr.IndexOf(smallest_even_value);\n\
    \            if (smallest_even_value_index > 0) {\n                result.Add(smallest_even_value);\n\
    \                result.Add(smallest_even_value_index);\n            }\n     \
    \   }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_index = 0;\n   \
    \     foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n  \
    \              if (smallest_even_value < node.Value) {\n                    smallest_even_value\
    \ = node.Value;\n                    smallest_index = node.Index;\n          \
    \      }\n            }\n        }\n        if (smallest_even_value == 0) {\n\
    \            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        List<long>\
    \ result = new List<long>();\n        long smallest_value = 0;\n        int smallest_index\
    \ = 0;\n        bool found = false;\n        foreach (var node in arr) {\n   \
    \         if (node % 2 == 0) {\n                found = true;\n              \
    \  if (smallest_value < node) {\n                    smallest_value = node;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        bool found = false;\n        foreach\
    \ (var node in arr) {\n            if (node.Value % 2 == 0) {\n              \
    \  found = true;\n                smallest_value = node.Value;\n             \
    \   smallest_index = arr.IndexOf(node);\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1)\
    \ {\n            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            while (!found) {\n               \
    \ smallest_value += 2;\n                smallest_index = arr.IndexOf(smallest_value);\n\
    \                if (smallest_index == -1) {\n                    return result;\n\
    \                }\n                found = true;\n                for (int i\
    \ = 0; i < arr.Count; i++) {\n                    if (arr[i] == smallest_value)\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n            }\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        if (arr.Count == 0) {\n\
    \            return result;\n        }\n        long smallest_even_value = 0;\n\
    \        long smallest_index = 0;\n        long smallest_value = 0;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (smallest_value == 0) {\n                    smallest_even_value = value;\n\
    \                    smallest_index = arr.IndexOf(value);\n                  \
    \  smallest_value = value;\n                } else {\n                    if (value\
    \ < smallest_value) {\n                        smallest_even_value = value;\n\
    \                        smallest_index = arr.IndexOf(value);\n              \
    \          smallest_value = value;\n                    }\n                }\n\
    \            }\n        }\n        if (smallest_value == 0) {\n            return\
    \ result;\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        if (arr.Count == 0)\n            return new\
    \ List<long>();\n        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smalest_value < arr[i]) {\n               \
    \     smalest_value = arr[i];\n                    smalest_index = i;\n      \
    \          }\n            }\n        }\n        return new List<long>() { smalest_value,\
    \ smalest_index };", "        List<long> result = new List<long>();\n        long\
    \ smallest_value = arr.Min();\n        long smallest_index = -1;\n        long\
    \ smallest_even_value = -1;\n        bool found = false;\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n             \
    \   if (smallest_even_value == -1) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                } else if (arr[i] < smallest_even_value) {\n      \
    \              smallest_even_value = arr[i];\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (!found) {\n            return result;\n        }\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n\
    \                continue;\n            }\n            if (smallest_value % 2\
    \ == 0) {\n                smallest_value = arr[smallest_even_index];\n      \
    \          smallest_index = smallest_even_index;\n            }\n            smallest_value\
    \ /= 2;\n            smallest_even_index++;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = 0;\n        long\
    \ smallest_even_index = 0;\n        long smallest_value = 0;\n        long smallest_index\
    \ = 0;\n        foreach (long n in arr) {\n            if (n % 2 == 0) {\n   \
    \             if (smallest_value == 0) {\n                    smallest_even_value\
    \ = n;\n                    smallest_even_index = n;\n                    smallest_value\
    \ = n;\n                    smallest_index = n;\n                } else if (smallest_value\
    \ == n) {\n                    smallest_even_index = n;\n                    smallest_value\
    \ = n;\n                    smallest_index = n;\n                } else if (smallest_value\
    \ < n) {\n                    smallest_even_value = n;\n                    smallest_even_index\
    \ = n;\n                    smallest_value = n;\n                    smallest_index\
    \ = n;\n                }\n            } else {\n                if (smallest_value\
    \ == 0) {\n                    smallest_even_value = n;\n                    smallest_even_index\
    \ = n;\n                    smallest_value = n;\n                    smallest_index\
    \ = n;\n                } else if (smallest_value == n) {\n                  \
    \  smallest_even_index = n;\n                    smallest_value = n;\n       \
    \             smallest_index = n;\n                } else if (smallest_value <\
    \ n) {\n                    smallest_even_value = n;\n                    smallest_even_index\
    \ = n;\n                    smallest_value = n;\n                    smallest_index\
    \ = n;\n                }\n            }\n        }\n        if (smallest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;", "        List<long>\
    \ result = new List<long>();\n        long smallest_even_value = arr.Min();\n\
    \        long smallest_even_index = arr.IndexOf(smallest_even_value);\n      \
    \  if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else {\n   \
    \         result.Add(smallest_even_value);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n     \
    \           smallest_even_value = node.Value;\n                smallest_index\
    \ = arr.IndexOf(node);\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found)\n            return new List<long>();\n\
    \        if (smallest_even_value == 0)\n            return new List<long>();\n\
    \        List<long> even_values = new List<long>();\n        List<long> even_indexes\
    \ = new List<long>();\n        foreach (var node in arr) {\n            if (node.Value\
    \ % 2 == 0) {\n                even_values.Add(node.Value);\n                even_indexes.Add(arr.IndexOf(node));\n\
    \            }\n        }\n        even_values.Sort();\n        even_indexes.Sort();\n\
    \        smallest_even_value = even_values[0];\n        smallest_index = even_indexes[0];\n\
    \        foreach (var node in even_values) {\n            if (node < smallest_even_value)\
    \ {\n                smallest_even_value = node;\n                smallest_index\
    \ = even_indexes[even_values.IndexOf(node)];\n            }\n        }\n     \
    \   result.Add(smallest_even_value);\n        result.Add(smallest_index);\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   long smallest_even_value = arr.Min();\n        long smallest_even_index =\
    \ arr.IndexOf(smallest_even_value);\n        if (smallest_even_index == -1) {\n\
    \            return result;\n        }\n        long smallest_value = arr[smallest_even_index];\n\
    \        long smallest_index = smallest_even_index;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                continue;\n            }\n            found = true;\n   \
    \         long value = arr[i];\n            long index = i;\n            if (value\
    \ % 2 == 0) {\n                smallest_value = value;\n                smallest_index\
    \ = index;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                if (smallest_even_value < item)\
    \ {\n                    smallest_even_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smallest_even_value == 0) {\n            return new List<long>();\n       \
    \ }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;", "        List<long> result = new List<long>();\n   \
    \     long smallest_even_value = 0;\n        int smallest_even_index = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n            }\n        }\n        if (smallest_even_value != 0) {\n  \
    \          result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_even_value = 0;\n        long smallest_even_index = 0;\n\
    \        bool found = false;\n        foreach (var item in arr) {\n          \
    \  if (item % 2 == 0) {\n                smallest_even_value = item;\n       \
    \         smallest_even_index = arr.IndexOf(item);\n                found = true;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long smallest_value = arr.Min();\n\
    \        int smallest_index = -1;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       result.Add(smallest_value);\n        result.Add(smallest_index);\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long smallest_even_value = arr.Min();\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            int index = smallest_even_index;\n\
    \            while (index > 0) {\n                if (arr[index] % 2 == 0) {\n\
    \                    result.Add(arr[index]);\n                    break;\n   \
    \             }\n                index--;\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n        long smallest_even_index = arr.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = arr.Min(x => x);\n       \
    \ long smallest_index = arr.FindIndex(x => x == smallest_value);\n        if (smallest_index\
    \ == -1) {\n            return result;\n        }\n        List<long> evens =\
    \ new List<long>();\n        List<long> indexes = new List<long>();\n        foreach\
    \ (long x in arr) {\n            if (x % 2 == 0) {\n                evens.Add(x);\n\
    \                indexes.Add(arr.FindIndex(y => y == x));\n            }\n   \
    \     }\n        evens.Sort();\n        foreach (long x in evens) {\n        \
    \    if (x == smallest_even_value) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                return result;\n\
    \            }\n        }\n        foreach (long x in evens) {\n            if\
    \ (x == smallest_even_index) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                return result;\n\
    \            }\n        }\n        foreach (long x in evens) {\n            if\
    \ (x == smallest_value) {\n                result.Add(smallest_value);\n     \
    \           result.Add(smallest_index);\n                return result;\n    \
    \        }\n        }\n        return result;", "        if (arr.Count == 0) {\n\
    \            return new List<long>();\n        }\n        List<long> result =\
    \ new List<long>();\n        long smallestEven = arr.Min();\n        long smallestIndex\
    \ = arr.IndexOf(smallestEven);\n        bool foundSmallestEven = false;\n    \
    \    bool foundSmallestIndex = false;\n        foreach (long n in arr) {\n   \
    \         if (n % 2 == 0) {\n                if (smallestEven == n) {\n      \
    \              foundSmallestEven = true;\n                }\n                else\
    \ {\n                    foundSmallestEven = false;\n                }\n     \
    \       }\n            else {\n                if (smallestEven == n) {\n    \
    \                foundSmallestIndex = true;\n                }\n             \
    \   else {\n                    foundSmallestIndex = false;\n                }\n\
    \            }\n        }\n        if (foundSmallestEven) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        else if (foundSmallestIndex)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        else {\n            result.Add(smallestEven);\n          \
    \  result.Add(smallestIndex);\n        }\n        return result;", "        long\
    \ smallest_value = arr.Min();\n        List<long> result = new List<long>();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n\
    \                found = true;\n                smallest_index = i;\n        \
    \    }\n            if (found && arr[i] % 2 == 0) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                found = false;\n\
    \            }\n        }\n        return result.Count == 0 ? new List<long>()\
    \ : result;", "        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;", "        List<long> result = new List<long>();\n       \
    \ long smalest_value = 0;\n        int smalest_index = 0;\n        foreach (var\
    \ node in arr) {\n            if (node.Value % 2 == 0) {\n                if (smalest_value\
    \ < node.Value) {\n                    smalest_value = node.Value;\n         \
    \           smalest_index = arr.IndexOf(node);\n                }\n          \
    \  }\n        }\n        if (smalest_index != arr.IndexOf(smalest_value)) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        long smallest_value = 0;\n        long smallest_index = 0;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (smallest_value\
    \ < item) {\n                    smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smallest_value == 0) {\n            return new List<long>();\n        }\n \
    \       result.Add(smallest_value);\n        result.Add(smallest_index);\n   \
    \     return result;", "        List<long> result = new List<long>();\n      \
    \  long smallestEvenValue = arr.Min();\n        long smallestIndex = 0;\n    \
    \    bool isSmallestEvenValueFound = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    isSmallestEvenValueFound = true;\n        \
    \            smallestEvenValue = arr[i];\n                    smallestIndex =\
    \ i;\n                }\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;"]
stop_tokens:
- "\n    }\n"
