name: HumanEval_27_flip_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // For a given string, flip lowercase characters to uppercase and\
  \ uppercase to lowercase.\n    // >>> FlipCase((\"Hello\"))\n    // (\"hELLO\")\n\
  \    public static string FlipCase(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(FlipCase((\"\
  \")).Equals((\"\")));\n    Debug.Assert(FlipCase((\"Hello!\")).Equals((\"hELLO!\"\
  )));\n    Debug.Assert(FlipCase((\"These violent delights have violent ends\")).Equals((\"\
  tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS\")));\n    }\n\n}\n"
completions: ["        string result = \"\";\n        foreach (char c in str) {\n\
    \            if (Char.IsUpper(c)) {\n                result += Char.ToLower(c);\n\
    \            } else {\n                result += Char.ToUpper(c);\n          \
    \  }\n        }\n        return result;", "        string result = \"\";\n   \
    \     foreach (char c in str) {\n            if (char.IsLower(c)) {\n        \
    \        result += char.ToUpper(c);\n            } else {\n                result\
    \ += char.ToLower(c);\n            }\n        }\n        return result;", "  \
    \      char[] charArray = str.ToCharArray();\n        char[] newCharArray = new\
    \ char[charArray.Length];\n        for (int i = 0; i < charArray.Length; i++)\
    \ {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n         \
    \       newCharArray[i] = (char)(charArray[i] - 32);\n            } else {\n \
    \               newCharArray[i] = charArray[i];\n            }\n        }\n  \
    \      return new string(newCharArray);", "        char[] charArray = str.ToCharArray();\n\
    \        char[] newCharArray = new char[charArray.Length];\n        for (int i\
    \ = 0; i < charArray.Length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                newCharArray[i] = (char)(charArray[i] - 32);\n  \
    \          }\n            else if (charArray[i] >= 'A' && charArray[i] <= 'Z')\
    \ {\n                newCharArray[i] = (char)(charArray[i] + 32);\n          \
    \  }\n            else {\n                newCharArray[i] = charArray[i];\n  \
    \          }\n        }\n        return new string(newCharArray);", "        char[]\
    \ chars = str.ToCharArray();\n        char[] newChars = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i].ToString().ToLower()\
    \ != chars[i].ToString().ToUpper()) {\n                newChars[i] = chars[i].ToString().ToUpper();\n\
    \            } else {\n                newChars[i] = chars[i].ToString().ToLower();\n\
    \            }\n        }\n        return new string(newChars);", "        char[]\
    \ chars = str.ToCharArray();\n        char[] flipped = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"\
    A\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = chars[i].ToString().ToUpper();\n\
    \            }\n            else if (chars[i].ToString().Equals(\"a\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                flipped[i] = chars[i].ToString().ToLower();\n           \
    \ }\n            else {\n                flipped[i] = chars[i];\n            }\n\
    \        }\n        return new string(flipped);", "        char[] charArray =\
    \ str.ToCharArray();\n        char[] newCharArray = new char[charArray.Length];\n\
    \        for (int i = 0; i < charArray.Length; i++) {\n            if (charArray[i]\
    \ >= 'a' && charArray[i] <= 'z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ - 32);\n            } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n\
    \                newCharArray[i] = (char)(charArray[i] + 32);\n            } else\
    \ {\n                newCharArray[i] = charArray[i];\n            }\n        }\n\
    \        return new string(newCharArray);", "        string result = \"\";\n \
    \       foreach (char c in str) {\n            if (Char.IsLower(c)) {\n      \
    \          result += Char.ToUpper(c);\n            } else {\n                result\
    \ += Char.ToLower(c);\n            }\n        }\n        return result;", "  \
    \      char[] charArray = str.ToCharArray();\n        char[] newCharArray = new\
    \ char[charArray.Length];\n        for (int i = 0; i < charArray.Length; i++)\
    \ {\n            if (charArray[i] >= 'a' && charArray[i] <= 'z') {\n         \
    \       newCharArray[i] = (char)(charArray[i] - 32);\n            } else if (charArray[i]\
    \ >= 'A' && charArray[i] <= 'Z') {\n                newCharArray[i] = (char)(charArray[i]\
    \ + 32);\n            } else {\n                newCharArray[i] = charArray[i];\n\
    \            }\n        }\n        return new string(newCharArray);", "      \
    \  char[] chars = str.ToCharArray();\n        char[] newChars = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i].ToString().ToLower()\
    \ == chars[i].ToString().ToUpper()) {\n                newChars[i] = chars[i].ToString().ToUpper();\n\
    \            } else {\n                newChars[i] = chars[i].ToString().ToLower();\n\
    \            }\n        }\n        return new string(newChars);", "        char[]\
    \ chars = str.ToCharArray();\n        char[] flipped = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"\
    A\", StringComparison.OrdinalIgnoreCase)) {\n                flipped[i] = chars[i].ToString().ToUpper();\n\
    \            }\n            else {\n                flipped[i] = chars[i].ToString().ToLower();\n\
    \            }\n        }\n        return new string(flipped);", "        char[]\
    \ chars = str.ToCharArray();\n        char[] newChars = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (chars[i].ToString().Equals(\"\
    A\", StringComparison.OrdinalIgnoreCase)) {\n                newChars[i] = chars[i].ToString().ToUpper();\n\
    \            }\n            else if (chars[i].ToString().Equals(\"a\", StringComparison.OrdinalIgnoreCase))\
    \ {\n                newChars[i] = chars[i].ToString().ToLower();\n          \
    \  }\n            else {\n                newChars[i] = chars[i];\n          \
    \  }\n        }\n        return new string(newChars);", "        string result\
    \ = \"\";\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                result += Char.ToUpper(c);\n            } else {\n      \
    \          result += Char.ToLower(c);\n            }\n        }\n        return\
    \ result;", "        char[] chars = str.ToCharArray();\n        char[] newChars\
    \ = new char[str.Length];\n        for (int i = 0; i < str.Length; i++) {\n  \
    \          if (chars[i].ToString().ToLower() != chars[i].ToString().ToUpper())\
    \ {\n                newChars[i] = chars[i].ToString().ToUpper();\n          \
    \  } else {\n                newChars[i] = chars[i].ToString().ToLower();\n  \
    \          }\n        }\n        return new string(newChars);", "        string\
    \ result = \"\";\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                result += Char.ToUpper(c);\n            } else {\n      \
    \          result += Char.ToLower(c);\n            }\n        }\n        return\
    \ result;", "        char[] chars = str.ToCharArray();\n        Array.Reverse(chars);\n\
    \        return new string(chars);", "        char[] charArray = str.ToCharArray();\n\
    \        char[] newCharArray = new char[charArray.Length];\n        for (int i\
    \ = 0; i < charArray.Length; i++) {\n            if (charArray[i] >= 'a' && charArray[i]\
    \ <= 'z') {\n                newCharArray[i] = (char)(charArray[i] - 32);\n  \
    \          } else if (charArray[i] >= 'A' && charArray[i] <= 'Z') {\n        \
    \        newCharArray[i] = (char)(charArray[i] + 32);\n            } else {\n\
    \                newCharArray[i] = charArray[i];\n            }\n        }\n \
    \       return new string(newCharArray);", "        char[] chars = str.ToCharArray();\n\
    \        char[] flipped = new char[chars.Length];\n        for (int i = 0; i <\
    \ chars.Length; i++) {\n            flipped[i] = chars[i] > 'Z' ? 'A' + (chars[i]\
    \ - 'Z') : chars[i] > 'z' ? 'a' + (chars[i] - 'z') : chars[i];\n        }\n  \
    \      return new string(flipped);", "        string result = \"\";\n        foreach\
    \ (char c in str) {\n            result += (char.IsUpper(c)) ? c.ToString().ToUpper()\
    \ : c.ToString().ToLower();\n        }\n        return result;", "        string\
    \ result = \"\";\n        foreach (char c in str) {\n            if (Char.IsLower(c))\
    \ {\n                result += Char.ToUpper(c);\n            } else {\n      \
    \          result += Char.ToLower(c);\n            }\n        }\n        return\
    \ result;"]
stop_tokens:
- "\n    }\n"
