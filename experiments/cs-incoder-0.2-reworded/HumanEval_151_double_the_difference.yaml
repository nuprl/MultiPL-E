name: HumanEval_151_double_the_difference
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of numbers, return the sum of squares of the numbers\n\
  \    // in the list that are odd. Ignore numbers that are negative or not integers.\n\
  \    // >>> DoubleTheDifference((new List<float>(new long[]{(long)1L, (long)3L,\
  \ (long)2L, (long)0L})))\n    // (10L)\n    // >>> DoubleTheDifference((new List<float>(new\
  \ long[]{(long)-1L, (long)-2L, (long)0L})))\n    // (0L)\n    // >>> DoubleTheDifference((new\
  \ List<float>(new long[]{(long)9L, (long)-2L})))\n    // (81L)\n    // >>> DoubleTheDifference((new\
  \ List<float>(new long[]{(long)0L})))\n    // (0L)\n    // If the input list is\
  \ empty, return 0.\n    public static long DoubleTheDifference(List<float> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>())) == (0L));\n    Debug.Assert(DoubleTheDifference((new List<float>(new\
  \ float[]{(float)5.0f, (float)4.0f}))) == (25L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)0.1f, (float)0.2f, (float)0.3f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)-10.0f,\
  \ (float)-20.0f, (float)-30.0f}))) == (0L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-1.0f, (float)-2.0f, (float)8.0f}))) == (0L));\n\
  \    Debug.Assert(DoubleTheDifference((new List<float>(new float[]{(float)0.2f,\
  \ (float)3.0f, (float)5.0f}))) == (34L));\n    Debug.Assert(DoubleTheDifference((new\
  \ List<float>(new float[]{(float)-9.0f, (float)-7.0f, (float)-5.0f, (float)-3.0f,\
  \ (float)-1.0f, (float)1.0f, (float)3.0f, (float)5.0f, (float)7.0f, (float)9.0f})))\
  \ == (165L));\n    }\n\n}\n"
completions: ["        long sum = 0;\n        foreach (float f in lst) {\n       \
    \     if (f > 0) sum += Math.Pow(f, 2);\n        }\n        return sum;", "  \
    \      long sum = 0;\n        foreach (float f in lst) {\n            if (f <\
    \ 0) {\n                sum += Math.Pow(f, 2);\n            }\n            else\
    \ {\n                sum += Math.Pow(f, 2);\n            }\n        }\n      \
    \  return sum;", "        if (lst.Count == 0)\n            return 0;\n       \
    \ long sum = 0;\n        foreach (float f in lst) {\n            if (f > 0)\n\
    \                sum += Math.Pow(f, 2);\n        }\n        return sum;", "  \
    \      if (lst.Count == 0)\n            return 0;\n        long sum = 0;\n   \
    \     foreach (float f in lst) {\n            long n = Math.Abs(f);\n        \
    \    if (n != 0L) {\n                sum += n * n;\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f > 0) sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;", "        if (lst.Count == 0)\n            return 0;\n        long sum\
    \ = 0;\n        foreach (float f in lst) {\n            if (f < 0f || f > 1f)\n\
    \                continue;\n            sum += Math.Pow(f, 2);\n        }\n  \
    \      return sum;", "        if (lst.Count == 0) {\n            return 0L;\n\
    \        }\n        long sum = 0L;\n        foreach (float f in lst) {\n     \
    \       if (f < 0) {\n                continue;\n            }\n            if\
    \ (f % 2 == 0) {\n                sum += f * f;\n            }\n        }\n  \
    \      return sum;", "        if (lst.Count == 0) {\n            return 0L;\n\
    \        }\n        long sum = 0L;\n        foreach (float f in lst) {\n     \
    \       if (f < 0) {\n                continue;\n            }\n            if\
    \ (f % 2 == 0) {\n                sum += f * f;\n            }\n        }\n  \
    \      return sum;", "        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0) {\n                continue;\n            }\n    \
    \        if (f % 2 == 0) {\n                sum += f * f;\n            }\n   \
    \     }\n        return sum;", "        long sum = 0;\n        foreach (float\
    \ f in lst) {\n            if (f > 0) sum += Math.Pow(f, 2);\n        }\n    \
    \    return sum;", "        long sum = 0;\n        foreach (float f in lst) {\n\
    \            if (f > 0.0f) {\n                sum += Math.Pow(f, 2);\n       \
    \     }\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (float f in lst) {\n            sum += Math.Pow(f, 2);\n        }\n        return\
    \ sum;", "        if (lst.Count == 0)\n            return 0;\n        long sum\
    \ = 0;\n        foreach (float f in lst)\n            if (f < 0)\n           \
    \     throw new ArgumentException(\"Negative numbers are not allowed\");\n   \
    \         else if (f % 2 == 0)\n                sum += f * f;\n            else\n\
    \                sum += Math.Pow(f, 2);\n        return sum;", "        if (lst.Count\
    \ == 0)\n            return 0L;\n        long sum = 0L;\n        foreach (float\
    \ f in lst)\n            if (f < 0L || f % 1L != 0L)\n                sum += Math.Pow(f,\
    \ 2L);\n        return sum;", "        if (lst.Count == 0) {\n            return\
    \ 0L;\n        }\n        long sum = 0L;\n        foreach (float f in lst) {\n\
    \            if (f < 0) {\n                continue;\n            }\n        \
    \    if (f % 2 == 0) {\n                sum += Math.Pow(f, 2);\n            }\n\
    \        }\n        return sum;", "        if (lst.Count == 0)\n            return\
    \ 0;\n        long sum = 0;\n        foreach (float f in lst) {\n            if\
    \ (f < 0f || f % 1f != 0f)\n                continue;\n            sum += Math.Pow(f,\
    \ 2);\n        }\n        return sum;", "        long sum = 0;\n        foreach\
    \ (float f in lst) {\n            if (f < 0) {\n                continue;\n  \
    \          }\n            if (f % 2 == 0) {\n                sum += f * f;\n \
    \           }\n        }\n        return sum;", "        long sum = 0;\n     \
    \   foreach (float f in lst) {\n            if (f == (float)f) {\n           \
    \     sum += (float)f;\n            } else if (f < 0) {\n                sum +=\
    \ (float)Math.Pow((float)f, 2);\n            } else {\n                sum +=\
    \ (float)Math.Pow((float)f, 3);\n            }\n        }\n        return sum;",
  "        long sum = 0;\n        foreach (float f in lst) {\n            if (f >\
    \ 0.0f) {\n                sum += Math.Pow(f, 2);\n            }\n        }\n\
    \        return sum;", "        long sum = 0;\n        foreach (float f in lst)\
    \ {\n            if (f < 0) {\n                sum += Math.Abs(f);\n         \
    \   } else {\n                sum += f * f;\n            }\n        }\n      \
    \  return sum;"]
stop_tokens:
- "\n    }\n"
