name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as null.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest == 1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, 1);\n        }\n        if (smallest == 1) {\n       \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, 1);\n        }\n\
    \        long largestNegative = lst.Where(x => x < 0).Max();\n        long smallestPositive\
    \ = lst.Where(x => x > 0).Min();\n        if (largest < smallestPositive) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest == 1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, 1);\n        }\n        if (smallest == 1) {\n       \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, 1);\n        }\n\
    \        if (largest == largestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        if (smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);\n\
    \        }\n        if (largest == largestNegative && smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        if (largest == largestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        if (smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);\n\
    \        }\n        if (largest == largestNegative && smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0 ? x : 0);\n        long smallestNegative = lst.Min(x => x < 0 ? x :\
    \ 0);\n        if (largest < largestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest > smallestNegative)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ smallestNegative);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                negative.Add(i);\n            }\n           \
    \ else if (i > 0) {\n                positive.Add(i);\n            }\n       \
    \ }\n        if (negative.Count > 0 && positive.Count > 0) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   if (negative.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, negative.Min());\n        }\n        if (positive.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ positive.Max());\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x > 0 && x > 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0);\n        long smallestNegative = lst.Min(x => x < 0);\n        if\
    \ (largestPositive < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, smallestNegative);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        else\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x >= 0 && x >= 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0);\n        long smallestNegative = lst.Min(x => x < 0);\n        if\
    \ (largest < largestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest > smallestNegative)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ smallestNegative);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long n in lst)\
    \ {\n            if (n < 0) negative.Add(n);\n            if (n > 0) positive.Add(n);\n\
    \        }\n        if (negative.Count > 0 && positive.Count > 0) {\n        \
    \    long largestNegative = negative.Max();\n            long smallestPositive\
    \ = positive.Min();\n            if (largestNegative < smallestPositive) {\n \
    \               return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \            }\n            if (largestNegative == 0) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n            }\n \
    \           if (smallestPositive == 0) {\n                return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n            }\n            if (largestNegative\
    \ == smallestPositive) {\n                return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n            }\n        }\n        if (negative.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ negative.Max());\n        }\n        if (positive.Count > 0) {\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, positive.Min());\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        Nullable<long> a = null;\n        Nullable<long> b = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (a != null) {\n                    return Tuple.Create<Nullable<long>, Nullable<long>>(a,\
    \ null);\n                }\n                a = i;\n            }\n         \
    \   if (i > 0) {\n                if (b != null) {\n                    return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(b, null);\n                }\n\
    \                b = i;\n            }\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        if (lst.Count == 0) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   long largest = lst.Max();\n        long smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest < 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);"]
stop_tokens:
- "\n    }\n"
