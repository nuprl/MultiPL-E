name: HumanEval_136_largest_smallest_integers
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Create a function that returns a tuple (a, b), where 'a' is\n\
  \    // the largest of negative integers, and 'b' is the smallest\n    // of positive\
  \ integers in a list.\n    // If there is no negative or positive integers, return\
  \ them as null.\n    // Examples:\n    // >>> LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L})))\n    //\
  \ Tuple.Create((Nullable<long>)null, 1L)\n    // >>> LargestSmallestIntegers((new\
  \ List<long>()))\n    // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n\
  \    // >>> LargestSmallestIntegers((new List<long>(new long[]{(long)0L})))\n  \
  \  // Tuple.Create((Nullable<long>)null, (Nullable<long>)null)\n    public static\
  \ Tuple<Nullable<long>, Nullable<long>> LargestSmallestIntegers(List<long> lst)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(LargestSmallestIntegers((new\
  \ List<long>(new long[]{(long)2L, (long)4L, (long)1L, (long)3L, (long)5L, (long)7L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)2L,\
  \ (long)4L, (long)1L, (long)3L, (long)5L, (long)7L, (long)0L}))).Equals(Tuple.Create((Nullable<long>)null,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)1L,\
  \ (long)3L, (long)2L, (long)4L, (long)5L, (long)6L, (long)-2L}))).Equals(Tuple.Create(-2L,\
  \ 1L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)4L,\
  \ (long)5L, (long)3L, (long)6L, (long)2L, (long)7L, (long)-7L}))).Equals(Tuple.Create(-7L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)7L,\
  \ (long)3L, (long)8L, (long)4L, (long)9L, (long)2L, (long)5L, (long)-9L}))).Equals(Tuple.Create(-9L,\
  \ 2L)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>())).Equals(Tuple.Create((Nullable<long>)null,\
  \ (Nullable<long>)null)));\n    Debug.Assert(LargestSmallestIntegers((new List<long>(new\
  \ long[]{(long)0L}))).Equals(Tuple.Create((Nullable<long>)null, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-1L,\
  \ (long)-3L, (long)-5L, (long)-6L, (long)0L}))).Equals(Tuple.Create(-1L, (Nullable<long>)null)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)1L}))).Equals(Tuple.Create(-3L, 1L)));\n\
  \    Debug.Assert(LargestSmallestIntegers((new List<long>(new long[]{(long)-6L,\
  \ (long)-4L, (long)-4L, (long)-3L, (long)-100L, (long)1L}))).Equals(Tuple.Create(-3L,\
  \ 1L)));\n    }\n\n}\n"
completions: ["        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest == 1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, 1);\n        }\n        if (smallest == 1) {\n       \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, 1);\n        }\n\
    \        long largestNegative = lst.Where(x => x < 0).Max();\n        long smallestPositive\
    \ = lst.Where(x => x > 0).Min();\n        if (largest < smallestPositive) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest == 1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, 1);\n        }\n        if (smallest == 1) {\n       \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, 1);\n        }\n\
    \        if (largest == largestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        if (smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);\n\
    \        }\n        if (largest == largestNegative && smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        if (largest == largestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        if (smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);\n\
    \        }\n        if (largest == largestNegative && smallest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0 ? x : 0);\n        long smallestNegative = lst.Min(x => x < 0 ? x :\
    \ 0);\n        if (largest < largestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest > smallestNegative)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ smallestNegative);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                negative.Add(i);\n            }\n           \
    \ else if (i > 0) {\n                positive.Add(i);\n            }\n       \
    \ }\n        if (negative.Count > 0 && positive.Count > 0) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   if (negative.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, negative.Min());\n        }\n        if (positive.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ positive.Max());\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x > 0 && x > 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0);\n        long smallestNegative = lst.Min(x => x < 0);\n        if\
    \ (largestPositive < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, smallestNegative);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        else\n            return Tuple.Create((Nullable<long>)null,\
    \ largest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x >= 0 && x >= 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0);\n        long smallestNegative = lst.Min(x => x < 0);\n        if\
    \ (largest < largestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest > smallestNegative)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ smallestNegative);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long n in lst)\
    \ {\n            if (n < 0) negative.Add(n);\n            if (n > 0) positive.Add(n);\n\
    \        }\n        if (negative.Count > 0 && positive.Count > 0) {\n        \
    \    long largestNegative = negative.Max();\n            long smallestPositive\
    \ = positive.Min();\n            if (largestNegative < smallestPositive) {\n \
    \               return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \            }\n            if (largestNegative == 0) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n            }\n \
    \           if (smallestPositive == 0) {\n                return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n            }\n            if (largestNegative\
    \ == smallestPositive) {\n                return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n            }\n        }\n        if (negative.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ negative.Max());\n        }\n        if (positive.Count > 0) {\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, positive.Min());\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        Nullable<long> a = null;\n        Nullable<long> b = null;\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (a != null) {\n                    return Tuple.Create<Nullable<long>, Nullable<long>>(a,\
    \ null);\n                }\n                a = i;\n            }\n         \
    \   if (i > 0) {\n                if (b != null) {\n                    return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(b, null);\n                }\n\
    \                b = i;\n            }\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(a, b);", "        if (lst.Count == 0) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   long largest = lst.Max();\n        long smallest = lst.Min();\n        if\
    \ (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest < 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        Tuple<Nullable<long>, Nullable<long>> result = LargestSmallestIntegers(negative);\n\
    \        if (result.Item1 == null) return result;\n        result = LargestSmallestIntegers(positive);\n\
    \        if (result.Item1 == null) return result;\n        if (result.Item1 >\
    \ result.Item2) return result;\n        return Tuple.Create<Nullable<long>, Nullable<long>>(result.Item1,\
    \ result.Item2);", "        long largest = lst.Max();\n        long smallest =\
    \ lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (lst.Count == 0) {\n   \
    \         return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        long largestNegative = lst.Where(x => x < 0).Max();\n     \
    \   long smallestPositive = lst.Where(x => x > 0).Min();\n        if (largestNegative\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestNegative = lst.FindLast(x\
    \ => x < 0);\n        long smallestPositive = lst.FindFirst(x => x > 0);\n   \
    \     if (largestNegative < smallestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Min();\n\
    \        long smallest = lst.Max();\n        foreach (long i in lst) {\n     \
    \       if (i < 0) {\n                if (largest < i) {\n                   \
    \ largest = i;\n                }\n            } else if (i > 0) {\n         \
    \       if (smallest > i) {\n                    smallest = i;\n             \
    \   }\n            }\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long max = 0;\n        long min = 0;\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                if (max < 0)\n\
    \                    max = i;\n            } else {\n                if (min >\
    \ 0)\n                    min = i;\n            }\n        }\n        return Tuple.Create((Nullable<long>)max,\
    \ (Nullable<long>)min);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        if (smallest < 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);", "       \
    \ long largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return Tuple.Create((Nullable<long>)null, smallest);\n\
    \        }\n        return Tuple.Create((Nullable<long>)null, largest);", "  \
    \      if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        List<long> negative = new List<long>();\n        List<long> positive\
    \ = new List<long>();\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                negative.Add(i);\n            } else {\n             \
    \   positive.Add(i);\n            }\n        }\n        if (negative.Count > 0\
    \ && positive.Count > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (negative.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, negative.Min());\n        }\n        if (positive.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ positive.Min());\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x >= 0 && x >= 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count > 0 && positive.Count > 0) {\n            long largestNegative\
    \ = negative.Max();\n            long smallestPositive = positive.Min();\n   \
    \         if (largestNegative < smallestPositive) {\n                return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n            }\n            if (largestNegative\
    \ == 0) {\n                return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n            }\n            if (smallestPositive == 0) {\n          \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \        }\n            if (largestNegative == smallestPositive) {\n         \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \         }\n            List<long> negativeNegative = new List<long>();\n   \
    \         List<long> positivePositive = new List<long>();\n            foreach\
    \ (long i in negative) {\n                if (i < 0) {\n                    negativeNegative.Add(i);\n\
    \                } else {\n                    positivePositive.Add(i);\n    \
    \            }\n            }\n            if (negativeNegative.Count > 0 && positivePositive.Count\
    \ > 0) {\n                long largestNegativeNegative = negativeNegative.Max();\n\
    \                long smallestPositivePositive = positivePositive.Min();\n   \
    \             if (largestNegativeNegative < smallestPositivePositive) {\n    \
    \                return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \                }\n                if (largestNegativeNegative == 0) {\n    \
    \                return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \                }\n                if (smallestPositivePositive == 0) {\n   \
    \                 return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \                }\n", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.FindIndex(x =>\
    \ x < 0);\n        long b = lst.FindIndex(x => x >= 0);\n        if (a != -1)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, lst.ElementAt(a));\n\
    \        }\n        if (b != -1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(lst.ElementAt(b), null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        if (lst.Count == 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < 0)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (smallest > 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>>(null, null);\n        }\n        if (largest\
    \ == smallest) {\n            return Tuple.Create<Nullable<long>>(null, largest);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                negative.Add(i);\n            } else {\n    \
    \            positive.Add(i);\n            }\n        }\n        if (negative.Count\
    \ > 0 && positive.Count > 0) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ Math.Max(negative.Min(), positive.Min()));\n        }\n        if (negative.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>>(null, negative.Min());\n\
    \        }\n        if (positive.Count > 0) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ positive.Min());\n        }\n        return Tuple.Create<Nullable<long>>(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) {\n        \
    \    return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largest, largest);\n\
    \        }\n        long largestNegative = lst.Where(x => x < 0).Max();\n    \
    \    long smallestPositive = lst.Where(x => x >= 0).Min();\n        if (largestNegative\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largestNegative == smallestPositive) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ largestNegative);\n        }\n        long largestNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0).Max();\n        long smallestPositivePositive = lst.Where(x\
    \ => x >= 0 && x >= 0).Min();\n        if (largestNegativeNegative < smallestPositivePositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largestNegativeNegative == smallestPositivePositive) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        }\n        long largestNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largestNegativeNegativeNegative\
    \ == smallestPositivePositivePositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestNegativeNegativeNegative, largestNegativeNegativeNegative);\n\
    \        }\n        long largestNegativeNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositive", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        }\n        List<long> negative =\
    \ new List<long>();\n        List<long> positive = new List<long>();\n       \
    \ foreach (long i in lst) {\n            if (i < 0) {\n                negative.Add(i);\n\
    \            } else {\n                positive.Add(i);\n            }\n     \
    \   }\n        if (negative.Count > 0 && positive.Count > 0) {\n            return\
    \ LargestSmallestIntegers(negative).ThenBy(LargestSmallestIntegers(positive));\n\
    \        }\n        if (negative.Count > 0) {\n            return LargestSmallestIntegers(negative);\n\
    \        }\n        if (positive.Count > 0) {\n            return LargestSmallestIntegers(positive);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        List<long> negative = new\
    \ List<long>();\n        List<long> positive = new List<long>();\n        foreach\
    \ (long i in lst) {\n            if (i < 0) {\n                negative.Add(i);\n\
    \            } else {\n                positive.Add(i);\n            }\n     \
    \   }\n        if (negative.Count > 0 && positive.Count > 0) {\n            long\
    \ largestNegative = negative.Max();\n            long smallestPositive = positive.Min();\n\
    \            if (largestNegative < smallestPositive) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n            }\n \
    \           if (largestNegative == smallestPositive) {\n                return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, largestNegative);\n     \
    \       }\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        List<long> negative = new List<long>();\n        List<long> positive\
    \ = new List<long>();\n        foreach (long i in lst) {\n            if (i <\
    \ 0) {\n                negative.Add(i);\n            } else {\n             \
    \   positive.Add(i);\n            }\n        }\n        if (negative.Count > 0\
    \ && positive.Count > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (negative.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, negative.Min());\n        }\n        if (positive.Count\
    \ > 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ positive.Min());\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (lst.Count == 0) {\n   \
    \         return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n \
    \       }\n        long largestNegative = lst.FindLast(x => x < 0);\n        long\
    \ smallestPositive = lst.FindFirst(x => x > 0);\n        if (largestNegative <\
    \ smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        var largest = lst.Max();\n        var\
    \ smallest = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largest, largest);\n   \
    \     var largestNegative = lst.Where(x => x < 0).Max();\n        var smallestPositive\
    \ = lst.Where(x => x > 0).Min();\n        if (largestNegative < smallestPositive)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largestNegative == smallestPositive)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestNegative, largestNegative);\n        var largestNegativeNegative\
    \ = lst.Where(x => x < 0 && x > 0).Max();\n        var smallestPositivePositive\
    \ = lst.Where(x => x > 0 && x < 0).Min();\n        if (largestNegativeNegative\
    \ < smallestPositivePositive)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        var largestNegativePositive = lst.Where(x\
    \ => x < 0 && x > 0).Max();\n        var smallestPositiveNegative = lst.Where(x\
    \ => x > 0 && x < 0).Min();\n        if (largestNegativePositive < smallestPositiveNegative)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largestNegativePositive == smallestPositiveNegative)\n          \
    \  return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativePositive,\
    \ largestNegativePositive);\n        var largestPositivePositive = lst.Where(x\
    \ => x < 0 && x > 0).Max();\n        var smallestPositiveNegativeNegative = lst.Where(x\
    \ => x > 0 && x < 0 && x < 0).Min();\n        if (largestPositivePositive < smallestPositiveNegativeNegative)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largestPositivePositive == smallestPositiveNegativeNegative)\n  \
    \          return Tuple.Create<Nullable<long>, Nullable<", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest < 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n      \
    \  long largestNegative = lst.FindLast(x => x < 0);\n        long smallestPositive\
    \ = lst.FindFirst(x => x > 0);\n        if (largestNegative < smallestPositive)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largestNegative == smallestPositive)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largestNegative);\n        long largestNegativeNegative\
    \ = lst.FindLast(x => x < 0 && x < 0);\n        long smallestPositivePositive\
    \ = lst.FindFirst(x => x > 0 && x > 0);\n        if (largestNegativeNegative <\
    \ smallestPositivePositive)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegative == smallestPositivePositive)\n \
    \           return Tuple.Create<Nullable<long>, Nullable<long>>(null, largestNegativeNegative);\n\
    \        long largestNegativeNegativeNegative = lst.FindLast(x => x < 0 && x <\
    \ 0 && x < 0);\n        long smallestPositivePositivePositive = lst.FindFirst(x\
    \ => x > 0 && x > 0 && x > 0);\n        if (largestNegativeNegativeNegative <\
    \ smallestPositivePositivePositive)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegative ==\
    \ smallestPositivePositivePositive)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largestNegativeNegativeNegative);\n        throw new InvalidOperationException(\"\
    No negative or positive integers found\");", "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>>(null, null);\n        }\n        return\
    \ Tuple.Create<Nullable<long>>(null, smallest);", "        if (lst.Count == 0)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.FindIndex(x =>\
    \ x < 0);\n        long b = lst.FindIndex(x => x >= 0);\n        if (a == -1)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (b == -1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(\n            new Nullable<long>(largest),\n            new\
    \ Nullable<long>(smallest)\n            );", "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest)\n       \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n     \
    \   else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long max = 0;\n        long min = 0;\n        foreach (long i in lst) {\n\
    \            if (i < 0) {\n                max = Math.Max(max, i);\n         \
    \   } else {\n                min = Math.Min(min, i);\n            }\n       \
    \ }\n        return Tuple.Create((Nullable<long>)null, min < 0 ? null : max);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        long largestPositive = lst.Where(x => x > 0).Max();\n      \
    \  long smallestNegative = lst.Where(x => x < 0).Min();\n        if (largest <\
    \ smallestNegative) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        if (largest < smallestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.FindAll(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.FindAll(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.FindAll(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.FindAll(x => x >= 0 && x >= 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.FindAll(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.FindAll(x => x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.FindAll(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.FindAll(x => x >= 0 && x >= 0 && x >= 0 && x >= 0).Min();\n        if\
    \ (largestNegativeNegativeNegativeNegative < smallestPositivePositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if\
    \ (largestNegativeNegativeNegativeNegative == smallestPositivePositivePositive",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.FindIndex(x =>\
    \ x < 0);\n        long b = lst.FindIndex(x => x > 0);\n        if (a < b) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(smallest,\
    \ largest);", "        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        if (smallest > 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n        long largestPositive\
    \ = lst.Where(x => x > 0).Max();\n        long smallestPositive = lst.Where(x\
    \ => x > 0).Min();\n        if (largestPositive < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallestPositive);\n        if (smallestPositive > 0)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ null);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long a = lst.FindIndex(x => x < 0);\n\
    \        long b = lst.FindIndex(x => x > 0);\n        if (a != -1 && b != -1)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (a != -1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        if (b != -1) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n \
    \       }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long maxNegative = lst.Max(x => x < 0L ? 0L : x);\n        long minPositive\
    \ = lst.Min(x => x > 0L ? 0L : x);\n        return Tuple.Create((Nullable<long>)null,\
    \ maxNegative < minPositive ? maxNegative : minPositive);", "        if (lst.Count\
    \ == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>>(null, null);\n        }\n        return\
    \ Tuple.Create<Nullable<long>>(null, smallest);", "        if (lst.Count == 0)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        long a = largest;\n        long b = smallest;\n        foreach (long\
    \ i in lst) {\n            if (i < 0) a = i;\n            if (i > 0) b = i;\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(a < b\
    \ ? a : b, a > b ? a : b);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Max(x\
    \ => x > 0);\n        long smallestNegative = lst.Min(x => x < 0);\n        if\
    \ (largestPositive < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, smallestNegative);", "        if (lst.Count\
    \ == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        if (largest == smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, largest);\n        }\n        List<long>\
    \ negative = new List<long>();\n        List<long> positive = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ negative.Add(i);\n            } else {\n                positive.Add(i);\n \
    \           }\n        }\n        if (negative.Count > 0 && positive.Count > 0)\
    \ {\n            return Tuple.Create((Nullable<long>)null, Math.Max(negative.Min(),\
    \ positive.Min()));\n        }\n        if (negative.Count > 0) {\n          \
    \  return Tuple.Create((Nullable<long>)null, negative.Min());\n        }\n   \
    \     if (positive.Count > 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ positive.Min());\n        }\n        return Tuple.Create((Nullable<long>)null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return new Tuple<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long max = 0;\n        long min = 0;\n        foreach (var item in lst)\
    \ {\n            if (item < 0) {\n                if (max < item) {\n        \
    \            max = item;\n                }\n            } else {\n          \
    \      if (min > item) {\n                    min = item;\n                }\n\
    \            }\n        }\n        if (min == max) {\n            return Tuple.Create((Nullable<long>)null,\
    \ min);\n        }\n        return Tuple.Create((Nullable<long>)null, max);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Min();\n\
    \        long smallest = lst.Max();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        foreach (var item in lst) {\n            if (item < smallest)\
    \ {\n                smallest = item;\n            }\n            if (item > largest)\
    \ {\n                largest = item;\n            }\n        }\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);", "       \
    \ if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long a = lst.Where(x => x < 0).Max();\n        long b = lst.Where(x\
    \ => x > 0).Min();\n        if (a > b) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(a, b);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) {\n        \
    \    return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n      \
    \  }\n        long largest = lst.Min();\n        long smallest = lst.Max();\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ if (largest < i) {\n                    largest = i;\n                }\n  \
    \          } else {\n                if (smallest > i) {\n                   \
    \ smallest = i;\n                }\n            }\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestNegative = lst.FindAll(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.FindAll(x => x > 0).Min();\n\
    \        if (largest < smallestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        if (largest < largestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == largestNegative)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create((Nullable<long>)null, smallest);\n        }\n        return\
    \ Tuple.Create((Nullable<long>)null, largest);", "        if (lst.Count == 0)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        var\
    \ minValue = lst[0];\n        var maxValue = lst[0];\n        for (int i = 1;\
    \ i < lst.Count; i++) {\n            if (lst[i] < minValue) minValue = lst[i];\n\
    \            if (lst[i] > maxValue) maxValue = lst[i];\n        }\n        return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(\n            minValue < 0L ? null\
    \ : minValue,\n            maxValue > 0L ? maxValue : null);", "        if (lst.Count\
    \ == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (positive.Count == 0) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        long largestNegative = negative.Max();\n        long smallestPositive\
    \ = positive.Min();\n        if (largestNegative < smallestPositive) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)null, largest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x > 0 && x > 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) largest = LargestSmallestIntegers(negative).Item1;\n\
    \        if (positive.Count > 0) smallest = LargestSmallestIntegers(positive).Item1;\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>>(null, null);\n        }\n        return\
    \ Tuple.Create<Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        var largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        var smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        else\n            return Tuple.Create<Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestPositive = lst.Where(x\
    \ => x >= 0).Max();\n        long smallestNegative = lst.Where(x => x <= 0).Min();\n\
    \        if (largest < smallestNegative) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        if (largest < largestPositive) return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (largest\
    \ == largestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ largest);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst[0];\n        long smallest = lst[0];\n  \
    \      foreach (long i in lst) {\n            if (i < 0) largest = i;\n      \
    \      if (i > 0) smallest = i;\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        var largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        var smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ smallestPositive);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.FindLast(x\
    \ => x < 0);\n        long smallestPositive = lst.FindFirst(x => x > 0);\n   \
    \     if (largestNegative == smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestNegative, smallestPositive);", "        if (lst.Count\
    \ == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largest < largestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        if (smallest > smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Where(x\
    \ => x > 0).Max();\n        long smallestNegative = lst.Where(x => x < 0).Min();\n\
    \        if (largest < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest < smallestPositive)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        else\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return new Tuple<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x > 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x > 0 && x > 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x > 0 && x > 0 && x > 0 && x > 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        if (lst.Count == 0)\n       \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n     \
    \   long largest = lst.Max();\n        long smallest = lst.Min();\n        if\
    \ (largest < 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);\n        if (smallest > 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);\n        long largestPositive = lst.Max(x =>\
    \ x > 0);\n        long smallestPositive = lst.Min(x => x > 0);\n        if (largestPositive\
    \ < 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallestPositive);\n        if (smallestPositive > 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, null);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create<Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        long largestNegative = lst.Where(x => x < 0).Max();\n    \
    \    long smallestPositive = lst.Where(x => x > 0).Min();\n        if (largest\
    \ < smallestPositive) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == smallestPositive) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   if (largest < largestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == largestNegative)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestPositive = lst.Where(x\
    \ => x >= 0).Max();\n        long smallestNegative = lst.Where(x => x <= 0).Min();\n\
    \        if (largestPositive < smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestPositive == smallestNegative)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive, largestPositive);\n\
    \        long largestNegative = lst.Where(x => x < 0).Max();\n        long smallestPositive\
    \ = lst.Where(x => x > 0).Min();\n        if (largestNegative < smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if\
    \ (largestNegative == smallestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative,\
    \ largestNegative);\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive,\
    \ largestNegative);", "        long largest = lst.Max();\n        long smallest\
    \ = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count > 0) return LargestSmallestIntegers(negative);\n\
    \        if (positive.Count > 0) return LargestSmallestIntegers(positive);\n \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);", " \
    \       if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        var largest = lst.Max();\n        var smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        if (lst.Count == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.FindIndex(x =>\
    \ x < 0);\n        long b = lst.FindIndex(x => x >= 0);\n        if (a != -1)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, lst.ElementAt(a));\n\
    \        }\n        if (b != -1) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(lst.ElementAt(b), null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest)\n           \
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if\
    \ (largest < 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);\n        if (smallest < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long maxNegative = lst.Max(x\
    \ => x < 0L ? x : 0);\n        long minPositive = lst.Min(x => x > 0L ? x : 0);\n\
    \        return Tuple.Create(maxNegative, minPositive);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegative, largestNegative);\n\
    \        long largestNegativeNegative = lst.Where(x => x < 0 && x < 0).Max();\n\
    \        long smallestPositivePositive = lst.Where(x => x >= 0 && x >= 0).Min();\n\
    \        if (largestNegativeNegative < smallestPositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegative == smallestPositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegative,\
    \ largestNegativeNegative);\n        long largestNegativeNegativeNegative = lst.Where(x\
    \ => x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegative\
    \ < smallestPositivePositivePositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegativeNegativeNegative == smallestPositivePositivePositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestNegativeNegativeNegative,\
    \ largestNegativeNegativeNegative);\n        long largestNegativeNegativeNegativeNegative\
    \ = lst.Where(x => x < 0 && x < 0 && x < 0 && x < 0).Max();\n        long smallestPositivePositivePositivePositive\
    \ = lst.Where(x => x >= 0 && x >= 0 && x >= 0 && x >= 0).Min();\n        if (largestNegativeNegativeNegativeNegative\
    \ < smallestPositivePositivePositivePositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegativeNegativeNegativeNegative\
    \ == smallestPositivePositivePositive", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return new Tuple<Nullable<long>, Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestPositive = lst.Where(x\
    \ => x >= 0).Max();\n        long smallestNegative = lst.Where(x => x <= 0).Min();\n\
    \        if (largestPositive < smallestNegative) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestPositive, smallestNegative);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                negative.Add(i);\n            } else {\n    \
    \            positive.Add(i);\n            }\n        }\n        if (negative.Count\
    \ > 0 && positive.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);\n        }\n        if (negative.Count > 0)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, negative.Min());\n\
    \        }\n        if (positive.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, positive.Max());\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ null);\n        }\n        return Tuple.Create<Nullable<long>>(null, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        return Tuple.Create((Nullable<long>)largest,\
    \ (Nullable<long>)smallest);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   if (largest == 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (smallest < 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);", "        long largest = lst.Max();\n     \
    \   long smallest = lst.Min();\n        if (largest < smallest) {\n          \
    \  return Tuple.Create<Nullable<long>>(null, null);\n        }\n        if (largest\
    \ == 0) {\n            return Tuple.Create<Nullable<long>>(null, null);\n    \
    \    }\n        if (smallest < 0) {\n            return Tuple.Create<Nullable<long>>(null,\
    \ smallest);\n        }\n        return Tuple.Create<Nullable<long>>(largest,\
    \ smallest);", "        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (smallest > 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest)\n        \
    \    return Tuple.Create<Nullable<long>>(null, null);\n        else\n        \
    \    return Tuple.Create<Nullable<long>>(null, smallest);", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\
    \ {\n            return Tuple.Create((Nullable<long>)null, smallest);\n      \
    \  }\n        return Tuple.Create((Nullable<long>)null, largest);", "        long\
    \ largest = lst.Max();\n        long smallest = lst.Min();\n        if (largest\
    \ < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (largest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (smallest == 0) {\n    \
    \        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n  \
    \      }\n        long largestNegative = lst.Where(x => x < 0).Max();\n      \
    \  long smallestPositive = lst.Where(x => x >= 0).Min();\n        if (largest\
    \ < largestNegative) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (smallest > smallestPositive) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(largest, smallest);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create((Nullable<long>)null,\
    \ smallest);\n        }\n        if (largest == smallest) {\n            return\
    \ Tuple.Create((Nullable<long>)null, largest);\n        }\n        List<long>\
    \ negative = new List<long>();\n        List<long> positive = new List<long>();\n\
    \        foreach (long i in lst) {\n            if (i < 0) {\n               \
    \ negative.Add(i);\n            }\n            if (i > 0) {\n                positive.Add(i);\n\
    \            }\n        }\n        if (negative.Count > 0 && positive.Count >\
    \ 0) {\n            return Tuple.Create((Nullable<long>)null, Math.Max(negative.Min(),\
    \ positive.Min()));\n        }\n        if (negative.Count > 0) {\n          \
    \  return Tuple.Create((Nullable<long>)null, negative.Min());\n        }\n   \
    \     if (positive.Count > 0) {\n            return Tuple.Create((Nullable<long>)null,\
    \ positive.Min());\n        }\n        return Tuple.Create((Nullable<long>)null,\
    \ null);", "        if (lst.Count == 0) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largest == smallest) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, largest);\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) negative.Add(i);\n            if (i > 0) positive.Add(i);\n\
    \        }\n        if (negative.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (positive.Count == 0) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        long largestNegative = negative.Max();\n\
    \        long smallestPositive = positive.Min();\n        if (largestNegative\
    \ < smallestPositive) return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegative == smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largestNegative, largestNegative);\n        long largestPositive\
    \ = positive.Max();\n        long smallestNegative = negative.Min();\n       \
    \ if (largestPositive < smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestPositive == smallestNegative)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive, largestPositive);\n\
    \        long largestPositive = positive.Max();\n        long smallestPositive\
    \ = positive.Min();\n        if (largestPositive < smallestPositive) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestPositive == smallestPositive)\
    \ return Tuple.Create<Nullable<long>, Nullable<long>>(largestPositive, largestPositive);\n\
    \        long largestNegative = negative.Max();\n        long smallestNegative\
    \ = negative.Min();\n        if (largestNegative < smallestNegative) return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (largestNegative == smallestNegative)\
    \ return Tuple.Create<Nullable<long>, Nullable<long", "        long largest =\
    \ lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        if (largest == smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        if (lst.Count == 0)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (lst.Count\
    \ == 1)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ lst[0]);\n        long largestNegative = lst.Where(x => x < 0).Max();\n    \
    \    long smallestPositive = lst.Where(x => x > 0).Min();\n        if (largestNegative\
    \ < smallestPositive)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegative == smallestPositive)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (lst.Count\
    \ == 2)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ lst[0]);\n        long largestNegative2 = lst.Where(x => x < 0).Max();\n   \
    \     long smallestPositive2 = lst.Where(x => x > 0).Min();\n        if (largestNegative2\
    \ < smallestPositive2)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegative2 == smallestPositive2)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (lst.Count\
    \ == 3)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ lst[0]);\n        long largestNegative3 = lst.Where(x => x < 0).Max();\n   \
    \     long smallestPositive3 = lst.Where(x => x > 0).Min();\n        if (largestNegative3\
    \ < smallestPositive3)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        if (largestNegative3 == smallestPositive3)\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        if (lst.Count\
    \ == 4)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ lst[0]);\n        long largestNegative4 = lst.Where(x => x < 0).Max();\n   \
    \     long smallestPositive4 = lst.Where(x => x > 0).Min();", "        long largest\
    \ = lst.Max();\n        long smallest = lst.Min();\n        if (largest < smallest)\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n\
    \        else\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                negative.Add(i);\n            }\n           \
    \ if (i > 0) {\n                positive.Add(i);\n            }\n        }\n \
    \       if (negative.Count > 0 && positive.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        if (negative.Count > 0)\
    \ {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null, negative.Min());\n\
    \        }\n        if (positive.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, positive.Max());\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < 0)\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ smallest);\n        if (smallest > 0)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, null);\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest) {\n            return\
    \ Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n        }\n     \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return new Tuple<Nullable<long>, Nullable<long>>(null, null);\n        }\n\
    \        return new Tuple<Nullable<long>, Nullable<long>>(null, smallest);", " \
    \       long largest = lst.Max();\n        long smallest = lst.Min();\n      \
    \  if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == smallest) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, largest);\n\
    \        }\n        List<long> negative = new List<long>();\n        List<long>\
    \ positive = new List<long>();\n        foreach (long i in lst) {\n          \
    \  if (i < 0) {\n                negative.Add(i);\n            } else {\n    \
    \            positive.Add(i);\n            }\n        }\n        if (negative.Count\
    \ > positive.Count) {\n            return LargestSmallestIntegers(negative);\n\
    \        } else {\n            return LargestSmallestIntegers(positive);\n   \
    \     }", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);", "        long largest = lst.Max();\n    \
    \    long smallest = lst.Min();\n        if (largest < smallest) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, smallest);",
  "        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largest = lst.Max();\n\
    \        long smallest = lst.Min();\n        if (largest < smallest) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(largest,\
    \ smallest);", "        long largest = lst.Max();\n        long smallest = lst.Min();\n\
    \        if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (largest == 0) {\n     \
    \       return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n   \
    \     }\n        if (smallest == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, largest);", "        if (lst.Count == 0) {\n         \
    \   return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n       \
    \ }\n        long largest = lst.Max();\n        long smallest = lst.Min();\n \
    \       if (largest < smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long a = lst.FindIndex(x =>\
    \ x < 0);\n        long b = lst.FindIndex(x => x > 0);\n        if (a >= 0 &&\
    \ b >= 0) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (a >= 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, smallest);\n        }\n        if (b >= 0) {\n       \
    \     return Tuple.Create<Nullable<long>, Nullable<long>>(largest, null);\n  \
    \      }\n        return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);",
  "        long largest = lst.Max();\n        long smallest = lst.Min();\n       \
    \ if (largest < smallest) {\n            return Tuple.Create<Nullable<long>, Nullable<long>>(null,\
    \ null);\n        }\n        if (lst.Count == 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        long largestNegative = lst.Where(x\
    \ => x < 0).Max();\n        long smallestPositive = lst.Where(x => x >= 0).Min();\n\
    \        if (largestNegative < smallestPositive) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);", "        long largest = lst.Max();\n \
    \       long smallest = lst.Min();\n        if (largest < smallest) {\n      \
    \      return Tuple.Create<Nullable<long>, Nullable<long>>(null, null);\n    \
    \    }\n        if (largest == smallest) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        List<long> negative = new List<long>();\n\
    \        List<long> positive = new List<long>();\n        foreach (long i in lst)\
    \ {\n            if (i < 0) {\n                negative.Add(i);\n            }\
    \ else {\n                positive.Add(i);\n            }\n        }\n       \
    \ if (negative.Count > 0 && positive.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        }\n        if (negative.Count > 0) {\n\
    \            return Tuple.Create<Nullable<long>, Nullable<long>>(null, negative.Min());\n\
    \        }\n        if (positive.Count > 0) {\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, positive.Max());\n        }\n        return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);", "        long largest = lst.Max();\n        long\
    \ smallest = lst.Min();\n        if (largest < smallest)\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(null, null);\n        else\n            return Tuple.Create<Nullable<long>,\
    \ Nullable<long>>(largest, smallest);"]
stop_tokens:
- "\n    }\n"
