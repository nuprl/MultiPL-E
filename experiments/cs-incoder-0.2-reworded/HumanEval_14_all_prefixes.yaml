name: HumanEval_14_all_prefixes
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return list of all prefixes from shortest to longest of the\
  \ input string\n    // >>> AllPrefixes((\"abc\"))\n    // (new List<string>(new\
  \ string[]{(string)\"a\", (string)\"ab\", (string)\"abc\"}))\n    public static\
  \ List<string> AllPrefixes(string str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(AllPrefixes((\"\
  \")).Equals((new List<string>())));\n    Debug.Assert(AllPrefixes((\"asdfgh\")).Equals((new\
  \ List<string>(new string[]{(string)\"a\", (string)\"as\", (string)\"asd\", (string)\"\
  asdf\", (string)\"asdfg\", (string)\"asdfgh\"}))));\n    Debug.Assert(AllPrefixes((\"\
  WWW\")).Equals((new List<string>(new string[]{(string)\"W\", (string)\"WW\", (string)\"\
  WWW\"}))));\n    }\n\n}\n"
completions: ["        List<string> prefixes = new List<string>();\n        prefixes.AddRange(new\
    \ string[]{str});\n        foreach (string prefix in prefixes.Skip(1))\n     \
    \       prefixes.AddRange(AllPrefixes(prefix).Select(p => prefix + p));\n    \
    \    return prefixes;", "        List<string> result = new List<string>();\n \
    \       foreach (string s in AllPrefixes(str, new List<string>())) {\n       \
    \     result.Add(s);\n        }\n        return result;", "        if (str ==\
    \ null || str.Length == 0)\n            return new List<string>();\n        List<string>\
    \ prefixes = new List<string>();\n        prefixes.Add(str);\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        if (str == null)\n \
    \           throw new ArgumentNullException(\"str\");\n        List<string> prefixes\
    \ = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixes(str,\
    \ prefixes));\n        return prefixes;", "        List<string> prefixes = new\
    \ List<string>();\n        prefixes.AddRange(AllPrefixesHelper(str));\n      \
    \  return prefixes;", "        if (str == null || str.Length == 0) return new\
    \ List<string>();\n        List<string> prefixes = new List<string>();\n     \
    \   prefixes.Add(str);\n        foreach (string s in AllPrefixes(str.Substring(1))\
    \ ) {\n            prefixes.Add(s + str.Substring(0, s.Length));\n        }\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.AddRange(AllPrefixesHelper(str));\n        return prefixes;",
  "        if (str == null)\n            throw new ArgumentNullException(\"str\");\n\
    \        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\"\
    );\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        string\
    \ prefix = \"\";\n        foreach (char c in str) {\n            prefix = prefix\
    \ + c;\n            prefixes.Add(prefix);\n        }\n        return prefixes;",
  "        if (str == null || str.Length == 0)\n            return new List<string>();\n\
    \        List<string> prefixes = new List<string>();\n        prefixes.Add(str);\n\
    \        prefixes.AddRange(AllPrefixes(str.Substring(0, str.Length - 1)));\n \
    \       return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.AddRange(new List<string>(new string[]{str}));\n        string\
    \ prefix = str.Substring(0, 1);\n        prefixes.AddRange(AllPrefixes(prefix));\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.Add(\"\
    \");\n        prefixes.AddRange(AllPrefixesHelper(str, prefixes));\n        return\
    \ prefixes;", "        List<string> prefixes = new List<string>();\n        prefixes.AddRange(AllPrefixesHelper(str));\n\
    \        return prefixes;", "        List<string> prefixes = new List<string>();\n\
    \        string prefix = \"\";\n        foreach (char c in str) {\n          \
    \  prefix = prefix + c;\n            prefixes.Add(prefix);\n        }\n      \
    \  return prefixes;", "        if (str == null || str.Length == 0)\n         \
    \   return new List<string>();\n        var prefixes = new List<string>();\n \
    \       var prefix = new StringBuilder();\n        foreach (var c in str) {\n\
    \            prefix.Append(c);\n            prefixes.Add(prefix.ToString());\n\
    \            prefix.Remove(0, 1);\n        }\n        return prefixes;", "   \
    \     List<string> prefixes = new List<string>();\n        string prefix = \"\"\
    ;\n        foreach (char c in str) {\n            prefix = prefix + c;\n     \
    \       prefixes.Add(prefix);\n        }\n        return prefixes;", "       \
    \ var result = new List<string>();\n        var prefix = new StringBuilder();\n\
    \        foreach (var c in str) {\n            prefix.Append(c);\n           \
    \ result.Add(prefix.ToString());\n            prefix.Remove(0, 1);\n        }\n\
    \        return result;", "        List<string> prefixes = new List<string>();\n\
    \        prefixes.AddRange(new List<string>(new string[]{str}));\n        prefixes.AddRange(AllPrefixes(str.Substring(0,\
    \ str.Length - 1)));\n        return prefixes;", "        List<string> prefixes\
    \ = new List<string>();\n        prefixes.Add(\"\");\n        prefixes.AddRange(AllPrefixesHelper(str,\
    \ prefixes));\n        return prefixes;"]
stop_tokens:
- "\n    }\n"
