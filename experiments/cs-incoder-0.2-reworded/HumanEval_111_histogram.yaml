name: HumanEval_111_histogram
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string representing a space separated lowercase letters,\
  \ return a dictionary\n    // of the letter with the most repetition and containing\
  \ the corresponding count.\n    // If several letters have the same occurrence,\
  \ return all of them.\n    // Example:\n    // >>> Histogram((\"a b c\"))\n    //\
  \ (new Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}})\n    //\
  \ >>> Histogram((\"a b b a\"))\n    // (new Dictionary<string,long>(){{\"a\", 2L},\
  \ {\"b\", 2L}})\n    // >>> Histogram((\"a b c a b\"))\n    // (new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})\n    // >>> Histogram((\"b b b b a\"))\n    // (new Dictionary<string,long>(){{\"\
  b\", 4L}})\n    // >>> Histogram((\"\"))\n    // (new Dictionary<string,long>())\n\
  \    public static Dictionary<string,long> Histogram(string test) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Histogram((\"\
  a b b a\")).Equals((new Dictionary<string,long>(){{\"a\", 2L}, {\"b\", 2L}})));\n\
  \    Debug.Assert(Histogram((\"a b c a b\")).Equals((new Dictionary<string,long>(){{\"\
  a\", 2L}, {\"b\", 2L}})));\n    Debug.Assert(Histogram((\"a b c d g\")).Equals((new\
  \ Dictionary<string,long>(){{\"a\", 1L}, {\"b\", 1L}, {\"c\", 1L}, {\"d\", 1L},\
  \ {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"r t g\")).Equals((new Dictionary<string,long>(){{\"\
  r\", 1L}, {\"t\", 1L}, {\"g\", 1L}})));\n    Debug.Assert(Histogram((\"b b b b a\"\
  )).Equals((new Dictionary<string,long>(){{\"b\", 4L}})));\n    Debug.Assert(Histogram((\"\
  r t g\")).Equals((new Dictionary<string,long>(){{\"r\", 1L}, {\"t\", 1L}, {\"g\"\
  , 1L}})));\n    Debug.Assert(Histogram((\"\")).Equals((new Dictionary<string,long>())));\n\
  \    Debug.Assert(Histogram((\"a\")).Equals((new Dictionary<string,long>(){{\"a\"\
  , 1L}})));\n    }\n\n}\n"
completions: ["        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string word in test.Split(' ')){\n            long count = 1;\n\
    \            foreach (char c in word){\n                if (result.ContainsKey(c)){\n\
    \                    result[c] += count;\n                } else {\n         \
    \           result.Add(c, count);\n                }\n                count +=\
    \ 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = test.Count(c => c == s);\n        \
    \    if (count > 0)\n            {\n                result.Add(s, count);\n  \
    \          }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = 0;\n            foreach (char c in s.ToCharArray()){\n\
    \                if (result.ContainsKey(c)){\n                    count += result[c];\n\
    \                }\n                else {\n                    result.Add(c,\
    \ 1L);\n                }\n            }\n            result.Add(s, count);\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            long count;\n            if (result.TryGetValue(s, out\
    \ count)) {\n                result[s] = count + 1;\n            } else {\n  \
    \              result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string word in test.Split(' ')){\n            long count;\n     \
    \       if (!result.TryGetValue(word, out count)){\n                result.Add(word,\
    \ 1L);\n            }\n            else {\n                result[word] += 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string s in test.Split(' ')){\n            long count;\n     \
    \       if (histogram.TryGetValue(s, out count)){\n                histogram[s]\
    \ = count + 1;\n            } else {\n                histogram[s] = 1;\n    \
    \        }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ ')){\n            foreach (char letter in word){\n                if (!result.ContainsKey(letter)){\n\
    \                    result.Add(letter, 1L);\n                }\n            \
    \    else {\n                    result[letter]++;\n                }\n      \
    \      }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s]++;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = test.Count(x => x == s);\n            if (result.ContainsKey(s)){\n\
    \                result[s] = Math.Max(result[s],count);\n            }\n     \
    \       else{\n                result.Add(s, count);\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string word in test.Split(' '))\n            foreach (char letter\
    \ in word)\n                if (!histogram.ContainsKey(letter))\n            \
    \        histogram.Add(letter, 1L);\n                else\n                  \
    \  histogram[letter]++;\n        return histogram;", "        var letters = test.ToCharArray().Select(c\
    \ => c.ToString()).ToList();\n        var letterCounts = letters.GroupBy(c =>\
    \ c).ToDictionary(g => g.Key, g => g.Count());\n        return letterCounts.OrderByDescending(c\
    \ => c.Value).FirstOrDefault();", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        foreach (string word in test.Split(' '))\n\
    \        {\n            long count = test.Split(' ').Count(x => x == word);\n\
    \            if (result.ContainsKey(word))\n            {\n                result[word]\
    \ += count;\n            }\n            else\n            {\n                result.Add(word,\
    \ count);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1L);\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count = test.Split('\
    \ ').Count(x => x == s);\n            if (result.ContainsKey(s)){\n          \
    \      result[s] = result[s] + count;\n            }\n            else{\n    \
    \            result.Add(s, count);\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count = result.ContainsKey(s)\
    \ ? result[s] : 0;\n            result[s] = count + 1;\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')){\n            long count;\n\
    \            if (!result.TryGetValue(letter, out count)) {\n                result.Add(letter,\
    \ 1L);\n            } else {\n                result[letter] += 1;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            if (!result.ContainsKey(letter))\n            {\n\
    \                result.Add(letter, 1L);\n            }\n            else\n  \
    \          {\n                result[letter]++;\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            long count = 0;\n\
    \            if (result.ContainsKey(s)){\n                count = result[s];\n\
    \            }\n            else{\n                result.Add(s, 1L);\n      \
    \      }\n            result[s] = count + 1;\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count = test.Count(c\
    \ => c == s);\n            if (result.ContainsKey(s))\n                result[s]\
    \ = result[s] + count;\n            else\n                result.Add(s, count);\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            if (result.ContainsKey(s))\n            {\n          \
    \      result[s] = result[s] + 1;\n            }\n            else\n         \
    \   {\n                result.Add(s, 1L);\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')) {\n            long count;\n\
    \            if (result.TryGetValue(letter, out count)) {\n                result[letter]\
    \ = count + 1;\n            } else {\n                result[letter] = 1;\n  \
    \          }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' '))\n        {\n            long count;\n            if (histogram.TryGetValue(letter,\
    \ out count))\n            {\n                histogram[letter] = count + 1;\n\
    \            }\n            else\n            {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count = 1;\n            foreach (char c in\
    \ word)\n            {\n                if (!result.ContainsKey(c))\n        \
    \        {\n                    result.Add(c, count);\n                }\n   \
    \             else\n                {\n                    result[c] += count;\n\
    \                }\n                count++;\n            }\n        }\n     \
    \   return result;", "        var result = new Dictionary<string,long>();\n  \
    \      foreach (var item in test.Split(' '))\n        {\n            if (!result.ContainsKey(item))\n\
    \            {\n                result.Add(item, 1L);\n            }\n       \
    \     else\n            {\n                result[item]++;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            long count;\n            if (result.TryGetValue(s, out\
    \ count)) {\n                result[s] = count + 1;\n            } else {\n  \
    \              result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (!result.TryGetValue(s, out count))\n            {\n         \
    \       result.Add(s, 1L);\n            }\n            else\n            {\n \
    \               result[s] = count + 1;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string word in test.Split(' ')){\n            long count = test.Split('\
    \ ').Count(x => x == word);\n            if (result.ContainsKey(word)){\n    \
    \            result[word] += count;\n            } else {\n                result.Add(word,\
    \ count);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            }\n         \
    \   else {\n                result[s] = count + 1;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count)) {\n                result[s]\
    \ = count + 1;\n            } else {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(word,\
    \ out count))\n            {\n                result[word] = count + 1;\n    \
    \        }\n            else\n            {\n                result[word] = 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            long count;\n            if (result.TryGetValue(s, out\
    \ count))\n            {\n                result[s] = count + 1;\n           \
    \ }\n            else\n            {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] = result[s] + 1;\n            }\n            else\n   \
    \         {\n                result.Add(s, 1L);\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count)) {\n                result[s]\
    \ = count + 1;\n            } else {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s] = result[s]\
    \ + 1;\n            }\n            else{\n                result.Add(s, 1L);\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(letter))\n            {\n\
    \                result[letter]++;\n            }\n            else\n        \
    \    {\n                result.Add(letter, 1L);\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            if (result.ContainsKey(s)){\n\
    \                result[s]++;\n            }\n            else {\n           \
    \     result.Add(s, 1L);\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            if (result.ContainsKey(s))\n\
    \                result[s] = result[s] + 1;\n            else\n              \
    \  result.Add(s, 1L);\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            } else {\n  \
    \              result[s] = count + 1;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            long count = test.Count(c\
    \ => c == s);\n            if (result.ContainsKey(s))\n                result[s]\
    \ = result[s] + count;\n            else\n                result.Add(s, count);\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            if (result.ContainsKey(s))\n            {\n          \
    \      result[s] = result[s] + 1;\n            }\n            else\n         \
    \   {\n                result.Add(s, 1L);\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            long count;\n   \
    \         if (result.TryGetValue(s, out count)){\n                result[s] =\
    \ count + 1;\n            } else {\n                result[s] = 1;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(letter,\
    \ out count))\n            {\n                result[letter] = count + 1;\n  \
    \          }\n            else\n            {\n                result[letter]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = 1;\n            if (result.ContainsKey(s)){\n\
    \                count = result[s];\n            }\n            result.Add(s,\
    \ count);\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            if (result.ContainsKey(s)){\n                result[s] = result[s]\
    \ + 1;\n            } else {\n                result.Add(s, 1L);\n           \
    \ }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(word, out\
    \ count)){\n                result[word] = count + 1;\n            } else {\n\
    \                result[word] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string word in test.Split(' '))\n        {\n            long count\
    \ = 1;\n            foreach (char c in word)\n            {\n                if\
    \ (!result.ContainsKey(c))\n                {\n                    result.Add(c,\
    \ count);\n                }\n                else\n                {\n      \
    \              result[c] = Math.Max(result[c], count);\n                }\n  \
    \              count++;\n            }\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    foreach (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] += 1;\n            }\n            else\n\
    \            {\n                result.Add(s, 1);\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count;\n        \
    \    if (result.TryGetValue(s, out count)){\n                result[s] = count\
    \ + 1;\n            } else {\n                result[s] = 1;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(letter,\
    \ out count))\n            {\n                result[letter] = count + 1;\n  \
    \          }\n            else\n            {\n                result[letter]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string word in test.Split(' '))\n        {\n            long count;\n\
    \            if (histogram.TryGetValue(word, out count))\n            {\n    \
    \            histogram[word] = count + 1;\n            }\n            else\n \
    \           {\n                histogram[word] = 1;\n            }\n        }\n\
    \        return histogram;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string word in test.Split(' ')){\n            long count = 1;\n\
    \            foreach (char c in word){\n                if (!histogram.ContainsKey(c)){\n\
    \                    histogram.Add(c, count);\n                }\n           \
    \     else {\n                    histogram[c] += count;\n                }\n\
    \            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = test.Count(c => c == s);\n            if (result.ContainsKey(s))\n\
    \                result[s] = Math.Max(result[s], count);\n            else\n \
    \               result.Add(s, count);\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] += 1;\n            }\n            else\n\
    \            {\n                result.Add(s, 1);\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] += 1;\n            }\n            else\n\
    \            {\n                result[s] = 1;\n            }\n        }\n   \
    \     return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string word in test.Split(' ')){\n            foreach (char\
    \ letter in word){\n                if (!result.ContainsKey(letter)){\n      \
    \              result.Add(letter, 1L);\n                }\n                else\
    \ {\n                    result[letter]++;\n                }\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(letter))\n            {\n\
    \                result[letter]++;\n            }\n            else\n        \
    \    {\n                result.Add(letter, 1L);\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count\
    \ = result.ContainsKey(s) ? result[s] : 1;\n            result[s] = count;\n \
    \       }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            long count;\n            if (result.TryGetValue(s, out\
    \ count))\n            {\n                result[s] = count + 1;\n           \
    \ }\n            else\n            {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = result.ContainsKey(s) ? result[s] :\
    \ 0;\n            result[s] = count + 1;\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] += 1;\n            }\n            else\n\
    \            {\n                result.Add(s, 1);\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count)) {\n                result[s]\
    \ = count + 1;\n            } else {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(letter, out\
    \ count)){\n                result[letter] = count + 1;\n            } else {\n\
    \                result[letter] = 1;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string word in test.Split(' '))\n        {\n            long\
    \ count;\n            if (!result.TryGetValue(word, out count))\n            {\n\
    \                result.Add(word, 1L);\n            }\n            else\n    \
    \        {\n                result[word]++;\n            }\n        }\n      \
    \  return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count;\n        \
    \    if (result.TryGetValue(s, out count)) {\n                result[s] = count\
    \ + 1;\n            } else {\n                result[s] = 1;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ ')){\n            foreach (char c in word){\n                if (!result.ContainsKey(c)){\n\
    \                    result.Add(c, 1L);\n                }\n                else\
    \ {\n                    result[c]++;\n                }\n            }\n    \
    \    }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            if (result.ContainsKey(s))\n            {\n          \
    \      result[s] += 1;\n            }\n            else\n            {\n     \
    \           result.Add(s, 1);\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (!result.TryGetValue(s, out count))\n            {\n         \
    \       result.Add(s, 1L);\n            }\n            else\n            {\n \
    \               result[s]++;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count)) {\n                result[s]\
    \ = count + 1;\n            }\n            else {\n                result[s] =\
    \ 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s.ToLower();\n            if (result.ContainsKey(key)){\n\
    \                result[key] += 1;\n            } else {\n                result[key]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            }\n     \
    \       else {\n                result[s] = 1;\n            }\n        }\n   \
    \     return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count)) {\n                result[s]\
    \ = count + 1;\n            } else {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ histogram = new Dictionary<string,long>();\n        foreach (string letter in\
    \ test.Split(' ')){\n            if (histogram.ContainsKey(letter)){\n       \
    \         histogram[letter]++;\n            } else {\n                histogram.Add(letter,\
    \ 1L);\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                count = 1;\n            }\n    \
    \        else\n            {\n                count += 1;\n            }\n   \
    \         result.Add(s, count);\n        }\n        return result;", "       \
    \ Dictionary<string,long> result = new Dictionary<string,long>();\n        foreach\
    \ (string s in test.Split(' '))\n        {\n            long count = result.ContainsKey(s)\
    \ ? result[s] : 0;\n            result[s] = count + 1;\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            long count = 1;\n\
    \            foreach (char c in s.ToCharArray()){\n                if (result.ContainsKey(c)){\n\
    \                    result[c] += count;\n                } else {\n         \
    \           result.Add(c, count);\n                }\n                count++;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count)){\n\
    \                result[s] = count + 1;\n            } else {\n              \
    \  result[s] = 1;\n            }\n        }\n        return result;", "      \
    \  Dictionary<string,long> result = new Dictionary<string,long>();\n        foreach\
    \ (string s in test.Split(' '))\n        {\n            long count = result.ContainsKey(s)\
    \ ? result[s] : 0;\n            result[s] = count + 1;\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count)) {\n                result[s]\
    \ = count + 1;\n            } else {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        var letters = test.Split('\
    \ ');\n        var letterCounts = new Dictionary<string,long>();\n        foreach\
    \ (var letter in letters) {\n            if (letterCounts.ContainsKey(letter))\
    \ {\n                letterCounts[letter]++;\n            } else {\n         \
    \       letterCounts[letter] = 1;\n            }\n        }\n        return letterCounts;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string letter in test.Split(' ')){\n            if (result.ContainsKey(letter)){\n\
    \                result[letter]++;\n            } else {\n                result.Add(letter,\
    \ 1L);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count =\
    \ result.ContainsKey(s) ? result[s] : 1;\n            result[s] = count + 1;\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  result[s] = count + 1;\n        }\n        return result;", "        var result\
    \ = new Dictionary<string,long>();\n        foreach (var item in test.Split('\
    \ ')){\n            if (!result.ContainsKey(item)){\n                result.Add(item,\
    \ 1L);\n            }\n            else {\n                result[item]++;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            }\n            else {\n                result.Add(letter, 1L);\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count = result.ContainsKey(s)\
    \ ? result[s] : 0;\n            result[s] = count + 1;\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            long count;\n   \
    \         if (result.TryGetValue(s, out count)){\n                result[s] =\
    \ count + 1;\n            } else {\n                result[s] = 1;\n         \
    \   }\n        }\n        return result;", "        var result = new Dictionary<string,long>();\n\
    \        foreach (var item in test.Split(' '))\n        {\n            if (result.ContainsKey(item))\n\
    \            {\n                result[item]++;\n            }\n            else\n\
    \            {\n                result.Add(item, 1L);\n            }\n       \
    \ }\n        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] += 1;\n            }\n            else\n\
    \            {\n                result.Add(s, 1);\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n  \
    \      foreach (string letter in test.Split(' ')){\n            long count;\n\
    \            if (!histogram.TryGetValue(letter, out count)){\n               \
    \ histogram[letter] = 1;\n            }\n            else {\n                histogram[letter]++;\n\
    \            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            } else {\n  \
    \              result[s] = result[s] + 1L;\n            }\n        }\n       \
    \ return result;", "        Dictionary<string,long> histogram = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' ')){\n            long count;\n\
    \            if (histogram.TryGetValue(letter, out count)) {\n               \
    \ histogram[letter] = count + 1;\n            } else {\n                histogram[letter]\
    \ = 1;\n            }\n        }\n        return histogram;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1);\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] += 1;\n            }\n            else\n\
    \            {\n                result.Add(s, 1L);\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] = result[s] + 1;\n            }\n  \
    \          else\n            {\n                result.Add(s, 1L);\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count))\
    \ {\n                result[s] = count + 1;\n            } else {\n          \
    \      result[s] = 1;\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count;\n        \
    \    if (!result.TryGetValue(s, out count)){\n                result.Add(s, 1L);\n\
    \            } else {\n                result[s] = result[s] + 1L;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  result[s] = count + 1;\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            string key = s.ToLower();\n            if (result.ContainsKey(key)){\n\
    \                result[key] += 1;\n            } else {\n                result[key]\
    \ = 1;\n            }\n        }\n        return result;", "        var result\
    \ = new Dictionary<string,long>();\n        foreach (var letter in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(letter))\n            {\n\
    \                result[letter]++;\n            }\n            else\n        \
    \    {\n                result.Add(letter, 1L);\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            long count;\n   \
    \         if (result.TryGetValue(s, out count)){\n                result[s] =\
    \ count + 1;\n            } else {\n                result[s] = 1;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string word in test.Split('\
    \ '))\n        {\n            foreach (char letter in word)\n            {\n \
    \               if (!result.ContainsKey(letter))\n                {\n        \
    \            result.Add(letter, 1L);\n                }\n                else\n\
    \                {\n                    result[letter]++;\n                }\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count = 1;\n            if (result.ContainsKey(s))\n\
    \            {\n                count = result[s];\n            }\n          \
    \  else\n            {\n                result.Add(s, count);\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            long count;\n            if (result.TryGetValue(s, out\
    \ count))\n            {\n                result[s] = count + 1;\n           \
    \ }\n            else\n            {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] = result[s] + 1;\n            }\n            else\n   \
    \         {\n                result.Add(s, 1L);\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (!result.TryGetValue(s, out count))\n            {\n         \
    \       result.Add(s, 1L);\n            }\n            else\n            {\n \
    \               result[s] = count + 1;\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string word in test.Split(' '))\n        {\n            long\
    \ count;\n            if (result.TryGetValue(word, out count))\n            {\n\
    \                result[word] = count + 1;\n            }\n            else\n\
    \            {\n                result[word] = 1;\n            }\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' '))\n        {\n            long\
    \ count;\n            if (!result.TryGetValue(letter, out count))\n          \
    \  {\n                count = 1;\n            }\n            result[letter] =\
    \ count;\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = test.Count(c => c == s);\n            if (result.ContainsKey(s)){\n\
    \                result[s] = Math.Max(result[s], count);\n            } else {\n\
    \                result.Add(s, count);\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count = 1;\n    \
    \        if (result.ContainsKey(s)){\n                count = result[s];\n   \
    \         }\n            result.Add(s, count);\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (!result.TryGetValue(s, out count)) {\n                result.Add(s,\
    \ 1L);\n            }\n            else {\n                result[s] = result[s]\
    \ + 1L;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count)) {\n                result.Add(s, 1L);\n            }\n         \
    \   else {\n                result[s] = result[s] + 1L;\n            }\n     \
    \   }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        foreach (string word in test.Split(' '))\n\
    \        {\n            long count;\n            if (!result.TryGetValue(word,\
    \ out count))\n            {\n                result.Add(word, 1L);\n        \
    \    }\n            else\n            {\n                result[word] = count\
    \ + 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ ')){\n            if (result.ContainsKey(letter)){\n                result[letter]++;\n\
    \            } else {\n                result.Add(letter, 1L);\n            }\n\
    \        }\n        return result;", "        var letters = test.ToCharArray().ToList();\n\
    \        var histogram = new Dictionary<string,long>();\n        foreach (var\
    \ letter in letters) {\n            long count;\n            if (!histogram.TryGetValue(letter,\
    \ out count)) {\n                histogram[letter] = 1;\n            } else {\n\
    \                histogram[letter]++;\n            }\n        }\n        return\
    \ histogram;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string letter in test.Split(' '))\n        {\n            if\
    \ (result.ContainsKey(letter))\n            {\n                result[letter]++;\n\
    \            }\n            else\n            {\n                result.Add(letter,\
    \ 1L);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(letter))\n            {\n\
    \                result[letter]++;\n            }\n            else\n        \
    \    {\n                result.Add(letter, 1L);\n            }\n        }\n  \
    \      return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            long count = test.Count(x\
    \ => x == s);\n            if (result.ContainsKey(s)){\n                result[s]\
    \ = Math.Max(result[s], count);\n            } else {\n                result.Add(s,\
    \ count);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(letter,\
    \ out count))\n            {\n                count = 1L;\n            }\n   \
    \         result[letter] = count + 1;\n        }\n        return result;", " \
    \       Dictionary<string,long> result = new Dictionary<string,long>();\n    \
    \    foreach (string letter in test.Split(' ')){\n            long count = test.Count(x\
    \ => x == letter);\n            if (result.ContainsKey(letter)) {\n          \
    \      result[letter] += count;\n            } else {\n                result.Add(letter,\
    \ count);\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count)) {\n                result[s] = count + 1;\n            } else {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string word in test.Split(' '))\n        {\n            int count\
    \ = 1;\n            foreach (char c in word)\n            {\n                if\
    \ (result.ContainsKey(c))\n                {\n                    result[c] +=\
    \ count;\n                }\n                else\n                {\n       \
    \             result.Add(c, count);\n                }\n                count++;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (!result.TryGetValue(s,\
    \ out count))\n            {\n                result.Add(s, 1L);\n           \
    \ }\n            else\n            {\n                result[s] = count + 1;\n\
    \            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string letter in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(letter,\
    \ out count))\n            {\n                result[letter] = count + 1;\n  \
    \          }\n            else\n            {\n                result[letter]\
    \ = 1;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1L);\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count)) {\n                result[s]\
    \ = count + 1;\n            } else {\n                result[s] = 1;\n       \
    \     }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0L;\n   \
    \         result[s] = count + 1;\n        }\n        return result;", "      \
    \  Dictionary<string,long> result = new Dictionary<string,long>();\n        foreach\
    \ (string s in test.Split(' ')){\n            if (result.ContainsKey(s)){\n  \
    \              result[s]++;\n            }\n            else{\n              \
    \  result.Add(s, 1L);\n            }\n        }\n        return result;", "  \
    \      Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count;\n        \
    \    if (result.TryGetValue(s, out count)){\n                result[s] = count\
    \ + 1;\n            } else {\n                result[s] = 1;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' ')){\n\
    \            long count = result.ContainsKey(s) ? result[s] : 0L;\n          \
    \  result[s] = count + 1;\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0L;\n   \
    \         result[s] = count + 1;\n        }\n        return result;", "      \
    \  Dictionary<string,long> result = new Dictionary<string,long>();\n        foreach\
    \ (string s in test.Split(' '))\n        {\n            if (result.ContainsKey(s))\n\
    \            {\n                result[s] = result[s] + 1;\n            }\n  \
    \          else\n            {\n                result.Add(s, 1L);\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count;\n            if (result.TryGetValue(s, out count)){\n\
    \                result[s] = count + 1;\n            } else {\n              \
    \  result[s] = 1;\n            }\n        }\n        return result;", "      \
    \  Dictionary<string,long> result = new Dictionary<string,long>();\n        foreach\
    \ (string s in test.Split(' '))\n        {\n            long count;\n        \
    \    if (result.TryGetValue(s, out count)) {\n                result[s] = count\
    \ + 1;\n            } else {\n                result[s] = 1;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            if (result.ContainsKey(s))\n            {\n          \
    \      result[s] = result[s] + 1;\n            }\n            else\n         \
    \   {\n                result.Add(s, 1L);\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' ')){\n            if (result.ContainsKey(s)){\n\
    \                result[s] = result[s] + 1;\n            } else {\n          \
    \      result.Add(s, 1L);\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (!result.TryGetValue(s, out count)) {\n                result.Add(s,\
    \ 1L);\n            }\n            else {\n                result[s] = result[s]\
    \ + 1L;\n            }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = result.ContainsKey(s) ? result[s] : 0L;\n   \
    \         result[s] = count + 1;\n        }\n        return result;", "      \
    \  Dictionary<string,long> result = new Dictionary<string,long>();\n        foreach\
    \ (string s in test.Split(' '))\n        {\n            long count;\n        \
    \    if (!result.TryGetValue(s, out count)) {\n                result.Add(s, 1L);\n\
    \            }\n            else {\n                result[s] = count + 1;\n \
    \           }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            if (result.ContainsKey(s))\n            {\n    \
    \            result[s] += 1;\n            }\n            else\n            {\n\
    \                result.Add(s, 1L);\n            }\n        }\n        return\
    \ result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        var result = new Dictionary<string,long>();\n        foreach (var letter\
    \ in test.Split(' '))\n        {\n            if (!result.ContainsKey(letter))\n\
    \            {\n                result.Add(letter, 1L);\n            }\n     \
    \       else\n            {\n                result[letter]++;\n            }\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            if (result.ContainsKey(s))\n            {\n          \
    \      result[s] += 1;\n            }\n            else\n            {\n     \
    \           result.Add(s, 1);\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string word in test.Split(' ')){\n            long count = 1;\n \
    \           foreach (char letter in word){\n                if (result.ContainsKey(letter)){\n\
    \                    result[letter] += count;\n                }\n           \
    \     else{\n                    result.Add(letter, count);\n                }\n\
    \                count++;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            long count;\n        \
    \    if (!result.TryGetValue(s, out count)) {\n                result.Add(s, 1L);\n\
    \            } else {\n                result[s] = result[s] + 1L;\n         \
    \   }\n        }\n        return result;", "        Dictionary<string,long> result\
    \ = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ '))\n        {\n            long count;\n            if (result.TryGetValue(s,\
    \ out count))\n            {\n                result[s] = count + 1;\n       \
    \     }\n            else\n            {\n                result[s] = 1;\n   \
    \         }\n        }\n        return result;", "        Dictionary<string,long>\
    \ result = new Dictionary<string,long>();\n        foreach (string s in test.Split('\
    \ ')){\n            long count = test.Split(' ').Where(x => x == s).Count();\n\
    \            if (result.ContainsKey(s))\n                result[s] = result[s]\
    \ + count;\n            else\n                result.Add(s, count);\n        }\n\
    \        return result;", "        Dictionary<string,long> result = new Dictionary<string,long>();\n\
    \        foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' ')){\n            string key = s;\n    \
    \        long count = 1;\n            if (result.ContainsKey(key)){\n        \
    \        count = result[key];\n            }\n            result.Add(key,count);\n\
    \        }\n        return result;", "        Dictionary<string,long> result =\
    \ new Dictionary<string,long>();\n        foreach (string s in test.Split(' '))\n\
    \        {\n            long count = result.ContainsKey(s) ? result[s] : 0L;\n\
    \            result[s] = count + 1;\n        }\n        return result;", "   \
    \     Dictionary<string,long> result = new Dictionary<string,long>();\n      \
    \  foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (result.TryGetValue(s, out count))\n            {\n          \
    \      result[s] = count + 1;\n            }\n            else\n            {\n\
    \                result[s] = 1;\n            }\n        }\n        return result;",
  "        Dictionary<string,long> result = new Dictionary<string,long>();\n     \
    \   foreach (string s in test.Split(' '))\n        {\n            long count;\n\
    \            if (!result.TryGetValue(s, out count)) {\n                result.Add(s,\
    \ 1L);\n            } else {\n                result[s]++;\n            }\n  \
    \      }\n        return result;", "        Dictionary<string,long> result = new\
    \ Dictionary<string,long>();\n        foreach (string word in test.Split(' '))\n\
    \        {\n            foreach (char letter in word)\n            {\n       \
    \         if (!result.ContainsKey(letter))\n                {\n              \
    \      result.Add(letter, 1L);\n                }\n                else\n    \
    \            {\n                    result[letter]++;\n                }\n   \
    \         }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
