name: HumanEval_82_prime_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a string and returns true if the\
  \ string\n    // length is a prime number or false otherwise\n    // Examples\n\
  \    // >>> PrimeLength((\"Hello\"))\n    // (true)\n    // >>> PrimeLength((\"\
  abcdcba\"))\n    // (true)\n    // >>> PrimeLength((\"kittens\"))\n    // (true)\n\
  \    // >>> PrimeLength((\"orange\"))\n    // (false)\n    public static bool PrimeLength(string\
  \ str) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(PrimeLength((\"\
  Hello\")) == (true));\n    Debug.Assert(PrimeLength((\"abcdcba\")) == (true));\n\
  \    Debug.Assert(PrimeLength((\"kittens\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  orange\")) == (false));\n    Debug.Assert(PrimeLength((\"wow\")) == (true));\n \
  \   Debug.Assert(PrimeLength((\"world\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  MadaM\")) == (true));\n    Debug.Assert(PrimeLength((\"Wow\")) == (true));\n   \
  \ Debug.Assert(PrimeLength((\"\")) == (false));\n    Debug.Assert(PrimeLength((\"\
  HI\")) == (true));\n    Debug.Assert(PrimeLength((\"go\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  gogo\")) == (false));\n    Debug.Assert(PrimeLength((\"aaaaaaaaaaaaaaa\")) == (false));\n\
  \    Debug.Assert(PrimeLength((\"Madam\")) == (true));\n    Debug.Assert(PrimeLength((\"\
  M\")) == (false));\n    Debug.Assert(PrimeLength((\"0\")) == (false));\n    }\n\n\
  }\n"
completions: ["        bool isPrime = true;\n        int length = str.Length;\n  \
    \      for (int i = 2; i <= length / 2; i++) {\n            if (str.Substring(i\
    \ - 1, 1) == str.Substring(i, 1)) {\n                isPrime = false;\n      \
    \      }\n        }\n        return isPrime;", "        bool isPrime = true;\n\
    \        int length = str.Length;\n        bool isPrime = true;\n        int length\
    \ = str.Length;\n        for (int i = 1; i < length; i++)\n        {\n       \
    \     if (str[i] % 2 == 0)\n            {\n                isPrime = false;\n\
    \                break;\n            }\n        }\n        if (isPrime)\n    \
    \    {\n            return true;\n        }\n        else\n        {\n       \
    \     return false;\n        }", "        int length = str.Length;\n        bool\
    \ isPrime = true;\n        for (int i = 2; i <= length / 2; i++) {\n         \
    \   if (i % 2 == 0) {\n                isPrime = false;\n                break;\n\
    \            }\n        }\n        return isPrime;", "        int n = str.Length;\n\
    \        if (n == 0)\n            return true;\n        if (n == 1)\n        \
    \    return false;\n        if (n == 2)\n            return true;\n        if\
    \ (n % 2 == 0)\n            return false;\n        bool isPrime = true;\n    \
    \    for (int i = 3; i <= Math.Sqrt(n); i += 2)\n            if (n % i == 0)\n\
    \                isPrime = false;\n        return isPrime;", "        bool isPrime\
    \ = true;\n        int length = str.Length;\n        for (int i = 1; i < length;\
    \ i++)\n        {\n            if (str[i] != str[i - 1])\n            {\n    \
    \            int j = 2;\n                while (j < i)\n                {\n  \
    \                  if (str[j] != str[i - 1])\n                    {\n        \
    \                break;\n                    }\n                    j++;\n   \
    \             }\n                if (j > i)\n                {\n             \
    \       isPrime = false;\n                    break;\n                }\n    \
    \        }\n        }\n        return isPrime;", "        if (str == null || str.Length\
    \ < 2)\n            return false;\n        int n = str.Length;\n        for (int\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\n                return\
    \ false;\n        }\n        return true;", "        bool result = true;\n   \
    \     foreach (char c in str) {\n            if (c == '\\0') return false;\n \
    \           if (c < '0' || c > '9') return false;\n            int n = Convert.ToInt32(c);\n\
    \            int count = 0;\n            while (n != 1) {\n                n =\
    \ n / 10;\n                count++;\n            }\n            if (count == 1)\
    \ result = false;\n        }\n        return result;", "        bool isPrime =\
    \ true;\n        int length = str.Length;\n        for (int i = 0; i <= length\
    \ / 2; i++) {\n            if (str.Substring(i, 1).All(c => c != 'a' && c != 'e'\
    \ && c != 'i' && c != 'o' && c != 'u'))\n                isPrime = false;\n  \
    \      }\n        return isPrime;", "        if (str == null || str.Length <=\
    \ 1)\n            return false;\n        int n = str.Length;\n        for (int\
    \ i = 2; i <= n / 2; i++) {\n            if (n % i == 0)\n                return\
    \ false;\n        }\n        return true;", "        bool isPrime = true;\n  \
    \      int length = str.Length;\n        for (int i = 2; i <= length / 2; i++)\
    \ {\n            if (str[length - i] != '\\0') {\n                for (int j =\
    \ i; j <= length / i; j++) {\n                    if (str[j - i] != '\\0') {\n\
    \                        isPrime = false;\n                        break;\n  \
    \                  }\n                }\n            }\n        }\n        return\
    \ isPrime;", "        bool isPrime = true;\n        int length = str.Length;\n\
    \        for (int i = 1; i < length; i++)\n        {\n            if (str[i] !=\
    \ str[i - 1])\n            {\n                isPrime = false;\n             \
    \   break;\n            }\n        }\n        return isPrime;", "        bool\
    \ isPrime = true;\n        int length = str.Length;\n        for (int i = 2; i\
    \ <= length / 2; i++) {\n            if (str[length - i].ToString().ToLower()\
    \ == \"z\") {\n                isPrime = false;\n                break;\n    \
    \        }\n        }\n        return isPrime;", "        bool isPrime = true;\n\
    \        int length = str.Length;\n        for (int i = 1; i < length; i++) {\n\
    \            if (str[i] != str[i - 1]) {\n                for (int j = 2; j <\
    \ i; j++) {\n                    if (str[j] % i == 0) {\n                    \
    \    isPrime = false;\n                        break;\n                    }\n\
    \                }\n            }\n        }\n        return isPrime;", "    \
    \    bool isPrime = true;\n        int length = str.Length;\n        for (int\
    \ i = 0; i <= length / 2; i++) {\n            if (str[i] != str[length - i - 1])\
    \ {\n                isPrime = false;\n                break;\n            }\n\
    \        }\n        return isPrime;", "        bool isPrime = true;\n        int\
    \ length = str.Length;\n        for (int i = 1; i <= length / 2; i++) {\n    \
    \        if (str.Substring(0, i).Contains(\"1\")) {\n                isPrime =\
    \ false;\n                break;\n            }\n        }\n        return isPrime;",
  "        bool isPrime = true;\n        int length = str.Length;\n        for (int\
    \ i = 1; i < length / 2; i++) {\n            if (str[i] != str[i - 1]) {\n   \
    \             for (int j = 2; j < i; j++) {\n                    if (str[j] !=\
    \ str[i - j]) {\n                        isPrime = false;\n                  \
    \      break;\n                    }\n                }\n            }\n     \
    \   }\n        return isPrime;", "        bool isPrime = true;\n        int length\
    \ = str.Length;\n        for (int i = 2; i <= length / 2; i++) {\n           \
    \ if (str.Substring(0, i).Contains(str.Substring(i - 1, i))) {\n             \
    \   isPrime = false;\n                break;\n            }\n        }\n     \
    \   return isPrime;", "        bool isPrime = true;\n        int length = str.Length;\n\
    \        for (int i = 1; i <= length / 2; i++) {\n            if (str.Substring(i,\
    \ 1).All(c => c != str[0])) {\n                isPrime = false;\n            \
    \    break;\n            }\n        }\n        return isPrime;", "        bool\
    \ isPrime = true;\n        int length = str.Length;\n        for (int i = 2; i\
    \ <= length / 2; i++) {\n            if (str[length - i].Equals(' ')) {\n    \
    \            isPrime = false;\n            }\n        }\n        return isPrime;",
  "        if (str == null || str.Length < 2)\n            return false;\n       \
    \ int length = str.Length;\n        int count = 0;\n        for (int i = 0; i\
    \ < length; i++)\n            for (int j = i + 1; j < length; j++)\n         \
    \       if (str[i] == str[j])\n                    count++;\n        if (count\
    \ == length)\n            return true;\n        return false;"]
stop_tokens:
- "\n    }\n"
