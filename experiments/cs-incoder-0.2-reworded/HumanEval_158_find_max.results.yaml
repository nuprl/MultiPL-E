language: cs
name: HumanEval_158_find_max
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.Distinct().Count();\n            if (uniqueChars > max) {\n         \
    \       max = uniqueChars;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9dad1c4fe7a4145ab24936a38badf4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9dad1c4fe7a4145ab24936a38badf4a>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b81e69831cb46a8bbb7ed7574148607>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxCount = \"\";\n        foreach (string word in words) {\n      \
    \      int count = 0;\n            foreach (char c in word) {\n              \
    \  count++;\n            }\n            if (count > maxCount.Length) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppzhhug8a.cs(28,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                count++;\n            }\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fcc7ecc00404d33ae58967611a6229c>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = -1;\n        foreach (string word in words) {\n      \
    \      int count = GetUniqueCharacterCount(word);\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwz_96tef.cs(23,25): error CS0103: The name ''GetUniqueCharacterCount''
    does not exist in the current context

    '
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ count++;\n            }\n            if (count > maxCount) {\n             \
    \   maxCount = count;\n                maxWord = word;\n            }\n      \
    \  }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52d8dd26e9ed481db35f8957b7a42f06>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        int maxCount = 0;\n        string maxWord = null;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (chars[c] == 0) {\n    \
    \                chars[c] = 1;\n                    count++;\n               \
    \ }\n            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  if (maxCount == 0) {\n            return null;\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpikyzr9wr.cs(27,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int charCount = 0;\n            foreach (char c in word) {\n\
    \                charCount++;\n            }\n            if (charCount > maxChars.Length)\
    \ {\n                maxChars = charCount.ToString();\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24650023c2b744cda4d610e309ad4d5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24650023c2b744cda4d610e309ad4d5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b81e69831cb46a8bbb7ed7574148607>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        List<string> uniqueWords = new List<string>();\n   \
    \     foreach (string word in words) {\n            foreach (char c in word) {\n\
    \                if (chars[c] == 0) {\n                    chars[c] = 1;\n   \
    \             } else {\n                    chars[c]++;\n                }\n \
    \           }\n            uniqueWords.Add(word);\n        }\n        string maxWord\
    \ = uniqueWords.OrderByDescending(w => w.Length).FirstOrDefault();\n        if\
    \ (maxWord.Length == words.Max(w => w.Length)) {\n            return maxWord;\n\
    \        }\n        return FindMax(uniqueWords);\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv1v8i2iu.cs(25,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (char.IsLetter(c)) {\n                    count++;\n                }\n \
    \           }\n            if (count > maxCount) {\n                maxCount =\
    \ count;\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c5dde49986f4079a694f6e5ec406ef1>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        string currentWord = string.Empty;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (char.IsLetter(c)) {\n \
    \                   count++;\n                }\n            }\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnmcb55r7.cs(30,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpnmcb55r7.cs(31,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Your code here\n        string\
    \ maxWord = \"\";\n        string maxChar = \"\";\n        int maxCount = 0;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (char.IsLetter(c)) {\n \
    \                   count++;\n                }\n            }\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxWord\
    \ = word;\n                maxChar = char.ToString(maxCount);\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo7z88kkz.cs(34,41): error CS1503: Argument 1: cannot convert from ''int''
    to ''System.IFormatProvider''

    '
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ca86b342f64e86b0860d582f12e191>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        int maxCount = 0;\n        string maxWord = \"\";\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (chars[c] == 0) {\n    \
    \                chars[c] = 1;\n                    count++;\n               \
    \ }\n            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdagw6nrk.cs(27,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        int maxCount = 0;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (chars[c] == 0) {\n                    chars[c] = 1;\n       \
    \             count++;\n                }\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n            }\n        }\n\
    \        string result = \"\";\n        foreach (char c in chars) {\n        \
    \    if (chars[c] == maxCount) {\n                result += c;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqcbxcic4.cs(26,32): error CS0266: Cannot implicitly convert type ''int''
    to ''char''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                count++;\n          \
    \  }\n            if (count > max) {\n                max = count;\n         \
    \       maxWord = word;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b0eba9ad5cb4eaeb01a8d517e356c6a>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                count++;\n            }\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fcc7ecc00404d33ae58967611a6229c>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharsCount = 0;\n            foreach (char c in word)\
    \ {\n                maxCharsCount += 1;\n            }\n            if (maxCharsCount\
    \ > maxChars.Length) {\n                maxChars = maxCharsCount.ToString();\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4abe045e587047c4a7907bc3c1ed8012>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4abe045e587047c4a7907bc3c1ed8012>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61e891cffcc44faa8b66a36da2bdcc83>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64939fbfe54d9bb5c9f910daef6a82>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> unique = new List<string>();\n\
    \        foreach (string word in words) {\n            foreach (char c in word)\
    \ {\n                if (!unique.Contains(c)) {\n                    unique.Add(c);\n\
    \                }\n            }\n        }\n        string maxWord = unique.OrderByDescending(x\
    \ => x.Length).First();\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqu70jwi5.cs(23,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpqu70jwi5.cs(24,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        string maxCountWord = string.Empty;\n\
    \        foreach (string word in words) {\n            int count = 0;\n      \
    \      foreach (char c in word) {\n                if (char.IsLetter(c)) {\n \
    \                   count++;\n                }\n            }\n            if\
    \ (count > maxCount) {\n                maxCount = count;\n                maxWord\
    \ = word;\n            }\n        }\n        if (maxCount > 1) {\n           \
    \ foreach (string word in words) {\n                if (word == maxWord) {\n \
    \                   maxCountWord = word;\n                }\n            }\n \
    \       }\n        return maxCountWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4b6lt850.cs(30,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp4b6lt850.cs(31,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmp4b6lt850.cs(35,13): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''string'' and ''int''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        foreach (string word in words) {\n            foreach\
    \ (char c in word) {\n                chars[c]++;\n            }\n        }\n\
    \        int max = 0;\n        string maxChars = \"\";\n        for (int i = 0;\
    \ i < chars.Length; i++) {\n            if (chars[i] > max) {\n              \
    \  max = chars[i];\n                maxChars = \"\";\n            }\n        \
    \    if (chars[i] == max) {\n                maxChars += (char) i;\n         \
    \   }\n        }\n        return maxChars;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T]\
    \ words) [0x00056] in <280c84efb07347a89a80327bf27f4880>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00024] in <280c84efb07347a89a80327bf27f4880>:0 \n\
    [ERROR] FATAL UNHANDLED EXCEPTION: System.IndexOutOfRangeException: Index was\
    \ outside the bounds of the array.\n  at Problem.FindMax (System.Collections.Generic.List`1[T]\
    \ words) [0x00056] in <280c84efb07347a89a80327bf27f4880>:0 \n  at Problem.Main\
    \ (System.String[] args) [0x00024] in <280c84efb07347a89a80327bf27f4880>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount) {\n                maxCount = count;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpviiuv2ml.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpviiuv2ml.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueChars = new\
    \ List<string>();\n        foreach (string word in words) {\n            foreach\
    \ (char c in word) {\n                if (!uniqueChars.Contains(c)) {\n      \
    \              uniqueChars.Add(c);\n                }\n            }\n       \
    \ }\n        int max = 0;\n        string maxWord = \"\";\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (uniqueChars.Contains(c)) {\n                  \
    \  count++;\n                }\n            }\n            if (count > max) {\n\
    \                max = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuqu7buwa.cs(23,43): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpuqu7buwa.cs(24,37): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpuqu7buwa.cs(33,42): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ count++;\n            }\n            if (count > maxCount) {\n             \
    \   maxCount = count;\n                maxWord = word;\n            }\n      \
    \  }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52d8dd26e9ed481db35f8957b7a42f06>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> unique = new List<string>();\n\
    \        foreach (string word in words) {\n            foreach (char c in word)\
    \ {\n                if (!unique.Contains(c)) {\n                    unique.Add(c);\n\
    \                }\n            }\n        }\n        int max = 0;\n        string\
    \ maxWord = \"\";\n        foreach (string word in unique) {\n            if (word.Length\
    \ > max) {\n                max = word.Length;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpui4b5e95.cs(23,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpui4b5e95.cs(24,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> uniqueWords = new\
    \ List<string>();\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.ToCharArray().Distinct().Count();\n            if (uniqueChars > uniqueWords.Count)\
    \ {\n                uniqueWords.Add(word);\n            }\n        }\n      \
    \  if (uniqueWords.Count == 0) {\n            return null;\n        }\n      \
    \  string maxWord = uniqueWords[0];\n        for (int i = 1; i < uniqueWords.Count;\
    \ i++) {\n            if (uniqueWords[i].ToCharArray().Distinct().Count() > uniqueWords[i\
    \ - 1].ToCharArray().Distinct().Count()) {\n                maxWord = uniqueWords[i];\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e05cb29a186c42e7bdfc719e8919dcb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e05cb29a186c42e7bdfc719e8919dcb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount)\n            {\n                maxCount = count;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzh7vwi6n.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpzh7vwi6n.cs(26,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ if (char.IsLetter(c)) {\n                    count++;\n                }\n \
    \           }\n            if (count > maxCount) {\n                maxCount =\
    \ count;\n                maxWord = word;\n            }\n        }\n        return\
    \ maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c5dde49986f4079a694f6e5ec406ef1>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                count++;\n          \
    \  }\n            if (count > max) {\n                max = count;\n         \
    \       maxWord = word;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b0eba9ad5cb4eaeb01a8d517e356c6a>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int maxCharCount = 0;\n            foreach (char c in word) {\n\
    \                maxCharCount = maxCharCount + 1;\n            }\n           \
    \ if (maxCharCount > maxChars.Length) {\n                maxChars = maxCharCount;\n\
    \                maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpymyv9pze.cs(28,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34474b3d95c845bba2432279ac91ab61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34474b3d95c845bba2432279ac91ab61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string max = null;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (max != null && count > max.Length)\
    \ {\n                max = word;\n            }\n        }\n        return max;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.NullReferenceException: Object reference\
    \ not set to an instance of an object\n  at Problem.Main (System.String[] args)\
    \ [0x00029] in <6a727b49f4cd4be3bd7aa1fe284c7ca2>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.NullReferenceException: Object reference not set to an instance\
    \ of an object\n  at Problem.Main (System.String[] args) [0x00029] in <6a727b49f4cd4be3bd7aa1fe284c7ca2>:0\
    \ \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            count++;\n            }\n            if (count > int.Parse(maxCount))\
    \ {\n                maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = \"\";\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4be1df0f09344d5bb0c701e1a2b1095>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4be1df0f09344d5bb0c701e1a2b1095>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <458acba049744000a631b29031c0102c>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string max = null;\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      max = word;\n                maxCount = count;\n            }\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6960c687d3aa4948a150d7ef9d9f3182>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6960c687d3aa4948a150d7ef9d9f3182>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b81e69831cb46a8bbb7ed7574148607>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Your code here\n        string\
    \ maxWord = \"\";\n        int maxCount = 0;\n        foreach (string word in\
    \ words) {\n            int count = 0;\n            foreach (char c in word) {\n\
    \                count++;\n            }\n            if (count > maxCount) {\n\
    \                maxCount = count;\n                maxWord = word;\n        \
    \    }\n        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b964bc598564ece8dbbf0ecfbbace4a>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa91e1e43e804aafa0360929e7248c8b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe4b0baef4b4ce0abc0e550ebc0cb78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe4b0baef4b4ce0abc0e550ebc0cb78>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> unique = new List<string>();\n\
    \        foreach (string word in words) {\n            foreach (char c in word)\
    \ {\n                if (!unique.Contains(c)) {\n                    unique.Add(c);\n\
    \                }\n            }\n        }\n        string result = \"\";\n\
    \        int max = 0;\n        foreach (string word in unique) {\n           \
    \ int count = words.Count(w => w.Contains(word));\n            if (count > max)\
    \ {\n                max = count;\n                result = word;\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdojpkrbn.cs(23,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpdojpkrbn.cs(24,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34474b3d95c845bba2432279ac91ab61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <34474b3d95c845bba2432279ac91ab61>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = null;\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                count++;\n          \
    \  }\n            if (count > max) {\n                max = count;\n         \
    \       maxWord = word;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0f0f470fcee4d29861b4904aa36e65a>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            count++;\n            }\n            if (count > int.Parse(maxCount))\
    \ {\n                maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount.Length) {\n                maxCount = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxp35dcpy.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount)\n            {\n                maxWord = word;\n                maxCount\
    \ = count;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6aufcc3p.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp6aufcc3p.cs(27,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = GetUniqueCharacterCount(word);\n            if (count\
    \ > int.Parse(maxCount)) {\n                maxWord = word;\n                maxCount\
    \ = count.ToString();\n            }\n        }\n        return maxWord;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6suly_1k.cs(23,25): error CS0103: The name ''GetUniqueCharacterCount''
    does not exist in the current context

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64939fbfe54d9bb5c9f910daef6a82>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   string maxWordCount = 0;\n        foreach (string word in words) {\n     \
    \       int wordCount = word.Length;\n            if (wordCount > maxWordCount)\
    \ {\n                maxWord = word;\n                maxWordCount = wordCount;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplltdw81l.cs(21,31): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    /tmp/tmplltdw81l.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmplltdw81l.cs(26,32): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ca86b342f64e86b0860d582f12e191>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        List<string> uniqueWords = new List<string>();\n   \
    \     foreach (string word in words) {\n            foreach (char c in word) {\n\
    \                if (chars.Contains(c)) {\n                    chars[chars.IndexOf(c)]\
    \ = ' ';\n                } else {\n                    chars[chars.Length - 1]\
    \ = c;\n                }\n            }\n            uniqueWords.Add(new string(chars));\n\
    \            chars = new char[words.Max(w => w.Length)];\n        }\n        string\
    \ maxWord = uniqueWords.OrderByDescending(w => w.Length).First();\n        return\
    \ maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2i2t8vbv.cs(25,33): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b81e69831cb46a8bbb7ed7574148607>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                count++;\n            }\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fcc7ecc00404d33ae58967611a6229c>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 1;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1b09a6d4add437dba47ee35ddd4e585>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1b09a6d4add437dba47ee35ddd4e585>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            count++;\n            }\n            if (count > int.Parse(maxCount))\
    \ {\n                maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x00050]\
    \ in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <31c4f69db75b43f6a84ff4abacc4b540>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa91e1e43e804aafa0360929e7248c8b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = GetUniqueChars(word).Count();\n            if (count\
    \ > maxCount) {\n                maxWord = word;\n                maxCount = count;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9mcrp0mp.cs(23,25): error CS0103: The name ''GetUniqueChars'' does not
    exist in the current context

    /tmp/tmp9mcrp0mp.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmp9mcrp0mp.cs(26,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount.Length) {\n                maxCount = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxp35dcpy.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int charCount = 0;\n            foreach (char c in word) {\n\
    \                charCount++;\n            }\n            if (charCount > maxChars.Length)\
    \ {\n                maxChars = charCount.ToString();\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24650023c2b744cda4d610e309ad4d5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24650023c2b744cda4d610e309ad4d5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Max(w\
    \ => w.Length)];\n        words.ForEach(w => w.ToCharArray().CopyTo(chars, 0));\n\
    \        Array.Sort(chars);\n        string result = new string(chars);\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <058712a6136e474383c4f16eebec9a24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <058712a6136e474383c4f16eebec9a24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int charCount = 0;\n            foreach (char c in word) {\n\
    \                charCount++;\n            }\n            if (charCount > maxChars.Length)\
    \ {\n                maxChars = charCount.ToString();\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24650023c2b744cda4d610e309ad4d5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24650023c2b744cda4d610e309ad4d5d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ca86b342f64e86b0860d582f12e191>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount.Length) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpng6ocufg.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ca86b342f64e86b0860d582f12e191>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.ToCharArray().Distinct().Count();\n            if (uniqueChars > max)\
    \ {\n                max = uniqueChars;\n                maxWord = word;\n   \
    \         }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f47e1e7f85e4d39b22157ee3e572b1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f47e1e7f85e4d39b22157ee3e572b1f>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        string currentWord = string.Empty;\n\
    \        int maxCountCount = 0;\n        foreach (string word in words) {\n  \
    \          int count = 0;\n            foreach (char c in word) {\n          \
    \      count++;\n            }\n            if (count > maxCountCount) {\n   \
    \             maxCountCount = count;\n                maxWord = word;\n      \
    \      }\n        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <35e652b663194786813cf521d2da0374>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChar = string.Empty;\n        int maxCharCount = 0;\n     \
    \   foreach (string word in words) {\n            int charCount = 0;\n       \
    \     foreach (char c in word) {\n                charCount++;\n            }\n\
    \            if (charCount > maxCharCount) {\n                maxCharCount = charCount;\n\
    \                maxWord = word;\n                maxChar = charCount.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4959888618a4efe9a1e8147566bc5e0>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount.Length) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpng6ocufg.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = \"\";\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4be1df0f09344d5bb0c701e1a2b1095>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f4be1df0f09344d5bb0c701e1a2b1095>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ca86b342f64e86b0860d582f12e191>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here.\n   \
    \     string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8bf3da1222a492daf2b661a11bd6ecd>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc75bd5ae17f4d80a0b7a02970375632>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int uniqueChars\
    \ = word.Distinct().Count();\n            if (uniqueChars > max) {\n         \
    \       max = uniqueChars;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9dad1c4fe7a4145ab24936a38badf4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c9dad1c4fe7a4145ab24936a38badf4a>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Count];\n\
    \        int[] counts = new int[words.Count];\n        foreach (string word in\
    \ words) {\n            char[] charArray = word.ToCharArray();\n            foreach\
    \ (char c in charArray) {\n                counts[charArray.IndexOf(c)] += 1;\n\
    \            }\n        }\n        int maxCount = 0;\n        int maxIndex = -1;\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            if (counts[i] >\
    \ maxCount) {\n                maxCount = counts[i];\n                maxIndex\
    \ = i;\n            }\n        }\n        return words[maxIndex];\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpspewu0vi.cs(25,34): error CS1501: No overload for method ''IndexOf'' takes
    1 arguments

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here.\n   \
    \     string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e8bf3da1222a492daf2b661a11bd6ecd>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount)\n            {\n                maxCount = count;\n              \
    \  maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjtp8z02o.cs(24,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpjtp8z02o.cs(26,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a624cb018226499485119f0384cee405>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = word.Distinct().Count();\n\
    \            if (count > maxCount) {\n                maxCount = count;\n    \
    \            maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <878acbcafbab49aa92a0158a4bd9aef7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <878acbcafbab49aa92a0158a4bd9aef7>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ca86b342f64e86b0860d582f12e191>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int max = 0;\n        string maxWord\
    \ = \"\";\n        foreach (string word in words) {\n            int count = 0;\n\
    \            foreach (char c in word) {\n                count++;\n          \
    \  }\n            if (count > max) {\n                max = count;\n         \
    \       maxWord = word;\n            }\n        }\n        return maxWord;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6b0eba9ad5cb4eaeb01a8d517e356c6a>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        List<string> unique = new List<string>();\n\
    \        foreach (string word in words) {\n            foreach (char c in word)\
    \ {\n                if (!unique.Contains(c)) {\n                    unique.Add(c);\n\
    \                }\n            }\n        }\n        string maxWord = unique.OrderByDescending(c\
    \ => c.Length).First();\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbblxu60t.cs(23,38): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    /tmp/tmpbblxu60t.cs(24,32): error CS1503: Argument 1: cannot convert from ''char''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        string maxCount = string.Empty;\n\
    \        foreach (string word in words) {\n            int charCount = word.ToCharArray().Distinct().Count();\n\
    \            if (charCount > maxCount.Length) {\n                maxChars = maxCount;\n\
    \                maxWord = word;\n                maxCount = charCount;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2hf4tkkf.cs(28,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      maxCount = count;\n                maxWord = word;\n            }\n   \
    \     }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe4b0baef4b4ce0abc0e550ebc0cb78>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bbe4b0baef4b4ce0abc0e550ebc0cb78>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        int maxCount = 0;\n        string\
    \ maxWord = null;\n        foreach (string word in words) {\n            int count\
    \ = word.ToCharArray().Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a841cbe5b554f75be64c142eb1b1b6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a841cbe5b554f75be64c142eb1b1b6d>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > int.Parse(maxCount)) {\n   \
    \             maxWord = word;\n                maxCount = count.ToString();\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.FormatException: Input string was not in\
    \ a correct format.\n  at System.Number.ThrowOverflowOrFormatException (System.Boolean\
    \ overflow, System.String overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.FormatException: Input string was not in a correct format.\n\
    \  at System.Number.ThrowOverflowOrFormatException (System.Boolean overflow, System.String\
    \ overflowResourceKey) [0x0001a] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ System.Number.ParseInt32 (System.ReadOnlySpan`1[T] value, System.Globalization.NumberStyles\
    \ styles, System.Globalization.NumberFormatInfo info) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at System.Int32.Parse (System.String s) [0x00016] in <aa5dff9b31c64fce86559bbbf6cd364f>:0\
    \ \n  at Problem.FindMax (System.Collections.Generic.List`1[T] words) [0x0005f]\
    \ in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00024] in <062cb2f662b74d6e8abb2dbbd2cb9bc4>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = string.Empty;\n        int maxCount = 0;\n        foreach\
    \ (string word in words) {\n            int count = 0;\n            foreach (char\
    \ c in word) {\n                count++;\n            }\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a715e291dd743d5b5eeba6ce82ca62e>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        string maxWordChars = string.Empty;\n\
    \        foreach (string word in words) {\n            char[] chars = word.ToCharArray();\n\
    \            int uniqueChars = chars.Distinct().Count();\n            if (uniqueChars\
    \ > maxChars.Length) {\n                maxChars = uniqueChars.ToString();\n \
    \               maxWord = word;\n            }\n            if (uniqueChars ==\
    \ maxChars.Length) {\n                maxWordChars = chars.ToString();\n     \
    \       }\n        }\n        if (maxWord.Length > maxChars.Length) {\n      \
    \      return maxWord;\n        }\n        return maxWordChars;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfbd25c2d7ff4c8f9386cafc4b457191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bfbd25c2d7ff4c8f9386cafc4b457191>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Your code goes here\n     \
    \   string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69293c56a10d4f039d61b4ec8d504ceb>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        char[] chars = new char[words.Count];\n\
    \        int[] counts = new int[words.Count];\n        foreach (string word in\
    \ words) {\n            foreach (char c in word) {\n                chars[chars.Length\
    \ - 1] = c;\n                counts[chars.Length - 1]++;\n            }\n    \
    \    }\n        Array.Sort(chars, counts);\n        int maxCount = 0;\n      \
    \  int maxCountIndex = 0;\n        for (int i = 0; i < chars.Length; i++) {\n\
    \            if (counts[i] > maxCount) {\n                maxCount = counts[i];\n\
    \                maxCountIndex = i;\n            }\n        }\n        return\
    \ words[maxCountIndex];\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42ffd4a24e3e4cf087af74b1ae4f2188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <42ffd4a24e3e4cf087af74b1ae4f2188>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int max = 0;\n            int maxCount = 0;\n            foreach\
    \ (char c in word) {\n                if (char.IsLetter(c)) {\n              \
    \      int count = word.Count(x => x == c);\n                    if (count > maxCount)\
    \ {\n                        maxCount = count;\n                        maxChars\
    \ = c;\n                        max = count;\n                    }\n        \
    \        }\n            }\n            if (maxCount > max) {\n               \
    \ maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppmsh0euh.cs(30,36): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = 0;\n            foreach (char c in word) {\n    \
    \            if (char.IsLetter(c)) {\n                    count++;\n         \
    \       }\n            }\n            if (count > maxCount) {\n              \
    \  maxCount = count;\n                maxWord = word;\n            }\n       \
    \ }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwh45ild2.cs(29,17): error CS0019: Operator ''>'' cannot be applied to
    operands of type ''int'' and ''string''

    /tmp/tmpwh45ild2.cs(30,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.ToCharArray().Distinct().Count();\n        \
    \    if (count > maxCount.Length) {\n                maxCount = count;\n     \
    \           maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpng6ocufg.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string max = null;\n        int\
    \ maxCount = 0;\n        foreach (string word in words) {\n            int count\
    \ = word.Distinct().Count();\n            if (count > maxCount) {\n          \
    \      max = word;\n                maxCount = count;\n            }\n       \
    \ }\n        return max;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6960c687d3aa4948a150d7ef9d9f3182>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6960c687d3aa4948a150d7ef9d9f3182>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        // Write your code here\n    \
    \    string maxWord = \"\";\n        int maxCount = 0;\n        foreach (string\
    \ word in words) {\n            int count = 0;\n            foreach (char c in\
    \ word) {\n                if (char.IsLetter(c)) {\n                    count++;\n\
    \                }\n            }\n            if (count > maxCount) {\n     \
    \           maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c64939fbfe54d9bb5c9f910daef6a82>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = 0;\n            foreach (char c in word) {\n               \
    \ count++;\n            }\n            if (count > maxCount) {\n             \
    \   maxCount = count;\n                maxWord = word;\n            }\n      \
    \  }\n        return maxWord;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"name\"\
    , (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <52d8dd26e9ed481db35f8957b7a42f06>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = word.Distinct().Count();\n            if (count > maxCount) {\n    \
    \            maxCount = count;\n                maxWord = word;\n            }\n\
    \        }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4ba44fc121b413b83dfdb632ea053d9>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.ToCharArray().Distinct().Count();\n            if (count\
    \ > maxCount) {\n                maxCount = count;\n                maxWord =\
    \ word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a6eec65a3124f80a8968556c8d06cca>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxChars = string.Empty;\n        foreach (string word in words)\
    \ {\n            int uniqueChars = word.Distinct().Count();\n            if (uniqueChars\
    \ > maxChars.Length) {\n                maxChars = uniqueChars.ToString();\n \
    \               maxWord = word;\n            }\n        }\n        return maxWord;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adc87ba34a814e97a5fdf023a3459291>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adc87ba34a814e97a5fdf023a3459291>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = null;\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                count++;\n\
    \            }\n            if (count > maxCount) {\n                maxCount\
    \ = count;\n                maxWord = word;\n            }\n        }\n      \
    \  return maxWord;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"of\", (string)\"string\"\
    }))).Equals((\"string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <aa91e1e43e804aafa0360929e7248c8b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = \"\";\n     \
    \   int maxCount = 0;\n        foreach (string word in words) {\n            int\
    \ count = 0;\n            foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count > maxCount) {\n                maxCount = count;\n            \
    \    maxWord = word;\n            }\n        }\n        return maxWord;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a624cb018226499485119f0384cee405>:0 \n"
  stdout: ''
  timestamp: 1659798539
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        foreach (string word in words)\
    \ {\n            int count = word.Distinct().Count();\n            if (count >\
    \ maxCount.Length) {\n                maxCount = count;\n                maxWord\
    \ = word;\n            }\n        }\n        return maxWord;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"of\", (string)\"string\"}))).Equals((\"\
    string\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"enam\", (string)\"game\"}))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"aaaaaaa\", (string)\"bb\", (string)\"cc\"\
    }))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    abc\", (string)\"cba\"}))).Equals((\"abc\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"play\", (string)\"this\", (string)\"game\"\
    , (string)\"of\", (string)\"footbott\"}))).Equals((\"footbott\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"we\", (string)\"are\", (string)\"gonna\"\
    , (string)\"rock\"}))).Equals((\"gonna\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"we\", (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"\
    nation\"}))).Equals((\"nation\")));\n    Debug.Assert(FindMax((new List<string>(new\
    \ string[]{(string)\"this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"\
    this\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    b\"}))).Equals((\"b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    play\", (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n\
    }\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxp35dcpy.cs(25,28): error CS0029: Cannot implicitly convert type ''int''
    to ''string''

    '
  timestamp: 1659798538
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Length;\n            if (count > maxCount) {\n        \
    \        maxCount = count;\n                maxWord = word;\n            }\n \
    \       }\n        return maxWord;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54ca86b342f64e86b0860d582f12e191>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCharCount = 0;\n        foreach (string word in words) {\n   \
    \         int charCount = 0;\n            foreach (char c in word) {\n       \
    \         charCount++;\n            }\n            if (charCount > maxCharCount)\
    \ {\n                maxCharCount = charCount;\n                maxWord = word;\n\
    \            }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1b19798383f04fd290a27c6d0067796b>:0 \n"
  stdout: ''
  timestamp: 1659798538
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        string maxCount = string.Empty;\n        string maxWord2 = string.Empty;\n\
    \        string maxCount2 = string.Empty;\n        string maxWord3 = string.Empty;\n\
    \        string maxCount3 = string.Empty;\n        string maxWord4 = string.Empty;\n\
    \        string maxCount4 = string.Empty;\n        string maxWord5 = string.Empty;\n\
    \        string maxCount5 = string.Empty;\n        string maxWord6 = string.Empty;\n\
    \        string maxCount6 = string.Empty;\n        string maxWord7 = string.Empty;\n\
    \        string maxCount7 = string.Empty;\n        string maxWord8 = string.Empty;\n\
    \        string maxCount8 = string.Empty;\n        string maxWord9 = string.Empty;\n\
    \        string maxCount9 = string.Empty;\n        string maxWord10 = string.Empty;\n\
    \        string maxCount10 = string.Empty;\n        string maxWord11 = string.Empty;\n\
    \        string maxCount11 = string.Empty;\n        string maxWord12 = string.Empty;\n\
    \        string maxCount12 = string.Empty;\n        string maxWord13 = string.Empty;\n\
    \        string maxCount13 = string.Empty;\n        string maxWord14 = string.Empty;\n\
    \        string maxCount14 = string.Empty;\n        string maxWord15 = string.Empty;\n\
    \        string maxCount15 = string.Empty;\n        string maxWord16 = string.Empty;\n\
    \        string maxCount16 = string.Empty;\n        string maxWord17 = string.Empty;\n\
    \        string maxCount17 = string.Empty;\n        string maxWord18 = string.Empty;\n\
    \        string maxCount18 = string.Empty;\n        string maxWord19 = string.Empty;\n\
    \        string maxCount19 = string.Empty;\n        string maxWord20 = string.Empty;\n\
    \        string maxCount20 = string.Empty;\n        string maxWord21 = string.Empty;\n\
    \        string maxCount21 = string.Empty;\n        string maxWord22 = string.Empty;\n\
    \        string maxCount22 = string.Empty;\n        string maxWord23 = string.Empty;\n\
    \        string maxCount23 = string.Empty;\n        string maxWord24 = string.Empty;\n\
    \        string maxCount24 = string.Empty;\n        string maxWord25 = string.Empty;\n\
    \        string maxCount25 = string.Empty;\n        string maxWord26 = string.Empty;\n\
    \        string maxCount26 = string.Empty;\n        string maxWord27 = string.Empty;\n\
    \        string maxCount27 = string.\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxipvzejc.cs(73,36): error CS1001: Identifier expected

    /tmp/tmpxipvzejc.cs(73,36): error CS1002: ; expected

    '
  timestamp: 1659798539
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Write a function that accepts a list of strings.\n   \
    \ // The list contains different words. Return the word with maximum number\n\
    \    // of unique characters. If multiple strings have maximum number of unique\n\
    \    // characters, return the one which comes first in lexicographical order.\n\
    \    // >>> FindMax((new List<string>(new string[]{(string)\"name\", (string)\"\
    of\", (string)\"string\"})))\n    // (\"string\")\n    // >>> FindMax((new List<string>(new\
    \ string[]{(string)\"name\", (string)\"enam\", (string)\"game\"})))\n    // (\"\
    enam\")\n    // >>> FindMax((new List<string>(new string[]{(string)\"aaaaaaa\"\
    , (string)\"bb\", (string)\"cc\"})))\n    // (\"aaaaaaa\")\n    public static\
    \ string FindMax(List<string> words) {\n        string maxWord = string.Empty;\n\
    \        int maxCount = 0;\n        foreach (string word in words) {\n       \
    \     int count = word.Distinct().Count();\n            if (count > maxCount)\
    \ {\n                maxCount = count;\n                maxWord = word;\n    \
    \        }\n        }\n        return maxWord;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    name\", (string)\"of\", (string)\"string\"}))).Equals((\"string\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"name\", (string)\"enam\", (string)\"game\"\
    }))).Equals((\"enam\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    aaaaaaa\", (string)\"bb\", (string)\"cc\"}))).Equals((\"aaaaaaa\")));\n    Debug.Assert(FindMax((new\
    \ List<string>(new string[]{(string)\"abc\", (string)\"cba\"}))).Equals((\"abc\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"this\", (string)\"game\", (string)\"of\", (string)\"footbott\"}))).Equals((\"\
    footbott\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    we\", (string)\"are\", (string)\"gonna\", (string)\"rock\"}))).Equals((\"gonna\"\
    )));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"we\",\
    \ (string)\"are\", (string)\"a\", (string)\"mad\", (string)\"nation\"}))).Equals((\"\
    nation\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"\
    this\", (string)\"is\", (string)\"a\", (string)\"prrk\"}))).Equals((\"this\")));\n\
    \    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"b\"}))).Equals((\"\
    b\")));\n    Debug.Assert(FindMax((new List<string>(new string[]{(string)\"play\"\
    , (string)\"play\", (string)\"play\"}))).Equals((\"play\")));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7f2898ad4c4ef78566213e3f3e3073>:0 \n"
  stdout: ''
  timestamp: 1659798537
