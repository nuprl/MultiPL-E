name: HumanEval_87_get_row
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a 2 dimensional data, as a nested lists,\n   \
  \ // which is similar to matrix, however, unlike matrices,\n    // each row may\
  \ contain a different number of columns.\n    // Given lst, and integer x, find\
  \ integers x in the list,\n    // and return list of tuples, [(x1, y1), (x2, y2)\
  \ ...] such that\n    // each tuple is a coordinate - (row, columns), starting with\
  \ 0.\n    // Sort coordinates initially by rows in ascending order.\n    // Also,\
  \ sort coordinates of the row by columns in descending order.\n    // Examples:\n\
  \    // >>> GetRow((new List<List<long>>(new List<long>[]{(List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)1L})})), (1L))\n    // (new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L,\
  \ 4L), (Tuple<long, long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L,\
  \ 5L), (Tuple<long, long>)Tuple.Create(2L, 0L)}))\n    // >>> GetRow((new List<List<long>>()),\
  \ (1L))\n    // (new List<Tuple<long, long>>())\n    // >>> GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(), (List<long>)new List<long>(new long[]{(long)1L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L})})), (3L))\n\
  \    // (new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(2L,\
  \ 2L)}))\n    public static List<Tuple<long, long>> GetRow(List<List<long>> lst,\
  \ long x) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})),\
  \ (1L)).Equals((new List<Tuple<long, long>>(new Tuple<long, long>[]{(Tuple<long,\
  \ long>)Tuple.Create(0L, 0L), (Tuple<long, long>)Tuple.Create(1L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)5L, (long)6L})})), (2L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 1L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 1L), (Tuple<long, long>)Tuple.Create(4L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 1L)}))));\n    Debug.Assert(GetRow((new List<List<long>>(new\
  \ List<long>[]{(List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
  \ (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new List<long>(new\
  \ long[]{(long)1L, (long)1L, (long)3L, (long)4L, (long)5L, (long)6L}), (List<long>)new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)1L, (long)4L, (long)5L, (long)6L}),\
  \ (List<long>)new List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)1L,\
  \ (long)5L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L, (long)2L,\
  \ (long)3L, (long)4L, (long)1L, (long)6L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L, (long)1L})})), (1L)).Equals((new List<Tuple<long,\
  \ long>>(new Tuple<long, long>[]{(Tuple<long, long>)Tuple.Create(0L, 0L), (Tuple<long,\
  \ long>)Tuple.Create(1L, 0L), (Tuple<long, long>)Tuple.Create(2L, 1L), (Tuple<long,\
  \ long>)Tuple.Create(2L, 0L), (Tuple<long, long>)Tuple.Create(3L, 2L), (Tuple<long,\
  \ long>)Tuple.Create(3L, 0L), (Tuple<long, long>)Tuple.Create(4L, 3L), (Tuple<long,\
  \ long>)Tuple.Create(4L, 0L), (Tuple<long, long>)Tuple.Create(5L, 4L), (Tuple<long,\
  \ long>)Tuple.Create(5L, 0L), (Tuple<long, long>)Tuple.Create(6L, 5L), (Tuple<long,\
  \ long>)Tuple.Create(6L, 0L)}))));\n    Debug.Assert(GetRow((new List<List<long>>()),\
  \ (1L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(new long[]{(long)1L})})),\
  \ (2L)).Equals((new List<Tuple<long, long>>())));\n    Debug.Assert(GetRow((new\
  \ List<List<long>>(new List<long>[]{(List<long>)new List<long>(), (List<long>)new\
  \ List<long>(new long[]{(long)1L}), (List<long>)new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})})), (3L)).Equals((new List<Tuple<long, long>>(new Tuple<long,\
  \ long>[]{(Tuple<long, long>)Tuple.Create(2L, 2L)}))));\n    }\n\n}\n"
completions: ["        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(y\
    \ => y).TakeWhile(y => y != x)) {\n                result.Add(Tuple.Create(row,\
    \ col));\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            foreach\
    \ (long c in row) {\n                col.Add(c);\n            }\n            col.Sort();\n\
    \            if (col.Contains(x)) {\n                result.Add(new Tuple<long,\
    \ long>(row.Count, col.IndexOf(x)));\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.ToArray());\n        }\n        col.Sort();\n\
    \        foreach (long col in col) {\n            if (col == x) {\n          \
    \      result.Add(new Tuple<long, long>(row.Count, col));\n            }\n   \
    \     }\n        result.Sort();\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        var rows = lst.Select(l => l.Count).ToList();\n\
    \        var cols = lst.First().Count;\n        var row = 0;\n        var col\
    \ = 0;\n        while (row < rows.Count && col < cols) {\n            if (rows[row]\
    \ == cols) {\n                result.Add(new Tuple<long, long>(row, col));\n \
    \               col++;\n                row++;\n            } else if (col < cols)\
    \ {\n                col++;\n            } else {\n                row++;\n  \
    \              col = 0;\n            }\n        }\n        return result;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    List<List<long>> row = new List<List<long>>();\n        List<List<long>>\
    \ column = new List<List<long>>();\n        foreach (List<long> list in lst) {\n\
    \            row.Add(list);\n        }\n        foreach (List<long> list in row)\
    \ {\n            column.Add(list);\n        }\n        foreach (List<long> list\
    \ in column) {\n            list.Remove(x);\n        }\n        foreach (List<long>\
    \ list in column) {\n            foreach (long num in list) {\n              \
    \  result.Add(new Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n\
    \            }\n        }\n        foreach (List<long> list in row) {\n      \
    \      list.Remove(x);\n        }\n        foreach (List<long> list in row) {\n\
    \            foreach (long num in list) {\n                result.Add(new Tuple<long,\
    \ long>(list.IndexOf(num), list.IndexOf(num)));\n            }\n        }\n  \
    \      foreach (List<long> list in column) {\n            list.Remove(x);\n  \
    \      }\n        foreach (List<long> list in column) {\n            foreach (long\
    \ num in list) {\n                result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n            }\n        }\n        foreach (List<long>\
    \ list in row) {\n            list.Remove(x);\n        }\n        foreach (List<long>\
    \ list in row) {\n            foreach (long num in list) {\n                result.Add(new\
    \ Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n            }\n \
    \       }\n        foreach (List<long> list in column) {\n            list.Remove(x);\n\
    \        }\n        foreach (List<long> list in column) {\n            foreach\
    \ (long num in list) {\n                result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n            }\n        }\n        foreach (List<long>\
    \ list in row) {\n            list.Remove(x);\n        }\n        foreach (List<long>\
    \ list in row) {\n            foreach (long num in list) {\n                result.Add(new\
    \ Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n            }\n \
    \       }\n        foreach (List<long> list in column) {\n            list.Remove(x);\n\
    \        }\n        foreach (List<long> list in column) {\n            foreach\
    \ (long num in list) {\n                result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n            }\n        }\n        foreach (List<long>\
    \ list in row) {\n            list.Remove(x);\n        }\n        foreach (List<long>\
    \ list in row) {\n            foreach (long num in list) {\n                result.Add(",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                col.Sort();\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result;", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    ret.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return ret;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            foreach (long c in col) {\n\
    \                if (c == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        result.Sort();\n        return result;", "        var result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            var rowTuple = new\
    \ Tuple<long, long>(row.Count, row.Count);\n            foreach (var col in row)\
    \ {\n                if (col == x) {\n                    rowTuple.Item1 = row.IndexOf(col);\n\
    \                    rowTuple.Item2 = col.IndexOf(x);\n                    break;\n\
    \                }\n            }\n            result.Add(rowTuple);\n       \
    \ }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            col.Sort();\n            foreach\
    \ (long c in col) {\n                if (c == x) {\n                    ret.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                    break;\n    \
    \            }\n            }\n        }\n        foreach (Tuple<long, long> t\
    \ in ret) {\n            t.Item1 = t.Item1 - 1;\n            t.Item2 = t.Item2\
    \ - 1;\n        }\n        ret.Sort();\n        return ret;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Add(x);\n            result.Add(new Tuple<long,\
    \ long>(row.Count, row.Last()));\n        }\n        foreach (List<long> col in\
    \ result.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2)) {\n \
    \           col.Add(x);\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> col =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  row.Add(col);\n                    col.Add(col);\n        \
    \            result.Add(new Tuple<long, long>(row.Count - 1, col.Count - 1));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count - 1, col.Count\
    \ - 1));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            column.Sort();\n            if (row.Contains(x)) {\n\
    \                result.Add(new Tuple<long, long>(row.IndexOf(x), column.IndexOf(x)));\n\
    \            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n\
    \                }\n            }\n        }\n        result.Sort();\n       \
    \ foreach (Tuple<long, long> t in result) {\n            t.Item2 = t.Item1 - 1;\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<List<long>> row = new List<List<long>>();\n\
    \        foreach (List<long> row in lst) {\n            if (row.Count == 0) {\n\
    \                row.Add(x);\n                result.Add(new Tuple<long, long>(row.Count,\
    \ row.Count));\n            } else {\n                List<long> column = new\
    \ List<long>();\n                foreach (long val in row) {\n               \
    \     if (val == x) {\n                        column.Add(val);\n            \
    \        }\n                }\n                column.Add(x);\n              \
    \  row.Add(column);\n                result.Add(new Tuple<long, long>(row.Count,\
    \ column.Count));\n            }\n        }\n        return result;", "      \
    \  List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<List<long>>\
    \ row = new List<List<long>>();\n        List<List<long>> column = new List<List<long>>();\n\
    \        foreach (List<long> list in lst) {\n            row.Add(list);\n    \
    \    }\n        foreach (List<long> list in row) {\n            column.Add(list);\n\
    \        }\n        foreach (List<long> list in column) {\n            foreach\
    \ (long num in list) {\n                if (num == x) {\n                    result.Add(new\
    \ Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n                }\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        foreach (var row in lst)\
    \ {\n            foreach (var col in row) {\n                if (col == x) {\n\
    \                    res.Add(Tuple.Create(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return res.OrderBy(x =>\
    \ x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    res.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ res.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            foreach\
    \ (long c in row) {\n                col.Add(c);\n            }\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.Count - 1, col.Count - 1));\n\
    \                }\n            }\n        }\n        result.Sort();\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    row.Add(col);\n    \
    \                column.Add(Tuple.Create(row.Count - 1, row.Count - 1));\n   \
    \             }\n            }\n            result.Add(Tuple.Create(row.Count,\
    \ column.Count));\n            row.Clear();\n            column.Clear();\n   \
    \     }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Add(0);\n            col.Add(0);\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col)\
    \ {\n                if (row.Contains(c)) {\n                    row.Remove(c);\n\
    \                    col.Remove(c);\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in col",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    col.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    row.Insert(row.IndexOf(row), new Tuple<long, long>(col.IndexOf(col),\
    \ col.IndexOf(col)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    col.Insert(col.IndexOf(col),\
    \ new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n              \
    \  }\n            }\n        }\n        foreach (List<long> row in lst) {\n  \
    \          foreach (long col in row) {\n                if (col.Count > 0) {\n\
    \                    row.Insert(row.IndexOf(row), new Tuple<long, long>(col.IndexOf(col),\
    \ col.IndexOf(col)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    col.Insert(col.IndexOf(col),\
    \ new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n              \
    \  }\n            }\n        }\n        foreach (List<long> row in lst) {\n  \
    \          foreach (long col in row) {\n                if (col.Count > 0) {\n\
    \                    row.Insert(row.IndexOf(row), new Tuple<long, long>(col.IndexOf(col),\
    \ col.IndexOf(col)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    col.Insert(col.IndexOf(col),\
    \ new Tuple<long, long>(row.IndexOf(row), row.IndexOf(row)));\n              \
    \  }\n            }\n        }\n        foreach (List<long> row in lst) {\n  \
    \          foreach (long col in row) {\n                if (col.Count > 0) {\n\
    \                    row.Insert(row.IndexOf(row), new Tuple<long, long>(col.IndexOf(col),\
    \ col.IndexOf(col)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        List<Tuple<long, long>> rowResult = GetRow(row, x);\n            if (rowResult.Count\
    \ > 0) {\n                result.AddRange(rowResult);\n            }\n       \
    \ }\n        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(l => l.Select((l, i) => new {l, i}).OrderBy(t =>\
    \ t.i).ThenByDescending(t => t.l)).ToList();\n        var rowsWithX = rows.Where(l\
    \ => l.Any(l => l.First() == x)).ToList();\n        foreach (var row in rowsWithX)\
    \ {\n            var cols = row.Select(l => l.First()).ToList();\n           \
    \ var colsWithX = cols.Where(l => l.Any(l => l.First() == x)).ToList();\n    \
    \        foreach (var col in colsWithX) {\n                result.Add(new Tuple<long,\
    \ long>(row.First(), col.First()));\n            }\n        }\n        return\
    \ result.OrderBy(t => t.Item1).ThenByDescending(t => t.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> column = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long c in row)\
    \ {\n                if (c == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, column.Count));\n                }\n                column.Add(c);\n\
    \            }\n            column.Clear();\n        }\n        return result;",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col == x) {\n                    res.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ res.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult = GetRow(row,\
    \ x);\n            if (rowResult.Count > 0) {\n                result.AddRange(rowResult);\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     List<Tuple<long, long>> temp = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    temp.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> item in temp) {\n            row.Insert(item.Item1, item.Item2);\n\
    \            column.Insert(item.Item2, item.Item1);\n        }\n        foreach\
    \ (Tuple<long, long> item in row) {\n            column.Insert(item.Item2, item.Item1);\n\
    \        }\n        foreach (Tuple<long, long> item in column) {\n           \
    \ row.Insert(item.Item1, item.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> item in row) {\n            result.Add(item);\n        }\n        foreach\
    \ (Tuple<long, long> item in column) {\n            result.Add(item);\n      \
    \  }\n        foreach (Tuple<long, long> item in result) {\n            foreach\
    \ (Tuple<long, long> item in result) {\n                result.Remove(item);\n\
    \            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        column.Sort((x,\
    \ y) => y.Item1.CompareTo(x.Item1));\n        column.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        foreach (Tuple<long, long> tuple in column) {\n            row.Add(tuple.Item1);\n\
    \        }\n        row.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        row.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long, long> tuple\
    \ in row) {\n            result.Add(tuple);\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        List<List<long>>\
    \ col = new List<List<long>>();\n        foreach (List<long> row in lst) {\n \
    \           row.Sort();\n            col.Add(row);\n        }\n        col.Sort();\n\
    \        foreach (List<long> col in col) {\n            col.Reverse();\n     \
    \       foreach (long val in col) {\n                if (val == x) {\n       \
    \             result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        result.Sort();\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    row.Reverse();\n            foreach (long col in row) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         foreach (long c in col) {\n                if (c == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        result.Sort();\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        foreach (Tuple<long, long> tuple in result.OrderByDescending(x\
    \ => x.Item1).ThenByDescending(x => x.Item2)) {\n            row.Add(tuple.Item1);\n\
    \            row.Add(tuple.Item2);\n        }\n        foreach (Tuple<long, long>\
    \ tuple in row.OrderByDescending(x => x).ThenByDescending(x => x)) {\n       \
    \     result.Add(tuple);\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1).ToList());\n            row.RemoveAll(x => x == x);\n            row.Sort();\n\
    \            result.AddRange(row.Select(x => Tuple.Create(col.IndexOf(x), x)));\n\
    \            col.RemoveAll(x => x == x);\n            col.Sort();\n        }\n\
    \        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(t => t.Item1).ThenByDescending(t\
    \ => t.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.ToArray());\n        }\n        col.Sort();\n\
    \        foreach (long c in col) {\n            if (c == x) {\n              \
    \  result.Add(new Tuple<long, long>(row.Count, col.Count));\n            }\n \
    \       }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> ret = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ col = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    ret.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(col)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    col.Remove(col);\n                }\n         \
    \   }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    row.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    col.Remove(col);\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count >\
    \ 0) {\n                    row.Remove(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count > 0) {\n                    col.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    row.Remove(col);\n                }\n          \
    \  }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    col.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col.Count > 0) {\n                    row.Remove(col);\n       \
    \         }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col.Count >\
    \ 0) {\n                    col.Remove(col);\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count > 0) {\n                    row.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    col.Remove(col);\n                }\n          \
    \  }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    row.Remove(col);\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in ", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        column.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n\
    \        column.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> column in column) {\n            row.Add(lst[column.Item1].IndexOf(lst[column.Item2]));\n\
    \        }\n        row.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        row.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        result.AddRange(row);\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> column = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.Reverse();\n            foreach (long col in col) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<long> columns = new List<long>();\n\
    \            foreach (long value in row) {\n                if (value == x) {\n\
    \                    columns.Add(value);\n                }\n            }\n \
    \           columns.Sort();\n            columns.Reverse();\n            result.Add(new\
    \ Tuple<long, long>(columns.Count, columns.Count));\n        }\n        result.Sort();\n\
    \        result.Reverse();\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<List<long>> row\
    \ = new List<List<long>>();\n        List<long> col = new List<long>();\n    \
    \    foreach (List<long> row in lst) {\n            row.Add(x);\n            col.Add(x);\n\
    \            result.Add(new Tuple<long, long>(row.Count, col.Count));\n      \
    \      row.Clear();\n            col.Clear();\n        }\n        foreach (List<long>\
    \ row in lst) {\n            row.Add(x);\n            col.Add(x);\n          \
    \  result.Add(new Tuple<long, long>(row.Count, col.Count));\n            row.Clear();\n\
    \            col.Clear();\n        }\n        foreach (List<long> row in lst)\
    \ {\n            row.Add(x);\n            col.Add(x);\n            result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n            row.Clear();\n      \
    \      col.Clear();\n        }\n        foreach (List<long> row in lst) {\n  \
    \          row.Add(x);\n            col.Add(x);\n            result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n            row.Clear();\n            col.Clear();\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Add(x);\n\
    \            col.Add(x);\n            result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n            row.Clear();\n            col.Clear();\n        }\n\
    \        foreach (List<long> row in lst) {\n            row.Add(x);\n        \
    \    col.Add(x);\n            result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \            row.Clear();\n            col.Clear();\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Add(x);\n            col.Add(x);\n\
    \            result.Add(new Tuple<long, long>(row.Count, col.Count));\n      \
    \      row.Clear();\n            col.Clear();\n        }\n        foreach (List<long>\
    \ row in lst) {\n            row.Add(x);\n            col.Add(x);\n          \
    \  result.Add(new Tuple<long, long>(row.Count, col.Count));\n            row.Clear();\n\
    \            col.Clear();\n        }\n        foreach (List<long> row in lst)\
    \ {\n            row.Add(x);\n            col.Add(x);\n            result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n            row.Clear();\n      \
    \      col.Clear();\n        }\n        foreach (List<long> row in lst) {\n  \
    \          row.Add(x);\n            col.Add(x);\n            result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n            row.Clear();\n            col.Clear();\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Add(",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   row.Add(c);\n            }\n            result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        foreach (Tuple<long,\
    \ long> t in result) {\n            if (t.Item1 == x) {\n                return\
    \ new List<Tuple<long, long>>(new Tuple<long, long>[t.Item2]);\n            }\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            foreach (long c in row) {\n   \
    \             col.Add(c);\n            }\n            col.Sort();\n          \
    \  foreach (long c in col) {\n                if (c == x) {\n                \
    \    result.Add(new Tuple<long, long>(row.Count, col.Count));\n              \
    \  }\n            }\n        }\n        result.Sort();\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> tuple in result.OrderByDescending(t => t.Item1).ThenByDescending(t\
    \ => t.Item2)) {\n            row.Add(tuple.Item1);\n            column.Add(tuple.Item2);\n\
    \        }\n        result.AddRange(column);\n        result.AddRange(row);\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            row.Reverse();\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        result.Sort();\n        result.Reverse();\n        return result;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    List<long> row = new List<long>();\n        List<long> column = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                    break;\n                }\n\
    \            }\n        }\n        foreach (List<long> row in lst) {\n       \
    \     foreach (long col in row) {\n                if (col != x) {\n         \
    \           column.Add(col);\n                }\n            }\n        }\n  \
    \      column.Sort();\n        row.Sort();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col !=\
    \ x) {\n                    row.Add(column[row.Count - 1]);\n                }\n\
    \            }\n        }\n        row.Sort();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(column[row.Count - 1]);\n             \
    \   }\n            }\n        }\n        row.Sort();\n", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long c in row)\
    \ {\n                col.Add(c);\n            }\n            col.Sort();\n   \
    \         foreach (long c in col) {\n                if (c == x) {\n         \
    \           result.Add(new Tuple<long, long>(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row) {\n     \
    \           if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row) + row.Count - 1));\n                }\n            }\n    \
    \    }\n        result.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n        result.Sort((a,\
    \ b) => b.Item2.CompareTo(a.Item2));\n        return result;", "        var result\
    \ = new List<Tuple<long, long>>();\n        var row = new List<Tuple<long, long>>();\n\
    \        var column = new List<Tuple<long, long>>();\n        var rowIndex = 0;\n\
    \        var columnIndex = 0;\n        var rowLength = 0;\n        var columnLength\
    \ = 0;\n        foreach (var row in lst) {\n            rowLength = row.Count;\n\
    \            columnLength = row.First().Count;\n            if (rowLength > columnLength)\
    \ {\n                columnIndex = columnLength;\n            } else {\n     \
    \           rowIndex = rowLength;\n            }\n            while (columnIndex\
    \ < columnLength) {\n                column.Add(row.First()[columnIndex]);\n \
    \               columnIndex++;\n            }\n            while (rowIndex < rowLength)\
    \ {\n                row.Add(lst[rowIndex][columnIndex]);\n                rowIndex++;\n\
    \            }\n            row.Sort();\n            column.Sort();\n        \
    \    if (row.First().First() == x) {\n                result.Add(new Tuple<long,\
    \ long>(rowIndex, columnIndex));\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> rowSorted = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> colSorted = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            foreach\
    \ (long col in row) {\n                col.Sort();\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        result.Sort();\n\
    \        foreach (Tuple<long, long> t in result) {\n            row.Add(t.Item1,\
    \ t.Item2);\n        }\n        foreach (Tuple<long, long> t in result) {\n  \
    \          col.Add(t.Item2, t.Item1);\n        }\n        foreach (Tuple<long,\
    \ long> t in col) {\n            colSorted.Add(t);\n        }\n        foreach\
    \ (Tuple<long, long> t in row) {\n            rowSorted.Add(t);\n        }\n \
    \       rowSorted.Sort();\n        colSorted.Sort();\n        foreach (Tuple<long,\
    \ long> t in rowSorted) {\n            foreach (Tuple<long, long> t2 in colSorted)\
    \ {\n                if (t.Item1 == t2.Item1 && t.Item2 == t2.Item2) {\n     \
    \               result.Add(new Tuple<long, long>(t.Item1, t.Item2));\n       \
    \         }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            List<Tuple<long, long>> rowResult = GetRow(row, x);\n\
    \            foreach (Tuple<long, long> tuple in rowResult) {\n              \
    \  result.Add(tuple);\n            }\n        }\n        return result;", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n \
    \           }\n        }\n        foreach (Tuple<long, long> item in column) {\n\
    \            row.Insert(item.Item1, item.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> item in row) {\n            column.Insert(item.Item1, item.Item2);\n \
    \       }\n        foreach (Tuple<long, long> item in column) {\n            row.Insert(item.Item1,\
    \ item.Item2);\n        }\n        foreach (Tuple<long, long> item in row) {\n\
    \            column.Insert(item.Item1, item.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> item in column) {\n            row.Insert(item.Item1, item.Item2);\n\
    \        }\n        foreach (Tuple<long, long> item in row) {\n            column.Insert(item.Item1,\
    \ item.Item2);\n        }\n        foreach (Tuple<long, long> item in column)\
    \ {\n            row.Insert(item.Item1, item.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> item in row) {\n            column.Insert(item.Item1, item.Item2);\n\
    \        }\n        foreach (Tuple<long, long> item in column) {\n           \
    \ row.Insert(item.Item1, item.Item2);\n        }\n        foreach (Tuple<long,\
    \ long> item in row) {\n            column.Insert(item.Item1, item.Item2);\n \
    \       }\n        foreach (Tuple<long, long> item in column) {\n            row.Insert(item.Item1,\
    \ item.Item2);\n        }\n        foreach (Tuple<long, long> item in row) {\n\
    \            column.Insert(item.Item1, item.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> item in column) {\n            row.Insert(item.Item1, item.Item2);\n\
    \        }\n        foreach (Tuple<long, long> item in row) {\n            column.Insert(item.Item1,\
    \ item.Item2);\n        }\n        foreach (Tuple<long, long> item in column)\
    \ {\n            row.Insert(item.Item1, item.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> ", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(0);\n            col.Add(0);\n        }\n        foreach (List<long>\
    \ col in lst) {\n            col.Add(0);\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(col)));\n                }\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            foreach (long c in col) {\n\
    \                if (c == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(row.FindIndex(c => c == x)), col.IndexOf(col.FindIndex(c =>\
    \ c == x))));\n                }\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                col.Sort();\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        result.Sort();\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> col = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> tmp = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> tmp2 = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    tmp.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        tmp.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n    \
    \    foreach (Tuple<long, long> t in tmp) {\n            row.Add(t.Item1);\n \
    \           col.Add(t.Item2);\n        }\n        row.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n\
    \        foreach (Tuple<long, long> t in row) {\n            tmp2.Add(new Tuple<long,\
    \ long>(t.Item1, t.Item2));\n        }\n        tmp2.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        foreach (Tuple<long, long> t in tmp2) {\n            result.Add(new Tuple<long,\
    \ long>(t.Item1, t.Item2));\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> t in column) {\n            row.Insert(t.Item1, t.Item2);\n\
    \        }\n        foreach (Tuple<long, long> t in row) {\n            column.Insert(t.Item1,\
    \ t.Item2);\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        column.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        foreach (Tuple<long,\
    \ long> t in result) {\n            row.Insert(t.Item1, t.Item2);\n        }\n\
    \        foreach (Tuple<long, long> t in column) {\n            column.Insert(t.Item1,\
    \ t.Item2);\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        column.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        foreach (Tuple<long,\
    \ long> t in result) {\n            row.Insert(t.Item1, t.Item2);\n        }\n\
    \        foreach (Tuple<long, long> t in column) {\n            column.Insert(t.Item1,\
    \ t.Item2);\n        }\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long col in row) {\n                if (col == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> tuple in result.OrderByDescending(x => x.Item1)) {\n    \
    \        row.Add(tuple.Item2);\n        }\n        foreach (Tuple<long, long>\
    \ tuple in column.OrderByDescending(x => x.Item1)) {\n            column.Add(tuple.Item2);\n\
    \        }\n        result.AddRange(column);\n        result.AddRange(row);\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> column in lst) {\n            row.Add(new Tuple<long,\
    \ long>(column.Count, column.Sum()));\n        }\n        row.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n\
    \        row.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> row in row) {\n            if (row.Item1 == x) {\n                result.Add(new\
    \ Tuple<long, long>(row.Item1, row.Item2));\n            }\n        }\n      \
    \  return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.Reverse();\n            foreach (long col in col)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col));\n                }\n            }\n        }\n     \
    \   return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> rowCol = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> rowColCol = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> rowColColCol = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> rowColColColCol = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> rowColColColColCol = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> rowColColColColColCol = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> rowColColColColColColCol = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> rowColColColColColColColCol = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> rowColColColColColColColColCol = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> rowColColColColColColColColColColColColCol\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> tuple in result.OrderByDescending(t\
    \ => t.Item1)) {\n            row.Add(tuple.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> tuple in column.OrderByDescending(t => t.Item1)) {\n    \
    \        column.Add(tuple.Item2);\n        }\n        result.AddRange(column);\n\
    \        result.AddRange(row);\n        return result;", "        var result =\
    \ new List<Tuple<long, long>>();\n        var row = new List<long>();\n      \
    \  var column = new List<long>();\n        var rows = new List<List<long>>();\n\
    \        foreach (var row in lst) {\n            row.ForEach(x => column.Add(x));\n\
    \            rows.Add(row);\n        }\n        rows = rows.OrderBy(x => x.Count).ThenByDescending(x\
    \ => x.Count).ToList();\n        foreach (var row in rows) {\n            row.ForEach(x\
    \ => column.Remove(x));\n            if (column.Count == 0) {\n              \
    \  result.Add(new Tuple<long, long>(x, x));\n            }\n            else {\n\
    \                column.Sort();\n                var index = column.BinarySearch(x\
    \ => x);\n                if (index < 0) {\n                    index = ~index;\n\
    \                }\n                result.Add(new Tuple<long, long>(row[index],\
    \ x));\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Add(0);\n        \
    \    col.Add(0);\n        }\n        foreach (List<long> col in lst) {\n     \
    \       col.Add(0);\n        }\n        foreach (List<long> row in lst) {\n  \
    \          foreach (long col in row) {\n                if (col == x) {\n    \
    \                result.Add(new Tuple<long, long>(row.Count, col.Count));\n  \
    \              }\n            }\n        }\n        foreach (List<long> col in\
    \ lst) {\n            foreach (long row in col) {\n                if (row ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(col.Count, row.Count));\n\
    \                }\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  row.Add(col);\n                    column.Add(Tuple.Create(row.Count\
    \ - 1, col));\n                }\n            }\n            result.Add(Tuple.Create(row.Count,\
    \ column.Count));\n            row.Clear();\n            column.Clear();\n   \
    \     }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => x.Item2.CompareTo(y.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAll(x => x == x);\n \
    \           row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAll(x => x == x);\n            row.Sort();\n          \
    \  col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n         \
    \   row.RemoveAll(x => x == x);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAll(x => x == x);\n \
    \           row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAll(x => x == x);\n            row.Sort();\n          \
    \  col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n         \
    \   row.RemoveAll(x => x == x);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAll(x => x == x);\n \
    \           row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAll(x => x == x);\n            row.Sort();\n          \
    \  col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n         \
    \   row.RemoveAll(x => x == x);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAll(x => x == x);\n \
    \           row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n\
    \            row.RemoveAll(x => x == x);\n            row.Sort();\n          \
    \  col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());\n         \
    \   row.RemoveAll(x => x == x);\n            row.Sort();\n            col.AddRange(row.Skip(row.Count\
    \ - 1).Take(row.Count).ToList());\n            row.RemoveAll(x => x == x);\n \
    \           row.Sort();\n            col.AddRange(row.Skip(row.Count - 1).Take(row.Count).ToList());",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.Count, row.Count - 1));\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        List<List<long>>\
    \ column = new List<List<long>>();\n        foreach (List<long> list in lst) {\n\
    \            row.Add(list);\n        }\n        foreach (List<long> list in row)\
    \ {\n            column.Add(list);\n        }\n        foreach (List<long> list\
    \ in column) {\n            foreach (long num in list) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in column) {\n            foreach (long num in list) {\n  \
    \              if (num != x) {\n                    result.Add(new Tuple<long,\
    \ long>(list.IndexOf(num), list.IndexOf(num)));\n                }\n         \
    \   }\n        }\n        foreach (List<long> list in row) {\n            foreach\
    \ (long num in list) {\n                if (num != x) {\n                    result.Add(new\
    \ Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n                }\n\
    \            }\n        }\n        foreach (List<long> list in row) {\n      \
    \      foreach (long num in list) {\n                if (num == x) {\n       \
    \             result.Add(new Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n\
    \                }\n            }\n        }\n        foreach (List<long> list\
    \ in column) {\n            foreach (long num in list) {\n                if (num\
    \ != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in row) {\n            foreach (long num in list) {\n     \
    \           if (num != x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in row) {\n            foreach (long num in list) {\n     \
    \           if (num == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in column) {\n            foreach (long num in list) {\n  \
    \              if (num != x) {\n                    result.Add(new Tuple<long,\
    \ long>(list.IndexOf(num), list.IndexOf(num)));\n                }\n         \
    \   }\n        }\n        foreach (List<long> list in row) {\n            foreach\
    \ (long num in list) {\n                if (num != x) {\n                    result.Add(new\
    \ Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n                }\n\
    \            }\n        }\n        foreach (List<", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> t in column) {\n            row.Insert(t.Item1, t.Item2);\n\
    \        }\n        foreach (Tuple<long, long> t in row) {\n            column.Insert(t.Item1,\
    \ t.Item2);\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        column.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        foreach (Tuple<long,\
    \ long> t in result) {\n            row.Insert(t.Item1, t.Item2);\n        }\n\
    \        foreach (Tuple<long, long> t in column) {\n            column.Insert(t.Item1,\
    \ t.Item2);\n        }\n        result.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                col.Sort();\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ columns = new List<long>();\n            foreach (long i in row) {\n       \
    \         if (i == x) {\n                    columns.Add(i);\n               \
    \ }\n            }\n            result.Add(new Tuple<long, long>(columns.Count,\
    \ columns.Count));\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> row in result) {\n\
    \            foreach (Tuple<long, long> col in column) {\n                if (col.Item1\
    \ > row.Item1) {\n                    result.Insert(row.Item2, row);\n       \
    \             break;\n                }\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> tuple in result.OrderByDescending(t => t.Item1)) {\n    \
    \        row.Add(tuple.Item2);\n        }\n        foreach (Tuple<long, long>\
    \ tuple in column.OrderByDescending(t => t.Item1)) {\n            column.Add(tuple.Item2);\n\
    \        }\n        result.AddRange(column);\n        result.AddRange(row);\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (var row in lst) {\n            foreach (var col\
    \ in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(row), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(x => x.Count).ToArray();\n        var cols = lst.First().Count;\n\
    \        var row = 0;\n        var col = 0;\n        foreach (var item in lst)\
    \ {\n            if (row == rows[row]) {\n                col = 0;\n         \
    \       foreach (var item in item) {\n                    if (col == cols) {\n\
    \                        result.Add(new Tuple<long, long>(row, col));\n      \
    \              }\n                    col++;\n                }\n            \
    \    col = 0;\n                row++;\n            }\n        }\n        return\
    \ result;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    row.Reverse();\n            foreach (long col in row) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row) + 1));\n                }\n            }\n        }\n     \
    \   result.Sort();\n        result.Reverse();\n        return result;", "    \
    \    var row = new List<Tuple<long, long>>();\n        var rows = new List<List<Tuple<long,\
    \ long>>>();\n        var columns = new List<List<Tuple<long, long>>>();\n   \
    \     var column = new List<Tuple<long, long>>();\n        var rowIndex = 0;\n\
    \        var columnIndex = 0;\n        var rowIndexMax = lst.Count - 1;\n    \
    \    var columnIndexMax = lst[0].Count - 1;\n        while (rowIndex < rowIndexMax\
    \ && columnIndex < columnIndexMax) {\n            var rowValue = lst[rowIndex][columnIndex];\n\
    \            if (rowValue == x) {\n                row.Add(new Tuple<long, long>(rowIndex,\
    \ columnIndex));\n                rows.Add(row);\n                column.Add(new\
    \ Tuple<long, long>(rowIndex, columnIndex));\n                columns.Add(column);\n\
    \                rowIndex++;\n                columnIndex++;\n            } else\
    \ if (rowValue > x) {\n                rowIndex++;\n            } else {\n   \
    \             columnIndex++;\n            }\n        }\n        return rows;",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        List<List<long>>\
    \ row = new List<List<long>>();\n        foreach (List<long> col in lst) {\n \
    \           row.Add(col);\n        }\n        row.Sort((a, b) => a.Count - b.Count);\n\
    \        foreach (List<long> col in row) {\n            col.Sort((a, b) => b -\
    \ a);\n        }\n        foreach (List<long> col in row) {\n            foreach\
    \ (long num in col) {\n                if (num == x) {\n                    res.Add(Tuple.Create(col.IndexOf(num),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ res.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1));\n            row.RemoveAt(0);\n\
    \            col.RemoveAt(0);\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1));\n            row.RemoveAt(0);\n            col.RemoveAt(0);\n       \
    \     row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n\
    \            row.RemoveAt(0);\n            col.RemoveAt(0);\n            row.Sort();\n\
    \            col.AddRange(row.Skip(1).Take(row.Count - 1));\n            row.RemoveAt(0);\n\
    \            col.RemoveAt(0);\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1));\n            row.RemoveAt(0);\n            col.RemoveAt(0);\n       \
    \     row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n\
    \            row.RemoveAt(0);\n            col.RemoveAt(0);\n            row.Sort();\n\
    \            col.AddRange(row.Skip(1).Take(row.Count - 1));\n            row.RemoveAt(0);\n\
    \            col.RemoveAt(0);\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1));\n            row.RemoveAt(0);\n            col.RemoveAt(0);\n       \
    \     row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n\
    \            row.RemoveAt(0);\n            col.RemoveAt(0);\n            row.Sort();\n\
    \            col.AddRange(row.Skip(1).Take(row.Count - 1));\n            row.RemoveAt(0);\n\
    \            col.RemoveAt(0);\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1));\n            row.RemoveAt(0);\n            col.RemoveAt(0);\n       \
    \     row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - 1));\n\
    \            row.RemoveAt(0);\n            col.RemoveAt(0);\n            row.Sort();\n\
    \            col.AddRange(row.Skip(1).Take(row.Count - 1));\n            row.RemoveAt(0);\n\
    \            col.RemoveAt(0);\n            row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count\
    \ - 1));\n            row.RemoveAt(0);\n            col.RemoveAt(0);\n       \
    \     row.Sort();\n            col.AddRange(row.Skip(1).Take(row.Count - ", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Add(x);\n        \
    \    result.Add(new Tuple<long, long>(row.Count, row.Count));\n        }\n   \
    \     foreach (List<long> col in result.OrderByDescending(x => x.Item1).ThenByDescending(x\
    \ => x.Item2)) {\n            col.Add(x);\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<List<long>> row = new List<List<long>>();\n        List<List<long>> column\
    \ = new List<List<long>>();\n        foreach (List<long> list in lst) {\n    \
    \        row.Add(list);\n        }\n        foreach (List<long> list in row) {\n\
    \            column.Add(list);\n        }\n        foreach (List<long> list in\
    \ column) {\n            foreach (long num in list) {\n                if (num\
    \ == x) {\n                    result.Add(new Tuple<long, long>(list.IndexOf(num),\
    \ list.IndexOf(num)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> list in column) {\n            list.Sort();\n            list.Reverse();\n\
    \            foreach (long num in list) {\n                if (num == x) {\n \
    \                   result.Add(new Tuple<long, long>(list.IndexOf(num), list.IndexOf(num)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   var result = new List<Tuple<long, long>>();\n        var row = new List<long>();\n\
    \        var column = new List<long>();\n        foreach (var list in lst) {\n\
    \            row.Add(list.Count);\n            foreach (var item in list) {\n\
    \                column.Add(item);\n            }\n        }\n        row.Sort();\n\
    \        column.Sort();\n        var index = row.BinarySearch(column);\n     \
    \   if (index < 0) {\n            index = ~index;\n        }\n        if (index\
    \ < 0) {\n            result.Add(new Tuple<long, long>(row.Count, 0));\n     \
    \   } else {\n            result.Add(new Tuple<long, long>(row.Count, column.Count\
    \ - index));\n        }\n        return result;", "        var lst2 = lst.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst3 = lst2.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst4 = lst3.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst5 = lst4.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst6 = lst5.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst7 = lst6.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst8 = lst7.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst9 = lst8.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst10 = lst9.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst11 = lst10.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst12 = lst11.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst13 = lst12.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst14 = lst13.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst15 = lst14.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst16 = lst15.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst17 = lst16.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst18 = lst17.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst19 = lst18.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst20 = lst19.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst21 = lst20.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList();\n        var lst22 = lst21.Select(x\
    \ => x.Select(y => (y, x)).ToList()).ToList", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            foreach (long col in row) {\n                if (col ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        List<Tuple<long, long>>\
    \ sorted = result.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2).ToList();\n\
    \        return sorted;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            row.Sort();\n            foreach (long col in row) {\n\
    \                if (col != x) {\n                    col.Sort();\n          \
    \          foreach (long c in col) {\n                        if (c != x) {\n\
    \                            result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                        }\n                    }\n                }\n       \
    \     }\n        }\n        return result;", "        var result = new List<Tuple<long,\
    \ long>>();\n        var row = new List<Tuple<long, long>>();\n        var column\
    \ = new List<Tuple<long, long>>();\n        var rows = new List<List<Tuple<long,\
    \ long>>>();\n        var columns = new List<List<Tuple<long, long>>>();\n   \
    \     var rowIndex = 0;\n        var columnIndex = 0;\n        foreach (var row\
    \ in lst) {\n            row.Sort();\n            rows.Add(row);\n           \
    \ columns.Add(row.OrderByDescending(x => x).ToList());\n        }\n        rows.Sort();\n\
    \        columns.Sort();\n        foreach (var row in rows) {\n            row.Sort();\n\
    \            var rowIndex = row.IndexOf(new List<long>() {x});\n            if\
    \ (rowIndex != -1) {\n                result.Add(new Tuple<long, long>(rowIndex,\
    \ columns[rowIndex].IndexOf(new List<long>() {x})));\n            }\n        }\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            row.Sort();\n            foreach (long col in row) {\n\
    \                if (col != x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.Count, col.Count));\n                }\n            }\n        }\n\
    \        return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        foreach (var row in lst) {\n            var tuple = new Tuple<long, long>();\n\
    \            foreach (var item in row) {\n                if (item == x) {\n \
    \                   tuple.Item1 = row.IndexOf(item);\n                    tuple.Item2\
    \ = row.LastIndexOf(item);\n                    break;\n                }\n  \
    \          }\n            result.Add(tuple);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> col = new List<long>();\n        foreach (List<long>\
    \ row in lst) {\n            row.Sort();\n            foreach (long col in row)\
    \ {\n                col.Reverse();\n                col.Add(x);\n           \
    \     col.Sort();\n                result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<long> row = new\
    \ List<long>();\n        List<long> column = new List<long>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            column.Sort();\n\
    \            if (row.Contains(x)) {\n                result.Add(new Tuple<long,\
    \ long>(row.IndexOf(x), column.IndexOf(x)));\n            }\n        }\n     \
    \   result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x,\
    \ y) => y.Item2.CompareTo(x.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    result.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        foreach (Tuple<long, long>\
    \ tuple in result.OrderByDescending(x => x.Item1)) {\n            row.Add(tuple.Item2);\n\
    \        }\n        result.Reverse();\n        foreach (Tuple<long, long> tuple\
    \ in result.OrderByDescending(x => x.Item0)) {\n            row.Add(tuple.Item2);\n\
    \        }\n        return row;", "        List<Tuple<long, long>> result = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> column in lst) {\n            row.Add(new\
    \ Tuple<long, long>(column.Count, 0));\n        }\n        foreach (Tuple<long,\
    \ long> t in row) {\n            foreach (long i in column) {\n              \
    \  if (i == x) {\n                    result.Add(new Tuple<long, long>(t.Item1,\
    \ t.Item2));\n                }\n            }\n        }\n        return result.OrderBy(t\
    \ => t.Item1).ThenByDescending(t => t.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var item in row) {\n                if (item ==\
    \ x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      var result = new List<Tuple<long, long>>();\n        var row = new List<Tuple<long,\
    \ long>>();\n        var column = new List<Tuple<long, long>>();\n        var\
    \ rows = new List<List<Tuple<long, long>>>();\n        foreach (var row in lst)\
    \ {\n            row.Sort();\n            columns.Sort();\n            rows.Add(row);\n\
    \        }\n        rows.Sort((x, y) => y.Sum() - x.Sum());\n        foreach (var\
    \ row in rows) {\n            row.Sort();\n            column.Sort();\n      \
    \      foreach (var col in column) {\n                if (col.Item1 == x) {\n\
    \                    result.Add(Tuple.Create(row.Item1, col.Item1));\n       \
    \         }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> ret = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            row.Reverse();\n            foreach\
    \ (long col in row) {\n                if (col == x) {\n                    ret.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                }\n            }\n\
    \        }\n        ret.Sort();\n        ret.Reverse();\n        return ret;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Skip(1).Take(row.Count - 1).ToList());\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \            }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      var result = new List<Tuple<long, long>>();\n        var rows = lst.Select(l\
    \ => l.Count).ToList();\n        var cols = lst.First().Count;\n        var row\
    \ = 0;\n        var col = 0;\n        while (row < rows.Count && col < cols) {\n\
    \            if (lst[row][col] == x) {\n                result.Add(new Tuple<long,\
    \ long>(row, col));\n            }\n            if (lst[row][col] > x) {\n   \
    \             col++;\n            } else {\n                row++;\n         \
    \   }\n        }\n        return result;", "        List<Tuple<long, long>> result\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> column = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        foreach (Tuple<long, long> item in result) {\n            row.Add(lst[item.Item1].IndexOf(item.Item2));\n\
    \            column.Add(lst[item.Item2].IndexOf(item.Item1));\n        }\n   \
    \     result.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n        foreach (Tuple<long,\
    \ long> item in result) {\n            row.Add(lst[item.Item1].IndexOf(item.Item2));\n\
    \            column.Add(lst[item.Item2].IndexOf(item.Item1));\n        }\n   \
    \     result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        foreach (Tuple<long,\
    \ long> item in result) {\n            row.Add(lst[item.Item1].IndexOf(item.Item2));\n\
    \            column.Add(lst[item.Item2].IndexOf(item.Item1));\n        }\n   \
    \     return result;", "        var result = new List<Tuple<long, long>>();\n\
    \        var rows = lst.Select(x => x.Select(y => (long, long)).ToArray()).ToArray();\n\
    \        var sortedRows = rows.OrderBy(x => x.Length).ThenByDescending(x => x.Select(y\
    \ => y).Max()).ToArray();\n        var sortedColumns = sortedRows.Select(x =>\
    \ x.Select(y => y).Max()).ToArray();\n        var columnIndex = sortedColumns.Select((x,\
    \ i) => new { x, i }).ToDictionary(x => x.x, x => x.i);\n        var rowIndex\
    \ = sortedRows.Select((x, i) => new { x, i }).ToDictionary(x => x.x, x => x.i);\n\
    \        foreach (var row in sortedRows) {\n            var columns = new List<long>();\n\
    \            foreach (var item in row) {\n                columns.Add(item);\n\
    \            }\n            var tuple = new Tuple<long, long>(columnIndex, rowIndex);\n\
    \            var index = columns.IndexOf(x);\n            if (index != -1) {\n\
    \                tuple.Item1 = tuple.Item1.Item2;\n                tuple.Item2\
    \ = tuple.Item1.Item1;\n                tuple.Item2 = tuple.Item2.Item1;\n   \
    \             tuple.Item2 = tuple.Item2.Item2;\n            }\n            result.Add(tuple);\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            List<Tuple<long, long>> rowResult = new List<Tuple<long, long>>();\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  rowResult.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n            result.AddRange(rowResult);\n \
    \       }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                if (c == x) {\n              \
    \      result.Add(new Tuple<long, long>(row.Count, col.Count));\n            \
    \    }\n                col.Add(c);\n            }\n            col.Clear();\n\
    \        }\n        result.Sort();\n        return result;", "        List<Tuple<long,\
    \ long>> res = new List<Tuple<long, long>>();\n        List<List<long>> row =\
    \ new List<List<long>>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            col.Clear();\n            foreach\
    \ (long col in row) {\n                col.Add(col);\n            }\n        \
    \    col.Add(x);\n            row.Add(col);\n            row.Sort();\n       \
    \     row.Reverse();\n            row.Sort();\n            row.Reverse();\n  \
    \          row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.Sort();\n            row.Reverse();\n\
    \            row.Sort();\n            row.Reverse();\n            row.Sort();\n\
    \            row.Reverse();\n            row.", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column = new\
    \ List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n    \
    \        foreach (long col in row) {\n                if (col == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(row)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> row in result) {\n            row.Item2 = (long)Math.Min(row.Item1,\
    \ row.Item2);\n        }\n        foreach (Tuple<long, long> row in column) {\n\
    \            row.Item2 = (long)Math.Max(row.Item1, row.Item2);\n        }\n  \
    \      return result;", "        var row = new List<Tuple<long, long>>();\n  \
    \      var column = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var column in row) {\n                if (column\
    \ == x) {\n                    row.Add(column);\n                    column.Add(column);\n\
    \                }\n            }\n        }\n        row.Sort();\n        column.Sort();\n\
    \        row.Reverse();\n        column.Reverse();\n        return row;", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.Reverse());\n            col.Sort();\n            foreach\
    \ (long col in col) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                    break;\n    \
    \            }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (var row in\
    \ lst) {\n            foreach (var col in row) {\n                if (col == x)\
    \ {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> t in column) {\n            row.Insert(t.Item1, t.Item2);\n\
    \        }\n        foreach (Tuple<long, long> t in row) {\n            column.Insert(t.Item1,\
    \ t.Item2);\n        }\n        result.Sort(new Comparison<Tuple<long, long>>((x,\
    \ y) => x.Item1.CompareTo(y.Item1)));\n        column.Sort(new Comparison<Tuple<long,\
    \ long>>((x, y) => x.Item2.CompareTo(y.Item2)));\n        row.Sort(new Comparison<Tuple<long,\
    \ long>>((x, y) => x.Item1.CompareTo(y.Item1)));\n        return result;", " \
    \       List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n    \
    \    List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> col = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(Tuple.Create(row.Count - 1, col.Count - 1));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(Tuple.Create(row.Count - 1, col.Count - 1));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> row = new List<Tuple<long, long>>();\n        foreach (List<long> row\
    \ in lst) {\n            row.Sort();\n            row.Reverse();\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n\
    \                }\n            }\n        }\n        result.Sort();\n       \
    \ result.Reverse();\n        return result;", "        List<Tuple<long, long>>\
    \ ret = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            row.Reverse();\n            foreach\
    \ (long c in row) {\n                if (c == x) {\n                    ret.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                }\n             \
    \   col.Add(c);\n            }\n            col.Clear();\n        }\n        ret.Sort();\n\
    \        ret.Reverse();\n        return ret;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            col.Reverse();\n            foreach\
    \ (long c in col) {\n                if (c == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                }\n            }\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<List<long>> row = new List<List<long>>();\n\
    \        List<List<long>> column = new List<List<long>>();\n        foreach (List<long>\
    \ row in lst) {\n            column.Add(row);\n        }\n        foreach (List<long>\
    \ column in column) {\n            row.Add(column);\n        }\n        foreach\
    \ (List<long> row in row) {\n            foreach (long column in row) {\n    \
    \            if (column == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(column), column.IndexOf(column)));\n                }\n  \
    \          }\n        }\n        foreach (List<long> row in row) {\n         \
    \   foreach (long column in row) {\n                if (column != x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(column), column.IndexOf(column)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in row) {\n            foreach (long column in row) {\n                if (column\
    \ != x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(column),\
    \ column.IndexOf(column)));\n                }\n            }\n        }\n   \
    \     foreach (List<long> row in row) {\n            foreach (long column in row)\
    \ {\n                if (column != x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(column), column.IndexOf(column)));\n                }\n  \
    \          }\n        }\n        foreach (List<long> row in row) {\n         \
    \   foreach (long column in row) {\n                if (column != x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(column), column.IndexOf(column)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in row) {\n            foreach (long column in row) {\n                if (column\
    \ != x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(column),\
    \ column.IndexOf(column)));\n                }\n            }\n        }\n   \
    \     foreach (List<long> row in row) {\n            foreach (long column in row)\
    \ {\n                if (column != x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(column), column.IndexOf(column)));\n                }\n  \
    \          }\n        }\n        foreach (List<long> row in row) {\n         \
    \   foreach (long column in row) {\n                if (column != x) {\n     \
    \               result.Add(new Tuple<long, long>(row.IndexOf(column), column.IndexOf(column)));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in row) {\n            foreach (long column in row) {\n                if (column\
    \ != x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(column),\
    \ column.IndexOf(column)));\n                }\n            }\n        }\n   \
    \     foreach (", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    row.Add(col);\n        \
    \            col.Add(col);\n                    result.Add(Tuple.Create(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(Tuple.Create(row.Count, col.Count));\n       \
    \         }\n            }\n        }\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<List<long>> row\
    \ = new List<List<long>>();\n        foreach (List<long> list in lst) {\n    \
    \        row.Add(list);\n        }\n        row.Sort((x, y) => x.Count > y.Count\
    \ ? 1 : -1);\n        foreach (List<long> list in row) {\n            list.Sort((x,\
    \ y) => x > y ? 1 : -1);\n        }\n        foreach (List<long> list in row)\
    \ {\n            foreach (long y in list) {\n                if (y == x) {\n \
    \                   result.Add(new Tuple<long, long>(list.IndexOf(list), list.IndexOf(list)));\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            foreach\
    \ (long c in row) {\n                col.Add(c);\n            }\n            col.Sort();\n\
    \            foreach (long c in col) {\n                if (c == x) {\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \                break;\n                }\n            }\n        }\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Add(x);\n            column.Add(x);\n            result.Add(new Tuple<long,\
    \ long>(row.Count, column.Count));\n        }\n        foreach (List<long> row\
    \ in lst) {\n            row.Remove(x);\n            column.Remove(x);\n     \
    \       result.Add(new Tuple<long, long>(row.Count, column.Count));\n        }\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Add(0);\n        }\n        row.Add(x);\n\
    \        row.Sort((x, y) => x.CompareTo(y));\n        row.Reverse();\n       \
    \ foreach (List<long> row in row) {\n            result.Add(new Tuple<long, long>(row.Count,\
    \ row.Last()));\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row.OrderByDescending(y\
    \ => y).TakeWhile(y => y != x)) {\n                result.Add(Tuple.Create(row.IndexOf(col),\
    \ col.IndexOf(row)));\n            }\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column2 =\
    \ new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column3 = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> column4 = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> column5 = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column6 = new List<Tuple<long, long>>();\n  \
    \      List<Tuple<long, long>> column7 = new List<Tuple<long, long>>();\n    \
    \    List<Tuple<long, long>> column8 = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> column9 = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column10 = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ column11 = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column12\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column13 =\
    \ new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column14 = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> column15 = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> column16 = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column17 = new List<Tuple<long, long>>();\n \
    \       List<Tuple<long, long>> column18 = new List<Tuple<long, long>>();\n  \
    \      List<Tuple<long, long>> column19 = new List<Tuple<long, long>>();\n   \
    \     List<Tuple<long, long>> column20 = new List<Tuple<long, long>>();\n    \
    \    List<Tuple<long, long>> column21 = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> column22 = new List<Tuple<long, long>>();\n      \
    \  List<Tuple<long, long>> column23 = new List<Tuple<long, long>>();\n       \
    \ List<Tuple<long, long>> column24 = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column25 = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ column26 = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column27\
    \ = new ", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \     }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    row.Add(col);\n        \
    \            col.Add(col);\n                    result.Add(new Tuple<long, long>(row.Count\
    \ - 1, col.Count - 1));\n                }\n            }\n        }\n       \
    \ foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col != x) {\n                    row.Add(col);\n        \
    \            col.Add(col);\n                    result.Add(new Tuple<long, long>(row.Count\
    \ - 1, col.Count - 1));\n                }\n            }\n        }\n       \
    \ return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            col.AddRange(row.Distinct().OrderByDescending(x =>\
    \ x).ToList());\n            col.Sort();\n            foreach (long col in col)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        result.Sort();\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> col =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  row.Add(col);\n                    col.Add(col);\n        \
    \            result.Add(new Tuple<long, long>(row.Count, col.Count));\n      \
    \          }\n            }\n        }\n        foreach (List<long> col in lst)\
    \ {\n            foreach (long row in col) {\n                if (row == x) {\n\
    \                    col.Add(row);\n                    row.Add(row);\n      \
    \              result.Add(new Tuple<long, long>(col.Count, row.Count));\n    \
    \            }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    row.Add(col);\n                    col.Add(col);\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \            }\n            }\n        }\n        foreach (List<long> col in lst)\
    \ {\n            foreach (long row in col) {\n                if (row == x) {\n\
    \                    col.Add(row);\n                    row.Add(row);\n      \
    \              result.Add(new Tuple<long, long>(col.Count, row.Count));\n    \
    \            }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    row.Add(col);\n                    col.Add(col);\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \            }\n            }\n        }\n        foreach (List<long> col in lst)\
    \ {\n            foreach (long row in col) {\n                if (row == x) {\n\
    \                    col.Add(row);\n                    row.Add(row);\n      \
    \              result.Add(new Tuple<long, long>(col.Count, row.Count));\n    \
    \            }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n\
    \                    row.Add(col);\n                    col.Add(col);\n      \
    \              result.Add(new Tuple<long, long>(row.Count, col.Count));\n    \
    \            }\n            }\n        }\n        foreach (List<long> col in lst)\
    \ {\n            foreach (long row in col) {\n                if (row == x) {\n\
    \                    col.Add(row);\n                    row.Add(row);\n      \
    \              result.Add(new Tuple<long, long>(col.Count, row.Count));\n    \
    \            }\n            }\n        }\n        foreach (List<long> row in lst)\
    \ {\n            foreach (long col in row) {\n                if (col == x) {\n",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long col in row) {\n                if (col == x) {\n          \
    \          result.Add(new Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n\
    \                }\n            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> column = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    column.Sort();\n            long rowX = row[0];\n            long rowY =\
    \ row[1];\n            long colX = column[0];\n            long colY = column[1];\n\
    \            if (rowX == x) {\n                result.Add(new Tuple<long, long>(rowX,\
    \ rowY));\n            }\n            if (rowY > x) {\n                rowY -=\
    \ 1;\n                colY -= 1;\n            }\n            if (rowY < x) {\n\
    \                rowY += 1;\n                colY += 1;\n            }\n     \
    \       if (colX == x) {\n                result.Add(new Tuple<long, long>(rowX,\
    \ rowY));\n            }\n            if (colY > x) {\n                colY -=\
    \ 1;\n                rowY -= 1;\n            }\n            if (colY < x) {\n\
    \                colY += 1;\n                rowY += 1;\n            }\n     \
    \   }\n        return result;", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        List<List<long>> row = new List<List<long>>();\n        foreach\
    \ (List<long> row in lst) {\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n        }\n        foreach\
    \ (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            row.Add(0);\n        }\n        foreach (List<long> row in lst) {\n\
    \            row.Sort();\n            row.Reverse();\n            row.Add(0);\n\
    \        }\n        foreach (List<long> row in lst) {\n            row.Sort();\n\
    \            row.Reverse();\n            row.Add(0);\n", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>>\
    \ row = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> col =\
    \ new List<Tuple<long, long>>();\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col == x) {\n  \
    \                  row.Add(col);\n                    col.Add(col);\n        \
    \            result.Add(new Tuple<long, long>(row.Count - 1, col.Count - 1));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count - 1, col.Count\
    \ - 1));\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count - 1, col.Count\
    \ - 1));\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count - 1, col.Count\
    \ - 1));\n                }\n            }\n        }\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (var row in lst) {\n            foreach (var col in row) {\n     \
    \           if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n        List<Tuple<long,\
    \ long>> column = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (List<long> row in lst) {\n            foreach (long col in row) {\n       \
    \         if (col != x) {\n                    column.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        foreach\
    \ (Tuple<long, long> column in column) {\n            row.Insert(column.Item1,\
    \ column.Item2);\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            column.Insert(row.Item1, row.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> row in row) {\n            result.Add(row);\n        }\n\
    \        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.",
  "        List<Tuple<long, long>> res = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            col.AddRange(row);\n\
    \            col.Sort();\n            foreach (long c in col) {\n            \
    \    if (c == x) {\n                    res.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        return res;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    row.Add(col);\n        \
    \            col.Add(col);\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n                    row.Add(col);\n                    col.Add(col);\n\
    \                    result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col\
    \ != x) {\n", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var row = new List<Tuple<long, long>>();\n        var col = new List<Tuple<long,\
    \ long>>();\n        var rows = new List<List<Tuple<long, long>>>();\n       \
    \ var cols = new List<List<Tuple<long, long>>>();\n        foreach (var row in\
    \ lst) {\n            if (row.Count == 0) {\n                row.Add(0);\n   \
    \             col.Add(0);\n                rows.Add(row);\n                cols.Add(col);\n\
    \            }\n            else if (row.Count == 1) {\n                row.Add(0);\n\
    \                col.Add(0);\n                rows.Add(row);\n               \
    \ cols.Add(col);\n            }\n            else {\n                row.Add(0);\n\
    \                col.Add(0);\n                rows.Add(row);\n               \
    \ cols.Add(col);\n            }\n        }\n        var rowCount = rows.Count;\n\
    \        var colCount = cols.Count;\n        var rowIndex = -1;\n        var colIndex\
    \ = -1;\n        var rowIndexMax = rowCount - 1;\n        var colIndexMax = colCount\
    \ - 1;\n        while (rowIndex < rowIndexMax && colIndex < colIndexMax) {\n \
    \           var rowValue = rows[rowIndex][colIndex];\n            var colValue\
    \ = cols[rowIndex][colIndex];\n            if (rowValue == x) {\n            \
    \    result.Add(new Tuple<long, long>(rowIndex, colIndex));\n            }\n \
    \           else if (colValue == x) {\n                result.Add(new Tuple<long,\
    \ long>(rowIndex, colIndex));\n            }\n            else if (rowValue <\
    \ x && colValue < x) {\n                rowIndex++;\n                colIndex++;\n\
    \            }\n            else if (rowValue > x && colValue > x) {\n       \
    \         rowIndex--;\n                colIndex--;\n            }\n          \
    \  else if (rowValue < x && colValue > x) {\n                rowIndex++;\n   \
    \             colIndex--;\n            }\n            else if (rowValue > x &&\
    \ colValue < x) {\n                rowIndex--;\n                colIndex++;\n\
    \            }\n            else {\n                rowIndex++;\n            \
    \    colIndex++;\n            }\n        }\n        return result;", "       \
    \ List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            foreach\
    \ (long col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.Count, col.Count));\n                }\n            }\n\
    \        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n     \
    \   result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    foreach (long c in row) {\n                col.Add(c);\n            }\n \
    \           col.Sort();\n            foreach (long c in col) {\n             \
    \   if (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    row.Reverse();\n            foreach (long col in row) {\n               \
    \ if (col == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(row),\
    \ row.IndexOf(row) + 1));\n                    break;\n                }\n   \
    \         }\n        }\n        return result;", "        List<Tuple<long, long>>\
    \ result = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> row\
    \ = new List<Tuple<long, long>>();\n        List<Tuple<long, long>> column = new\
    \ List<Tuple<long, long>>();\n        List<Tuple<long, long>> temp = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        result.Sort((x, y) => x.Item1.CompareTo(y.Item1));\n\
    \        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n        foreach (Tuple<long,\
    \ long> t in result) {\n            row.Add(t.Item1);\n            column.Add(t.Item2);\n\
    \        }\n        foreach (Tuple<long, long> t in row) {\n            temp.Add(new\
    \ Tuple<long, long>(t.Item1, t.Item2));\n        }\n        foreach (Tuple<long,\
    \ long> t in column) {\n            temp.Add(new Tuple<long, long>(t.Item2, t.Item1));\n\
    \        }\n        result.AddRange(temp);\n        return result;", "       \
    \ List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n        List<long>\
    \ row = new List<long>();\n        List<long> col = new List<long>();\n      \
    \  foreach (List<long> row in lst) {\n            row.Sort();\n            row.Reverse();\n\
    \            foreach (long c in row) {\n                col.Add(c);\n        \
    \    }\n            col.Sort();\n            col.Reverse();\n            if (col.Contains(x))\
    \ {\n                result.Add(new Tuple<long, long>(row.Count, col.Count));\n\
    \            }\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> column\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \     }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col != x) {\n  \
    \                  column.Add(col);\n                }\n            }\n      \
    \  }\n        column.Sort();\n        column.Reverse();\n        row.Sort();\n\
    \        row.Reverse();\n        result.Sort();\n        result.Reverse();\n \
    \       return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> res = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    res.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return res.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            List<long>\
    \ column = new List<long>();\n            foreach (long y in row) {\n        \
    \        if (y == x) {\n                    column.Add(y);\n                }\n\
    \            }\n            result.Add(new Tuple<long, long>(row.Count, column.Count));\n\
    \        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x =>\
    \ x.Item2).ToList();", "        var result = new List<Tuple<long, long>>();\n\
    \        var row = new List<long>();\n        var column = new List<long>();\n\
    \        foreach (var item in lst) {\n            row.Add(item.FirstOrDefault());\n\
    \            column.Add(item.LastOrDefault());\n        }\n        var sorted\
    \ = row.OrderByDescending(x => x).ThenByDescending(x => column).ToList();\n  \
    \      var sortedRow = sorted.FirstOrDefault();\n        var sortedColumn = sorted.LastOrDefault();\n\
    \        var rowIndex = row.IndexOf(sortedRow);\n        var columnIndex = column.IndexOf(sortedColumn);\n\
    \        var rowLength = row.Count;\n        var columnLength = column.Count;\n\
    \        var rowStart = 0;\n        var rowEnd = rowLength - 1;\n        var columnStart\
    \ = 0;\n        var columnEnd = columnLength - 1;\n        var rowStartIndex =\
    \ 0;\n        var rowEndIndex = rowLength - 1;\n        var columnStartIndex =\
    \ 0;\n        var columnEndIndex = columnLength - 1;\n        var rowStartValue\
    \ = sortedRow;\n        var rowEndValue = sortedRow;\n        var columnStartValue\
    \ = sortedColumn;\n        var columnEndValue = sortedColumn;\n        var rowStartValueIndex\
    \ = rowIndex;\n        var rowEndValueIndex = rowIndex;\n        var columnStartValueIndex\
    \ = columnIndex;\n        var columnEndValueIndex = columnIndex;\n        var\
    \ rowStartValueLength = rowLength;\n        var rowEndValueLength = rowLength;\n\
    \        var columnStartValueLength = columnLength;\n        var columnEndValueLength\
    \ = columnLength;\n        while (rowStartIndex < rowEndIndex && columnStartIndex\
    \ < columnEndIndex) {\n            if (rowStartValue == rowEndValue && columnStartValue\
    \ == columnEndValue) {\n                result.Add(new Tuple<long, long>(rowStartValue,\
    \ columnStartValue));\n                rowStartIndex++;\n                columnStartIndex++;\n\
    \                rowStartValueIndex++;\n                rowStartValueLength--;\n\
    \                rowEndValueIndex--;\n                columnStartValueIndex--;\n\
    \                columnStartValueLength--;\n                rowEndValueLength--;\n\
    \                columnEndValueIndex--;\n                columnEndValueLength--;\n\
    \            } else if (rowStartValue == rowEndValue && columnStartValue < columnEndValue)\
    \ {\n                rowStartValueIndex++;\n                rowStartValueLength--;\n\
    \                rowEndValueIndex--;\n                rowEndValueLength--;\n \
    \               columnStartValueIndex++;\n                columnStartValueLength--;\n\
    \                columnEndValueIndex--;\n                columnEndValueLength--;\n\
    \            } else if (rowStartValue < rowEndValue && columnStartValue == columnEndValue)\
    \ {\n                rowStartIndex++;\n                rowStartValueIndex++;\n\
    \                ", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        foreach (List<long> column in lst) {\n            row.Add(new Tuple<long,\
    \ long>(column.Count, 0));\n        }\n        row.Sort((x, y) => y.Item1.CompareTo(x.Item1));\n\
    \        foreach (Tuple<long, long> tuple in row) {\n            foreach (long\
    \ column in tuple.Item1) {\n                if (column < x) {\n              \
    \      result.Add(new Tuple<long, long>(tuple.Item1, column));\n             \
    \   }\n            }\n        }\n        result.Sort((x, y) => y.Item2.CompareTo(x.Item2));\n\
    \        return result;", "        var lst2 = new List<List<long>>();\n      \
    \  foreach (var row in lst) {\n            var lst3 = new List<long>();\n    \
    \        foreach (var col in row) {\n                lst3.Add(col);\n        \
    \    }\n            lst2.Add(lst3);\n        }\n        lst2.Sort((a, b) => a.OrderBy(z\
    \ => z).ToList().CompareTo(b.OrderBy(z => z).ToList()));\n        lst2.Sort((a,\
    \ b) => b.OrderByDescending(z => z).ToList().CompareTo(a.OrderByDescending(z =>\
    \ z).ToList()));\n        var lst3 = new List<Tuple<long, long>>();\n        foreach\
    \ (var row in lst2) {\n            var lst4 = new List<Tuple<long, long>>();\n\
    \            foreach (var col in row) {\n                if (col.Equals(x)) {\n\
    \                    lst4.Add(Tuple.Create(row.IndexOf(x), row.IndexOf(col)));\n\
    \                }\n            }\n            lst3.Add(lst4);\n        }\n  \
    \      lst3.Sort((a, b) => a.OrderBy(z => z.Item1).ToList().CompareTo(b.OrderBy(z\
    \ => z.Item1).ToList()));\n        lst3.Sort((a, b) => b.OrderByDescending(z =>\
    \ z.Item1).ToList().CompareTo(a.OrderByDescending(z => z.Item1).ToList()));\n\
    \        return lst3;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ col.IndexOf(x)));\n                }\n            }\n        }\n        result.Sort((x,\
    \ y) => x.Item1.CompareTo(y.Item1));\n        result.Sort((x, y) => x.Item2.CompareTo(y.Item2));\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ row.Sort();\n            foreach (long c in row) {\n                col.Add(c);\n\
    \            }\n            col.Sort();\n            if (col.Contains(x)) {\n\
    \                result.Add(new Tuple<long, long>(row.IndexOf(row.FindIndex(c\
    \ => c == x)), col.IndexOf(col.FindIndex(c => c == x))));\n            }\n   \
    \     }\n        result.Sort((a, b) => a.Item1.CompareTo(b.Item1));\n        result.Sort((a,\
    \ b) => b.Item2.CompareTo(a.Item2));\n        return result;", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderByDescending(x => x.Item1).ThenByDescending(x => x.Item2).ToList();",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            List<Tuple<long, long>> rowResult\
    \ = new List<Tuple<long, long>>();\n            foreach (long y in row) {\n  \
    \              if (y == x) {\n                    rowResult.Add(new Tuple<long,\
    \ long>(row.IndexOf(y), row.IndexOf(x)));\n                }\n            }\n\
    \            result.AddRange(rowResult);\n        }\n        return result.OrderBy(x\
    \ => x.Item1).ThenByDescending(x => x.Item2).ToList();", "        List<Tuple<long,\
    \ long>> result = new List<Tuple<long, long>>();\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col\
    \ == x) {\n                    result.Add(new Tuple<long, long>(row.IndexOf(col),\
    \ row.IndexOf(col)));\n                }\n            }\n        }\n        return\
    \ result.OrderBy(x => x.Item1).ThenByDescending(x => x.Item2).ToList();", "  \
    \      List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    col.AddRange(row.ToArray());\n        }\n        col.Sort();\n        foreach\
    \ (long col in col) {\n            if (col == x) {\n                result.Add(new\
    \ Tuple<long, long>(row.Count, col));\n            }\n        }\n        result.Sort();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col == x) {\n                    result.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n\
    \            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> ret = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> col = new List<Tuple<long, long>>();\n      \
    \  foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    ret.Add(new Tuple<long,\
    \ long>(row.IndexOf(row), row.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    col.Remove(col);\n\
    \                }\n            }\n        }\n        foreach (List<long> row\
    \ in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    row.Insert(row.IndexOf(row), col);\n           \
    \     }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col.Count > 0) {\n\
    \                    col.Insert(col.IndexOf(col), row);\n                }\n \
    \           }\n        }\n        foreach (List<long> row in lst) {\n        \
    \    foreach (long col in row) {\n                if (col.Count > 0) {\n     \
    \               row.Insert(row.IndexOf(row), col);\n                }\n      \
    \      }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    col.Insert(col.IndexOf(col), row);\n                }\n            }\n  \
    \      }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count > 0) {\n                    row.Insert(row.IndexOf(row),\
    \ col);\n                }\n            }\n        }\n        foreach (List<long>\
    \ row in lst) {\n            foreach (long col in row) {\n                if (col.Count\
    \ > 0) {\n                    col.Insert(col.IndexOf(col), row);\n           \
    \     }\n            }\n        }\n        foreach (List<long> row in lst) {\n\
    \            foreach (long col in row) {\n                if (col.Count > 0) {\n\
    \                    row.Insert(row.IndexOf(row), col);\n                }\n \
    \           }\n        }\n        foreach (List<long> row in lst) {\n        \
    \    foreach (long col in row) {\n                if (col.Count > 0) {\n     \
    \               col.Insert(col.IndexOf(col), row);\n                }\n      \
    \      }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col.Count > 0) {\n                \
    \    row.Insert(row.IndexOf(row), col);\n                }\n            }\n  \
    \      }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col.Count > 0) {\n                    col.Insert(col.IndexOf(col",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            row.Sort();\n        \
    \    row.Reverse();\n            foreach (long c in row) {\n                if\
    \ (c == x) {\n                    result.Add(new Tuple<long, long>(row.Count,\
    \ col.Count));\n                }\n                col.Add(c);\n            }\n\
    \            col.Clear();\n        }\n        result.Sort();\n        result.Reverse();\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> column in column)\
    \ {\n            row.Insert(column.Item1, column.Item2);\n        }\n        foreach\
    \ (Tuple<long, long> row in row) {\n            column.Insert(row.Item1, row.Item2);\n\
    \        }\n        foreach (Tuple<long, long> row in row) {\n            result.Add(row);\n\
    \        }\n        return result;", "        List<Tuple<long, long>> result =\
    \ new List<Tuple<long, long>>();\n        List<long> row = new List<long>();\n\
    \        List<long> col = new List<long>();\n        foreach (List<long> row in\
    \ lst) {\n            row.Sort();\n            foreach (long col in row) {\n \
    \               col.Sort();\n                if (col == x) {\n               \
    \     result.Add(new Tuple<long, long>(row.Count, col.Count));\n             \
    \   }\n            }\n        }\n        result.Sort();\n        return result;",
  "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n     \
    \   foreach (List<long> row in lst) {\n            foreach (long col in row) {\n\
    \                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), row.IndexOf(col)));\n                }\n           \
    \ }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<long> row = new List<long>();\n        List<long> col\
    \ = new List<long>();\n        foreach (List<long> row in lst) {\n           \
    \ foreach (long col in row) {\n                if (col == x) {\n             \
    \       result.Add(new Tuple<long, long>(row.Count, col.Count));\n           \
    \     }\n            }\n        }\n        return result.OrderBy(x => x.Item1).ThenByDescending(x\
    \ => x.Item2).ToList();", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n            }\n\
    \        }\n        foreach (List<long> row in lst) {\n            foreach (long\
    \ col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(x)));\n                }\n \
    \           }\n        }\n        foreach (Tuple<long, long> column in column)\
    \ {\n            row.Insert(column.Item1, new Tuple<long, long>(column.Item2,\
    \ column.Item1));\n        }\n        foreach (Tuple<long, long> row in row) {\n\
    \            row.Insert(0, new Tuple<long, long>(0, row.Item1));\n        }\n\
    \        return result;", "        List<Tuple<long, long>> result = new List<Tuple<long,\
    \ long>>();\n        List<Tuple<long, long>> row = new List<Tuple<long, long>>();\n\
    \        List<Tuple<long, long>> column = new List<Tuple<long, long>>();\n   \
    \     foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (List<long> row in lst) {\n            foreach\
    \ (long col in row) {\n                if (col != x) {\n                    column.Add(new\
    \ Tuple<long, long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n\
    \            }\n        }\n        foreach (Tuple<long, long> tuple in result.OrderByDescending(t\
    \ => t.Item1)) {\n            row.Add(tuple.Item2);\n            column.Add(tuple.Item2);\n\
    \        }\n        foreach (Tuple<long, long> tuple in column.OrderByDescending(t\
    \ => t.Item1)) {\n            row.Add(tuple.Item2);\n        }\n        return\
    \ row;", "        List<Tuple<long, long>> result = new List<Tuple<long, long>>();\n\
    \        List<long> row = new List<long>();\n        List<long> col = new List<long>();\n\
    \        foreach (List<long> row in lst) {\n            foreach (long col in row)\
    \ {\n                if (col == x) {\n                    result.Add(new Tuple<long,\
    \ long>(row.IndexOf(col), col.IndexOf(row)));\n                }\n           \
    \ }\n        }\n        foreach (Tuple<long, long> t in result) {\n          \
    \  t.Item1 = t.Item1 > 0 ? t.Item1 - 1 : 0;\n            t.Item2 = t.Item2 > 0\
    \ ? t.Item2 - 1 : 0;\n        }\n        return result.OrderByDescending(t =>\
    \ t.Item1).ThenByDescending(t => t.Item2).ToList();"]
stop_tokens:
- "\n    }\n"
