language: cs
name: HumanEval_68_pluck
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ == arr[i]) {\n                    smallestIndex = i;\n                }\n  \
    \              else {\n                    smallestEvenValue = arr[i];\n     \
    \               smallestIndex = i;\n                }\n            }\n       \
    \ }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac7a6d2f63a48f692a68372691aefaf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bac7a6d2f63a48f692a68372691aefaf>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <bac7a6d2f63a48f692a68372691aefaf>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_even_index = 0;\n        foreach (var node in arr)\
    \ {\n            if (node.Value % 2 == 0) {\n                if (smallest_even_value\
    \ < node.Value) {\n                    smallest_even_value = node.Value;\n   \
    \                 smallest_even_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_even_value == 0) {\n         \
    \   return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqotz_fkz.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqotz_fkz.cs(40,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpqotz_fkz.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f031e5c0d10d4d27bbf64efee4672204>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                if (foundSmallestEvenValue) {\n                    smallestIndex\
    \ = value;\n                    foundSmallestEvenValue = false;\n            \
    \    }\n                else {\n                    foundSmallestEvenValue = true;\n\
    \                    smallestEvenValue = value;\n                }\n         \
    \   }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dae209628f445f4af44c708eca91d23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8dae209628f445f4af44c708eca91d23>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8dae209628f445f4af44c708eca91d23>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index < arr.IndexOf(value)) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                    found = true;\n                 \
    \   break;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae9051ae7aab467b940b0ff8db132ec2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae9051ae7aab467b940b0ff8db132ec2>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ae9051ae7aab467b940b0ff8db132ec2>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smalest_value\
    \ = arr.Min();\n        int smalest_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smalest_value\
    \ < arr[i]) {\n                    smalest_value = arr[i];\n                 \
    \   smalest_index = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff8ba780677945bcacdef2da1a1cdbfc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff8ba780677945bcacdef2da1a1cdbfc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ff8ba780677945bcacdef2da1a1cdbfc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ > 0) {\n            long smallest_even_value = arr.Min();\n            long\
    \ smallest_even_index = arr.IndexOf(smallest_even_value);\n            bool found\
    \ = false;\n            foreach (long value in arr) {\n                if (value\
    \ % 2 == 0) {\n                    if (smallest_even_value == value) {\n     \
    \                   found = true;\n                        break;\n          \
    \          }\n                    if (smallest_even_index < arr.IndexOf(value))\
    \ {\n                        smallest_even_value = value;\n                  \
    \      smallest_even_index = arr.IndexOf(value);\n                        found\
    \ = true;\n                        break;\n                    }\n           \
    \     }\n            }\n            if (found) {\n                result.Add(smallest_even_value);\n\
    \                result.Add(smallest_even_index);\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46745c5f6bb84545a06ebeede797adf9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46745c5f6bb84545a06ebeede797adf9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        bool found = false;\n       \
    \ foreach (var item in arr) {\n            if (item % 2 == 0) {\n            \
    \    found = true;\n                if (smallest_value < item) {\n           \
    \         smallest_value = item;\n                    smallest_index = arr.IndexOf(item);\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2015190f87d44b56820a0777a1a7b7d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2015190f87d44b56820a0777a1a7b7d6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       bool is_even = true;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                is_even = true;\n                smallest_even_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                smallest_value\
    \ = n;\n            } else {\n                is_even = false;\n            }\n\
    \        }\n        if (is_even) {\n            smallest_value = smallest_even_value;\n\
    \            smallest_index = smallest_index;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ee53f1d82b4833992a8d1170da350f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d5ee53f1d82b4833992a8d1170da350f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0)\n            return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = 0;\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue =\
    \ false;\n        bool foundSmallestIndex = false;\n        long currentSmallestEvenValue\
    \ = 0;\n        long currentSmallestIndex = 0;\n        foreach (long node in\
    \ arr) {\n            if (node % 2 == 0) {\n                if (foundSmallestEvenValue)\
    \ {\n                    currentSmallestEvenValue = smallestEvenValue;\n     \
    \               currentSmallestIndex = smallestIndex;\n                }\n   \
    \             foundSmallestEvenValue = true;\n                smallestEvenValue\
    \ = node;\n                smallestIndex = arr.IndexOf(node);\n            }\n\
    \            else {\n                if (foundSmallestIndex) {\n             \
    \       if (currentSmallestEvenValue == smallestEvenValue) {\n               \
    \         currentSmallestIndex = smallestIndex;\n                    }\n     \
    \               else {\n                        foundSmallestIndex = false;\n\
    \                    }\n                }\n                else {\n          \
    \          if (currentSmallestEvenValue == smallestEvenValue) {\n            \
    \            currentSmallestIndex = smallestIndex;\n                    }\n  \
    \                  else {\n                        foundSmallestIndex = true;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n   \
    \         result.Add(currentSmallestIndex);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ded2ed9cba0f4da192834b9fbe3fe31a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ded2ed9cba0f4da192834b9fbe3fe31a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index < arr.IndexOf(value)) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7b1102b1a424aa1b699b51f79e9ee29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7b1102b1a424aa1b699b51f79e9ee29>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <d7b1102b1a424aa1b699b51f79e9ee29>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f8f753cb9f44919932d15865d35e79e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f8f753cb9f44919932d15865d35e79e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4f8f753cb9f44919932d15865d35e79e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        bool is_even = true;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n \
    \           if (is_even) {\n                if (value < smallest_value) {\n  \
    \                  smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            } else {\n                if (value > smallest_value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                }\n            }\n            is_even = !is_even;\n  \
    \      }\n        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_value_2 = arr[smallest_index];\n        bool\
    \ is_even_2 = true;\n        for (int i = smallest_index + 1; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (is_even_2) {\n        \
    \        if (value < smallest_value_2) {\n                    smallest_value_2\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \       } else {\n                if (value > smallest_value_2) {\n          \
    \          smallest_value_2 = value;\n                    smallest_index = i;\n\
    \                }\n            }\n            is_even_2 = !is_even_2;\n     \
    \   }\n        result.Add(smallest_value_2);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25e36d5cbc3d4f2ea8404ef4acd68759>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25e36d5cbc3d4f2ea8404ef4acd68759>:0 \n\nUnhandled Exception:\n\
    System.ArgumentOutOfRangeException: Index was out of range. Must be non-negative\
    \ and less than the size of the collection.\nParameter name: index\n  at System.Collections.Generic.List`1[T].get_Item\
    \ (System.Int32 index) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at\
    \ Problem.Pluck (System.Collections.Generic.List`1["
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        long smallest_even_value\
    \ = 0;\n        foreach (long value in arr) {\n            if (value % 2 == 0)\
    \ {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             smallest_even_value = value / 2;\n                } else {\n   \
    \                 if (value < smallest_even_value) {\n                       \
    \ smallest_even_value = value;\n                        smallest_index = arr.IndexOf(value);\n\
    \                    }\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <719cf15f1a4247768117e9ec08329bbf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <719cf15f1a4247768117e9ec08329bbf>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <719cf15f1a4247768117e9ec08329bbf>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                smallest_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                found\
    \ = true;\n                break;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9585d5b10f9641ebac7bd8cd8e869557>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9585d5b10f9641ebac7bd8cd8e869557>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min();\n        int smallestIndex = -1;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEven\
    \ == arr[i]) {\n                    smallestIndex = i;\n                }\n  \
    \              else if (smallestEven == arr[i] && smallestIndex == -1) {\n   \
    \                 smallestIndex = i;\n                }\n            }\n     \
    \   }\n        if (smallestIndex != -1) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2808359769423b9c57a71892c4d6c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d2808359769423b9c57a71892c4d6c3>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4d2808359769423b9c57a71892c4d6c3>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestEvenValue == arr[i]) {\n          \
    \          foundSmallestEvenValue = true;\n                    smallestIndex =\
    \ i;\n                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdd699de956473691d07807d7f43d4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdd699de956473691d07807d7f43d4a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <3cdd699de956473691d07807d7f43d4a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (smallest_value == 0) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                } else {\n                    if (arr[i] < smallest_value)\
    \ {\n                        smallest_value = arr[i];\n                      \
    \  smallest_index = i;\n                        found = true;\n              \
    \      }\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93f13c78789d4e3db0cd65af98b28817>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <93f13c78789d4e3db0cd65af98b28817>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long node in arr) {\n            if (node % 2 == 0) {\n          \
    \      found = true;\n                if (smallest_value < node) {\n         \
    \           smallest_value = node;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <897e36d720c04c3bb75ca7ab7ca8cf43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <897e36d720c04c3bb75ca7ab7ca8cf43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ > arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06d8643cb77c4db09b19d3b6245a24f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06d8643cb77c4db09b19d3b6245a24f3>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <06d8643cb77c4db09b19d3b6245a24f3>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ > 0) {\n            long smallest_value = arr.Min();\n            int smallest_index\
    \ = arr.FindIndex(x => x == smallest_value);\n            if (smallest_value %\
    \ 2 == 0) {\n                result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \            } else {\n                for (int i = 0; i < arr.Count; i++) {\n\
    \                    if (arr[i] == smallest_value) {\n                       \
    \ result.Add(arr[i]);\n                        result.Add(smallest_index);\n \
    \                       break;\n                    }\n                }\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d07eef451e6f43dcb903dd5082d7cd95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d07eef451e6f43dcb903dd5082d7cd95>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest_value = 0;\n        int smallest_index = 0;\n\
    \        List<long> result = new List<long>();\n        foreach (var node in arr)\
    \ {\n            if (node.Value % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = node.Value;\n                \
    \    smallest_index = arr.IndexOf(node);\n                }\n                else\
    \ if (smallest_value < node.Value) {\n                    smallest_value = node.Value;\n\
    \                    smallest_index = arr.IndexOf(node);\n                }\n\
    \            }\n        }\n        if (smallest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpne7ljhx6.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpne7ljhx6.cs(41,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpne7ljhx6.cs(44,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpne7ljhx6.cs(45,43): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_even_index = 0;\n        foreach (var item in arr)\
    \ {\n            if (item % 2 == 0) {\n                if (smallest_even_value\
    \ < item) {\n                    smallest_even_value = item;\n               \
    \     smallest_even_index = arr.IndexOf(item);\n                }\n          \
    \  }\n        }\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e41002f120b4c6b95b7bfe7ad7718e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e41002f120b4c6b95b7bfe7ad7718e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        long smallest_even_value\
    \ = -1;\n        foreach (long value in arr) {\n            if (value % 2 == 0)\
    \ {\n                if (smallest_even_value == -1) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = value;\n                } else\
    \ if (value < smallest_even_value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = value;\n                }\n \
    \           }\n        }\n        if (smallest_even_value == -1) {\n         \
    \   return result;\n        }\n        result.Add(smallest_even_value);\n    \
    \    result.Add(smallest_index);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <480ddba76e644edcb89294d207f3f0fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <480ddba76e644edcb89294d207f3f0fb>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <480ddba76e644edcb89294d207f3f0fb>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                if\
    \ (smallest_even_value < n) {\n                    smallest_even_value = n;\n\
    \                    smallest_index = arr.IndexOf(n);\n                }\n   \
    \             found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54bc89df63be43c9ae16a1f2e1d5bc67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54bc89df63be43c9ae16a1f2e1d5bc67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = 0;\n        long smalest_index = 0;\n \
    \       List<long> result = new List<long>();\n        foreach (var node in arr)\
    \ {\n            if (node.Value % 2 == 0) {\n                smalest_value = Math.Min(smalest_value,\
    \ node.Value);\n                smalest_index = Math.Min(smalest_index, node.Index);\n\
    \            }\n        }\n        if (smalest_value == 0) {\n            return\
    \ new List<long>();\n        }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmukp8igb.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpmukp8igb.cs(40,62): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpmukp8igb.cs(41,62): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n    \
    \    if (smallestIndex == -1) {\n            return result;\n        }\n     \
    \   bool found = false;\n        foreach (long n in arr) {\n            if (n\
    \ % 2 == 0) {\n                if (smallestEven < n) {\n                    smallestEven\
    \ = n;\n                    smallestIndex = arr.IndexOf(n);\n                }\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bfc5c95ecb24aedb72dc2e07106ca41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5bfc5c95ecb24aedb72dc2e07106ca41>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5bfc5c95ecb24aedb72dc2e07106ca41>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min(x => x % 2 == 0 ? x : 0);\n        long smallestIndex = arr.IndexOf(smallestEven);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       bool found = false;\n        foreach (var item in arr) {\n           \
    \ if (item % 2 == 0) {\n                if (smallestEven < item) {\n         \
    \           smallestEven = item;\n                    smallestIndex = arr.IndexOf(item);\n\
    \                }\n                found = true;\n            }\n        }\n\
    \        if (!found) {\n            return result;\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <475eeffdc3ba4c228effc7f9647fa283>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <475eeffdc3ba4c228effc7f9647fa283>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <47"
  stdout: ''
  timestamp: 1659798684
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallest_even_value == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> evens = new List<long>();\n        foreach (var\
    \ item in arr) {\n            if (item % 2 == 0) {\n                evens.Add(item);\n\
    \            }\n        }\n        evens.Sort();\n        smallest_even_value\
    \ = evens[0];\n        smallest_index = evens.IndexOf(smallest_even_value);\n\
    \        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <679b0771baaa4ddbbabd637c5edc5c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <679b0771baaa4ddbbabd637c5edc5c2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798684
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                smallest_index = i;\n    \
    \        }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <508385c6b4834bd78537d1a61f71666b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <508385c6b4834bd78537d1a61f71666b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestEvenValue % 2 == 0) {\n            smallestEvenValue = smallestEvenValue\
    \ / 2;\n        }\n        if (smallestIndex != -1) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe9d0ce83c2b4d4aa2f312002761d838>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe9d0ce83c2b4d4aa2f312002761d838>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <fe9d0ce83c2b4d4aa2f312002761d838>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        long smallest_even_value\
    \ = 0;\n        bool found = false;\n        foreach (long value in arr) {\n \
    \           if (value % 2 == 0) {\n                found = true;\n           \
    \     smallest_even_value = value;\n            }\n            if (value == smallest_value)\
    \ {\n                smallest_index = arr.IndexOf(value);\n            }\n   \
    \     }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51954383a94f4ce7b1cedd6806ee1f30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <51954383a94f4ce7b1cedd6806ee1f30>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <51954383a94f4ce7b1cedd6806ee1f30>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        List<long> even_values = new List<long>();\n        for (int i =\
    \ 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n             \
    \   even_values.Add(arr[i]);\n            }\n        }\n        long smallest_value\
    \ = even_values.Min();\n        int smallest_index = even_values.IndexOf(smallest_value);\n\
    \        if (smallest_index == -1) {\n            return result;\n        }\n\
    \        result.Add(smallest_value);\n        result.Add(smallest_index);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de15d75b927d4a578ffaf5bdf6163b0b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de15d75b927d4a578ffaf5bdf6163b0b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <de15d75b927d4a578ffaf5bdf6163b0b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min();\n        int smallestIndex = arr.IndexOf(smallestEven);\n     \
    \   if (smallestIndex > 0) {\n            result.Add(smallestEven);\n        }\n\
    \        else {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7c07b18a9df409cb672ead1cb952dfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e7c07b18a9df409cb672ead1cb952dfe>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <e7c07b18a9df409cb672ead1cb952dfe>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallest_even_value == n) {\n          \
    \          found = true;\n                    break;\n                }\n    \
    \            if (smallest_even_index < arr.IndexOf(n)) {\n                   \
    \ smallest_even_value = n;\n                    smallest_even_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <899ea726e67e477691c4e36ca5cc5a28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <899ea726e67e477691c4e36ca5cc5a28>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <899ea726e67e477691c4e36ca5cc5a28>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    smallest_index\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        bool found2 = false;\n        for (int i = smallest_index\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n  \
    \              found2 = true;\n                break;\n            }\n       \
    \ }\n        if (found2) {\n            for (int i = smallest_index + 1; i < arr.Count;\
    \ i++) {\n                if (arr[i] == smallest_value) {\n                  \
    \  smallest_index = i;\n                    break;\n                }\n      \
    \      }\n        }\n        if (smallest_index == arr.Count - 1) {\n        \
    \    return result;\n        }\n        bool found3 = false;\n        for (int\
    \ i = smallest_index + 1; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found3 = true;\n                break;\n            }\n \
    \       }\n        if (found3) {\n            for (int i = smallest_index + 1;\
    \ i < arr.Count; i++) {\n                if (arr[i] == smallest_value) {\n   \
    \                 smallest_index = i;\n                    break;\n          \
    \      }\n            }\n        }\n        if (smallest_index == arr.Count -\
    \ 1) {\n            return result;\n        }\n        bool found4 = false;\n\
    \        for (int i = smallest_index + 1; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_value) {\n                found4 = true;\n             \
    \   break;\n            }\n        }\n        if (found4) {\n            for (int\
    \ i = smallest_index + 1; i < arr.Count; i++) {\n                if (arr[i] ==\
    \ smallest_value) {\n                    smallest_index = i;\n               \
    \     break;\n                }\n            }\n        }\n        if (smallest_index\
    \ == arr.Count - 1) {\n            return result;\n        }\n        bool found5\
    \ = false;\n        for (int i = smallest_index + 1; i < arr.Count; i++) {\n \
    \           if (arr[i] == smallest_value) {\n                found5 = true;\n\
    \                break;\n            }\n        }\n        if (found5) {\n   \
    \         for (int i = smallest_index + 1; i < arr.Count; i++) {\n           \
    \     if (arr[i] == smallest_value) {\n                    smallest_index = i;\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (smallest_index == arr.Count - 1) {\n            return result;\n   \
    \     }\n        bool found6 = false;\n        for (int i = smallest_\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu_fo17p.cs(134,31): error CS1002: ; expected

    /tmp/tmpgu_fo17p.cs(134,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpgu_fo17p.cs(134,31): error CS1026: ) expected

    '
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index < arr.IndexOf(value)) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                    found = true;\n                 \
    \   break;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae9051ae7aab467b940b0ff8db132ec2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae9051ae7aab467b940b0ff8db132ec2>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ae9051ae7aab467b940b0ff8db132ec2>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smalest_value\
    \ = arr.Min();\n        int smalest_index = arr.IndexOf(smalest_value);\n    \
    \    long smalest_even_value = smalest_value % 2 == 0 ? smalest_value : smalest_value\
    \ - 1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            long value = arr[i];\n            if (value == smalest_value)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \          if (value == smalest_even_value) {\n                found = true;\n\
    \                break;\n            }\n            if (value == smalest_index)\
    \ {\n                found = true;\n                break;\n            }\n  \
    \      }\n        if (found) {\n            result.Add(smalest_value);\n     \
    \       result.Add(smalest_index);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0caedde54daa4e0b8ebe3fe6186551fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0caedde54daa4e0b8ebe3fe6186551fc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0caedde54daa4e0b8ebe3fe6186551fc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value == arr[i]) {\n                    found = true;\n          \
    \          smallest_value = arr[i];\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3605c3738a84a1e9bbd7f1978f6c252>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e3605c3738a84a1e9bbd7f1978f6c252>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <e3605c3738a84a1e9bbd7f1978f6c252>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0)\n            return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long smalest_value = arr.Min();\n\
    \        int smalest_index = 0;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smalest_value < arr[i])\
    \ {\n                    smalest_value = arr[i];\n                    smalest_index\
    \ = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <804b0aa5c6634e7996d7cd34d57b03ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <804b0aa5c6634e7996d7cd34d57b03ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                }\n                else if (smallest_value < arr[i])\
    \ {\n                    smallest_value = arr[i];\n                    smallest_index\
    \ = i;\n                }\n            }\n        }\n        if (found) {\n  \
    \          result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <288c4a3d8ab64b56acc67ad09126d5c7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <288c4a3d8ab64b56acc67ad09126d5c7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <288c4a3d8ab64b56acc67ad09126d5c7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        long smallestValue =\
    \ smallestEvenValue;\n        long largestEvenValue = arr.Max();\n        long\
    \ largestIndex = 0;\n        long largestValue = largestEvenValue;\n        foreach\
    \ (long value in arr) {\n            if (value % 2 == 0) {\n                if\
    \ (value < smallestValue) {\n                    smallestValue = value;\n    \
    \                smallestIndex = arr.IndexOf(value);\n                }\n    \
    \            if (value > largestValue) {\n                    largestValue = value;\n\
    \                    largestIndex = arr.IndexOf(value);\n                }\n \
    \           }\n        }\n        if (smallestValue == smallestEvenValue) {\n\
    \            result.Add(smallestValue);\n            result.Add(smallestIndex);\n\
    \        } else {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        if (largestValue == largestEvenValue) {\n            result.Add(largestValue);\n\
    \            result.Add(largestIndex);\n        } else {\n            result.Add(largestEvenValue);\n\
    \            result.Add(largestIndex);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2742bd4b7e8c4cbcae039990e738cb3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2742bd4b7e8c4cbcae039990e738cb3a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <2742bd4b7e8c4cbcae039990e738cb3a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallest_even_value < n) {\n           \
    \         smallest_even_value = n;\n                    smallest_even_index =\
    \ arr.IndexOf(n);\n                    found = true;\n                }\n    \
    \        }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dce6ba82d6143a9aeba7675ef4f3e6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dce6ba82d6143a9aeba7675ef4f3e6f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4dce6ba82d6143a9aeba7675ef4f3e6f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        foreach (var item in arr) {\n            if\
    \ (item % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    if (smallest_index == arr.IndexOf(item)) {\n        \
    \                result.Add(smallest_value);\n                        result.Add(smallest_index);\n\
    \                        break;\n                    }\n                    else\
    \ {\n                        smallest_value = item;\n                        smallest_index\
    \ = arr.IndexOf(item);\n                    }\n                }\n           \
    \     else {\n                    smallest_value = item;\n                   \
    \ smallest_index = arr.IndexOf(item);\n                }\n            }\n    \
    \    }\n        if (result.Count == 0) {\n            return new List<long>();\n\
    \        }\n        else {\n            return result;\n        }\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e0bfe98589947f791b69ae70efa066b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8e0bfe98589947f791b69ae70efa066b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8e0bfe98589947f791b69ae70efa066b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        bool foundSmallestIndex = false;\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     foundSmallestEvenValue = true;\n                }\n                if (smallestIndex\
    \ < value) {\n                    smallestIndex = value;\n                   \
    \ foundSmallestIndex = true;\n                }\n            }\n        }\n  \
    \      if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        if (result.Count\
    \ == 0) {\n            return new List<long>();\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <057fd9740e9443f181eaa56a51a7e6af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <057fd9740e9443f181eaa56a51a7e6af>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <057fd9740e9443f181eaa56a51a7e6af>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest_even_value = arr.Min(x => x % 2 == 0 ? x : 0);\n\
    \        List<long> result = new List<long>();\n        long smallest_index =\
    \ 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] %\
    \ 2 == 0) {\n                if (arr[i] < smallest_even_value) {\n           \
    \         smallest_even_value = arr[i];\n                    smallest_index =\
    \ i;\n                }\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c901e5def1f4fcf975ee4a26cc181a6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c901e5def1f4fcf975ee4a26cc181a6>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00001] in <3c"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEven\
    \ < arr[i]) {\n                    smallestEven = arr[i];\n                  \
    \  smallestIndex = i;\n                }\n            }\n        }\n        result.Add(smallestEven);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fda3509a9fdb40e9a6cc602129df6dad>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fda3509a9fdb40e9a6cc602129df6dad>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <fda3509a9fdb40e9a6cc602129df6dad>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != arr.IndexOf(smalest_value)) {\n            smalest_value = arr.Min();\n \
    \           smalest_index = 0;\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b5a1f3acc674b0f8da46d813f76c63e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5b5a1f3acc674b0f8da46d813f76c63e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <5b5a1f3acc674b0f8da46d813f76c63e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798684
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = 0;\n        long smallestIndex = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                smallestEvenValue = item;\n\
    \                smallestIndex = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallestEvenValue == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04d47c68c74c43459cb0a5f1573cf6bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04d47c68c74c43459cb0a5f1573cf6bd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798684
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var item in arr) {\n            if (item % 2 == 0) {\n           \
    \     if (smallest_value == 0) {\n                    smallest_value = item;\n\
    \                    smallest_index = arr.IndexOf(item);\n                   \
    \ found = true;\n                } else if (smallest_value < item) {\n       \
    \             smallest_value = item;\n                    smallest_index = arr.IndexOf(item);\n\
    \                    found = true;\n                }\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c357b9fdaee40f88afe0a78601842ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0c357b9fdaee40f88afe0a78601842ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798684
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (smallestEvenValue\
    \ < value) {\n                    smallestEvenValue = value;\n               \
    \     smallestIndex = arr.IndexOf(value);\n                }\n            }\n\
    \        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8cd0f12a0f643169e9f49139011bc1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a8cd0f12a0f643169e9f49139011bc1f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <a8cd0f12a0f643169e9f49139011bc1f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smalest_value\
    \ = arr.Min();\n        long smalest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smalest_value < arr[i]) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22fc8736b6a040aaac2cfd06689986ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <22fc8736b6a040aaac2cfd06689986ae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n \
    \           long value = arr[i];\n            if (value % 2 == 0) {\n        \
    \        if (smallest_even_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = i;\n                }\n     \
    \           if (smallest_even_value == value) {\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   smallest_value = arr[smallest_index];\n            result.Add(smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprb0taszk.cs(53,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = arr.Min();\n        List<long> result =\
    \ new List<long>();\n        long smallest_index = -1;\n        bool found = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallest_index == -1) {\n                    smallest_index = n;\n\
    \                    found = true;\n                } else {\n               \
    \     if (n < smallest_index) {\n                        smallest_index = n;\n\
    \                        found = true;\n                    }\n              \
    \  }\n            }\n        }\n        if (found) {\n            result.Add(smallest_index);\n\
    \            result.Add(smalest_value);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48bb3116fad744febf84fdd90078dc66>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <48bb3116fad744febf84fdd90078dc66>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <48bb3116fad744febf84fdd90078dc66>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        bool found = false;\n       \
    \ foreach (var item in arr) {\n            if (item % 2 == 0) {\n            \
    \    found = true;\n                smallest_value = item;\n                smallest_index\
    \ = arr.IndexOf(item);\n            }\n        }\n        if (found) {\n     \
    \       result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ddd67be1caf47e6b5354744c01ec07c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ddd67be1caf47e6b5354744c01ec07c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = 0;\n        long smalest_index = 0;\n \
    \       long smalest_even_value = 0;\n        long smalest_even_index = 0;\n \
    \       long smalest_even_index_2 = 0;\n        long smalest_even_index_3 = 0;\n\
    \        long smalest_even_index_4 = 0;\n        long smalest_even_index_5 = 0;\n\
    \        long smalest_even_index_6 = 0;\n        long smalest_even_index_7 = 0;\n\
    \        long smalest_even_index_8 = 0;\n        long smalest_even_index_9 = 0;\n\
    \        long smalest_even_index_10 = 0;\n        long smalest_even_index_11 =\
    \ 0;\n        long smalest_even_index_12 = 0;\n        long smalest_even_index_13\
    \ = 0;\n        long smalest_even_index_14 = 0;\n        long smalest_even_index_15\
    \ = 0;\n        long smalest_even_index_16 = 0;\n        long smalest_even_index_17\
    \ = 0;\n        long smalest_even_index_18 = 0;\n        long smalest_even_index_19\
    \ = 0;\n        long smalest_even_index_20 = 0;\n        long smalest_even_index_21\
    \ = 0;\n        long smalest_even_index_22 = 0;\n        long smalest_even_index_23\
    \ = 0;\n        long smalest_even_index_24 = 0;\n        long smalest_even_index_25\
    \ = 0;\n        long smalest_even_index_26 = 0;\n        long smalest_even_index_27\
    \ = 0;\n        long smalest_even_index_28 = 0;\n        long smalest_even_index_29\
    \ = 0;\n        long smalest_even_index_30 = 0;\n        long smalest_even_index_31\
    \ = 0;\n        long smalest_even_index_32 = 0;\n        long smalest_even_index_33\
    \ = 0;\n        long smalest_even_index_34 = 0;\n        long smalest_even_index_35\
    \ = 0;\n        long smalest_even_index_36 = 0;\n        long smalest_even_index_37\
    \ = 0;\n        long smalest_even_index_38 = 0;\n        long smalest_even_index_39\
    \ = 0;\n        long smalest_even_index_40 = 0;\n        long smalest_even_index_41\
    \ = 1;\n        long smalest_even_index_42 = 1;\n        long smalest_even_index_43\
    \ = 1;\n        long smalest_even_index_44 = 1;\n        long smalest_even_index_45\
    \ = 1;\n        long smalest_even_index_46 = 1;\n        long smalest_even_index_47\
    \ = 1;\n        long smalest_even_index_48 = 1;\n        long smalest_even_index_49\
    \ = 1;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprsybkn3y.cs(35,14): warning CS0219: The variable ''smalest_value'' is
    assigned but its value is never used

    /tmp/tmprsybkn3y.cs(36,14): warning CS0219: The variable ''smalest_index'' is
    assigned but its value is never used

    /tmp/tmprsybkn3y.cs(37,14): warning CS0219: The variable ''smalest_even_value''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(38,14): warning CS0219: The variable ''smalest_even_index''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(39,14): warning CS0219: The variable ''smalest_even_index_2''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(40,14): warning CS0219: The variable ''smalest_even_index_3''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(41,14): warning CS0219: The variable ''smalest_even_index_4''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(42,14): warning CS0219: The variable ''smalest_even_index_5''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(43,14): warning CS0219: The variable ''smalest_even_index_6''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(44,14): warning CS0219: The variable ''smalest_even_index_7''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(45,14): warning CS0219: The variable ''smalest_even_index_8''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(46,14): warning CS0219: The variable ''smalest_even_index_9''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(47,14): warning CS0219: The variable ''smalest_even_index_10''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(48,14): warning CS0219: The variable ''smalest_even_index_11''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(49,14): warning CS0219: The variable ''smalest_even_index_12''
    is assigned but its value is never used

    /tmp/tmprsybkn3y.cs(50,14): warning CS0219: The variable ''smalest_even_index_13''
    is assigned but its value is never used

    /tmp/tmprsybkn3'
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = 0;\n        long smallestIndex = 0;\n        foreach (long n in arr) {\n \
    \           if (n % 2 == 0) {\n                smallestEvenValue = n;\n      \
    \          smallestIndex = arr.IndexOf(n);\n            }\n        }\n       \
    \ if (smallestEvenValue == 0) {\n            return result;\n        }\n     \
    \   List<long> evenValues = new List<long>();\n        List<long> evenIndexes\
    \ = new List<long>();\n        foreach (long n in arr) {\n            if (n %\
    \ 2 == 0) {\n                evenValues.Add(n);\n                evenIndexes.Add(arr.IndexOf(n));\n\
    \            }\n        }\n        smallestEvenValue = evenValues.Min();\n   \
    \     smallestIndex = evenIndexes.Min();\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6ab83f4d8bf4dc1bc2d52d3d3653f9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6ab83f4d8bf4dc1bc2d52d3d3653f9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var item in arr) {\n            if (item % 2 == 0) {\n           \
    \     smallest_even_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (found) {\n            result.Add(smallest_even_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed58cf341efe4f638af2e5002b8d1b3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed58cf341efe4f638af2e5002b8d1b3a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = smallest_even_index\
    \ + 1; i < arr.Count; i++) {\n            long value = arr[i];\n            if\
    \ (value % 2 == 0) {\n                found = true;\n                if (value\
    \ < smallest_value) {\n                    smallest_value = value;\n         \
    \           smallest_index = i;\n                }\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbrdn2eet.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpbrdn2eet.cs(44,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smalest_value\
    \ = arr.Min();\n        int smalest_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smalest_value\
    \ < arr[i]) {\n                    smalest_value = arr[i];\n                 \
    \   smalest_index = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff8ba780677945bcacdef2da1a1cdbfc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff8ba780677945bcacdef2da1a1cdbfc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ff8ba780677945bcacdef2da1a1cdbfc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        foreach (var item\
    \ in arr) {\n            if (item % 2 == 0) {\n                if (smallest_value\
    \ == smallest_even_value) {\n                    smallest_value = item;\n    \
    \                smallest_index = arr.IndexOf(item);\n                    found\
    \ = true;\n                }\n                else if (smallest_value == item)\
    \ {\n                    smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                    found = true;\n                }\n\
    \                else if (smallest_value < item) {\n                    smallest_value\
    \ = item;\n                    smallest_index = arr.IndexOf(item);\n         \
    \           found = true;\n                }\n            }\n        }\n     \
    \   if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f123a4fb2dfa4e84ae9ecd64de15a15b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f123a4fb2dfa4e84ae9ecd64de15a15b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f123a4fb2dfa4e84ae9ecd64de15a15b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                smallest_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45959d85d8de468db66800d6adf0a761>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45959d85d8de468db66800d6adf0a761>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ < n) {\n                    smalest_value = n;\n                    smalest_index\
    \ = arr.IndexOf(n);\n                }\n            }\n        }\n        if (smalest_index\
    \ != 0) {\n            result.Add(smalest_value);\n            result.Add(smalest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e025fe8cbab841f0a0136e3b05ae7bb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e025fe8cbab841f0a0136e3b05ae7bb9>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <e025fe8cbab841f0a0136e3b05ae7bb9>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_even_value);\n\
    \            return result;\n        }\n        long smallest_odd_value = arr[smallest_even_index\
    \ + 1];\n        long smallest_odd_index = arr.IndexOf(smallest_odd_value);\n\
    \        if (smallest_odd_index == arr.Count - 1) {\n            result.Add(smallest_odd_value);\n\
    \            return result;\n        }\n        long smallest_odd_value_2 = arr[smallest_odd_index\
    \ + 1];\n        long smallest_odd_index_2 = arr.IndexOf(smallest_odd_value_2);\n\
    \        if (smallest_odd_index_2 == arr.Count - 1) {\n            result.Add(smallest_odd_value_2);\n\
    \            return result;\n        }\n        long smallest_odd_value_3 = arr[smallest_odd_index_2\
    \ + 1];\n        long smallest_odd_index_3 = arr.IndexOf(smallest_odd_value_3);\n\
    \        if (smallest_odd_index_3 == arr.Count - 1) {\n            result.Add(smallest_odd_value_3);\n\
    \            return result;\n        }\n        long smallest_odd_value_4 = arr[smallest_odd_index_3\
    \ + 1];\n        long smallest_odd_index_4 = arr.IndexOf(smallest_odd_value_4);\n\
    \        if (smallest_odd_index_4 == arr.Count - 1) {\n            result.Add(smallest_odd_value_4);\n\
    \            return result;\n        }\n        long smallest_odd_value_5 = arr[smallest_odd_index_4\
    \ + 1];\n        long smallest_odd_index_5 = arr.IndexOf(smallest_odd_value_5);\n\
    \        if (smallest_odd_index_5 == arr.Count - 1) {\n            result.Add(smallest_odd_value_5);\n\
    \            return result;\n        }\n        long smallest_odd_value_6 = arr[smallest_odd_index_5\
    \ + 1];\n        long smallest_odd_index_6 = arr.IndexOf(smallest_odd_value_6);\n\
    \        if (smallest_odd_index_6 == arr.Count - 1) {\n            result.Add(smallest_odd_value_6);\n\
    \            return result;\n        }\n        long smallest_odd_value_7 = arr[smallest_odd_index_6\
    \ + 1];\n        long smallest_odd_index_7 = arr.IndexOf(smallest_odd_value_7);\n\
    \        if (smallest_odd_index_7 == arr.Count - 1) {\n            result.Add(smallest_odd_value_7);\n\
    \            return result;\n        }\n        long smallest_odd_value_8 = arr[smallest_odd_index_7\
    \ + 1];\n        long smallest_od\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk42xdrsl.cs(85,25): error CS1002: ; expected

    '
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f031e5c0d10d4d27bbf64efee4672204>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            int smallest_index = smallest_even_index;\n \
    \           while (smallest_index != -1) {\n                if (arr[smallest_index]\
    \ % 2 == 0) {\n                    smallest_value = arr[smallest_index];\n   \
    \                 smallest_index = smallest_even_index;\n                } else\
    \ {\n                    smallest_index--;\n                }\n            }\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            return result;\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj6n_9s8i.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpj6n_9s8i.cs(51,17): error CS0136: A local or parameter named ''smallest_index''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpj6n_9s8i.cs(51,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpj6n_9s8i.cs(55,38): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            for (int i = 0; i < arr.Count; i++) {\n     \
    \           if (arr[i] == smallest_value) {\n                    smallest_index\
    \ = i;\n                    break;\n                }\n            }\n       \
    \ }\n        if (smallest_index != smallest_even_index) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpszlbqz9j.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            int index = smallest_even_index;\n\
    \            while (index > 0) {\n                index--;\n                if\
    \ (arr[index] % 2 == 0) {\n                    break;\n                }\n   \
    \         }\n            result.Add(smallest_value);\n            result.Add(index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfwf4z9p7.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpfwf4z9p7.cs(50,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var item in arr) {\n            if (item % 2 == 0) {\n           \
    \     smallest_even_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ec65a47d12046d7bf7bd90acd5ca0df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9ec65a47d12046d7bf7bd90acd5ca0df>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0)\n            return new List<long>();\n\
    \        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        List<long> result = new List<long>();\n\
    \        if (smallest_even_index != -1)\n            result.Add(smallest_even_value);\n\
    \        if (arr.Count > 1)\n            result.Add(smallest_even_index);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <228566d4f7e04e6babafcf9e4d71b340>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <228566d4f7e04e6babafcf9e4d71b340>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long i in arr) {\n            if\
    \ (i % 2 == 0) {\n                if (i == smallest_even_value) {\n          \
    \          found = true;\n                }\n            }\n        }\n      \
    \  if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3082728a2fb54b3a8444f1dfb931d04c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3082728a2fb54b3a8444f1dfb931d04c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <3082728a2fb54b3a8444f1dfb931d04c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_even_value = 0;\n\
    \        long smallest_even_index = 0;\n        bool found = false;\n        foreach\
    \ (var node in arr) {\n            if (found == true) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                    smallest_even_value = smallest_value\
    \ % 2;\n                    smallest_even_index = smallest_index;\n          \
    \      }\n                else if (smallest_value == node % 2) {\n           \
    \         smallest_even_value = smallest_value % 2;\n                    smallest_even_index\
    \ = arr.IndexOf(node);\n                }\n                else {\n          \
    \          if (smallest_value == smallest_even_value) {\n                    \
    \    smallest_index = arr.IndexOf(node);\n                    }\n            \
    \    }\n            }\n            else {\n                if (node % 2 == 0)\
    \ {\n                    smallest_even_value = node % 2;\n                   \
    \ smallest_even_index = arr.IndexOf(node);\n                }\n              \
    \  else {\n                    if (node < smallest_value) {\n                \
    \        smallest_value = node;\n                        smallest_index = arr.IndexOf(node);\n\
    \                    }\n                }\n            }\n            found =\
    \ true;\n        }\n        if (smallest_value == 0) {\n            result.Add(0);\n\
    \        }\n        else if (smallest_value == smallest_even_value) {\n      \
    \      result.Add(smallest_even_index);\n        }\n        else {\n         \
    \   result.Add(smallest_value);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <104b2de0290e46a0aa75da992bc530e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <104b2de0290e46a0aa75da992bc530e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallest_even_value == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result_list = new List<long>();\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (item\
    \ < smallest_even_value) {\n                    result_list.Add(item);\n     \
    \           }\n            }\n        }\n        if (result_list.Count > 0) {\n\
    \            result_list.Insert(smallest_index, smallest_even_value);\n      \
    \  }\n        return result_list;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptrv1hamh.cs(56,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValue\
    \ = true;\n        bool isSmallestIndex = true;\n        long smallestIndexValue\
    \ = arr.Min();\n        long smallestEvenValueValue = arr.Min();\n        bool\
    \ isSmallestIndexValue = true;\n        bool isSmallestEvenValueValue = true;\n\
    \        foreach (long value in arr) {\n            if (value % 2 == 0) {\n  \
    \              if (smallestEvenValue < value) {\n                    smallestEvenValue\
    \ = value;\n                    smallestEvenValueValue = value;\n            \
    \        isSmallestEvenValue = true;\n                }\n                if (smallestIndex\
    \ < value) {\n                    smallestIndex = value;\n                   \
    \ isSmallestIndex = true;\n                }\n                if (smallestIndexValue\
    \ < value) {\n                    smallestIndexValue = value;\n              \
    \      isSmallestIndexValue = true;\n                }\n                if (smallestEvenValueValue\
    \ < value) {\n                    smallestEvenValueValue = value;\n          \
    \          isSmallestEvenValueValue = true;\n                }\n            }\n\
    \        }\n        if (isSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n            result.Add(smallestIndexValue);\n\
    \            result.Add(smallestEvenValueValue);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <149c8154414845d2beea3fc478851750>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <149c8154414845d2beea3fc478851750>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <149c8154414845d2beea3fc478851750>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = 0;\n        int smalest_index = 0;\n  \
    \      List<long> result = new List<long>();\n        foreach (var item in arr)\
    \ {\n            if (item % 2 == 0) {\n                if (smalest_value < item)\
    \ {\n                    smalest_value = item;\n                    smalest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smalest_index != arr.Count - 1) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d5534e089f1481cb4ab13a03340c034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d5534e089f1481cb4ab13a03340c034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = false;\n            }\n            else if (arr[i]\
    \ == smallest_value) {\n                found = true;\n            }\n       \
    \ }\n        if (found) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61cebd731e91433abd8bc1dffcb98f9f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <61cebd731e91433abd8bc1dffcb98f9f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <61cebd731e91433abd8bc1dffcb98f9f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_even_value = 0;\n\
    \        long smallest_even_index = 0;\n        bool found = false;\n        foreach\
    \ (long n in arr) {\n            if (n % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = n;\n                    smallest_index\
    \ = arr.IndexOf(n);\n                    smallest_even_value = n % 2;\n      \
    \              smallest_even_index = arr.IndexOf(n % 2);\n                   \
    \ found = true;\n                } else if (smallest_value == n) {\n         \
    \           smallest_even_value = n % 2;\n                    smallest_even_index\
    \ = arr.IndexOf(n % 2);\n                    found = true;\n                }\
    \ else if (smallest_value == n % 2) {\n                    smallest_even_value\
    \ = n % 2;\n                    smallest_even_index = arr.IndexOf(n % 2);\n  \
    \                  found = true;\n                }\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        } else {\n            result.Add(0);\n            result.Add(0);\n  \
    \          result.Add(0);\n            result.Add(0);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69143237fbfb4ef698efa19bf4cc6b8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <69143237fbfb4ef698efa19bf4cc6b8f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5548788957164402829db941db86bffc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5548788957164402829db941db86bffc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5548788957164402829db941db86bffc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ % 2 == 0) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a221bfd23354f60a391911df6d72a41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a221bfd23354f60a391911df6d72a41>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5a221bfd23354f60a391911df6d72a41>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool has_even_values = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      has_even_values = true;\n                smallest_even_value = n;\n   \
    \             smallest_index = arr.IndexOf(n);\n            }\n        }\n   \
    \     if (has_even_values) {\n            smallest_even_value = smallest_even_value\
    \ % 2;\n            smallest_index = smallest_index % 2;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e3bc2696a2449fc9432e46d21ee1da8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e3bc2696a2449fc9432e46d21ee1da8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                break;\n       \
    \     }\n            if (arr[i] < smallest_value) {\n                smallest_value\
    \ = arr[i];\n                smallest_index = i;\n            }\n        }\n \
    \       if (!found) {\n            return result;\n        }\n        List<long>\
    \ even_values = new List<long>();\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                even_values.Add(arr[i]);\n\
    \            }\n        }\n        if (even_values.Count == 0) {\n           \
    \ return result;\n        }\n        long smallest_even_value = even_values.Min();\n\
    \        long smallest_even_index = -1;\n        for (int i = 0; i < even_values.Count;\
    \ i++) {\n            if (even_values[i] == smallest_even_value) {\n         \
    \       smallest_even_index = i;\n                break;\n            }\n    \
    \    }\n        if (smallest_even_index == -1) {\n            return result;\n\
    \        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <990f68a2b9484b1a9619b99d1ac55ea8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <990f68a2b9484b1a9619b99d1ac55ea8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <990f68a2b9484b1a9619b99d1ac55ea8>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long smallest_value = arr.Min();\n        long smallest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (smallest_value\
    \ < node) {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49ba7a25a81742f5b5af6faee33ebad2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <49ba7a25a81742f5b5af6faee33ebad2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n            \
    \    smallest_value = arr[i];\n                smallest_index = i;\n         \
    \   }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <362a57c65479479eb22604df2f211f42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <362a57c65479479eb22604df2f211f42>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <362a57c65479479eb22604df2f211f42>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            int index = smallest_even_index;\n          \
    \  while (index > 0) {\n                if (arr[index / 2] == smallest_value)\
    \ {\n                    result.Add(smallest_value);\n                    result.Add(smallest_index);\n\
    \                    break;\n                }\n                index--;\n   \
    \         }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23916cd82d3d45ddafccf3afb01ae374>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <23916cd82d3d45ddafccf3afb01ae374>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x0000d] in\
    \ <23916cd82d3d45ddafccf3afb01ae374>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                smallest_value = item;\n  \
    \              smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (smallest_index > 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54c537c709e646b0b816f49630e2b659>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <54c537c709e646b0b816f49630e2b659>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            result.Add(smallest_even_value);\n\
    \            return result;\n        }\n        long smallest_odd_value = arr[smallest_even_index\
    \ + 1];\n        long smallest_odd_index = arr.IndexOf(smallest_odd_value);\n\
    \        if (smallest_odd_index == arr.Count - 1) {\n            result.Add(smallest_odd_value);\n\
    \            return result;\n        }\n        long smallest_odd_value_2 = arr[smallest_odd_index\
    \ + 1];\n        long smallest_odd_index_2 = arr.IndexOf(smallest_odd_value_2);\n\
    \        if (smallest_odd_index_2 == arr.Count - 1) {\n            result.Add(smallest_odd_value_2);\n\
    \            return result;\n        }\n        long smallest_odd_value_3 = arr[smallest_odd_index_2\
    \ + 1];\n        long smallest_odd_index_3 = arr.IndexOf(smallest_odd_value_3);\n\
    \        if (smallest_odd_index_3 == arr.Count - 1) {\n            result.Add(smallest_odd_value_3);\n\
    \            return result;\n        }\n        long smallest_odd_value_4 = arr[smallest_odd_index_3\
    \ + 1];\n        long smallest_odd_index_4 = arr.IndexOf(smallest_odd_value_4);\n\
    \        if (smallest_odd_index_4 == arr.Count - 1) {\n            result.Add(smallest_odd_value_4);\n\
    \            return result;\n        }\n        long smallest_odd_value_5 = arr[smallest_odd_index_4\
    \ + 1];\n        long smallest_odd_index_5 = arr.IndexOf(smallest_odd_value_5);\n\
    \        if (smallest_odd_index_5 == arr.Count - 1) {\n            result.Add(smallest_odd_value_5);\n\
    \            return result;\n        }\n        long smallest_odd_value_6 = arr[smallest_odd_index_5\
    \ + 1];\n        long smallest_odd_index_6 = arr.IndexOf(smallest_odd_value_6);\n\
    \        if (smallest_odd_index_6 == arr.Count - 1) {\n            result.Add(smallest_odd_value_6);\n\
    \            return result;\n        }\n        long smallest_odd_value_7 = arr[smallest_odd_index_6\
    \ + 1];\n        long smallest_odd_index_7 = arr.IndexOf(smallest_odd_value_7);\n\
    \        if (smallest_odd_index_7 == arr.Count - 1) {\n            result.Add(smallest_odd_value_7);\n\
    \            return result;\n        }\n        long smallest_odd_value_8 = arr[smallest_odd_index_7\
    \ + 1];\n        long smallest_od\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk42xdrsl.cs(85,25): error CS1002: ; expected

    '
  timestamp: 1659798685
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_even_value = 0;\n\
    \        long smallest_even_index = 0;\n        bool found = false;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n    \
    \            if (smallest_value == 0) {\n                    smallest_value =\
    \ arr[i];\n                    smallest_index = i;\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_even_index = i;\n                  \
    \  found = true;\n                }\n                else {\n                \
    \    if (arr[i] < smallest_even_value) {\n                        smallest_even_value\
    \ = arr[i];\n                        smallest_even_index = i;\n              \
    \      }\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        else {\n            result.Add(0);\n            result.Add(0);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e0d63298164ee2b770240bde389c6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a3e0d63298164ee2b770240bde389c6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index == arr.IndexOf(value)) {\n\
    \                    found = true;\n                    break;\n             \
    \   }\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        } else {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06877501215742528126d356e8160fdb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <06877501215742528126d356e8160fdb>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <06877501215742528126d356e8160fdb>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                found = true;\n                smallest_value = arr[i];\n   \
    \             smallest_index = i;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65ce2500ca1d40b6885d515f2a1e80d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <65ce2500ca1d40b6885d515f2a1e80d9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n\
    \            if (value % 2 == 0) {\n                if (smallest_value < value)\
    \ {\n                    smallest_value = value;\n                    smallest_index\
    \ = i;\n                    found = true;\n                }\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_value);\n  \
    \          result.Add(smallest_index);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b8ddca1ce0d415da948a68f46d66e4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b8ddca1ce0d415da948a68f46d66e4f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = 0;\n        int smalest_index = 0;\n  \
    \      List<long> result = new List<long>();\n        foreach (var item in arr)\
    \ {\n            if (item % 2 == 0) {\n                if (item < smalest_value)\
    \ {\n                    smalest_value = item;\n                    smalest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smalest_index != 0) {\n            result.Add(smalest_value);\n           \
    \ result.Add(smalest_index);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3a910f9abde45d0ad9e6370b42743db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c3a910f9abde45d0ad9e6370b42743db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index != arr.Count - 1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n            return result;\n  \
    \      }\n        if (arr.Count == 0) {\n            return result;\n        }\n\
    \        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] % 2 == 0) {\n                if (smallest_value == smallest_even_value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_value == arr[i]) {\n                 \
    \   found = true;\n                    break;\n                }\n           \
    \     if (smallest_value == arr[i] && smallest_index == i) {\n               \
    \     found = true;\n                    break;\n                }\n         \
    \   }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0319a4884e96409085d4429a37fd344e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0319a4884e96409085d4429a37fd344e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0319a4884e96409085d4429a37fd344e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = 0;\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue =\
    \ false;\n        bool foundSmallestIndex = false;\n        foreach (long node\
    \ in arr) {\n            if (node % 2 == 0) {\n                if (!foundSmallestEvenValue)\
    \ {\n                    smallestEvenValue = node;\n                    foundSmallestEvenValue\
    \ = true;\n                }\n                if (foundSmallestEvenValue && node\
    \ < smallestEvenValue) {\n                    smallestEvenValue = node;\n    \
    \                foundSmallestEvenValue = true;\n                }\n         \
    \       if (foundSmallestEvenValue && node == smallestEvenValue) {\n         \
    \           foundSmallestIndex = true;\n                }\n            }\n   \
    \     }\n        if (foundSmallestEvenValue) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        if (foundSmallestIndex)\
    \ {\n            result.Add(smallestIndex);\n        }\n        if (result.Count\
    \ == 0) {\n            result.Add(0);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76411cfdb84a4632a5d6c31ccd96144c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <76411cfdb84a4632a5d6c31ccd96144c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                smallest_even_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n                break;\n            }\n\
    \        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6bbd001981a412ab4616f4242db503b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6bbd001981a412ab4616f4242db503b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min(x => x % 2 == 0 ? x : 0);\n        long smallestIndex = arr.IndexOf(smallestEvenValue);\n\
    \        if (smallestIndex == -1) {\n            return result;\n        }\n \
    \       result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72e6ca1404ef405c8a22e60c44cf49e8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72e6ca1404ef405c8a22e60c44cf49e8>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <72"
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_even_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallest_even_value\
    \ < arr[i]) {\n                    smallest_even_value = arr[i];\n           \
    \         smallest_even_index = i;\n                }\n            }\n       \
    \ }\n        if (smallest_even_value == 0) {\n            return new List<long>();\n\
    \        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_even_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a30dcc4fbe643b08d21e1523084dd53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a30dcc4fbe643b08d21e1523084dd53>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                found = true;\n                smallest_value = arr[i];\n   \
    \             smallest_index = i;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17dfd07606044b3da1f63c25ce6f6229>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <17dfd07606044b3da1f63c25ce6f6229>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        foreach (long node in\
    \ arr) {\n            if (node % 2 == 0) {\n                if (smallestEvenValue\
    \ < node) {\n                    smallestEvenValue = node;\n                 \
    \   smallestIndex = arr.IndexOf(node);\n                }\n            }\n   \
    \     }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afad09b3f3654a48814b296859f7d02b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afad09b3f3654a48814b296859f7d02b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <afad09b3f3654a48814b296859f7d02b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f58e413a7249c5a88f00024ac32a4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2f58e413a7249c5a88f00024ac32a4a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f2f58e413a7249c5a88f00024ac32a4a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count <= 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smalest_value\
    \ = arr.Min();\n        int smalest_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smalest_value\
    \ < arr[i]) {\n                    smalest_value = arr[i];\n                 \
    \   smalest_index = i;\n                }\n            }\n        }\n        result.Add(smalest_value);\n\
    \        result.Add(smalest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff2ae8cfb7b40498564b8349caf7de5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ff2ae8cfb7b40498564b8349caf7de5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (arr[i] < smallestEvenValue)\
    \ {\n                    smallestEvenValue = arr[i];\n                    smallestIndex\
    \ = i;\n                }\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f8f753cb9f44919932d15865d35e79e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4f8f753cb9f44919932d15865d35e79e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <4f8f753cb9f44919932d15865d35e79e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestEvenValue == arr[i]) {\n          \
    \          foundSmallestEvenValue = true;\n                    smallestIndex =\
    \ i;\n                }\n            }\n        }\n        if (foundSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdd699de956473691d07807d7f43d4a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3cdd699de956473691d07807d7f43d4a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <3cdd699de956473691d07807d7f43d4a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            int index = smallest_even_index;\n\
    \            while (index > 0 && arr[index] == smallest_value) {\n           \
    \     index--;\n            }\n            result.Add(smallest_value);\n     \
    \       result.Add(index);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a3c6353c82142bc8f4996b3635de16b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a3c6353c82142bc8f4996b3635de16b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x0000d] in\
    \ <3a3c6353c82142bc8f4996b3635de16b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_even_value = 0;\n\
    \        long smallest_even_index = 0;\n        bool found = false;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                if (smallest_value\
    \ == 0) {\n                    smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                    smallest_even_value = item / 2;\n\
    \                    smallest_even_index = smallest_index;\n                 \
    \   found = true;\n                } else if (smallest_value == item) {\n    \
    \                smallest_even_index = arr.IndexOf(item);\n                  \
    \  found = true;\n                } else if (smallest_value == item / 2) {\n \
    \                   smallest_even_index = arr.IndexOf(item);\n               \
    \     found = true;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_even_index);\n\
    \        } else {\n            result.Add(0);\n            result.Add(0);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62725accf6404681bed04b3680c98272>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62725accf6404681bed04b3680c98272>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long value in arr) {\n            if (value % 2 == 0) {\n        \
    \        found = true;\n                if (value < smallest_value) {\n      \
    \              smallest_value = value;\n                    smallest_index = arr.IndexOf(value);\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14b69b282d43480da76edb6bf7c01cce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14b69b282d43480da76edb6bf7c01cce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                    break;\n         \
    \       }\n                if (smallest_even_index < arr.IndexOf(value)) {\n \
    \                   smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7b1102b1a424aa1b699b51f79e9ee29>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d7b1102b1a424aa1b699b51f79e9ee29>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <d7b1102b1a424aa1b699b51f79e9ee29>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else if (smalest_value < n) {\n                    smalest_value\
    \ = n;\n                    smalest_index = arr.IndexOf(n);\n                }\n\
    \            }\n        }\n        if (smalest_index > 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a62334b27f454b50aba8952c3d334a5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a62334b27f454b50aba8952c3d334a5b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <a62334b27f454b50aba8952c3d334a5b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        List<long>\
    \ even_values = new List<long>();\n        List<long> even_indexes = new List<long>();\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                even_values.Add(arr[i]);\n                even_indexes.Add(i);\n\
    \            }\n        }\n        if (even_values.Count > 0) {\n            long\
    \ smallest_even_value = even_values.Min();\n            long smallest_even_index\
    \ = even_indexes.IndexOf(smallest_even_value);\n            if (smallest_even_index\
    \ == -1) {\n                return result;\n            }\n            long smallest_value\
    \ = even_values[smallest_even_index];\n            if (smallest_value == smallest_even_value)\
    \ {\n                result.Add(smallest_value);\n                result.Add(smallest_even_index);\n\
    \            } else {\n                result.Add(smallest_even_value);\n    \
    \            result.Add(smallest_even_index);\n            }\n        } else {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpldrtqm1x.cs(44,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpldrtqm1x.cs(54,18): error CS0136: A local or parameter named ''smallest_even_value''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpldrtqm1x.cs(55,18): error CS0136: A local or parameter named ''smallest_even_index''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpldrtqm1x.cs(59,18): error CS0136: A local or parameter named ''smallest_value''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpldrtqm1x.cs(59,47): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                break;\n       \
    \     }\n            if (arr[i] < smallest_value && !found) {\n              \
    \  smallest_value = arr[i];\n                smallest_index = i;\n           \
    \ }\n        }\n        return result.Count == 0 ? new List<long>() : result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2947b2dca454875a03335cdc8f27dfc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b2947b2dca454875a03335cdc8f27dfc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <b2947b2dca454875a03335cdc8f27dfc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        long smallest_even_value\
    \ = -1;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallest_even_value == -1) {\n            \
    \        smallest_even_value = arr[i];\n                    smallest_index = i;\n\
    \                } else if (arr[i] < smallest_even_value) {\n                \
    \    smallest_even_value = arr[i];\n                    smallest_index = i;\n\
    \                }\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64b11d2c5f924cb7a48ec53eab05a45f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <64b11d2c5f924cb7a48ec53eab05a45f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <64b11d2c5f924cb7a48ec53eab05a45f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        List<long>\
    \ even_values = new List<long>();\n        foreach (long value in arr) {\n   \
    \         if (value % 2 == 0) {\n                even_values.Add(value);\n   \
    \         }\n        }\n        if (even_values.Count == 1) {\n            smallest_value\
    \ = even_values[0];\n        }\n        if (even_values.Count > 1) {\n       \
    \     smallest_value = even_values.Min();\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_even_index);\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnly7uv_w.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0 ? x : 0);\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <975eba69468049b88e9050d5aeef38e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <975eba69468049b88e9050d5aeef38e3>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min[TSource]\
    \ (System.Collections.Generic.IEnumerable`1[T] source, System.Func`2[T,TResult]\
    \ selector) [0x00030] in <e540098dd111461e919c5863f6975c29>:0 \n  at Problem.Pluck\
    \ (System.Collections.Generic.List`1[T] arr) [0x00007] in <97"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var node in arr) {\n\
    \            if (node.Value % 2 == 0) {\n                if (smallest_even_value\
    \ < node.Value) {\n                    smallest_even_value = node.Value;\n   \
    \                 smallest_index = node.Index;\n                }\n          \
    \  }\n        }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvrxe6w42.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpvrxe6w42.cs(40,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpvrxe6w42.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpvrxe6w42.cs(42,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                if (smallest_even_value < arr[i]) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4846b3ab952645c0ae55688d653780f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4846b3ab952645c0ae55688d653780f3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long node in arr) {\n            if (node % 2 == 0) {\n          \
    \      if (smallest_even_value < node) {\n                    smallest_even_value\
    \ = node;\n                    smallest_index = arr.IndexOf(node);\n         \
    \           found = true;\n                }\n            }\n        }\n     \
    \   if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c14c1c28e6ad412796e91c4f9af420f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c14c1c28e6ad412796e91c4f9af420f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest_even_value = arr.Min();\n        long smallest_even_index\
    \ = arr.IndexOf(smallest_even_value);\n        List<long> result = new List<long>();\n\
    \        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <170cd6d9c75840179e0cffeb14ec8f41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <170cd6d9c75840179e0cffeb14ec8f41>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <170cd6d9c75840179e0cffeb14ec8f41>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool foundSmallestEvenValue\
    \ = false;\n        foreach (long value in arr) {\n            if (value % 2 ==\
    \ 0) {\n                if (smallestEvenValue % 2 == 0) {\n                  \
    \  foundSmallestEvenValue = true;\n                    smallestEvenValue = value;\n\
    \                    smallestIndex = arr.IndexOf(value);\n                }\n\
    \            }\n        }\n        if (foundSmallestEvenValue) {\n           \
    \ result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d636bba162a64e6b8fe387951bc0142e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d636bba162a64e6b8fe387951bc0142e>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <d636bba162a64e6b8fe387951bc0142e>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_value = arr[smallest_even_index];\n        bool\
    \ found = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] == smallest_value) {\n                found = true;\n              \
    \  break;\n            }\n        }\n        if (!found) {\n            return\
    \ result;\n        }\n        long smallest_index = smallest_even_index;\n   \
    \     for (int i = smallest_even_index + 1; i < arr.Count; i++) {\n          \
    \  if (arr[i] % 2 == 0) {\n                smallest_value = arr[i];\n        \
    \        smallest_index = i;\n                break;\n            }\n        }\n\
    \        result.Add(smallest_value);\n        result.Add(smallest_index);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg6m1jpmk.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpg6m1jpmk.cs(53,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        foreach (long n in arr) {\n \
    \           if (n % 2 == 0) {\n                if (smallest_value < n) {\n   \
    \                 smallest_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                }\n            }\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cdcd797b4c614db18b7c03da30d0717d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cdcd797b4c614db18b7c03da30d0717d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f031e5c0d10d4d27bbf64efee4672204>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       bool found = false;\n        foreach (long n in arr) {\n            if\
    \ (n % 2 == 0) {\n                if (smallest_even_value < n) {\n           \
    \         smallest_even_value = n;\n                    smallest_index = arr.IndexOf(n);\n\
    \                    smallest_value = n;\n                    found = true;\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2c8a1d1d0ab4fd3bea8bd24c184236b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a2c8a1d1d0ab4fd3bea8bd24c184236b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n    \
    \    bool hasEven = arr.Any(x => x % 2 == 0);\n        if (hasEven) {\n      \
    \      smallestEven = arr.Min(x => x % 2 == 0);\n            smallestIndex = arr.IndexOf(smallestEven);\n\
    \        }\n        result.Add(smallestEven);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_p4l39xr.cs(40,28): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659798687
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestEvenIndex = 0;\n        bool isSmallestEvenValueFound\
    \ = false;\n        bool isSmallestEvenIndexFound = false;\n        long smallestEvenValueFoundIndex\
    \ = -1;\n        foreach (long value in arr) {\n            if (value % 2 == 0)\
    \ {\n                if (smallestEvenValue % 2 == 0) {\n                    isSmallestEvenValueFound\
    \ = true;\n                    smallestEvenValueFoundIndex = value;\n        \
    \        }\n                if (value < smallestEvenValue) {\n               \
    \     isSmallestEvenValueFound = true;\n                    smallestEvenValue\
    \ = value;\n                    smallestEvenIndex = value;\n                }\n\
    \            } else {\n                if (smallestEvenValue % 2 != 0) {\n   \
    \                 isSmallestEvenValueFound = true;\n                    smallestEvenValueFoundIndex\
    \ = value;\n                }\n                if (value < smallestEvenValue)\
    \ {\n                    isSmallestEvenValueFound = true;\n                  \
    \  smallestEvenValue = value;\n                    smallestEvenIndex = value;\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValueFound)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestEvenIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d2ea4b377204a44af1601b68f1f9749>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8d2ea4b377204a44af1601b68f1f9749>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <8d2ea4b377204a44af1601b68f1f9749>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_index = 0;\n        foreach (long node in arr) {\n\
    \            if (node % 2 == 0) {\n                if (smallest_even_value < node)\
    \ {\n                    smallest_even_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0c3cacb5a4f41fa96ea9794e3137dc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c0c3cacb5a4f41fa96ea9794e3137dc8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = 0;\n        long smallestIndex = 0;\n        long currentValue = 0;\n    \
    \    long currentIndex = 0;\n        foreach (var node in arr) {\n           \
    \ if (node % 2 == 0) {\n                currentValue = node;\n               \
    \ currentIndex = currentIndex + 1;\n            }\n            else {\n      \
    \          if (currentValue < smallestEvenValue) {\n                    smallestEvenValue\
    \ = currentValue;\n                    smallestIndex = currentIndex;\n       \
    \         }\n                currentValue = node;\n                currentIndex\
    \ = currentIndex + 1;\n            }\n        }\n        result.Add(smallestEvenValue);\n\
    \        result.Add(smallestIndex);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b80ff81f0a4c4dfeb636f0a611ce9891>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b80ff81f0a4c4dfeb636f0a611ce9891>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var item in arr) {\n            if (item % 2 == 0) {\n           \
    \     smallest_even_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \                found = true;\n                break;\n            }\n      \
    \  }\n        if (!found) {\n            return result;\n        }\n        if\
    \ (smallest_even_value == 0) {\n            return result;\n        }\n      \
    \  List<long> evens = new List<long>();\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                evens.Add(item);\n        \
    \    }\n        }\n        evens.Sort();\n        smallest_even_value = evens[0];\n\
    \        smallest_index = evens.IndexOf(smallest_even_value);\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ca5ba37a44f4109a2835f99c51b6892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7ca5ba37a44f4109a2835f99c51b6892>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        long smallest_even_value\
    \ = -1;\n        long smallest_even_index = -1;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (smallest_even_value\
    \ == -1) {\n                    smallest_even_value = value;\n               \
    \     smallest_even_index = arr.IndexOf(value);\n                }\n         \
    \       if (value < smallest_even_value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_even_index = arr.IndexOf(value);\n  \
    \              }\n            }\n            if (value < smallest_value) {\n \
    \               smallest_value = value;\n                smallest_index = arr.IndexOf(value);\n\
    \            }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        if (smallest_even_value == -1) {\n            return result;\n      \
    \  }\n        List<long> evens = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                evens.Add(value);\n\
    \            }\n        }\n        List<long> evens_pluck_result = Pluck(evens);\n\
    \        evens_pluck_result.Add(smallest_even_value);\n        evens_pluck_result.Add(smallest_even_index);\n\
    \        return evens_pluck_result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659798693
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = arr.FindIndex(x => x == smallest_value);\n\
    \        if (smallest_index == -1) {\n            return result;\n        }\n\
    \        long smallest_even_value = arr.FindIndex(x => x % 2 == 0);\n        if\
    \ (smallest_even_value == -1) {\n            return result;\n        }\n     \
    \   if (smallest_even_value == smallest_index) {\n            smallest_value =\
    \ smallest_even_value;\n            smallest_index = smallest_even_value;\n  \
    \      }\n        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_even_next_value = arr.FindIndex(x => x % 2 ==\
    \ 1);\n        if (smallest_even_next_value == -1) {\n            return result;\n\
    \        }\n        if (smallest_even_next_value == smallest_index) {\n      \
    \      smallest_value = smallest_even_next_value;\n            smallest_index\
    \ = smallest_even_next_value;\n        }\n        if (smallest_index == arr.Count\
    \ - 1) {\n            return result;\n        }\n        long smallest_even_next_next_value\
    \ = arr.FindIndex(x => x % 3 == 1);\n        if (smallest_even_next_next_value\
    \ == -1) {\n            return result;\n        }\n        if (smallest_even_next_next_value\
    \ == smallest_index) {\n            smallest_value = smallest_even_next_next_value;\n\
    \            smallest_index = smallest_even_next_next_value;\n        }\n    \
    \    if (smallest_index == arr.Count - 1) {\n            return result;\n    \
    \    }\n        long smallest_even_next_next_next_value = arr.FindIndex(x => x\
    \ % 5 == 1);\n        if (smallest_even_next_next_next_value == -1) {\n      \
    \      return result;\n        }\n        if (smallest_even_next_next_next_value\
    \ == smallest_index) {\n            smallest_value = smallest_even_next_next_next_value;\n\
    \            smallest_index = smallest_even_next_next_next_value;\n        }\n\
    \        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_even_next_next_next_next_value = arr.FindIndex(x\
    \ => x % 7 == 1);\n        if (smallest_even_next_next_next_next_value == -1)\
    \ {\n            return result;\n        }\n        if (smallest_even_next_next_next_next_value\
    \ == smallest_index) {\n            smallest_value = smallest_even_next_next_next_next_value;\n\
    \            smallest_index = smallest_even_next_next_next_next_value;\n     \
    \   }\n        if (smallest_index == arr.Count - 1) {\n            return result;\n\
    \        }\n        long smallest_even_next_next_next_next_next_value = arr.FindIndex(x\
    \ => x % 11 == 1);\n        if (smallest_even_next_next_\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8wnesb1r.cs(97,37): error CS1026: ) expected

    /tmp/tmp8wnesb1r.cs(97,37): error CS1525: Invalid expression term ''}''

    /tmp/tmp8wnesb1r.cs(97,37): error CS1002: ; expected

    '
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_even_value = 0;\n\
    \        long smallest_even_index = 0;\n        bool found = false;\n        foreach\
    \ (var item in arr) {\n            if (item % 2 == 0) {\n                smallest_even_value\
    \ = item;\n                smallest_even_index = arr.IndexOf(item);\n        \
    \        found = true;\n            }\n            else if (item < smallest_value)\
    \ {\n                smallest_value = item;\n                smallest_index =\
    \ arr.IndexOf(item);\n            }\n        }\n        if (found) {\n       \
    \     result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        else {\n            result.Add(smallest_value);\n        \
    \    result.Add(smallest_index);\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebeb0f73421642368386954ba114f9b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ebeb0f73421642368386954ba114f9b2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        List<long>\
    \ even_values = new List<long>();\n        foreach (long value in arr) {\n   \
    \         if (value % 2 == 0) {\n                even_values.Add(value);\n   \
    \         }\n        }\n        if (even_values.Count > 0) {\n            smallest_value\
    \ = even_values.Min();\n        }\n        result.Add(smallest_value);\n     \
    \   result.Add(smallest_even_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplavx4809.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798687
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ > 0) {\n            long smallestEvenValue = arr.Min();\n            long smallestIndex\
    \ = 0;\n            int index = 0;\n            while (index < arr.Count) {\n\
    \                if (arr[index] % 2 == 0) {\n                    if (smallestEvenValue\
    \ < arr[index]) {\n                        smallestEvenValue = arr[index];\n \
    \                       smallestIndex = index;\n                    }\n      \
    \          }\n                index++;\n            }\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0e6e5d851894e98995869c1cd7a2960>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0e6e5d851894e98995869c1cd7a2960>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_even_index = 0;\n        bool found = false;\n  \
    \      foreach (var item in arr) {\n            if (item % 2 == 0) {\n       \
    \         if (smallest_even_value < item) {\n                    smallest_even_value\
    \ = item;\n                    smallest_even_index = arr.IndexOf(item);\n    \
    \                found = true;\n                }\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_even_value);\n        \
    \    result.Add(smallest_even_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f705549a24a4381a210d386c4a0066e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f705549a24a4381a210d386c4a0066e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = arr.Min();\n        long smalest_index\
    \ = 0;\n        List<long> result = new List<long>();\n        foreach (long i\
    \ in arr) {\n            if (i % 2 == 0) {\n                if (smalest_value\
    \ == i) {\n                    smalest_index = i;\n                }\n       \
    \         else if (smalest_value < i) {\n                    smalest_value = i;\n\
    \                    smalest_index = i;\n                }\n            }\n  \
    \      }\n        result.Add(smalest_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4aae9ed1e3b84e10b0f9e67fe8d5793c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4aae9ed1e3b84e10b0f9e67fe8d5793c>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <4aae9ed1e3b84e10b0f9e67fe8d5793c>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_value)\
    \ {\n                found = true;\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                break;\n       \
    \     }\n            if (arr[i] != smallest_value && arr[i] % 2 == 0) {\n    \
    \            smallest_value = arr[i];\n                smallest_index = i;\n \
    \           }\n        }\n        if (!found) {\n            return new List<long>();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <618fe34c55a04b4fbd6d246eebc68f30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <618fe34c55a04b4fbd6d246eebc68f30>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n       \
    \         continue;\n            }\n            found = true;\n            long\
    \ value = arr[i];\n            long index = i;\n            if (value % 2 == 0)\
    \ {\n                smallest_value = value;\n                smallest_index =\
    \ index;\n            }\n        }\n        if (!found) {\n            return\
    \ result;\n        }\n        List<long> even_values = new List<long>();\n   \
    \     even_values.Add(smallest_value);\n        even_values.Add(smallest_index);\n\
    \        return even_values;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptogtgjgi.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long smallest_value = 0;\n        int smallest_index = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 ==\
    \ 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                } else if\
    \ (arr[i] < smallest_value) {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (smallest_value == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c29dafa026b49508992cb22c85b8ad0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9c29dafa026b49508992cb22c85b8ad0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] < smallest_value)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f031e5c0d10d4d27bbf64efee4672204>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f031e5c0d10d4d27bbf64efee4672204>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798683
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       long smallest_index2 = 0;\n        long smallest_value2 = 0;\n       \
    \ bool found = false;\n        foreach (long i in arr) {\n            if (i %\
    \ 2 == 0) {\n                if (smallest_value == 0) {\n                    smallest_value\
    \ = i;\n                    smallest_index = i;\n                    found = true;\n\
    \                } else if (smallest_value == i) {\n                    found\
    \ = true;\n                } else {\n                    if (smallest_index ==\
    \ i) {\n                        found = true;\n                    } else {\n\
    \                        if (smallest_index2 < smallest_index) {\n           \
    \                 smallest_index2 = smallest_index;\n                        \
    \    smallest_value2 = smallest_value;\n                            found = true;\n\
    \                        } else if (smallest_index2 < i) {\n                 \
    \           smallest_index2 = i;\n                            smallest_value2\
    \ = i;\n                            found = true;\n                        }\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index2);\n\
    \        } else {\n            result.Add(0);\n            result.Add(0);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc4357f07cd0488398ce9111bf22761f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc4357f07cd0488398ce9111bf22761f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool has_even_value = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      has_even_value = true;\n                smallest_even_value = n;\n    \
    \            smallest_index = arr.IndexOf(n);\n            }\n        }\n    \
    \    if (has_even_value) {\n            result.Add(smallest_even_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37f17a23b49849ed853a5ced5a6fe861>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <37f17a23b49849ed853a5ced5a6fe861>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ > 0) {\n            long smallest_even_value = arr.Min();\n            long\
    \ smallest_even_index = arr.IndexOf(smallest_even_value);\n            bool is_even\
    \ = true;\n            long smallest_value = smallest_even_value;\n          \
    \  int smallest_index = smallest_even_index;\n            for (int i = 0; i <\
    \ arr.Count; i++) {\n                if (arr[i] != smallest_value) {\n       \
    \             is_even = false;\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \           if (is_even) {\n                result.Add(smallest_value);\n    \
    \            result.Add(smallest_index);\n            } else {\n             \
    \   result.Add(smallest_value);\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2nwn4zoe.cs(41,34): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        int smallest_index = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n            \
    \    smallest_value = arr[i];\n                smallest_index = i;\n         \
    \   }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ > 0) {\n            long smallest_value = arr.Min();\n            long smallest_index\
    \ = -1;\n            long smallest_even_value = smallest_value;\n            int\
    \ smallest_even_index = -1;\n            for (int i = 0; i < arr.Count; i++) {\n\
    \                if (arr[i] % 2 == 0) {\n                    if (smallest_even_value\
    \ < arr[i]) {\n                        smallest_even_value = arr[i];\n       \
    \                 smallest_even_index = i;\n                    }\n          \
    \      }\n            }\n            if (smallest_even_value == smallest_value)\
    \ {\n                result.Add(smallest_value);\n                result.Add(smallest_even_index);\n\
    \            } else {\n                result.Add(smallest_even_value);\n    \
    \            result.Add(smallest_even_index);\n            }\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c90472a50b84e95848e384a79397523>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c90472a50b84e95848e384a79397523>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0)\n            return result;\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = 0;\n        bool found = false;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            long value = arr[i];\n           \
    \ if (value % 2 == 0) {\n                if (value < smallest_value) {\n     \
    \               smallest_value = value;\n                    smallest_index =\
    \ i;\n                    found = true;\n                }\n            }\n  \
    \      }\n        if (found)\n            result.Add(smallest_value);\n      \
    \  else\n            return result;\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44f05b7360ef4e2d86b9d4803124f2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <44f05b7360ef4e2d86b9d4803124f2f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var node in arr) {\n\
    \            if (smallest_value == 0) {\n                smallest_value = node;\n\
    \                smallest_index = arr.IndexOf(node);\n            } else if (smallest_value\
    \ == node) {\n                smallest_index = arr.IndexOf(node);\n          \
    \  } else if (smallest_value % 2 == 0) {\n                smallest_value = node;\n\
    \                smallest_index = arr.IndexOf(node);\n            }\n        }\n\
    \        if (smallest_value % 2 == 0) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        } else {\n            result.Add(smallest_value);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f23516ce8e6442e5a0b6f7da00467e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f23516ce8e6442e5a0b6f7da00467e23>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValue\
    \ = true;\n        bool isSmallestIndex = true;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] != 0) {\n                long currentValue =\
    \ arr[i];\n                if (currentValue == smallestEvenValue) {\n        \
    \            isSmallestEvenValue = true;\n                    isSmallestIndex\
    \ = true;\n                    smallestIndex = i;\n                } else if (currentValue\
    \ == smallestEvenValue && isSmallestEvenValue) {\n                    isSmallestEvenValue\
    \ = false;\n                    smallestIndex = i;\n                } else if\
    \ (currentValue == smallestEvenValue && !isSmallestEvenValue) {\n            \
    \        isSmallestEvenValue = true;\n                    smallestIndex = i;\n\
    \                } else if (currentValue != smallestEvenValue && isSmallestEvenValue\
    \ && !isSmallestIndex) {\n                    isSmallestIndex = true;\n      \
    \              smallestIndex = i;\n                } else if (currentValue !=\
    \ smallestEvenValue && !isSmallestEvenValue && isSmallestIndex) {\n          \
    \          isSmallestIndex = false;\n                    smallestIndex = i;\n\
    \                }\n            }\n        }\n        if (isSmallestEvenValue)\
    \ {\n            result.Add(smallestEvenValue);\n            result.Add(smallestIndex);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b33e708d09f7437582e77ebba1725297>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b33e708d09f7437582e77ebba1725297>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <b33e708d09f7437582e77ebba1725297>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = 0;\n        long smallest_even_value\
    \ = 0;\n        bool found = false;\n        foreach (long value in arr) {\n \
    \           if (value % 2 == 0) {\n                if (smallest_value == 0) {\n\
    \                    smallest_even_value = value;\n                    smallest_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                } else if (smallest_value == value)\
    \ {\n                    smallest_even_value = value;\n                    smallest_index\
    \ = arr.IndexOf(value);\n                    found = true;\n                }\
    \ else if (smallest_even_value < value) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             found = true;\n                }\n            }\n        }\n   \
    \     if (found) {\n            result.Add(smallest_even_value);\n           \
    \ result.Add(smallest_index);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d981bdedbf6c443a905a4ddb95601e1a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d981bdedbf6c443a905a4ddb95601e1a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <d981bdedbf6c443a905a4ddb95601e1a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        bool found = false;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == smallest_even_value)\
    \ {\n                found = true;\n                smallest_index = i;\n    \
    \        }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b462d1bdd4374de9bd1c1dab616e45d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b462d1bdd4374de9bd1c1dab616e45d8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        bool has_even_value\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                has_even_value = true;\n            }\n       \
    \     if (arr[i] < smallest_value) {\n                smallest_value = arr[i];\n\
    \                smallest_index = i;\n            }\n        }\n        if (has_even_value)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        } else {\n            if (smallest_index == -1) {\n                result.Add(smallest_value);\n\
    \            } else {\n                result.Add(smallest_value, smallest_index);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdb0e_db9.cs(55,24): error CS1501: No overload for method ''Add'' takes
    2 arguments

    '
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        bool found = false;\n       \
    \ for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n\
    \                found = true;\n                smallest_value = arr[i];\n   \
    \             smallest_index = i;\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3235b1bb27a0450eac80dc2e6fd98989>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3235b1bb27a0450eac80dc2e6fd98989>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                if (smallest_value\
    \ == smallest_even_value) {\n                    smallest_value = value;\n   \
    \                 smallest_index = arr.IndexOf(value);\n                    found\
    \ = true;\n                }\n                else {\n                    if (smallest_value\
    \ < smallest_even_value) {\n                        smallest_value = value;\n\
    \                        smallest_index = arr.IndexOf(value);\n              \
    \          found = true;\n                    }\n                }\n         \
    \   }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        else {\n        \
    \    result.Add(smallest_value);\n            result.Add(smallest_index);\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa3dd16250c74d85a8f06b5267fbf15b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa3dd16250c74d85a8f06b5267fbf15b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <fa3dd16250c74d85a8f06b5267fbf15b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798688
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var item in arr) {\n            if (item % 2 == 0) {\n           \
    \     smallest_value = item;\n                smallest_index = arr.IndexOf(item);\n\
    \                found = true;\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14c772beabc141f8922ea66fd244d9d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14c772beabc141f8922ea66fd244d9d1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest_even_value = 0;\n        long smallest_index =\
    \ 0;\n        List<long> result = new List<long>();\n        foreach (var node\
    \ in arr) {\n            if (node.Value % 2 == 0) {\n                if (smallest_even_value\
    \ < node.Value) {\n                    smallest_even_value = node.Value;\n   \
    \                 smallest_index = node.Index;\n                }\n          \
    \  }\n        }\n        if (smallest_even_value == 0) {\n            return new\
    \ List<long>();\n        }\n        result.Add(smallest_even_value);\n       \
    \ result.Add(smallest_index);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjnvwyqwv.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpjnvwyqwv.cs(40,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpjnvwyqwv.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpjnvwyqwv.cs(42,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        for (int i = smallest_even_index + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     result.Add(smallest_value);\n        result.Add(smallest_index);\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a7893d8d8f74e838e6bfe3c1921d99b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a7893d8d8f74e838e6bfe3c1921d99b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x0000d] in\
    \ <9a7893d8d8f74e838e6bfe3c1921d99b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        bool has_even_value = false;\n\
    \        bool has_multiple_even_values = false;\n        long smallest_even_value\
    \ = 0;\n        long smallest_even_index = 0;\n        foreach (var node in arr)\
    \ {\n            if (node.Value % 2 == 0) {\n                has_even_value =\
    \ true;\n                smallest_even_value = node.Value;\n                smallest_even_index\
    \ = node.Index;\n            }\n            if (node.Value < smallest_value) {\n\
    \                smallest_value = node.Value;\n                smallest_index\
    \ = node.Index;\n            }\n            if (node.Value == smallest_value &&\
    \ node.Index < smallest_index) {\n                smallest_value = node.Value;\n\
    \                smallest_index = node.Index;\n            }\n            if (node.Value\
    \ == smallest_value && node.Index == smallest_index) {\n                has_multiple_even_values\
    \ = true;\n            }\n        }\n        if (has_even_value) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        if (has_multiple_even_values) {\n            int smallest_even_value_counter\
    \ = 0;\n            int smallest_even_index_counter = 0;\n            foreach\
    \ (var node in arr) {\n                if (node.Value % 2 == 0) {\n          \
    \          smallest_even_value_counter++;\n                    if (smallest_even_value_counter\
    \ == smallest_even_index) {\n                        result.Add(node.Value);\n\
    \                        result.Add(node.Index);\n                    }\n    \
    \            }\n                if (node.Value < smallest_value) {\n         \
    \           smallest_even_value_counter = 0;\n                    smallest_even_index_counter++;\n\
    \                    if (smallest_even_index_counter == smallest_index) {\n  \
    \                      result.Add(node.Value);\n                        result.Add(node.Index);\n\
    \                    }\n                }\n                if (node.Value == smallest_value\
    \ && node.Index < smallest_index) {\n                    smallest_even_value_counter\
    \ = 0;\n                    smallest_even_index_counter++;\n                 \
    \   if (smallest_even_index_counter == smallest_index) {\n                   \
    \     result.Add(node.Value);\n                        result.Add(node.Index);\n\
    \                    }\n                }\n                if (node.Value == smallest_value\
    \ && node.Index == smallest_index) {\n                    smallest_even_value_counter++;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprbcbk1q7.cs(43,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprbcbk1q7.cs(45,44): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprbcbk1q7.cs(46,44): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprbcbk1q7.cs(48,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprbcbk1q7.cs(49,39): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprbcbk1q7.cs(50,39): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprbcbk1q7.cs(52,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmprbcbk1q7.cs(52,54): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a firs'
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index > 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea4c404ca0b44dc383eb9df5d206477b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ea4c404ca0b44dc383eb9df5d206477b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <ea4c404ca0b44dc383eb9df5d206477b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) return new List<long>();\n        var minValue\
    \ = arr.Min();\n        var minIndex = 0;\n        var minEvenValue = minValue\
    \ % 2 == 0 ? minValue : minValue + 1;\n        var minEvenIndex = 0;\n       \
    \ var minEvenValueIndex = -1;\n        var minEvenValueIndexCount = 0;\n     \
    \   var minEvenValueIndexCountMax = arr.Count - 1;\n        for (int i = 0; i\
    \ < arr.Count; i++) {\n            if (arr[i] == minEvenValue) {\n           \
    \     if (minEvenValueIndex == -1) {\n                    minEvenValueIndex =\
    \ i;\n                    minEvenValueIndexCount = 0;\n                }\n   \
    \             minEvenValueIndexCount++;\n                if (minEvenValueIndexCount\
    \ > minEvenValueIndexCountMax) {\n                    minEvenValueIndexCountMax\
    \ = minEvenValueIndexCount;\n                    minEvenValueIndex = i;\n    \
    \            }\n            }\n        }\n        if (minEvenValueIndexCount >\
    \ 1) return new List<long>();\n        var result = new List<long>();\n      \
    \  result.Add(minEvenValue);\n        result.Add(minEvenIndex);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4976f69ee64945ceb251a5d908b62bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4976f69ee64945ceb251a5d908b62bd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        foreach (long value in arr) {\n        \
    \    if (value % 2 == 0) {\n                if (smallest_even_value == value)\
    \ {\n                    found = true;\n                }\n                else\
    \ {\n                    smallest_even_value = value;\n                    smallest_even_index\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ if (found) {\n            result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6207449389e4765b6b2be52abcb16a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f6207449389e4765b6b2be52abcb16a4>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f6207449389e4765b6b2be52abcb16a4>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var node in arr) {\n            if (found == true) {\n           \
    \     if (smallest_value == 0) {\n                    smallest_value = node;\n\
    \                    smallest_index = arr.IndexOf(node);\n                } else\
    \ {\n                    if (smallest_value < node) {\n                      \
    \  smallest_value = node;\n                        smallest_index = arr.IndexOf(node);\n\
    \                    }\n                }\n            } else {\n            \
    \    if (smallest_value == 0) {\n                    smallest_value = node;\n\
    \                    smallest_index = arr.IndexOf(node);\n                   \
    \ found = true;\n                } else {\n                    if (smallest_value\
    \ < node) {\n                        smallest_value = node;\n                \
    \        smallest_index = arr.IndexOf(node);\n                        found =\
    \ true;\n                    }\n                }\n            }\n        }\n\
    \        if (found == true) {\n            result.Add(smallest_value);\n     \
    \       result.Add(smallest_index);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc49794da2b24bf5ae184553c16b1d9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc49794da2b24bf5ae184553c16b1d9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n       \
    \         continue;\n            }\n            if (found == false) {\n      \
    \          smallest_value = arr[i];\n                smallest_index = i;\n   \
    \             found = true;\n            }\n            if (arr[i] % 2 == 0) {\n\
    \                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n                found = true;\n            }\n        }\n        if (smallest_even_index\
    \ == -1) {\n            return result;\n        }\n        long smallest_even_value\
    \ = arr[smallest_even_index];\n        long smallest_even_index = smallest_even_index;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value)\
    \ {\n                continue;\n            }\n            if (found == false)\
    \ {\n                smallest_value = arr[i];\n                smallest_index\
    \ = i;\n                found = true;\n            }\n            if (arr[i] %\
    \ 2 == 0) {\n                smallest_even_value = arr[i];\n                smallest_even_index\
    \ = i;\n                found = true;\n            }\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptkkaa698.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptkkaa698.cs(62,14): error CS0128: A local variable or function named ''smallest_even_value''
    is already defined in this scope

    /tmp/tmptkkaa698.cs(62,40): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptkkaa698.cs(63,14): error CS0128: A local variable or function named ''smallest_even_index''
    is already defined in this scope

    '
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = arr.Min();\n        List<long> result =\
    \ new List<long>();\n        long smalest_index = 0;\n        foreach (long n\
    \ in arr) {\n            if (n % 2 == 0) {\n                if (smalest_value\
    \ == n) {\n                    smalest_index = arr.IndexOf(n);\n             \
    \   }\n                else {\n                    if (smalest_value < n) {\n\
    \                        smalest_value = n;\n                        smalest_index\
    \ = arr.IndexOf(n);\n                    }\n                }\n            }\n\
    \        }\n        if (smalest_index != 0) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03ced827c7a4d56a1ad38dda19271cc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f03ced827c7a4d56a1ad38dda19271cc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <f03ced827c7a4d56a1ad38dda19271cc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        int smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0 && arr[i] < smallestEvenValue) {\n \
    \               smallestEvenValue = arr[i];\n                smallestIndex = i;\n\
    \            }\n        }\n        result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ce01c8a74f647a9919f0d1eadfad083>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5ce01c8a74f647a9919f0d1eadfad083>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5ce01c8a74f647a9919f0d1eadfad083>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_even_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \            return result;\n        }\n        long smallest_value = arr.Min();\n\
    \        long smallest_index = arr.IndexOf(smallest_value);\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n            return result;\n       \
    \ }\n        long smallest_value = arr.Min();\n        long smallest_index = arr.IndexOf(smallest_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu2fu_mrt.cs(133,20): error CS1001: Identifier expected

    /tmp/tmpu2fu_mrt.cs(133,20): error CS1002: ; expected

    /tmp/tmpu2fu_mrt.cs(135,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpu2fu_mrt.cs(146,2): error CS1513: } expected

    '
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        long smallest_even_value\
    \ = -1;\n        bool found_even = false;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            long value = arr[i];\n            if (found_even) {\n  \
    \              if (value == smallest_even_value) {\n                    result.Add(smallest_value);\n\
    \                    result.Add(smallest_index);\n                    break;\n\
    \                }\n            }\n            if (value < smallest_value) {\n\
    \                smallest_value = value;\n                smallest_index = i;\n\
    \                smallest_even_value = value;\n                found_even = true;\n\
    \            }\n        }\n        if (result.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <634841d7739f44a4b8818d61bafc441b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <634841d7739f44a4b8818d61bafc441b>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <634841d7739f44a4b8818d61bafc441b>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                } else {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c881df8d2f447a4a1ab24cb175368d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c881df8d2f447a4a1ab24cb175368d7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <6c881df8d2f447a4a1ab24cb175368d7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        long smallest_value = smallest_even_value;\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] % 2 == 0) {\n                if\
    \ (smallest_value == smallest_even_value) {\n                    smallest_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                } else {\n                    smallest_value = arr[i];\n\
    \                    smallest_index = i;\n                }\n            }\n \
    \       }\n        if (found) {\n            result.Add(smallest_value);\n   \
    \         result.Add(smallest_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c881df8d2f447a4a1ab24cb175368d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c881df8d2f447a4a1ab24cb175368d7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <6c881df8d2f447a4a1ab24cb175368d7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n        long smallest_index = arr.FindIndex(x =>\
    \ x % 2 == 0);\n        if (smallest_even_value == 0) {\n            return result;\n\
    \        }\n        if (smallest_index == 0) {\n            result.Add(smallest_even_value);\n\
    \            return result;\n        }\n        long smallest_value = arr[smallest_index];\n\
    \        long smallest_even_value = arr[smallest_index] % 2 == 0;\n        if\
    \ (smallest_even_value == 0) {\n            result.Add(smallest_value);\n    \
    \        return result;\n        }\n        List<long> result_2 = Pluck(arr.Where(x\
    \ => x % 2 == 0));\n        if (result_2.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value_2 = result_2.Min(x => x % 2 == 0);\n \
    \       if (smallest_value_2 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_index_2 = result_2.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_index_2 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_value_3 = arr[smallest_index_2];\n\
    \        long smallest_even_value_3 = arr[smallest_index_2] % 2 == 0;\n      \
    \  if (smallest_even_value_3 == 0) {\n            result.Add(smallest_value_3);\n\
    \            return result;\n        }\n        List<long> result_3 = Pluck(arr.Where(x\
    \ => x % 2 == 0));\n        if (result_3.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value_4 = result_3.Min(x => x % 2 == 0);\n \
    \       if (smallest_value_4 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_index_4 = result_3.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_index_4 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_value_5 = arr[smallest_index_4];\n\
    \        long smallest_even_value_5 = arr[smallest_index_4] % 2 == 0;\n      \
    \  if (smallest_even_value_5 == 0) {\n            result.Add(smallest_value_5);\n\
    \            return result;\n        }\n        List<long> result_4 = Pluck(arr.Where(x\
    \ => x % 2 == 0));\n        if (result_4.Count == 0) {\n            return result;\n\
    \        }\n        long smallest_value_6 = result_4.Min(x => x % 2 == 0);\n \
    \       if (smallest_value_6 == 0) {\n            result.Add(smallest_value);\n\
    \            return result;\n        }\n        long smallest_index_6 = result_4.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_index_6 == 0) {\n            result.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeogagp26.cs(102,20): error CS1001: Identifier expected

    /tmp/tmpeogagp26.cs(102,20): error CS1002: ; expected

    /tmp/tmpeogagp26.cs(104,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpeogagp26.cs(115,2): error CS1513: } expected

    '
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smalest_value = arr.Min();\n        List<long> result =\
    \ new List<long>();\n        long smallest_index = 0;\n        bool found = false;\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           if (item < smalest_value) {\n                    smalest_value = item;\n\
    \                    smallest_index = arr.IndexOf(item);\n                   \
    \ found = true;\n                }\n            }\n        }\n        if (found)\
    \ {\n            result.Add(smalest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45a130b251f649adb9aae20493b73565>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <45a130b251f649adb9aae20493b73565>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <45a130b251f649adb9aae20493b73565>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (long n in arr) {\n            if (n % 2 == 0) {\n                smallest_even_value\
    \ = n;\n                smallest_index = arr.IndexOf(n);\n                found\
    \ = true;\n            }\n        }\n        if (found) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2379c74eab9408d88f54da2928ad807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2379c74eab9408d88f54da2928ad807>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        foreach (long node in arr) {\n\
    \            if (node % 2 == 0) {\n                if (smallest_value < node)\
    \ {\n                    smallest_value = node;\n                    smallest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smallest_index != 0) {\n            result.Add(smallest_value);\n         \
    \   result.Add(smallest_index);\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ff0ac305b954adba8e900e2561f5f6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ff0ac305b954adba8e900e2561f5f6b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        bool found = false;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] == smallest_even_value) {\n                found = true;\n\
    \                break;\n            }\n        }\n        if (found) {\n    \
    \        result.Add(smallest_even_value);\n            result.Add(smallest_even_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd185a3ff8e842d2a8c374e0d4df4376>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fd185a3ff8e842d2a8c374e0d4df4376>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <fd185a3ff8e842d2a8c374e0d4df4376>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        int smallest_index = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n            \
    \    smallest_value = arr[i];\n                smallest_index = i;\n         \
    \   }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        foreach (long value in\
    \ arr) {\n            if (value % 2 == 0) {\n                if (value < smallestEvenValue)\
    \ {\n                    smallestEvenValue = value;\n                    smallestIndex\
    \ = arr.IndexOf(value);\n                }\n            }\n        }\n       \
    \ result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e1138bdc701415983e896d764d232eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e1138bdc701415983e896d764d232eb>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <0e1138bdc701415983e896d764d232eb>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        for (int i = smallest_even_index + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_value =\
    \ arr[i];\n                smallest_index = i;\n            }\n        }\n   \
    \     result.Add(smallest_value);\n        result.Add(smallest_index);\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a5d62443f304e959c7e878007a3c0fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5a5d62443f304e959c7e878007a3c0fb>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <5a5d62443f304e959c7e878007a3c0fb>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        long smalest_value = arr.Min();\n        List<long> result\
    \ = new List<long>();\n        List<long> even_values = new List<long>();\n  \
    \      List<long> index_values = new List<long>();\n        foreach (long value\
    \ in arr) {\n            if (value % 2 == 0) {\n                even_values.Add(value);\n\
    \                index_values.Add(arr.IndexOf(value));\n            } else {\n\
    \                if (value < smalest_value) {\n                    smalest_value\
    \ = value;\n                }\n            }\n        }\n        if (even_values.Count\
    \ == 0) {\n            return result;\n        }\n        long smalest_even_value\
    \ = even_values.Min();\n        int smalest_index = index_values.IndexOf(even_values.IndexOf(smalest_even_value));\n\
    \        result.Add(smalest_even_value);\n        result.Add(smalest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d53b5c64bc784cf993f486080e63f69c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d53b5c64bc784cf993f486080e63f69c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (!found) {\n            return result;\n        }\n        long smallest_value_index\
    \ = arr.IndexOf(smallest_value);\n        if (smallest_value_index == -1) {\n\
    \            return result;\n        }\n        long smallest_value_index_plus_one\
    \ = smallest_value_index + 1;\n        if (smallest_value_index_plus_one == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_two\
    \ = smallest_value_index + 2;\n        if (smallest_value_index_plus_two == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_three\
    \ = smallest_value_index + 3;\n        if (smallest_value_index_plus_three ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value_index_plus_four\
    \ = smallest_value_index + 4;\n        if (smallest_value_index_plus_four == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_five\
    \ = smallest_value_index + 5;\n        if (smallest_value_index_plus_five == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_six\
    \ = smallest_value_index + 6;\n        if (smallest_value_index_plus_six == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_seven\
    \ = smallest_value_index + 7;\n        if (smallest_value_index_plus_seven ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value_index_plus_eight\
    \ = smallest_value_index + 8;\n        if (smallest_value_index_plus_eight ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value_index_plus_nine\
    \ = smallest_value_index + 9;\n        if (smallest_value_index_plus_nine == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_ten\
    \ = smallest_value_index + 10;\n        if (smallest_value_index_plus_ten == arr.Count)\
    \ {\n            return result;\n        }\n        long smallest_value_index_plus_eleven\
    \ = smallest_value_index + 11;\n        if (smallest_value_index_plus_eleven ==\
    \ arr.Count) {\n            return result;\n        }\n        long smallest_value\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5sbkvad5.cs(101,28): error CS1002: ; expected

    '
  timestamp: 1659798689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool has_even_values = false;\n\
    \        foreach (var item in arr) {\n            if (item % 2 == 0) {\n     \
    \           has_even_values = true;\n                smallest_even_value = item;\n\
    \                smallest_index = arr.IndexOf(item);\n            }\n        }\n\
    \        if (has_even_values) {\n            int smallest_even_value_index = arr.IndexOf(smallest_even_value);\n\
    \            if (smallest_even_value_index > 0) {\n                result.Add(smallest_even_value);\n\
    \                result.Add(smallest_even_value_index);\n            }\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <314e3998fd324045aecaf30e06d1408b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <314e3998fd324045aecaf30e06d1408b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var node in arr) {\n\
    \            if (node.Value % 2 == 0) {\n                if (smallest_even_value\
    \ < node.Value) {\n                    smallest_even_value = node.Value;\n   \
    \                 smallest_index = node.Index;\n                }\n          \
    \  }\n        }\n        if (smallest_even_value == 0) {\n            return new\
    \ List<long>();\n        }\n        result.Add(smallest_even_value);\n       \
    \ result.Add(smallest_index);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2tf8gdzs.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp2tf8gdzs.cs(40,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp2tf8gdzs.cs(41,48): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmp2tf8gdzs.cs(42,43): error CS1061: ''long'' does not contain a definition
    for ''Index'' and no accessible extension method ''Index'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        int smallest_index = 0;\n        bool found = false;\n       \
    \ foreach (var node in arr) {\n            if (node % 2 == 0) {\n            \
    \    found = true;\n                if (smallest_value < node) {\n           \
    \         smallest_value = node;\n                    smallest_index = arr.IndexOf(node);\n\
    \                }\n            }\n        }\n        if (found) {\n         \
    \   result.Add(smallest_value);\n            result.Add(smallest_index);\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0fa1a85a7a045d18272713ad0d36517>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d0fa1a85a7a045d18272713ad0d36517>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n     \
    \           found = true;\n                smallest_value = node.Value;\n    \
    \            smallest_index = arr.IndexOf(node);\n            }\n        }\n \
    \       if (found) {\n            result.Add(smallest_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpssonn406.cs(40,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpssonn406.cs(42,39): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798689
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (found) {\n            while (!found) {\n                smallest_value\
    \ += 2;\n                smallest_index = arr.IndexOf(smallest_value);\n     \
    \           if (smallest_index == -1) {\n                    return result;\n\
    \                }\n                found = true;\n                for (int i\
    \ = 0; i < arr.Count; i++) {\n                    if (arr[i] == smallest_value)\
    \ {\n                        found = false;\n                        break;\n\
    \                    }\n                }\n            }\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzymn9rv0.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798689
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        if (arr.Count\
    \ == 0) {\n            return result;\n        }\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        long smallest_value = 0;\n \
    \       foreach (long value in arr) {\n            if (value % 2 == 0) {\n   \
    \             if (smallest_value == 0) {\n                    smallest_even_value\
    \ = value;\n                    smallest_index = arr.IndexOf(value);\n       \
    \             smallest_value = value;\n                } else {\n            \
    \        if (value < smallest_value) {\n                        smallest_even_value\
    \ = value;\n                        smallest_index = arr.IndexOf(value);\n   \
    \                     smallest_value = value;\n                    }\n       \
    \         }\n            }\n        }\n        if (smallest_value == 0) {\n  \
    \          return result;\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75f5d8ee9661469286ded8e2c2e21a6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <75f5d8ee9661469286ded8e2c2e21a6d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0)\n            return new List<long>();\n\
    \        long smalest_value = arr.Min();\n        long smalest_index = 0;\n  \
    \      for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] % 2 == 0)\
    \ {\n                if (smalest_value < arr[i]) {\n                    smalest_value\
    \ = arr[i];\n                    smalest_index = i;\n                }\n     \
    \       }\n        }\n        return new List<long>() { smalest_value, smalest_index\
    \ };\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94b5165cb4284d88af1f0576b1454504>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <94b5165cb4284d88af1f0576b1454504>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        long smallest_index = -1;\n        long smallest_even_value\
    \ = -1;\n        bool found = false;\n        for (int i = 0; i < arr.Count; i++)\
    \ {\n            if (arr[i] % 2 == 0) {\n                if (smallest_even_value\
    \ == -1) {\n                    smallest_even_value = arr[i];\n              \
    \      smallest_index = i;\n                    found = true;\n              \
    \  } else if (arr[i] < smallest_even_value) {\n                    smallest_even_value\
    \ = arr[i];\n                    smallest_index = i;\n                    found\
    \ = true;\n                }\n            }\n        }\n        if (found) {\n\
    \            result.Add(smallest_even_value);\n            result.Add(smallest_index);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2e41db6602847339c04cf19cfea1bbc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f2e41db6602847339c04cf19cfea1bbc>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <f2e41db6602847339c04cf19cfea1bbc>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.FindIndex(x => x == smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] == smallest_value) {\n       \
    \         found = true;\n                break;\n            }\n        }\n  \
    \      if (!found) {\n            return result;\n        }\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n\
    \                continue;\n            }\n            if (smallest_value % 2\
    \ == 0) {\n                smallest_value = arr[smallest_even_index];\n      \
    \          smallest_index = smallest_even_index;\n            }\n            smallest_value\
    \ /= 2;\n            smallest_even_index++;\n        }\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16996cf7923a4e60b162eb0eac0fda9a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <16996cf7923a4e60b162eb0eac0fda9a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x0000d] in\
    \ <16996cf7923a4e60b162eb0eac0fda9a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_even_index = 0;\n        long smallest_value = 0;\n\
    \        long smallest_index = 0;\n        foreach (long n in arr) {\n       \
    \     if (n % 2 == 0) {\n                if (smallest_value == 0) {\n        \
    \            smallest_even_value = n;\n                    smallest_even_index\
    \ = n;\n                    smallest_value = n;\n                    smallest_index\
    \ = n;\n                } else if (smallest_value == n) {\n                  \
    \  smallest_even_index = n;\n                    smallest_value = n;\n       \
    \             smallest_index = n;\n                } else if (smallest_value <\
    \ n) {\n                    smallest_even_value = n;\n                    smallest_even_index\
    \ = n;\n                    smallest_value = n;\n                    smallest_index\
    \ = n;\n                }\n            } else {\n                if (smallest_value\
    \ == 0) {\n                    smallest_even_value = n;\n                    smallest_even_index\
    \ = n;\n                    smallest_value = n;\n                    smallest_index\
    \ = n;\n                } else if (smallest_value == n) {\n                  \
    \  smallest_even_index = n;\n                    smallest_value = n;\n       \
    \             smallest_index = n;\n                } else if (smallest_value <\
    \ n) {\n                    smallest_even_value = n;\n                    smallest_even_index\
    \ = n;\n                    smallest_value = n;\n                    smallest_index\
    \ = n;\n                }\n            }\n        }\n        if (smallest_value\
    \ == 0) {\n            return new List<long>();\n        }\n        result.Add(smallest_even_value);\n\
    \        result.Add(smallest_even_index);\n        result.Add(smallest_value);\n\
    \        result.Add(smallest_index);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n\
    \    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f13b1eaf2ca4448a857fc0a94164b2e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f13b1eaf2ca4448a857fc0a94164b2e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index != -1) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        else {\n   \
    \         result.Add(smallest_even_value);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ba7f5a1edc94b479d7aad7c178faef7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ba7f5a1edc94b479d7aad7c178faef7>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <1ba7f5a1edc94b479d7aad7c178faef7>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        bool found = false;\n      \
    \  foreach (var node in arr) {\n            if (node.Value % 2 == 0) {\n     \
    \           smallest_even_value = node.Value;\n                smallest_index\
    \ = arr.IndexOf(node);\n                found = true;\n                break;\n\
    \            }\n        }\n        if (!found)\n            return new List<long>();\n\
    \        if (smallest_even_value == 0)\n            return new List<long>();\n\
    \        List<long> even_values = new List<long>();\n        List<long> even_indexes\
    \ = new List<long>();\n        foreach (var node in arr) {\n            if (node.Value\
    \ % 2 == 0) {\n                even_values.Add(node.Value);\n                even_indexes.Add(arr.IndexOf(node));\n\
    \            }\n        }\n        even_values.Sort();\n        even_indexes.Sort();\n\
    \        smallest_even_value = even_values[0];\n        smallest_index = even_indexes[0];\n\
    \        foreach (var node in even_values) {\n            if (node < smallest_even_value)\
    \ {\n                smallest_even_value = node;\n                smallest_index\
    \ = even_indexes[even_values.IndexOf(node)];\n            }\n        }\n     \
    \   result.Add(smallest_even_value);\n        result.Add(smallest_index);\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwvvbybbn.cs(40,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvvbybbn.cs(41,44): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvvbybbn.cs(54,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpwvvbybbn.cs(55,38): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        long smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        long smallest_index\
    \ = smallest_even_index;\n        bool found = false;\n        for (int i = 0;\
    \ i < arr.Count; i++) {\n            if (arr[i] != smallest_value) {\n       \
    \         continue;\n            }\n            found = true;\n            long\
    \ value = arr[i];\n            long index = i;\n            if (value % 2 == 0)\
    \ {\n                smallest_value = value;\n                smallest_index =\
    \ index;\n            }\n        }\n        if (found) {\n            result.Add(smallest_value);\n\
    \            result.Add(smallest_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt9reywi4.cs(41,35): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                if (smallest_even_value < item)\
    \ {\n                    smallest_even_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smallest_even_value == 0) {\n            return new List<long>();\n       \
    \ }\n        result.Add(smallest_even_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5340d69c4cbd46959024bc307771da03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5340d69c4cbd46959024bc307771da03>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        int smallest_even_index = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                smallest_even_value\
    \ = arr[i];\n                smallest_even_index = i;\n            }\n       \
    \ }\n        if (smallest_even_value != 0) {\n            result.Add(smallest_even_value);\n\
    \            result.Add(smallest_even_index);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c490cc7cf0b443fb8d547846a10654e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c490cc7cf0b443fb8d547846a10654e2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = 0;\n        long smallest_even_index = 0;\n        bool found = false;\n \
    \       foreach (var item in arr) {\n            if (item % 2 == 0) {\n      \
    \          smallest_even_value = item;\n                smallest_even_index =\
    \ arr.IndexOf(item);\n                found = true;\n            }\n        }\n\
    \        if (found) {\n            result.Add(smallest_even_value);\n        \
    \    result.Add(smallest_even_index);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67c167e67d3c4067969c702555acaf8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67c167e67d3c4067969c702555acaf8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = arr.Min();\n        int smallest_index = -1;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] < smallest_value) {\n            \
    \    smallest_value = arr[i];\n                smallest_index = i;\n         \
    \   }\n        }\n        result.Add(smallest_value);\n        result.Add(smallest_index);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <9d087cb97e1d480e8d842c85cf1c3e1f>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798688
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min();\n        int smallest_even_index = arr.IndexOf(smallest_even_value);\n\
    \        if (smallest_even_index == -1) {\n            return result;\n      \
    \  }\n        long smallest_value = arr[smallest_even_index];\n        bool found\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                break;\n\
    \            }\n        }\n        if (found) {\n            int index = smallest_even_index;\n\
    \            while (index > 0) {\n                if (arr[index] % 2 == 0) {\n\
    \                    result.Add(arr[index]);\n                    break;\n   \
    \             }\n                index--;\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83fc2e53da2b460fa8e1ca169ae55424>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83fc2e53da2b460fa8e1ca169ae55424>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <83fc2e53da2b460fa8e1ca169ae55424>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_even_value\
    \ = arr.Min(x => x % 2 == 0);\n        long smallest_even_index = arr.FindIndex(x\
    \ => x % 2 == 0);\n        if (smallest_even_value == 0) {\n            return\
    \ result;\n        }\n        long smallest_value = arr.Min(x => x);\n       \
    \ long smallest_index = arr.FindIndex(x => x == smallest_value);\n        if (smallest_index\
    \ == -1) {\n            return result;\n        }\n        List<long> evens =\
    \ new List<long>();\n        List<long> indexes = new List<long>();\n        foreach\
    \ (long x in arr) {\n            if (x % 2 == 0) {\n                evens.Add(x);\n\
    \                indexes.Add(arr.FindIndex(y => y == x));\n            }\n   \
    \     }\n        evens.Sort();\n        foreach (long x in evens) {\n        \
    \    if (x == smallest_even_value) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                return result;\n\
    \            }\n        }\n        foreach (long x in evens) {\n            if\
    \ (x == smallest_even_index) {\n                result.Add(smallest_value);\n\
    \                result.Add(smallest_index);\n                return result;\n\
    \            }\n        }\n        foreach (long x in evens) {\n            if\
    \ (x == smallest_value) {\n                result.Add(smallest_value);\n     \
    \           result.Add(smallest_index);\n                return result;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpga1ku22w.cs(36,36): error CS0029: Cannot implicitly convert type ''bool''
    to ''long''

    '
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        if (arr.Count == 0) {\n            return new List<long>();\n\
    \        }\n        List<long> result = new List<long>();\n        long smallestEven\
    \ = arr.Min();\n        long smallestIndex = arr.IndexOf(smallestEven);\n    \
    \    bool foundSmallestEven = false;\n        bool foundSmallestIndex = false;\n\
    \        foreach (long n in arr) {\n            if (n % 2 == 0) {\n          \
    \      if (smallestEven == n) {\n                    foundSmallestEven = true;\n\
    \                }\n                else {\n                    foundSmallestEven\
    \ = false;\n                }\n            }\n            else {\n           \
    \     if (smallestEven == n) {\n                    foundSmallestIndex = true;\n\
    \                }\n                else {\n                    foundSmallestIndex\
    \ = false;\n                }\n            }\n        }\n        if (foundSmallestEven)\
    \ {\n            result.Add(smallestEven);\n            result.Add(smallestIndex);\n\
    \        }\n        else if (foundSmallestIndex) {\n            result.Add(smallestEven);\n\
    \            result.Add(smallestIndex);\n        }\n        else {\n         \
    \   result.Add(smallestEven);\n            result.Add(smallestIndex);\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb4b1c34a0534f3dab3922f1488afe98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cb4b1c34a0534f3dab3922f1488afe98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        long smallest_value = arr.Min();\n        List<long> result\
    \ = new List<long>();\n        long smallest_index = 0;\n        bool found =\
    \ false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == smallest_value) {\n                found = true;\n                smallest_index\
    \ = i;\n            }\n            if (found && arr[i] % 2 == 0) {\n         \
    \       result.Add(smallest_value);\n                result.Add(smallest_index);\n\
    \                found = false;\n            }\n        }\n        return result.Count\
    \ == 0 ? new List<long>() : result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L,\
    \ (long)3L}))).Equals((new List<long>(new long[]{(long)2L, (long)1L}))));\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4ba72126a2d4612b5c0184952c5971a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c4ba72126a2d4612b5c0184952c5971a>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00001] in\
    \ <c4ba72126a2d4612b5c0184952c5971a>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] % 2 == 0) {\n                if (smallestEvenValue\
    \ < arr[i]) {\n                    smallestEvenValue = arr[i];\n             \
    \       smallestIndex = i;\n                }\n            }\n        }\n    \
    \    result.Add(smallestEvenValue);\n        result.Add(smallestIndex);\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de12b733ba1248fbb84265bfbd7561ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de12b733ba1248fbb84265bfbd7561ce>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <de12b733ba1248fbb84265bfbd7561ce>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smalest_value\
    \ = 0;\n        int smalest_index = 0;\n        foreach (var node in arr) {\n\
    \            if (node.Value % 2 == 0) {\n                if (smalest_value < node.Value)\
    \ {\n                    smalest_value = node.Value;\n                    smalest_index\
    \ = arr.IndexOf(node);\n                }\n            }\n        }\n        if\
    \ (smalest_index != arr.IndexOf(smalest_value)) {\n            result.Add(smalest_value);\n\
    \            result.Add(smalest_index);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgv8eys4o.cs(39,22): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpgv8eys4o.cs(40,42): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    /tmp/tmpgv8eys4o.cs(41,42): error CS1061: ''long'' does not contain a definition
    for ''Value'' and no accessible extension method ''Value'' accepting a first argument
    of type ''long'' could be found (are you missing a using directive or an assembly
    reference?)

    '
  timestamp: 1659798690
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallest_value\
    \ = 0;\n        long smallest_index = 0;\n        foreach (var item in arr) {\n\
    \            if (item % 2 == 0) {\n                if (smallest_value < item)\
    \ {\n                    smallest_value = item;\n                    smallest_index\
    \ = arr.IndexOf(item);\n                }\n            }\n        }\n        if\
    \ (smallest_value == 0) {\n            return new List<long>();\n        }\n \
    \       result.Add(smallest_value);\n        result.Add(smallest_index);\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new\
    \ List<long>())));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L,\
    \ (long)0L, (long)3L, (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new\
    \ List<long>(new long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new\
    \ List<long>(new long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>(new long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new\
    \ List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72d566af4aa14591867de4738af903e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <72d566af4aa14591867de4738af903e4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659798690
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // \"Given a list representing a branch of a tree that has\
    \ non-negative integer nodes\n    // your task is to pluck one of the nodes and\
    \ return it.\n    // The plucked node should be the node with the smallest even\
    \ value.\n    // If multiple nodes with the same smallest even value are found\
    \ return the node that has smallest index.\n    // The plucked node should be\
    \ returned in a list, [ smalest_value, its index ],\n    // If there are no even\
    \ values or the given list is empty, return [].\n    // Example 1:\n    // >>>\
    \ Pluck((new List<long>(new long[]{(long)4L, (long)2L, (long)3L})))\n    // (new\
    \ List<long>(new long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest\
    \ even value, and 2 has the smallest index.\n    // Example 2:\n    // >>> Pluck((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L})))\n    // (new List<long>(new\
    \ long[]{(long)2L, (long)1L}))\n    // Explanation: 2 has the smallest even value,\
    \ and 2 has the smallest index.\n    // Example 3:\n    // >>> Pluck((new List<long>()))\n\
    \    // (new List<long>())\n    // Example 4:\n    // >>> Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)0L, (long)3L, (long)0L, (long)4L, (long)2L})))\n    //\
    \ (new List<long>(new long[]{(long)0L, (long)1L}))\n    // Explanation: 0 is the\
    \ smallest value, but  there are two zeros,\n    // so we will choose the first\
    \ zero, which has the smallest index.\n    // Constraints:\n    // * 1 <= nodes.length\
    \ <= 10000\n    // * 0 <= node.value\n    public static List<long> Pluck(List<long>\
    \ arr) {\n        List<long> result = new List<long>();\n        long smallestEvenValue\
    \ = arr.Min();\n        long smallestIndex = 0;\n        bool isSmallestEvenValueFound\
    \ = false;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ % 2 == 0) {\n                if (smallestEvenValue % 2 == 0) {\n           \
    \         isSmallestEvenValueFound = true;\n                    smallestEvenValue\
    \ = arr[i];\n                    smallestIndex = i;\n                }\n     \
    \       }\n        }\n        if (isSmallestEvenValueFound) {\n            result.Add(smallestEvenValue);\n\
    \            result.Add(smallestIndex);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Pluck((new\
    \ List<long>(new long[]{(long)4L, (long)2L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)2L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)3L}))).Equals((new List<long>(new long[]{(long)2L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>())).Equals((new List<long>())));\n\
    \    Debug.Assert(Pluck((new List<long>(new long[]{(long)5L, (long)0L, (long)3L,\
    \ (long)0L, (long)4L, (long)2L}))).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)0L, (long)5L, (long)3L}))).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)3L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)5L, (long)4L, (long)8L, (long)4L, (long)8L}))).Equals((new List<long>(new\
    \ long[]{(long)4L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)6L, (long)7L, (long)1L}))).Equals((new List<long>(new\
    \ long[]{(long)6L, (long)1L}))));\n    Debug.Assert(Pluck((new List<long>(new\
    \ long[]{(long)7L, (long)9L, (long)7L, (long)1L}))).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67609b55b5c149c5be4800e8b0c4d607>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <67609b55b5c149c5be4800e8b0c4d607>:0 \n\nUnhandled Exception:\n\
    System.InvalidOperationException: Sequence contains no elements\n  at System.Linq.Enumerable.Min\
    \ (System.Collections.Generic.IEnumerable`1[T] source) [0x00022] in <e540098dd111461e919c5863f6975c29>:0\
    \ \n  at Problem.Pluck (System.Collections.Generic.List`1[T] arr) [0x00007] in\
    \ <67609b55b5c149c5be4800e8b0c4d607>:0 \n  at Prob"
  stdout: ''
  timestamp: 1659798691
