name: HumanEval_116_sort_array
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // In this Kata, you have to sort a list of non-negative integers\
  \ according to\n    // number of ones in their binary representation in ascending\
  \ order.\n    // For similar number of ones, sort based on decimal value.\n    //\
  \ It must be implemented like this:\n    // >>> SortArray((new List<long>(new long[]{(long)1L,\
  \ (long)5L, (long)2L, (long)3L, (long)4L})))\n    // (new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L, (long)4L, (long)5L}))\n    // >>> SortArray((new List<long>(new\
  \ long[]{(long)-2L, (long)-3L, (long)-4L, (long)-5L, (long)-6L})))\n    // (new\
  \ List<long>(new long[]{(long)-6L, (long)-5L, (long)-4L, (long)-3L, (long)-2L}))\n\
  \    // >>> SortArray((new List<long>(new long[]{(long)1L, (long)0L, (long)2L, (long)3L,\
  \ (long)4L})))\n    // (new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
  \ (long)3L, (long)4L}))\n    public static List<long> SortArray(List<long> arr)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SortArray((new\
  \ List<long>(new long[]{(long)1L, (long)5L, (long)2L, (long)3L, (long)4L}))).Equals((new\
  \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)3L, (long)5L}))));\n\
  \    Debug.Assert(SortArray((new List<long>(new long[]{(long)-2L, (long)-3L, (long)-4L,\
  \ (long)-5L, (long)-6L}))).Equals((new List<long>(new long[]{(long)-4L, (long)-2L,\
  \ (long)-6L, (long)-5L, (long)-3L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)1L, (long)0L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new\
  \ long[]{(long)0L, (long)1L, (long)2L, (long)4L, (long)3L}))));\n    Debug.Assert(SortArray((new\
  \ List<long>())).Equals((new List<long>())));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)5L, (long)77L, (long)4L, (long)5L, (long)3L, (long)5L,\
  \ (long)7L, (long)2L, (long)3L, (long)4L}))).Equals((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)4L, (long)4L, (long)3L, (long)3L, (long)5L, (long)5L, (long)5L,\
  \ (long)7L, (long)77L}))));\n    Debug.Assert(SortArray((new List<long>(new long[]{(long)3L,\
  \ (long)6L, (long)44L, (long)12L, (long)32L, (long)5L}))).Equals((new List<long>(new\
  \ long[]{(long)32L, (long)3L, (long)5L, (long)6L, (long)12L, (long)44L}))));\n \
  \   Debug.Assert(SortArray((new List<long>(new long[]{(long)2L, (long)4L, (long)8L,\
  \ (long)16L, (long)32L}))).Equals((new List<long>(new long[]{(long)2L, (long)4L,\
  \ (long)8L, (long)16L, (long)32L}))));\n    Debug.Assert(SortArray((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))).Equals((new List<long>(new\
  \ long[]{(long)2L, (long)4L, (long)8L, (long)16L, (long)32L}))));\n    }\n\n}\n"
completions: ["        long ones = 0;\n        long zeros = 0;\n        long max =\
    \ 0;\n        long min = 0;\n        foreach (long i in arr) {\n            if\
    \ (i == 1L) {\n                ones++;\n            }\n            if (i == 0L)\
    \ {\n                zeros++;\n            }\n            if (i > max) {\n   \
    \             max = i;\n            }\n            if (i < min) {\n          \
    \      min = i;\n            }\n        }\n        long onesMax = ones * max;\n\
    \        long onesMin = ones * min;\n        long zerosMax = zeros * max;\n  \
    \      long zerosMin = zeros * min;\n        long onesMinMax = onesMin + onesMax;\n\
    \        long zerosMinMax = zerosMin + zerosMax;\n        long onesMinMaxZeros\
    \ = onesMin + zerosMax;\n        long zerosMinMaxZeros = zerosMin + zerosMax;\n\
    \        long onesMinMaxOnes = onesMin + onesMax;\n        long zerosMinMaxOnes\
    \ = zerosMin + onesMax;\n        long onesMinMaxOnesZeros = onesMin + zerosMax;\n\
    \        long zerosMinMaxOnesZeros = zerosMin + zerosMax;\n        long onesMinMaxOnesOnes\
    \ = onesMin + onesMax;\n        long zerosMinMaxOnesOnes = zerosMin + onesMax;\n\
    \        long onesMinMaxOnesOnesZeros = onesMin + zerosMax;\n        long zerosMinMaxOnesOnesZeros\
    \ = zerosMin + zerosMax;\n        long onesMinMaxOnesOnesOnes = onesMin + onesMax;\n\
    \        long zerosMinMaxOnesOnesOnes = zerosMin + onesMax;\n        long onesMinMaxOnesOnesOnesZeros\
    \ = onesMin + zerosMax;\n        long zerosMinMaxOnesOnesOnesZeros = zerosMin\
    \ + zerosMax;\n        long onesMinMaxOnesOnesOnesOnes = onesMin + onesMax;\n\
    \        long zerosMinMaxOnesOnesOnesOnes = zerosMin + onesMax;\n        long\
    \ onesMinMaxOnesOnesOnesOnesZeros = onesMin + zerosMax;\n        long zerosMinMaxOnesOnesOnesOnesZeros\
    \ = zerosMin + zerosMax;\n        long onesMinMaxOnesOnesOnesOnesOnes = onesMin\
    \ + onesMax", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long num in arr) {\n            if (num == 1) ones++;\n\
    \            else if (num == 0) zeros++;\n            else if (num > max) max\
    \ = num;\n        }\n        List<long> result = new List<long>();\n        long\
    \ onesCount = 0;\n        long zerosCount = 0;\n        long maxCount = 0;\n \
    \       foreach (long num in arr) {\n            if (num == 1) onesCount++;\n\
    \            else if (num == 0) zerosCount++;\n            else if (num > maxCount)\
    \ maxCount = num;\n        }\n        long onesPercent = onesCount * 100 / arr.Count;\n\
    \        long zerosPercent = zerosCount * 100 / arr.Count;\n        long maxPercent\
    \ = maxCount * 100 / arr.Count;\n        bool ascending = true;\n        if (onesCount\
    \ > zerosCount) {\n            ascending = false;\n        }\n        if (onesCount\
    \ < zerosCount) {\n            ascending = true;\n        }\n        long onesDecimal\
    \ = onesCount * 10 / arr.Count;\n        long zerosDecimal = zerosCount * 10 /\
    \ arr.Count;\n        long maxDecimal = maxCount * 10 / arr.Count;\n        if\
    \ (onesPercent > zerosPercent) {\n            ascending = false;\n        }\n\
    \        if (onesPercent < zerosPercent) {\n            ascending = true;\n  \
    \      }\n        if (onesDecimal > zerosDecimal) {\n            ascending = false;\n\
    \        }\n        if (onesDecimal < zerosDecimal) {\n            ascending =\
    \ true;\n        }\n        if (ascending) {\n            foreach (long num in\
    \ arr) {\n                if (num == 1) result.Add(num);\n                else\
    \ if (num == 0) result.Add(num);\n                else if (num > max) result.Add(num);\n\
    \            }\n        } else {\n            foreach (long num in arr) {\n  \
    \              if (num == 1) result.Add(num);\n                else if (num ==\
    \ 0) result.Add(num);\n                else if (num < max) result.Add(num);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long ones = 0;\n        long zeros = 0;\n     \
    \   foreach (long i in arr) {\n            if (i == 1L) {\n                ones++;\n\
    \            }\n            if (i == 0L) {\n                zeros++;\n       \
    \     }\n        }\n        if (ones > zeros) {\n            int onesIndex = arr.IndexOf(1L);\n\
    \            int zerosIndex = arr.IndexOf(0L);\n            int onesCount = 0;\n\
    \            int zerosCount = 0;\n            int minIndex = onesIndex;\n    \
    \        int maxIndex = zerosIndex;\n            while (onesCount < ones && zerosCount\
    \ < zeros) {\n                if (arr[minIndex] == 1L) {\n                   \
    \ onesCount++;\n                    minIndex++;\n                }\n         \
    \       else if (arr[minIndex] == 0L) {\n                    zerosCount++;\n \
    \                   minIndex++;\n                }\n                else {\n \
    \                   minIndex++;\n                }\n            }\n          \
    \  while (minIndex < maxIndex) {\n                if (arr[minIndex] == 1L) {\n\
    \                    onesCount++;\n                }\n                else if\
    \ (arr[minIndex] == 0L) {\n                    zerosCount++;\n               \
    \ }\n                else {\n                    minIndex++;\n               \
    \ }\n            }\n            while (onesCount < ones) {\n                result.Add(arr[minIndex]);\n\
    \                minIndex++;\n            }\n            while (zerosCount < zeros)\
    \ {\n                result.Add(arr[minIndex]);\n                minIndex++;\n\
    \            }\n        }\n        else if (ones < zeros) {\n            int zerosIndex\
    \ = arr.IndexOf(0L);\n            int zerosCount = 0;\n            int minIndex\
    \ = zerosIndex;\n            int maxIndex = zerosIndex;\n            while (zerosCount\
    \ < zeros && onesCount < ones) {\n                if (arr[minIndex] == 0L) {\n\
    \                    zerosCount++;\n                    minIndex++;\n        \
    \        }\n                else if (arr[minIndex] == 1L) {\n                \
    \    onesCount++;\n                    minIndex++;\n                }\n      \
    \          else {\n                    minIndex++;\n                }\n      \
    \      }\n            while (minIndex < maxIndex) {\n                if (arr[minIndex]\
    \ == 0L) {\n                    zerosCount++;\n                }\n           \
    \     else if (arr[minIndex] == 1L) {\n                    onesCount++;\n    \
    \            }\n                else {\n                    minIndex++;\n    \
    \            }\n            }\n            while (zerosCount < zeros) {\n    \
    \            result.Add(arr[minIndex]);\n                minIndex++;\n       \
    \     }\n            while (onesCount < ones) {\n                result.Add(arr[minIndex]);\n\
    \                minIndex++;\n            }\n        }\n        else {\n     \
    \       int minIndex = arr.IndexOf(1L);\n            int maxIndex = arr.", " \
    \       long ones = 0;\n        long zeros = 0;\n        long max = 0;\n     \
    \   long min = 0;\n        foreach (long i in arr) {\n            if (i == 1L)\
    \ {\n                ones++;\n            }\n            if (i == 0L) {\n    \
    \            zeros++;\n            }\n            if (i > max) {\n           \
    \     max = i;\n            }\n            if (i < min) {\n                min\
    \ = i;\n            }\n        }\n        long onesMax = ones * max;\n       \
    \ long onesMin = ones * min;\n        long zerosMax = zeros * max;\n        long\
    \ zerosMin = zeros * min;\n        long maxOnes = ones * max;\n        long maxZeros\
    \ = zeros * max;\n        long minOnes = ones * min;\n        long minZeros =\
    \ zeros * min;\n        List<long> res = new List<long>();\n        long onesSum\
    \ = 0;\n        long zerosSum = 0;\n        long maxOnesSum = 0;\n        long\
    \ maxZerosSum = 0;\n        long minOnesSum = 0;\n        long minZerosSum = 0;\n\
    \        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n        long\
    \ minOnesCount = 0;\n        long minZerosCount = 0;\n        long maxOnesSumCount\
    \ = 0;\n        long maxZerosSumCount = 0;\n        long minOnesSumCount = 0;\n\
    \        long minZerosSumCount = 0;\n        long maxOnesCountCount = 0;\n   \
    \     long maxZerosSumCountCount = 0;\n        long minOnesSumCountCount = 0;\n\
    \        long minZerosSumCountCount = 0;\n        long maxOnesSumCountCount =\
    \ 0;\n        long maxZerosSumCountCount = 0;\n        long minOnesSumCountCount\
    \ = 0;\n        long minZerosSumCountCount = 0;\n        long maxOnesSumCountCount\
    \ = 0;\n        long maxZerosSumCountCount = 0;\n        long minOnesSumCountCount\
    \ = 0;\n        long minZerosSumCountCount = 0;\n        long maxOnesSumCountCount\
    \ = 0;\n        long maxZerosSumCountCount = 0;\n        long minOnesSumCountCount\
    \ = 0;\n        long minZerosSumCountCount = 0;\n        long maxOnesSumCountCount\
    \ = 0;\n        long maxZerosSumCountCount = 0;\n        long minOnesSumCountCount\
    \ = 0;\n        long minZerosSumCountCount = 0;\n        long maxOnesSumCountCount\
    \ = 0;\n        long maxZeros", "        List<long> result = new List<long>();\n\
    \        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n    \
    \    long min = 0;\n        foreach (long i in arr) {\n            if (i == 1L)\
    \ {\n                ones++;\n            } else {\n                zeros++;\n\
    \            }\n            if (ones > zeros) {\n                max = i;\n  \
    \          } else if (zeros > ones) {\n                min = i;\n            }\n\
    \        }\n        long onesMax = ones == 0 ? 0 : max;\n        long zerosMax\
    \ = zeros == 0 ? 0 : max;\n        long onesMin = ones == 0 ? 0 : min;\n     \
    \   long zerosMin = zeros == 0 ? 0 : min;\n        long onesMaxMin = onesMax <\
    \ onesMin ? onesMax : onesMin;\n        long zerosMaxMin = zerosMax < zerosMin\
    \ ? zerosMax : zerosMin;\n        long onesMaxMinZeros = onesMaxMin < zerosMin\
    \ ? onesMaxMin : zerosMin;\n        long zerosMaxMinZeros = zerosMaxMin < zerosMin\
    \ ? zerosMaxMin : zerosMin;\n        long onesMaxMinZerosZeros = onesMaxMinZeros\
    \ == zerosMin ? onesMaxMinZeros : zerosMin;\n        long zerosMaxMinZerosZeros\
    \ = zerosMaxMinZeros == zerosMin ? zerosMaxMinZeros : zerosMin;\n        long\
    \ onesMaxMinZerosZerosZeros = onesMaxMinZerosZeros == zerosMin ? onesMaxMinZerosZeros\
    \ : zerosMin;\n        long zerosMaxMinZerosZerosZeros = zerosMaxMinZerosZeros\
    \ == zerosMin ? zerosMaxMinZerosZeros : zerosMin;\n        long onesMaxMinZerosZerosZerosZeros\
    \ = onesMaxMinZerosZerosZeros == zerosMin ? onesMaxMinZerosZerosZeros : zerosMin;\n\
    \        long zerosMaxMinZerosZerosZerosZeros = zerosMaxMinZerosZerosZeros ==\
    \ zerosMin ? zerosMaxMinZerosZerosZeros : zerosMin;\n        long onesMaxMinZerosZerosZerosZerosZeros\
    \ = onesMaxMinZerosZerosZerosZeros == zerosMin ? onesMaxMinZerosZerosZerosZeros\
    \ : zerosMin;\n        long zerosMaxMinZerosZer", "        long ones = 0;\n  \
    \      long zeros = 0;\n        long max = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1L) {\n                ones++;\n            }\n    \
    \        if (i == 0L) {\n                zeros++;\n            }\n           \
    \ if (i > max) {\n                max = i;\n            }\n        }\n       \
    \ List<long> result = new List<long>();\n        if (ones > zeros) {\n       \
    \     long onesMax = Convert.ToInt64(Math.Pow(2, ones));\n            long zerosMax\
    \ = Convert.ToInt64(Math.Pow(2, zeros));\n            long onesMin = Convert.ToInt64(Math.Pow(2,\
    \ ones - 1));\n            long zerosMin = Convert.ToInt64(Math.Pow(2, zeros -\
    \ 1));\n            long onesMax2 = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMax2 = Convert.ToInt64(Math.Pow(2, zeros - 1));\n     \
    \       long onesMin2 = Convert.ToInt64(Math.Pow(2, ones - 1));\n            long\
    \ zerosMin2 = Convert.ToInt64(Math.Pow(2, zeros - 1));\n            long onesMax3\
    \ = Convert.ToInt64(Math.Pow(2, ones - 1));\n            long zerosMax3 = Convert.ToInt64(Math.Pow(2,\
    \ zeros - 1));\n            long onesMin3 = Convert.ToInt64(Math.Pow(2, ones -\
    \ 1));\n            long zerosMin3 = Convert.ToInt64(Math.Pow(2, zeros - 1));\n\
    \            long onesMax4 = Convert.ToInt64(Math.Pow(2, ones - 1));\n       \
    \     long zerosMax4 = Convert.ToInt64(Math.Pow(2, zeros - 1));\n            long\
    \ onesMin4 = Convert.ToInt64(Math.Pow(2, ones - 1));\n            long zerosMin4\
    \ = Convert.ToInt64(Math.Pow(2, zeros - 1));\n            long onesMax5 = Convert.ToInt64(Math.Pow(2,\
    \ ones - 1));\n            long zerosMax5 = Convert.ToInt64(Math.Pow(2, zeros\
    \ - 1));\n            long onesMin5 = Convert.ToInt64(Math.Pow(2, ones - 1));\n\
    \            long zerosMin5 = Convert.ToInt64(Math.Pow(2, zeros - 1));\n     \
    \       long onesMax6 = Convert.ToInt64(Math.Pow(2, ones - 1));\n            long\
    \ zerosMax6 = Convert.ToInt64(Math.Pow(2, zeros - 1));\n            long onesMin6\
    \ = Convert.ToInt64(Math.Pow(2, ones - 1));\n            long zerosMin6 = Convert.ToInt64(Math.Pow(2,\
    \ zeros - 1));\n            long onesMax7 = Convert.ToInt64(Math.Pow(2, ones -\
    \ 1));\n", "        long ones = 0;\n        long zeros = 0;\n        long max\
    \ = 0;\n        foreach (long i in arr) {\n            if (i == 1L) {\n      \
    \          ones++;\n            }\n            if (i == 0L) {\n              \
    \  zeros++;\n            }\n            if (i > max) {\n                max =\
    \ i;\n            }\n        }\n        long onesMax = ones;\n        long zerosMax\
    \ = zeros;\n        long maxMax = max;\n        List<long> result = new List<long>();\n\
    \        if (onesMax < zerosMax) {\n            onesMax = zerosMax;\n        \
    \    zerosMax = maxMax;\n            maxMax = max;\n        }\n        long onesMin\
    \ = ones;\n        long zerosMin = zeros;\n        long maxMin = max;\n      \
    \  while (onesMin < zerosMin) {\n            onesMin++;\n            zerosMin++;\n\
    \            maxMin++;\n        }\n        while (zerosMin < maxMin) {\n     \
    \       zerosMin++;\n            maxMin++;\n        }\n        while (onesMin\
    \ < zerosMin) {\n            onesMin++;\n            zerosMin++;\n           \
    \ maxMin++;\n        }\n        while (zerosMin < maxMin) {\n            zerosMin++;\n\
    \            maxMin++;\n        }\n        while (onesMin < zerosMin) {\n    \
    \        onesMin++;\n            zerosMin++;\n            maxMin++;\n        }\n\
    \        while (zerosMin < maxMin) {\n            zerosMin++;\n            maxMin++;\n\
    \        }\n        while (onesMin < zerosMin) {\n            onesMin++;\n   \
    \         zerosMin++;\n            maxMin++;\n        }\n        while (zerosMin\
    \ < maxMin) {\n            zerosMin++;\n            maxMin++;\n        }\n   \
    \     while (onesMin < zerosMin) {\n            onesMin++;\n            zerosMin++;\n\
    \            maxMin++;\n        }\n        while (zerosMin < maxMin) {\n     \
    \       zerosMin++;\n            maxMin++;\n        }\n        while (onesMin\
    \ < zerosMin) {\n            onesMin++;\n            zerosMin++;\n           \
    \ maxMin++;\n        }\n        while (zerosMin < maxMin) {\n            zerosMin++;\n\
    \            maxMin++;\n        }\n        while (onesMin < zerosMin) {\n    \
    \        onesMin++;\n            zerosMin++;\n            maxMin++;\n        }\n\
    \        while (zerosMin < maxMin) {\n            zerosMin++;\n            maxMin++;\n\
    \        }\n        while (onesMin < zerosMin) {\n            onesMin++;\n   \
    \         zerosMin++;\n            maxMin++;\n        }\n        while (zerosMin\
    \ < maxMin) {\n            zerosMin++;\n            maxMin++;\n", "        long\
    \ ones = 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long\
    \ n in arr) {\n            if (n == 1L) {\n                ones++;\n         \
    \   }\n            if (n == 0L) {\n                zeros++;\n            }\n \
    \           if (n > max) {\n                max = n;\n            }\n        }\n\
    \        List<long> result = new List<long>();\n        long onesMax = ones;\n\
    \        long zerosMax = zeros;\n        long maxMax = max;\n        while (onesMax\
    \ < maxMax) {\n            result.Add(0L);\n            onesMax++;\n        }\n\
    \        while (zerosMax < maxMax) {\n            result.Add(1L);\n          \
    \  zerosMax++;\n        }\n        while (onesMax < maxMax) {\n            result.Add(1L);\n\
    \            onesMax++;\n        }\n        while (zerosMax < maxMax) {\n    \
    \        result.Add(0L);\n            zerosMax++;\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        long ones = 0;\n       \
    \ long zeros = 0;\n        long max = 0;\n        foreach (long i in arr) {\n\
    \            ones += i;\n            zeros -= i;\n            if (ones > max)\
    \ {\n                max = ones;\n            }\n            if (zeros > max)\
    \ {\n                max = zeros;\n            }\n        }\n        long onesMax\
    \ = max;\n        long zerosMax = max;\n        long onesMin = max;\n        long\
    \ zerosMin = max;\n        foreach (long i in arr) {\n            onesMax += i;\n\
    \            zerosMax -= i;\n            if (onesMax < onesMin) {\n          \
    \      onesMin = onesMax;\n            }\n            if (zerosMax < zerosMin)\
    \ {\n                zerosMin = zerosMax;\n            }\n        }\n        long\
    \ onesMaxMin = onesMax;\n        long zerosMaxMin = zerosMax;\n        long onesMinMax\
    \ = onesMin;\n        long zerosMinMax = zerosMin;\n        foreach (long i in\
    \ arr) {\n            onesMaxMin += i;\n            zerosMaxMin -= i;\n      \
    \      if (onesMaxMin > onesMinMax) {\n                onesMinMax = onesMaxMin;\n\
    \            }\n            if (zerosMaxMin > zerosMinMax) {\n               \
    \ zerosMinMax = zerosMaxMin;\n            }\n        }\n        long onesMaxMinMin\
    \ = onesMaxMin;\n        long zerosMaxMinMin = zerosMaxMin;\n        long onesMinMaxMin\
    \ = onesMinMax;\n        long zerosMinMaxMin = zerosMinMax;\n        foreach (long\
    \ i in arr) {\n            onesMaxMinMin += i;\n            zerosMaxMinMin -=\
    \ i;\n            if (onesMaxMinMin > onesMinMaxMin) {\n                onesMinMaxMin\
    \ = onesMaxMinMin;\n            }\n            if (zerosMaxMinMin > zerosMinMaxMin)\
    \ {\n                zerosMinMaxMin = zerosMaxMinMin;\n            }\n       \
    \ }\n        long onesMaxMinMinMin = onesMaxMinMin;\n        long zerosMaxMinMinMin\
    \ = zerosMaxMinMin;\n        long onesMinMaxMinMin = onesMinMaxMin;\n        long\
    \ zerosMinMaxMinMin = zerosMinMaxMin;\n        foreach (long i in arr) {\n   \
    \         onesMaxMinMinMin += i;\n            zerosMaxMinMinMin -= i;\n      \
    \      if (onesMaxMinMinMin > one", "        long ones = 0;\n        long zeros\
    \ = 0;\n        long max = 0;\n        foreach (long i in arr) {\n           \
    \ if (i == 1L) {\n                ones++;\n            }\n            if (i ==\
    \ 0L) {\n                zeros++;\n            }\n            if (i > max) {\n\
    \                max = i;\n            }\n        }\n        List<long> result\
    \ = new List<long>();\n        if (ones > zeros) {\n            long onesMax =\
    \ Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max, 2))) + 1);\n     \
    \       long zeroesMax = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2))) - 1);\n            long onesMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 1));\n            long zeroesMax2 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 1));\n            long onesMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 2));\n            long zeroesMax3 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 2));\n            long onesMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 3));\n            long zeroesMax4 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 3));\n            long onesMax5 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 4));\n            long zeroesMax5 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 4));\n            long onesMax6 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 5));\n            long zeroesMax6 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 5));\n            long onesMax7 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 6));\n            long zeroesMax7 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 6));\n            long onesMax8 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) - 7));\n            long zeroesMax8 = Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log(max,\
    \ 2)) + 7));\n            long onesMax9 = Convert.ToInt", "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long i\
    \ in arr) {\n            ones += i;\n            zeros += (long)Math.Abs(i);\n\
    \            if (max < zeros) {\n                max = zeros;\n            }\n\
    \        }\n        long onesMax = ones;\n        long zerosMax = zeros;\n   \
    \     long maxMax = max;\n        List<long> result = new List<long>();\n    \
    \    List<long> tmp = new List<long>();\n        long onesTmp = 0;\n        long\
    \ zerosTmp = 0;\n        long maxTmp = 0;\n        long onesMaxTmp = 0;\n    \
    \    long zerosMaxTmp = 0;\n        long maxMaxTmp = 0;\n        foreach (long\
    \ i in arr) {\n            onesTmp += i;\n            zerosTmp += (long)Math.Abs(i);\n\
    \            if (maxTmp < zerosTmp) {\n                maxTmp = zerosTmp;\n  \
    \          }\n            if (onesTmp > onesMaxTmp) {\n                onesMaxTmp\
    \ = onesTmp;\n            }\n            if (zerosTmp > zerosMaxTmp) {\n     \
    \           zerosMaxTmp = zerosTmp;\n            }\n            if (maxTmp > maxMaxTmp)\
    \ {\n                maxMaxTmp = maxTmp;\n            }\n            tmp.Add(i);\n\
    \        }\n        long onesTmpMax = onesMaxTmp;\n        long zerosTmpMax =\
    \ zerosMaxTmp;\n        long maxTmpMax = maxMaxTmp;\n        foreach (long i in\
    \ tmp) {\n            onesTmp -= i;\n            zerosTmp -= (long)Math.Abs(i);\n\
    \            if (maxTmp < zerosTmp) {\n                maxTmp = zerosTmp;\n  \
    \          }\n            if (onesTmp < onesTmpMax) {\n                onesTmpMax\
    \ = onesTmp;\n            }\n            if (zerosTmp < zerosTmpMax) {\n     \
    \           zerosTmpMax = zerosTmp;\n            }\n            if (maxTmp < maxTmpMax)\
    \ {\n                maxTmpMax = maxTmp;\n            }\n        }\n        long\
    \ onesTmpMaxMax = onesTmpMax;\n        long zerosTmpMaxMax = zerosTmpMax;\n  \
    \      long maxTmpMaxMax = maxTmpMax;\n        foreach (long i in tmp) {\n   \
    \         onesTmpMax -= i;\n            zerosTmpMax -= (long)", "        long\
    \ ones = arr.Sum(x => x & 1L);\n        long zeros = arr.Sum(x => x & 0L);\n \
    \       if (ones < zeros) {\n            return arr.OrderBy(x => Convert.ToInt64(Math.Pow(2,\
    \ Convert.ToInt32(Math.Log10(Math.Abs(x))))).ToString()).ToList();\n        }\n\
    \        return arr.OrderBy(x => Convert.ToInt64(Math.Pow(2, Convert.ToInt32(Math.Log10(Math.Abs(x))))).ToString()).ToList();",
  "        long ones = 0;\n        long zeros = 0;\n        long max = 0;\n      \
    \  long min = 0;\n        foreach (long i in arr) {\n            if (i == 1L)\
    \ {\n                ones++;\n            }\n            if (i == 0L) {\n    \
    \            zeros++;\n            }\n            if (i > max) {\n           \
    \     max = i;\n            }\n            if (i < min) {\n                min\
    \ = i;\n            }\n        }\n        List<long> result = new List<long>();\n\
    \        long onesMax = ones;\n        long zerosMax = zeros;\n        long maxMax\
    \ = max;\n        long minMin = min;\n        long onesMin = ones;\n        long\
    \ zerosMin = zeros;\n        long maxMin = max;\n        long minMax = min;\n\
    \        long onesMaxMin = ones;\n        long zerosMaxMin = zeros;\n        long\
    \ maxMaxMin = max;\n        long minMinMax = min;\n        long onesMinMax = ones;\n\
    \        long zerosMinMax = zeros;\n        long maxMinMax = max;\n        long\
    \ minMaxMin = min;\n        long onesMaxMinMax = ones;\n        long zerosMaxMinMax\
    \ = zeros;\n        long maxMaxMinMax = max;\n        long minMinMaxMin = min;\n\
    \        long onesMinMaxMin = ones;\n        long zerosMinMaxMin = zeros;\n  \
    \      long maxMinMaxMin = max;\n        long minMaxMinMax = min;\n        long\
    \ onesMaxMinMaxMin = ones;\n        long zerosMaxMinMaxMin = zeros;\n        long\
    \ maxMaxMinMaxMin = max;\n        long minMinMaxMinMax = min;\n        long onesMinMaxMinMaxMin\
    \ = ones;\n        long zerosMinMaxMinMaxMin = zeros;\n        long maxMaxMinMaxMinMax\
    \ = max;\n        long minMinMaxMinMaxMin = min;\n        long onesMinMaxMinMaxMinMax\
    \ = ones;\n        long zerosMinMaxMinMaxMinMax = zeros;\n        long maxMaxMinMaxMinMaxMax\
    \ = max;\n        long minMinMaxMinMaxMinMax = min;\n        long onesMinMaxMinMaxMinMaxMin\
    \ = ones;\n        long zerosMinMaxMinMaxMinMaxMin = zeros;\n        long maxMaxMinMaxMinMaxMinMax\
    \ = max;\n        long minMinMaxMinMaxMinMaxMinMax = min;", "        long ones\
    \ = 0;\n        long zeros = 0;\n        long maxOnes = 0;\n        long maxZeros\
    \ = 0;\n        long maxOnesCount = 0;\n        long maxZerosCount = 0;\n    \
    \    long maxOnesCount2 = 0;\n        long maxZerosCount2 = 0;\n        long maxOnesCount3\
    \ = 0;\n        long maxZerosCount3 = 0;\n        long maxOnesCount4 = 0;\n  \
    \      long maxZerosCount4 = 0;\n        long maxOnesCount5 = 0;\n        long\
    \ maxZerosCount5 = 0;\n        long maxOnesCount6 = 0;\n        long maxZerosCount6\
    \ = 0;\n        long maxOnesCount7 = 0;\n        long maxZerosCount7 = 0;\n  \
    \      long maxOnesCount8 = 0;\n        long maxZerosCount8 = 0;\n        long\
    \ maxOnesCount9 = 0;\n        long maxZerosCount9 = 0;\n        long maxOnesCount10\
    \ = 0;\n        long maxZerosCount10 = 0;\n        long maxOnesCount11 = 0;\n\
    \        long maxZerosCount11 = 0;\n        long maxOnesCount12 = 0;\n       \
    \ long maxZerosCount12 = 0;\n        long maxOnesCount13 = 0;\n        long maxZerosCount13\
    \ = 0;\n        long maxOnesCount14 = 0;\n        long maxZerosCount14 = 0;\n\
    \        long maxOnesCount15 = 0;\n        long maxZerosCount15 = 0;\n       \
    \ long maxOnesCount16 = 0;\n        long maxZerosCount16 = 0;\n        long maxOnesCount17\
    \ = 0;\n        long maxZerosCount17 = 0;\n        long maxOnesCount18 = 0;\n\
    \        long maxZerosCount18 = 0;\n        long maxOnesCount19 = 0;\n       \
    \ long maxZerosCount19 = 0;\n        long maxOnesCount20 = 0;\n        long maxZerosCount20\
    \ = 0;\n        long maxOnesCount21 = 0;\n        long maxZerosCount21 = 0;\n\
    \        long maxOnesCount22 = 0;\n        long maxZerosCount22 = 0;\n       \
    \ long maxOnesCount23 = 0;\n        long maxZerosCount23 = 0;\n        long maxOnesCount24\
    \ = 0;\n        long maxZerosCount24 = 0;\n        long maxOnesCount25 = 0;\n\
    \        long maxZerosCount25 = 0;\n        long maxOnesCount26 = 0;\n       \
    \ long maxZerosCount26 = 0;\n        long maxOnesCount", "        long ones =\
    \ 0;\n        long zeros = 0;\n        long max = 0;\n        foreach (long i\
    \ in arr) {\n            if (i == 1L) {\n                ones++;\n           \
    \ }\n            if (i == 0L) {\n                zeros++;\n            }\n   \
    \         if (i > max) {\n                max = i;\n            }\n        }\n\
    \        long onesMax = ones * max;\n        long zerosMax = zeros * max;\n  \
    \      long onesMin = ones * min;\n        long zerosMin = zeros * min;\n    \
    \    long onesMaxMin = onesMax * min;\n        long zerosMaxMin = zerosMax * min;\n\
    \        long onesMinMax = onesMin * max;\n        long zerosMinMax = zerosMin\
    \ * max;\n        long onesMaxMinMax = onesMaxMin * max;\n        long zerosMaxMinMax\
    \ = zerosMaxMin * max;\n        long onesMinMaxMinMax = onesMinMax * max;\n  \
    \      long zerosMinMaxMinMax = zerosMinMax * max;\n        long onesMinMaxMinMaxMin\
    \ = onesMinMaxMin * min;\n        long zerosMinMaxMinMax = zerosMinMax * min;\n\
    \        long onesMinMaxMinMaxMinMax = onesMinMaxMinMax * max;\n        long zerosMinMaxMinMaxMinMax\
    \ = zerosMinMaxMinMax * max;\n        long onesMinMaxMinMaxMinMaxMin = onesMinMaxMinMaxMinMax\
    \ * min;\n        long zerosMinMaxMinMaxMinMax = zerosMinMaxMinMax * min;\n  \
    \      long onesMinMaxMinMaxMinMaxMinMax = onesMinMaxMinMaxMinMax * min;\n   \
    \     long zerosMinMaxMinMaxMinMaxMinMax = zerosMinMaxMinMax * min;\n        long\
    \ onesMinMaxMinMaxMinMaxMinMaxMin = onesMinMaxMinMaxMinMax * min;\n        long\
    \ zerosMinMaxMinMaxMinMaxMinMax = zerosMinMaxMinMax * min;\n        long onesMinMaxMinMaxMinMaxMinMaxMin\
    \ = onesMinMaxMinMaxMinMax * min;\n        long zerosMinMaxMinMaxMinMaxMinMax\
    \ = zerosMinMaxMinMax * min;\n        long onesMinMaxMinMaxMinMaxMinMaxMin = onesMinMaxMinMaxMinMax\
    \ * min;\n        long zerosMinMaxMinMaxMinMaxMinMaxMin = ", "        long ones\
    \ = arr.Sum(x => x & 1);\n        if (ones == 0) return arr;\n        long zeros\
    \ = arr.Sum(x => ~x);\n        long maxOnes = arr.Max(x => x & 1);\n        long\
    \ maxZeros = arr.Max(x => ~x);\n        long maxOnesZeros = maxOnes - maxZeros;\n\
    \        long maxOnesOnes = maxOnes - ones;\n        long maxOnesOnesZeros = maxOnesOnes\
    \ - maxZeros;\n        long maxOnesOnesOnes = maxOnesOnes - ones;\n        long\
    \ maxOnesOnesOnesZeros = maxOnesOnesOnes - maxZeros;\n        long maxOnesOnesOnesOnes\
    \ = maxOnesOnesOnes - ones;\n        long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesOnes\
    \ - maxZeros;\n        long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnes - ones;\n\
    \        long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesZeros - maxZeros;\n\
    \        long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnes - ones;\n    \
    \    long maxOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesZeros - maxZeros;\n  \
    \      long maxOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnes - ones;\n      \
    \  long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n\
    \        long maxOnesOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnesOnes - ones;\n\
    \        long maxOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesZeros - maxZeros;\n\
    \        long maxOnesOnesOnesOnesOnesOnes = maxOnesOnesOnesOnesOnesOnes - ones;\n\
    \        long maxOnesOnesOnesOnesOnesOnesZeros = maxOnesOnesOnesOnesOnesOnesZeros\
    \ - maxZeros;\n        long maxOnesOne", "        long ones = arr.Sum(x => x &\
    \ 1L);\n        long zeros = arr.Sum(x => x >> 1);\n        long maxOnes = arr.Max(x\
    \ => x & 1L);\n        long maxZeros = arr.Max(x => x >> 1);\n        long maxOnesCount\
    \ = arr.Count(x => x & 1L);\n        long maxZerosCount = arr.Count(x => x >>\
    \ 1);\n        long maxOnesDecimal = arr.Max(x => (long)Math.Pow(2, (int)Math.Log10(x\
    \ & 1L)));\n        long maxZerosDecimal = arr.Max(x => (long)Math.Pow(2, (int)Math.Log10(x\
    \ >> 1)));\n        long maxOnesDecimalCount = arr.Count(x => (long)Math.Pow(2,\
    \ (int)Math.Log10(x & 1L)));\n        long maxZerosDecimalCount = arr.Count(x\
    \ => (long)Math.Pow(2, (int)Math.Log10(x >> 1)));\n        long maxOnesDecimalCount\
    \ = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x & 1L)));\n        long\
    \ maxZerosDecimalCount = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x >>\
    \ 1)));\n        long maxOnesDecimalCount = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x\
    \ & 1L)));\n        long maxZerosDecimalCount = arr.Count(x => (long)Math.Pow(2,\
    \ (int)Math.Log10(x >> 1)));\n        long maxOnesDecimalCount = arr.Count(x =>\
    \ (long)Math.Pow(2, (int)Math.Log10(x & 1L)));\n        long maxZerosDecimalCount\
    \ = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x >> 1)));\n        long\
    \ maxOnesDecimalCount = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x & 1L)));\n\
    \        long maxZerosDecimalCount = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x\
    \ >> 1)));\n        long maxOnesDecimalCount = arr.Count(x => (long)Math.Pow(2,\
    \ (int)Math.Log10(x & 1L)));\n        long maxZerosDecimalCount = arr.Count(x\
    \ => (long)Math.Pow(2, (int)Math.Log10(x >> 1)));\n        long maxOnesDecimalCount\
    \ = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x & 1L)));\n        long\
    \ maxZerosDecimalCount = arr.Count(x => (long)Math.Pow(2, (int)Math.Log10(x >>\
    \ 1)));\n        long maxOnes", "        long ones = 0;\n        long zeros =\
    \ 0;\n        long max = 0;\n        long min = 0;\n        foreach (long i in\
    \ arr) {\n            if (i == 1L) {\n                ones++;\n            } else\
    \ if (i == 0L) {\n                zeros++;\n            } else {\n           \
    \     max = Math.Max(max, i);\n                min = Math.Min(min, i);\n     \
    \       }\n        }\n        List<long> result = new List<long>();\n        if\
    \ (ones > zeros) {\n            long onesMax = ones;\n            long onesMin\
    \ = ones;\n            long zeroMax = zeros;\n            long zeroMin = zeros;\n\
    \            while (onesMax > zeroMax) {\n                result.Add(zeroMin);\n\
    \                onesMax--;\n                zeroMax--;\n            }\n     \
    \       while (onesMin < zeroMin) {\n                result.Add(zeroMax);\n  \
    \              onesMin++;\n                zeroMin++;\n            }\n       \
    \ } else {\n            long zerosMax = zeros;\n            long zerosMin = zeros;\n\
    \            long onesMax = ones;\n            long onesMin = ones;\n        \
    \    while (zerosMax > onesMax) {\n                result.Add(onesMin);\n    \
    \            zerosMax--;\n                onesMax--;\n            }\n        \
    \    while (zerosMin < onesMin) {\n                result.Add(onesMax);\n    \
    \            zerosMin++;\n                onesMin++;\n            }\n        }\n\
    \        return result;", "        long ones = 0;\n        long zeros = 0;\n \
    \       long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == 1L) {\n                ones++;\n            }\n    \
    \        if (i == 0L) {\n                zeros++;\n            }\n           \
    \ if (i > max) {\n                max = i;\n            }\n            if (i <\
    \ min) {\n                min = i;\n            }\n        }\n        long onesMax\
    \ = Convert.ToInt64(Math.Pow(2, ones));\n        long zerosMax = Convert.ToInt64(Math.Pow(2,\
    \ zeros));\n        long maxOnes = Convert.ToInt64(Math.Pow(2, max));\n      \
    \  long minOnes = Convert.ToInt64(Math.Pow(2, min));\n        long maxZeros =\
    \ Convert.ToInt64(Math.Pow(2, maxOnes));\n        long minZeros = Convert.ToInt64(Math.Pow(2,\
    \ minOnes));\n        long maxOnesMax = Convert.ToInt64(Math.Pow(2, maxOnes));\n\
    \        long minOnesMax = Convert.ToInt64(Math.Pow(2, minOnes));\n        long\
    \ maxZerosMax = Convert.ToInt64(Math.Pow(2, maxZeros));\n        long minZerosMax\
    \ = Convert.ToInt64(Math.Pow(2, minZeros));\n        long maxOnesMin = Convert.ToInt64(Math.Pow(2,\
    \ maxOnesMax));\n        long minOnesMin = Convert.ToInt64(Math.Pow(2, minOnesMax));\n\
    \        long maxZerosMin = Convert.ToInt64(Math.Pow(2, maxZerosMax));\n     \
    \   long minZerosMin = Convert.ToInt64(Math.Pow(2, minZerosMax));\n        long\
    \ maxOnesMinMax = Convert.ToInt64(Math.Pow(2, maxOnesMin));\n        long minOnesMinMax\
    \ = Convert.ToInt64(Math.Pow(2, minOnesMin));\n        long maxZerosMinMax = Convert.ToInt64(Math.Pow(2,\
    \ maxZerosMin));\n        long minZerosMinMax = Convert.ToInt64(Math.Pow(2, minZerosMin));\n\
    \        long maxOnesMinMaxMin = Convert.ToInt64(Math.Pow(2, maxOnesMinMax));\n\
    \        long minOnesMinMaxMin = Convert.ToInt64(Math.Pow(2, minOnesMinMax));\n\
    \        long maxZerosMinMaxMin = Convert.ToInt64(Math.Pow(2, maxZerosMinMax));\n\
    \        long minZer", "        long ones = arr.Sum(x => x & 1L);\n        long\
    \ zeros = arr.Sum(x => x >> 1);\n        long maxOnes = arr.Max(x => x & 1L);\n\
    \        long maxZeros = arr.Max(x => x >> 1);\n        long maxOnesZeros = maxOnes\
    \ - maxZeros;\n        long maxOnesOnes = maxOnes - ones;\n        long maxOnesTwos\
    \ = maxOnes - twos;\n        long maxOnesThrees = maxOnes - threes;\n        long\
    \ maxOnesFours = maxOnes - fours;\n        long maxOnesFives = maxOnes - fives;\n\
    \        long maxOnesSixes = maxOnes - sixes;\n        long maxOnesSevens = maxOnes\
    \ - sevens;\n        long maxOnesEights = maxOnes - eights;\n        long maxOnesNines\
    \ = maxOnes - nines;\n        long maxOnesTens = maxOnes - tens;\n        long\
    \ maxOnesElevens = maxOnes - elevens;\n        long maxOnesTwelves = maxOnes -\
    \ twelves;\n        long maxOnesThirteens = maxOnes - thirteens;\n        long\
    \ maxOnesFourteens = maxOnes - fourteens;\n        long maxOnesFifteens = maxOnes\
    \ - fifteens;\n        long maxOnesSixteens = maxOnes - sixteens;\n        long\
    \ maxOnesSeventeens = maxOnes - seventeens;\n        long maxOnesEighteens = maxOnes\
    \ - eighteens;\n        long maxOnesNineteens = maxOnes - nineteens;\n       \
    \ long maxOnesTwenty = maxOnes - twenty;\n        long maxOnesThirty = maxOnes\
    \ - thirty;\n        long maxOnesForty = maxOnes - forty;\n        long maxOnesFifty\
    \ = maxOnes - fifty;\n        long maxOnesSixty = maxOnes - sixty;\n        long\
    \ maxOnesSeventy = maxOnes - seventy;\n        long maxOnesEighty = maxOnes -\
    \ eighty;\n        long maxOnesNinety = maxOnes - ninety;\n        long maxOnesTwentyOnes\
    \ = maxOnes - twentyOnes;\n        long maxOnesTwenty"]
stop_tokens:
- "\n    }\n"
