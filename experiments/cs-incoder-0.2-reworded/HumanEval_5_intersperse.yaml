name: HumanEval_5_intersperse
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Insert a number 'delimeter' between every two consecutive elements\
  \ of input list `numbers'\n    // >>> Intersperse((new List<long>()), (4L))\n  \
  \  // (new List<long>())\n    // >>> Intersperse((new List<long>(new long[]{(long)1L,\
  \ (long)2L, (long)3L})), (4L))\n    // (new List<long>(new long[]{(long)1L, (long)4L,\
  \ (long)2L, (long)4L, (long)3L}))\n    public static List<long> Intersperse(List<long>\
  \ numbers, long delimeter) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Intersperse((new\
  \ List<long>()), (7L)).Equals((new List<long>())));\n    Debug.Assert(Intersperse((new\
  \ List<long>(new long[]{(long)5L, (long)6L, (long)3L, (long)2L})), (8L)).Equals((new\
  \ List<long>(new long[]{(long)5L, (long)8L, (long)6L, (long)8L, (long)3L, (long)8L,\
  \ (long)2L}))));\n    Debug.Assert(Intersperse((new List<long>(new long[]{(long)2L,\
  \ (long)2L, (long)2L})), (2L)).Equals((new List<long>(new long[]{(long)2L, (long)2L,\
  \ (long)2L, (long)2L, (long)2L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        foreach (var\
    \ number in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \        }\n        return result;", "        if (numbers.Count == 0) {\n    \
    \        return new List<long>();\n        }\n        var result = new List<long>();\n\
    \        var current = numbers.First();\n        result.Add(current);\n      \
    \  numbers.RemoveAt(0);\n        foreach (var number in numbers) {\n         \
    \   result.Add(number);\n            result.Add(delimeter);\n        }\n     \
    \   result.Add(current);\n        return result;", "        List<long> result\
    \ = new List<long>();\n        long lastNumber = 0;\n        foreach (long number\
    \ in numbers) {\n            if (number != lastNumber) {\n                result.Add(number);\n\
    \                lastNumber = number;\n            }\n            else {\n   \
    \             result.Add(delimeter);\n            }\n        }\n        return\
    \ result;", "        var result = new List<long>();\n        foreach (var number\
    \ in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \            result.Add(number);\n        }\n        return result;", "      \
    \  if (numbers.Count == 0) return new List<long>();\n        var result = new\
    \ List<long>();\n        var current = numbers.First();\n        result.Add(current);\n\
    \        numbers.RemoveAt(0);\n        foreach (var number in numbers) {\n   \
    \         result.Add(number);\n            result.Add(delimeter);\n        }\n\
    \        return result;", "        if (numbers.Count < 2)\n            return\
    \ numbers;\n        var result = new List<long>();\n        var first = true;\n\
    \        foreach (var number in numbers) {\n            if (first)\n         \
    \       first = false;\n            else\n                result.Add(delimeter);\n\
    \            result.Add(number);\n        }\n        return result;", "      \
    \  List<long> result = new List<long>();\n        long lastNumber = numbers.Last();\n\
    \        long lastDelimeter = delimeter;\n        foreach (long number in numbers)\
    \ {\n            if (number == lastNumber) {\n                result.Add(lastDelimeter);\n\
    \            } else {\n                result.Add(number);\n            }\n  \
    \          lastDelimeter = delimeter;\n            lastNumber = number;\n    \
    \    }\n        result.Add(lastDelimeter);\n        return result;", "       \
    \ var result = new List<long>();\n        var index = 0;\n        foreach (var\
    \ number in numbers) {\n            if (index > 0) {\n                result.Add(delimeter);\n\
    \            }\n            result.Add(number);\n            index++;\n      \
    \  }\n        return result;", "        List<long> result = new List<long>();\n\
    \        foreach (long number in numbers) {\n            result.Add(number);\n\
    \            result.Add(delimeter);\n        }\n        return result;", "   \
    \     if (numbers.Count == 0) {\n            return new List<long>();\n      \
    \  }\n        var result = new List<long>();\n        var firstNumber = numbers.First();\n\
    \        result.Add(firstNumber);\n        var lastNumber = numbers.Last();\n\
    \        result.Add(lastNumber);\n        var currentNumber = firstNumber;\n \
    \       foreach (var number in numbers.Skip(1).Take(numbers.Count - 1)) {\n  \
    \          result.Add(currentNumber);\n            result.Add(delimeter);\n  \
    \          currentNumber = number;\n        }\n        result.Add(currentNumber);\n\
    \        return result;", "        var result = new List<long>();\n        var\
    \ current = new List<long>();\n        foreach (var number in numbers) {\n   \
    \         current.Add(number);\n            if (current.Count == 2) {\n      \
    \          result.Add(delimeter);\n                result.AddRange(current);\n\
    \                current = new List<long>();\n            }\n        }\n     \
    \   if (current.Count > 0) {\n            result.Add(delimeter);\n           \
    \ result.AddRange(current);\n        }\n        return result;", "        var\
    \ result = new List<long>();\n        foreach (var number in numbers) {\n    \
    \        result.Add(number);\n            result.Add(delimeter);\n        }\n\
    \        return result;", "        if (numbers.Count < 2)\n            return\
    \ numbers;\n        var result = new List<long>();\n        var lastNumber = numbers.Last();\n\
    \        var firstNumber = numbers.First();\n        result.Add(firstNumber);\n\
    \        result.Add(delimeter);\n        result.Add(lastNumber);\n        numbers.RemoveAt(0);\n\
    \        numbers.RemoveAt(0);\n        return Intersperse(numbers, delimeter,\
    \ result);", "        List<long> result = new List<long>();\n        long lastNumber\
    \ = 0;\n        foreach (long number in numbers) {\n            if (number !=\
    \ lastNumber) {\n                result.Add(number);\n                lastNumber\
    \ = number;\n            }\n            else {\n                result.Add(delimeter);\n\
    \                result.Add(number);\n            }\n        }\n        return\
    \ result;", "        if (numbers.Count == 0) return new List<long>();\n      \
    \  var result = new List<long>();\n        var current = numbers.First();\n  \
    \      result.Add(current);\n        numbers.RemoveAt(0);\n        foreach (var\
    \ number in numbers) {\n            result.Add(number);\n            result.Add(delimeter);\n\
    \        }\n        result.Add(current);\n        return result;", "        if\
    \ (numbers.Count == 0) return new List<long>();\n        var result = new List<long>();\n\
    \        var current = numbers.First();\n        result.Add(current);\n      \
    \  numbers.RemoveAt(0);\n        foreach (var number in numbers) {\n         \
    \   result.Add(number);\n            result.Add(delimeter);\n        }\n     \
    \   result.Add(current);\n        return result;", "        if (numbers == null\
    \ || numbers.Count == 0)\n            return numbers;\n        var result = new\
    \ List<long>();\n        var lastNumber = numbers.Last();\n        var firstNumber\
    \ = numbers.First();\n        result.Add(firstNumber);\n        result.Add(delimeter);\n\
    \        result.Add(lastNumber);\n        foreach (var number in numbers.Skip(1))\n\
    \            result.Add(delimeter);\n        result.Add(firstNumber);\n      \
    \  return result;", "        var result = new List<long>();\n        var current\
    \ = new List<long>();\n        foreach (var number in numbers) {\n           \
    \ current.Add(number);\n            if (current.Count == 2) {\n              \
    \  result.Add(delimeter);\n                result.AddRange(current);\n       \
    \         current = new List<long>();\n            }\n        }\n        if (current.Count\
    \ != 0) {\n            result.Add(delimeter);\n            result.AddRange(current);\n\
    \        }\n        return result;", "        if (numbers.Count == 0) return new\
    \ List<long>();\n        var result = new List<long>();\n        var current =\
    \ numbers.First();\n        result.Add(current);\n        numbers.RemoveAt(0);\n\
    \        foreach (var number in numbers) {\n            result.Add(number);\n\
    \            result.Add(delimeter);\n        }\n        result.Add(current);\n\
    \        return result;", "        if (numbers.Count == 0) {\n            return\
    \ new List<long>();\n        }\n        var result = new List<long>();\n     \
    \   var lastElement = numbers.Last();\n        var firstElement = numbers.First();\n\
    \        result.Add(firstElement);\n        result.Add(delimeter);\n        result.Add(lastElement);\n\
    \        foreach (var number in numbers.Skip(1).Take(numbers.Count - 1)) {\n \
    \           result.Add(delimeter);\n            result.Add(number);\n        }\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
