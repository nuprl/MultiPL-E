name: HumanEval_95_check_dict_case
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a dictionary, return true if all keys are strings in lower\
  \ \n    // case or all keys are strings in upper case, else return false.\n    //\
  \ The function should return false is the given dictionary is empty.\n    // Examples:\n\
  \    // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {\"\
  b\", \"banana\"}}))\n    // (true)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  a\", \"apple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}}))\n    // (false)\n \
  \   // >>> CheckDictCase((new Dictionary<string,string>(){{\"a\", \"apple\"}, {8L,\
  \ \"banana\"}, {\"a\", \"apple\"}}))\n    // (false)\n    // >>> CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}}))\n    // (false)\n    // >>> CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}}))\n    // (true)\n    public static bool\
  \ CheckDictCase(Dictionary<string,string> dict) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"p\", \"pineapple\"}, {\"b\", \"banana\"}})) ==\
  \ (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  p\", \"pineapple\"}, {\"A\", \"banana\"}, {\"B\", \"banana\"}})) == (false));\n\
  \    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"p\", \"pineapple\"\
  }, {\"5\", \"banana\"}, {\"a\", \"apple\"}})) == (false));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"Name\", \"John\"}, {\"Age\", \"36\"}, {\"City\"\
  , \"Houston\"}})) == (false));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>(){{\"\
  STATE\", \"NC\"}, {\"ZIP\", \"12345\"}})) == (true));\n    Debug.Assert(CheckDictCase((new\
  \ Dictionary<string,string>(){{\"fruit\", \"Orange\"}, {\"taste\", \"Sweet\"}}))\
  \ == (true));\n    Debug.Assert(CheckDictCase((new Dictionary<string,string>()))\
  \ == (false));\n    }\n\n}\n"
completions: ["        if (dict.Count == 0) return false;\n        foreach (KeyValuePair<string,\
    \ string> kvp in dict) {\n            if (kvp.Key.ToLower() == kvp.Key) return\
    \ true;\n            if (kvp.Key.ToUpper() == kvp.Key) return true;\n        }\n\
    \        return false;", "        if (dict.Count == 0)\n            return false;\n\
    \        foreach (var pair in dict)\n        {\n            if (pair.Key.Length\
    \ > 0)\n            {\n                if (Char.IsLower(pair.Key[0]))\n      \
    \              return false;\n            }\n            else\n            {\n\
    \                if (Char.IsUpper(pair.Key[0]))\n                    return false;\n\
    \            }\n        }\n        return true;", "        if (dict.Count == 0)\
    \ return false;\n        foreach (var key in dict.Keys) {\n            if (key.Length\
    \ > 0) return true;\n        }\n        return false;", "        if (dict.Count\
    \ == 0)\n            return false;\n        foreach (KeyValuePair<string,string>\
    \ kvp in dict)\n            if (kvp.Key.Length != kvp.Value.Length)\n        \
    \        return false;\n        foreach (KeyValuePair<string,string> kvp in dict)\n\
    \            if (kvp.Key.ToLower() != kvp.Value)\n                return false;\n\
    \        return true;", "        if (dict == null || dict.Count == 0)\n      \
    \      return false;\n        foreach (var key in dict.Keys) {\n            if\
    \ (!(key is string || key is string))\n                return false;\n       \
    \ }\n        return true;", "        if (dict.Count == 0)\n            return\
    \ false;\n        foreach (var key in dict.Keys)\n        {\n            if (key.Length\
    \ != 1)\n                return false;\n        }\n        return true;", "  \
    \      if (dict == null || dict.Count == 0)\n            return false;\n     \
    \   foreach (var kvp in dict)\n        {\n            if (kvp.Key.Length > 0)\n\
    \            {\n                if (kvp.Key.ToLower() == kvp.Key)\n          \
    \          return true;\n            }\n            else\n            {\n    \
    \            if (kvp.Key.ToUpper() == kvp.Key)\n                    return true;\n\
    \            }\n        }\n        return false;", "        bool isCaseInsensitive\
    \ = true;\n        bool isCaseInsensitiveUpper = true;\n        foreach (var key\
    \ in dict.Keys) {\n            if (key.Equals(key.ToLower())) {\n            \
    \    isCaseInsensitive = false;\n            }\n            if (key.Equals(key.ToUpper()))\
    \ {\n                isCaseInsensitiveUpper = false;\n            }\n        }\n\
    \        return isCaseInsensitive && isCaseInsensitiveUpper;", "        bool result\
    \ = true;\n        foreach (var key in dict.Keys) {\n            if (key.Length\
    \ > 0) {\n                if (key.Length < 1 || key.Length > 3) {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \              string lowerCase = key.ToLower();\n                string upperCase\
    \ = key.ToUpper();\n                if (lowerCase != upperCase) {\n          \
    \          result = false;\n                    break;\n                }\n  \
    \          }\n        }\n        return result;", "        if (dict.Count == 0)\n\
    \            return false;\n        foreach (var key in dict.Keys) {\n       \
    \     if (key.Length > 0)\n                return true;\n        }\n        return\
    \ false;", "        if (dict.Count == 0)\n            return false;\n        bool\
    \ isUpper = true;\n        bool isLower = true;\n        foreach (var item in\
    \ dict) {\n            if (item.Key.ToLower() == item.Key)\n                isLower\
    \ = false;\n            if (item.Key.ToUpper() == item.Key)\n                isUpper\
    \ = false;\n        }\n        return isUpper && isLower;", "        if (dict.Count\
    \ == 0)\n            return false;\n        bool isUpper = true;\n        bool\
    \ isLower = true;\n        foreach (var item in dict)\n        {\n           \
    \ if (item.Key.Length > 0)\n            {\n                isUpper = isUpper &&\
    \ item.Key.ToUpper() == item.Key;\n                isLower = isLower && item.Key.ToLower()\
    \ == item.Key;\n            }\n        }\n        return isUpper && isLower;",
  "        if (dict.Count == 0) return false;\n        bool isInLowerCase = true;\n\
    \        bool isInUpperCase = true;\n        foreach (KeyValuePair<string, string>\
    \ entry in dict) {\n            if (entry.Key.Length > 0) {\n                if\
    \ (isInLowerCase) {\n                    isInLowerCase = entry.Key.ToLower() ==\
    \ entry.Key;\n                }\n                else {\n                    isInUpperCase\
    \ = entry.Key.ToUpper() == entry.Key;\n                }\n            }\n    \
    \    }\n        return isInLowerCase && isInUpperCase;", "        if (dict ==\
    \ null || dict.Count == 0)\n            return false;\n        bool isAllUpper\
    \ = true;\n        bool isAllLower = true;\n        foreach (var pair in dict)\
    \ {\n            string key = pair.Key;\n            string value = pair.Value;\n\
    \            if (key.Length > 0 && value.Length > 0) {\n                isAllUpper\
    \ = isAllUpper && char.IsUpper(key[0]);\n                isAllLower = isAllLower\
    \ && char.IsLower(key[0]);\n            }\n        }\n        return isAllUpper\
    \ == isAllLower;", "        if (dict.Count == 0) return false;\n        foreach\
    \ (var key in dict.Keys) {\n            if (key.Length > 0) {\n              \
    \  if (char.IsLower(key[0])) {\n                    if (!char.IsUpper(key[0]))\
    \ {\n                        return false;\n                    }\n          \
    \      } else {\n                    if (!char.IsUpper(key[0])) {\n          \
    \              return false;\n                    }\n                }\n     \
    \       }\n        }\n        return true;", "        if (dict.Count == 0) return\
    \ false;\n        foreach (var key in dict.Keys) {\n            if (key.Length\
    \ > 0) return true;\n        }\n        return false;", "        if (dict.Count\
    \ == 0) return false;\n        foreach (KeyValuePair<string, string> kvp in dict)\
    \ {\n            if (kvp.Key.Length != kvp.Value.Length) return false;\n     \
    \       foreach (char c in kvp.Key) {\n                if (c >= 'A' && c <= 'Z')\
    \ continue;\n                if (c >= 'a' && c <= 'z') continue;\n           \
    \     return false;\n            }\n        }\n        return true;", "      \
    \  if (dict.Count == 0)\n            return false;\n        bool upperCase = false;\n\
    \        bool lowerCase = false;\n        foreach (var item in dict) {\n     \
    \       if (item.Key.ToUpper() == item.Key)\n                upperCase = true;\n\
    \            else\n                lowerCase = true;\n        }\n        return\
    \ upperCase || lowerCase;", "        if (dict.Count == 0)\n            return\
    \ false;\n        foreach (var key in dict.Keys)\n            if (key.Length >\
    \ 0)\n                return true;\n        return false;", "        if (dict.Count\
    \ == 0)\n            return false;\n        foreach (KeyValuePair<string, string>\
    \ kvp in dict) {\n            if (kvp.Key.ToLower() == kvp.Key)\n            \
    \    return true;\n            if (kvp.Key.ToUpper() == kvp.Key)\n           \
    \     return true;\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
