name: HumanEval_74_total_match
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that accepts two lists of strings and returns\
  \ the list that has \n    // total number of chars in the all strings of the list\
  \ less than the other list.\n    // if the two lists have the same number of chars,\
  \ return the first list.\n    // Examples\n    // >>> TotalMatch((new List<string>()),\
  \ (new List<string>()))\n    // (new List<string>())\n    // >>> TotalMatch((new\
  \ List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new\
  \ string[]{(string)\"hI\", (string)\"Hi\"})))\n    // (new List<string>(new string[]{(string)\"\
  hI\", (string)\"Hi\"}))\n    // >>> TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"\
  hi\", (string)\"admin\", (string)\"project\"})))\n    // (new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"}))\n    // >>> TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hi\"})))\n    // (new List<string>(new string[]{(string)\"hI\",\
  \ (string)\"hi\", (string)\"hi\"}))\n    // >>> TotalMatch((new List<string>(new\
  \ string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"\
  2\", (string)\"3\", (string)\"4\", (string)\"5\"})))\n    // (new List<string>(new\
  \ string[]{(string)\"4\"}))\n    public static List<string> TotalMatch(List<string>\
  \ lst1, List<string> lst2) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(TotalMatch((new\
  \ List<string>()), (new List<string>())).Equals((new List<string>())));\n    Debug.Assert(TotalMatch((new\
  \ List<string>(new string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new\
  \ string[]{(string)\"hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"\
  hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hi\", (string)\"\
  hi\", (string)\"admin\", (string)\"project\"}))).Equals((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new\
  \ string[]{(string)\"4\"})), (new List<string>(new string[]{(string)\"1\", (string)\"\
  2\", (string)\"3\", (string)\"4\", (string)\"5\"}))).Equals((new List<string>(new\
  \ string[]{(string)\"4\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new\
  \ string[]{(string)\"hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"\
  hI\", (string)\"Hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"\
  Hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hi\"}))).Equals((new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hi\"}))));\n    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"\
  hi\", (string)\"admin\"})), (new List<string>(new string[]{(string)\"hI\", (string)\"\
  hi\", (string)\"hii\"}))).Equals((new List<string>(new string[]{(string)\"hi\",\
  \ (string)\"admin\"}))));\n    Debug.Assert(TotalMatch((new List<string>()), (new\
  \ List<string>(new string[]{(string)\"this\"}))).Equals((new List<string>())));\n\
  \    Debug.Assert(TotalMatch((new List<string>(new string[]{(string)\"this\"})),\
  \ (new List<string>())).Equals((new List<string>())));\n    }\n\n}\n"
completions: ["        List<string> result = new List<string>();\n        if (lst1.Count\
    \ != lst2.Count) {\n            return lst1;\n        }\n        foreach (string\
    \ s in lst1) {\n            foreach (string t in lst2) {\n                if (s.Length\
    \ < t.Length) {\n                    result.Add(s);\n                    break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   if (lst1.Count != lst2.Count) {\n            return lst1;\n        }\n   \
    \     List<string> lst3 = new List<string>();\n        foreach (string str1 in\
    \ lst1) {\n            foreach (string str2 in lst2) {\n                if (str1.Length\
    \ > str2.Length) {\n                    lst3.Add(str1);\n                }\n \
    \               else if (str1.Length < str2.Length) {\n                    lst3.Add(str2);\n\
    \                }\n                else {\n                    lst3.Add(str1);\n\
    \                }\n            }\n        }\n        return lst3;", "       \
    \ List<string> result = new List<string>();\n        if (lst1.Count != lst2.Count)\
    \ {\n            return result;\n        }\n        foreach (string s in lst1)\
    \ {\n            int count = 0;\n            foreach (string s2 in lst2) {\n \
    \               if (s.Length < s2.Length) {\n                    count++;\n  \
    \              }\n            }\n            if (count > result.Count) {\n   \
    \             result = new List<string>(lst1);\n            }\n        }\n   \
    \     return result;", "        List<string> lst3 = new List<string>();\n    \
    \    foreach (string s in lst1) {\n            int count = 0;\n            foreach\
    \ (string t in lst2) {\n                if (s.Length < t.Length) {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ == lst2.Count) {\n                lst3.Add(s);\n            }\n        }\n \
    \       return lst3;", "        var result = new List<string>();\n        if (lst1.Count\
    \ != lst2.Count) {\n            return lst1;\n        }\n        foreach (var\
    \ item in lst1) {\n            var count = lst2.Count(x => x.Contains(item));\n\
    \            if (count > 0) {\n                result.Add(item);\n           \
    \ }\n        }\n        return result;", "        List<string> lst3 = new List<string>();\n\
    \        if (lst1.Count == lst2.Count) {\n            foreach (string s in lst1)\
    \ {\n                foreach (string t in lst2) {\n                    if (s.Length\
    \ < t.Length) {\n                        lst3.Add(s);\n                      \
    \  break;\n                    }\n                }\n            }\n         \
    \   return lst3;\n        }\n        if (lst1.Count > lst2.Count) {\n        \
    \    foreach (string s in lst1) {\n                foreach (string t in lst2)\
    \ {\n                    if (s.Length > t.Length) {\n                        lst3.Add(s);\n\
    \                        break;\n                    }\n                }\n  \
    \          }\n            return lst3;\n        }\n        if (lst2.Count > lst1.Count)\
    \ {\n            foreach (string s in lst1) {\n                foreach (string\
    \ t in lst2) {\n                    if (s.Length < t.Length) {\n             \
    \           lst3.Add(s);\n                        break;\n                   \
    \ }\n                }\n            }\n            return lst3;\n        }\n \
    \       return lst1;", "        List<string> lst3 = new List<string>();\n    \
    \    foreach (string s in lst1) {\n            foreach (string t in lst2) {\n\
    \                if (s.Length < t.Length) {\n                    lst3.Add(s);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \     if (lst3.Count == lst1.Count) {\n            return lst1;\n        }\n \
    \       return lst3;", "        if (lst1.Count != lst2.Count) {\n            return\
    \ lst1;\n        }\n        List<string> result = new List<string>();\n      \
    \  foreach (string s in lst1) {\n            int count = 0;\n            foreach\
    \ (string t in lst2) {\n                if (s.Length < t.Length) {\n         \
    \           count++;\n                }\n            }\n            if (count\
    \ == lst2.Count) {\n                result.Add(s);\n            }\n        }\n\
    \        return result;", "        if (lst1.Count != lst2.Count) {\n         \
    \   return lst1;\n        }\n        var result = new List<string>();\n      \
    \  foreach (var item in lst1) {\n            if (lst2.Contains(item)) {\n    \
    \            result.Add(item);\n            }\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        if (lst1.Count != lst2.Count)\
    \ {\n            return lst1;\n        }\n        foreach (string s in lst1) {\n\
    \            foreach (string t in lst2) {\n                if (s.Length < t.Length)\
    \ {\n                    result.Add(s);\n                }\n            }\n  \
    \      }\n        return result;", "        List<string> lst3 = new List<string>();\n\
    \        foreach (string s in lst1) {\n            int count = 0;\n          \
    \  foreach (string t in lst2) {\n                if (s.Length < t.Length) {\n\
    \                    count += s.Length;\n                }\n            }\n  \
    \          if (count > lst3.Count) {\n                lst3.Clear();\n        \
    \        lst3.Add(s);\n            }\n        }\n        return lst3;", "    \
    \    var result = new List<string>();\n        foreach (var item in lst1) {\n\
    \            int count = 0;\n            foreach (var item2 in lst2) {\n     \
    \           if (item.Length < item2.Length) {\n                    count++;\n\
    \                }\n            }\n            if (count == lst2.Count) {\n  \
    \              result.Add(item);\n            }\n        }\n        return result;",
  "        if (lst1.Count == lst2.Count) {\n            return lst1;\n        }\n\
    \        var result = new List<string>();\n        foreach (var item in lst1)\
    \ {\n            foreach (var item2 in lst2) {\n                if (item.Length\
    \ < item2.Length) {\n                    result.Add(item);\n                 \
    \   break;\n                }\n            }\n        }\n        return result;",
  "        if (lst1.Count != lst2.Count) {\n            return lst1;\n        }\n\
    \        var result = lst1.Where(x => lst2.Any(y => y.Length < x.Length)).ToList();\n\
    \        if (lst1.Count == lst2.Count) {\n            return lst1;\n        }\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        foreach (string s in lst1) {\n            foreach (string t in lst2)\
    \ {\n                if (s.Length < t.Length) {\n                    result.Add(s);\n\
    \                }\n            }\n        }\n        if (lst1.Count == lst2.Count)\
    \ {\n            return lst1;\n        }\n        return result;", "        if\
    \ (lst1.Count != lst2.Count) {\n            return lst1;\n        }\n        var\
    \ result = new List<string>();\n        for (int i = 0; i < lst1.Count; i++) {\n\
    \            if (lst1[i].Length > lst2[i].Length) {\n                result.Add(lst1[i]);\n\
    \            }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        if (lst1.Count != lst2.Count) {\n           \
    \ return result;\n        }\n        foreach (string s in lst1) {\n          \
    \  int count = 0;\n            foreach (string s2 in lst2) {\n               \
    \ if (s.Length < s2.Length) {\n                    count++;\n                }\n\
    \            }\n            result.Add(s);\n        }\n        return result;",
  "        List<string> lst3 = new List<string>();\n        foreach (string str1 in\
    \ lst1) {\n            foreach (string str2 in lst2) {\n                if (str1.Length\
    \ < str2.Length) {\n                    lst3.Add(str1);\n                }\n \
    \           }\n        }\n        if (lst3.Count == lst1.Count) {\n          \
    \  return lst1;\n        }\n        if (lst3.Count == lst2.Count) {\n        \
    \    return lst2;\n        }\n        return lst3;", "        if (lst1.Count !=\
    \ lst2.Count) {\n            return lst1;\n        }\n        var result = new\
    \ List<string>();\n        for (int i = 0; i < lst1.Count; i++) {\n          \
    \  if (lst1[i].Length > lst2[i].Length) {\n                result.Add(lst1[i]);\n\
    \            } else {\n                result.Add(lst2[i]);\n            }\n \
    \       }\n        return result;", "        if (lst1.Count != lst2.Count) {\n\
    \            return lst1;\n        }\n        var result = new List<string>();\n\
    \        foreach (var item in lst1) {\n            if (lst2.Contains(item)) {\n\
    \                result.Add(item);\n            }\n        }\n        return result;"]
stop_tokens:
- "\n    }\n"
