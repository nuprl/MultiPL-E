name: HumanEval_160_do_algebra
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given two lists operator, and operand. The first list has basic\
  \ algebra operations, and \n    // the second list is a list of integers. Use the\
  \ two given lists to build the algebric \n    // expression and return the evaluation\
  \ of this expression.\n    // The basic algebra operations:\n    // Addition ( +\
  \ ) \n    // Subtraction ( - ) \n    // Multiplication ( * ) \n    // Floor division\
  \ ( // ) \n    // Exponentiation ( ** ) \n    // Example:\n    // operator['+',\
  \ '*', '-']\n    // list = [2, 3, 4, 5]\n    // result = 2 + 3 * 4 - 5\n    // =>\
  \ result = 9\n    // Note:\n    // The length of operator list is equal to the length\
  \ of operand list minus one.\n    // Operand is a list of of non-negative integers.\n\
  \    // Operator list has at least one operator, and operand list has at least two\
  \ operands.\n    public static long DoAlgebra(List<string> op, List<long> operand)\
  \ {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(DoAlgebra((new\
  \ List<string>(new string[]{(string)\"**\", (string)\"*\", (string)\"+\"})), (new\
  \ List<long>(new long[]{(long)2L, (long)3L, (long)4L, (long)5L}))) == (37L));\n\
  \    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"+\", (string)\"\
  *\", (string)\"-\"})), (new List<long>(new long[]{(long)2L, (long)3L, (long)4L,\
  \ (long)5L}))) == (9L));\n    Debug.Assert(DoAlgebra((new List<string>(new string[]{(string)\"\
  //\", (string)\"*\"})), (new List<long>(new long[]{(long)7L, (long)3L, (long)4L})))\
  \ == (8L));\n    }\n\n}\n"
completions: ["        long result = 0;\n        foreach (string opr in op) {\n  \
    \          long temp = 0;\n            foreach (long op in operand) {\n      \
    \          switch (opr) {\n                    case \"+\":\n                 \
    \       temp = temp + op;\n                        break;\n                  \
    \  case \"-\":\n                        temp = temp - op;\n                  \
    \      break;\n                    case \"*\":\n                        temp =\
    \ temp * op;\n                        break;\n                    case \"//\"\
    :\n                        temp = temp / op;\n                        break;\n\
    \                    case \"**\":\n                        temp = temp ** op;\n\
    \                        break;\n                    default:\n              \
    \          throw new Exception(\"Invalid operator\");\n                }\n   \
    \         }\n            result = result + temp;\n        }\n        return result;",
  "        long result = 0;\n        foreach (string op in op) {\n            switch\
    \ (op) {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    for (int i = 1; i < operand.Count; i++)\
    \ {\n                        result *= operand[i];\n                    }\n  \
    \                  break;\n                default:\n                    throw\
    \ new ArgumentException(\"Invalid operator: \" + op);\n            }\n       \
    \ }\n        return result;", "        long result = 0;\n        foreach (string\
    \ op1 in op) {\n            foreach (long op2 in operand) {\n                switch\
    \ (op1) {\n                    case \"+\":\n                        result +=\
    \ op2;\n                        break;\n                    case \"-\":\n    \
    \                    result -= op2;\n                        break;\n        \
    \            case \"*\":\n                        result *= op2;\n           \
    \             break;\n                    case \"//\":\n                     \
    \   result /= op2;\n                        break;\n                    case \"\
    **\":\n                        result **= op2;\n                        break;\n\
    \                }\n            }\n        }\n        return result;", "     \
    \   long result = 0;\n        foreach (string s in op) {\n            switch (s)\
    \ {\n                case \"+\":\n                    result += operand[0];\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand[0];\n                    break;\n                case \"*\"\
    :\n                    result *= operand[0];\n                    break;\n   \
    \             case \"//\":\n                    result /= operand[0];\n      \
    \              break;\n                case \"**\":\n                    result\
    \ *= operand[0];\n                    result /= operand[0];\n                \
    \    break;\n                default:\n                    throw new Exception(\"\
    Invalid operator\");\n            }\n        }\n        return result;", "   \
    \     long result = 0;\n        foreach (string opr in op) {\n            long\
    \ operand2 = operand.FirstOrDefault();\n            long operand1 = operand.Skip(1).FirstOrDefault();\n\
    \            switch (opr) {\n                case \"+\":\n                   \
    \ result += operand1 + operand2;\n                    break;\n               \
    \ case \"-\":\n                    result -= operand1 - operand2;\n          \
    \          break;\n                case \"*\":\n                    result *=\
    \ operand1 * operand2;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1 / operand2;\n                    break;\n\
    \                case \"**\":\n                    result *= operand1;\n     \
    \               result /= operand2;\n                    break;\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op in op) {\n            switch (op) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result /= operand[0];\n                    break;\n            }\n  \
    \      }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            long operand1 = operand[0];\n            long\
    \ operand2 = operand[1];\n            long operand3 = operand[2];\n          \
    \  long operand4 = operand[3];\n            switch (opr) {\n                case\
    \ \"+\":\n                    result += operand1 + operand2;\n               \
    \     break;\n                case \"-\":\n                    result -= operand1\
    \ - operand2;\n                    break;\n                case \"*\":\n     \
    \               result *= operand1 * operand2;\n                    break;\n \
    \               case \"//\":\n                    result /= operand1 / operand2;\n\
    \                    break;\n                case \"**\":\n                  \
    \  result *= operand1;\n                    result *= operand2;\n            \
    \        break;\n            }\n        }\n        return result;", "        long\
    \ result = 0;\n        foreach (string op1 in op) {\n            foreach (long\
    \ op2 in operand) {\n                switch (op1) {\n                    case\
    \ \"+\":\n                        result += op2;\n                        break;\n\
    \                    case \"-\":\n                        result -= op2;\n   \
    \                     break;\n                    case \"*\":\n              \
    \          result *= op2;\n                        break;\n                  \
    \  case \"//\":\n                        result /= op2;\n                    \
    \    break;\n                    case \"**\":\n                        result\
    \ **= op2;\n                        break;\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string s in op) {\n            switch (s) {\n                case \"+\":\n\
    \                    result += operand[0];\n                    break;\n     \
    \           case \"-\":\n                    result -= operand[0];\n         \
    \           break;\n                case \"*\":\n                    result *=\
    \ operand[0];\n                    break;\n                case \"//\":\n    \
    \                result /= operand[0];\n                    break;\n         \
    \       case \"**\":\n                    result *= operand[0];\n            \
    \        result *= operand[0];\n                    break;\n                default:\n\
    \                    throw new ArgumentException(\"Invalid operator\");\n    \
    \        }\n        }\n        return result;", "        long result = 0;\n  \
    \      foreach (string opr in op) {\n            long operand1 = operand[0];\n\
    \            long operand2 = operand[1];\n            switch (opr) {\n       \
    \         case \"+\":\n                    result += operand1;\n             \
    \       break;\n                case \"-\":\n                    result -= operand1;\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand1;\n                    break;\n                case \"//\"\
    :\n                    result /= operand1;\n                    break;\n     \
    \           case \"**\":\n                    result *= operand1;\n          \
    \          result *= operand2;\n                    break;\n                default:\n\
    \                    throw new Exception(\"Invalid operator\");\n            }\n\
    \            operand[0] = operand1;\n            operand[1] = operand2;\n    \
    \    }\n        return result;", "        long result = 0;\n        foreach (string\
    \ opr in op) {\n            long temp = 0;\n            foreach (long op in operand)\
    \ {\n                switch (opr) {\n                    case \"+\":\n       \
    \                 temp = temp + op;\n                        break;\n        \
    \            case \"-\":\n                        temp = temp - op;\n        \
    \                break;\n                    case \"*\":\n                   \
    \     temp = temp * op;\n                        break;\n                    case\
    \ \"//\":\n                        temp = temp / op;\n                       \
    \ break;\n                    case \"**\":\n                        temp = temp\
    \ ** op;\n                        break;\n                    default:\n     \
    \                   throw new Exception(\"Invalid operator\");\n             \
    \   }\n            }\n            result = result + temp;\n        }\n       \
    \ return result;", "        long result = 0;\n        foreach (string opr in op)\
    \ {\n            long oprValue = operand.ElementAt(operand.Count - 1);\n     \
    \       long oprValue2 = operand.ElementAt(operand.Count - 2);\n            long\
    \ oprValue3 = operand.ElementAt(operand.Count - 3);\n            long oprValue4\
    \ = operand.ElementAt(operand.Count - 4);\n            long oprValue5 = operand.ElementAt(operand.Count\
    \ - 5);\n            long oprValue6 = operand.ElementAt(operand.Count - 6);\n\
    \            long oprValue7 = operand.ElementAt(operand.Count - 7);\n        \
    \    long oprValue8 = operand.ElementAt(operand.Count - 8);\n            long\
    \ oprValue9 = operand.ElementAt(operand.Count - 9);\n            long oprValue10\
    \ = operand.ElementAt(operand.Count - 10);\n            long oprValue11 = operand.ElementAt(operand.Count\
    \ - 11);\n            long oprValue12 = operand.ElementAt(operand.Count - 12);\n\
    \            long oprValue13 = operand.ElementAt(operand.Count - 13);\n      \
    \      long oprValue14 = operand.ElementAt(operand.Count - 14);\n            long\
    \ oprValue15 = operand.ElementAt(operand.Count - 15);\n            long oprValue16\
    \ = operand.ElementAt(operand.Count - 16);\n            long oprValue17 = operand.ElementAt(operand.Count\
    \ - 17);\n            long oprValue18 = operand.ElementAt(operand.Count - 18);\n\
    \            long oprValue19 = operand.ElementAt(operand.Count - 19);\n      \
    \      long oprValue20 = operand.ElementAt(operand.Count - 20);\n            long\
    \ oprValue21 = operand.ElementAt(operand.Count - 21);\n            long oprValue22\
    \ = operand.ElementAt(operand.Count - 22);\n            long oprValue23 = operand.ElementAt(operand.Count\
    \ - 23);\n            long oprValue24 = operand.ElementAt(operand.Count - 24);\n\
    \            long oprValue25 = operand.ElementAt(operand.Count - 25);\n      \
    \      long oprValue26 = operand.ElementAt(operand.Count - 26);\n            long\
    \ oprValue27 = operand.ElementAt(operand.Count - 27);\n            long oprValue28\
    \ = operand.ElementAt(operand.Count - 28);\n            long oprValue29 = operand.ElementAt(operand.Count\
    \ - 29);\n            long oprValue30 = operand", "        long result = 0;\n\
    \        foreach (string op in op) {\n            switch (op) {\n            \
    \    case \"+\":\n                    result += operand[0];\n                \
    \    break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \     default:\n                    throw new ArgumentException(\"Invalid operator\"\
    );\n            }\n        }\n        return result;", "        long result =\
    \ 0;\n        foreach (string op in op) {\n            switch (op) {\n       \
    \         case \"+\":\n                    result += operand[0];\n           \
    \         break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              for (int i = 1; i < operand.Count; i++) {\n                   \
    \     result *= operand[i];\n                    }\n                    break;\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            long oprValue = operand.FirstOrDefault(x\
    \ => x.ToString() == opr);\n            if (oprValue != 0) {\n               \
    \ result += oprValue;\n                operand.Remove(oprValue);\n           \
    \ }\n        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string op1 in op) {\n            foreach (long op2 in operand) {\n        \
    \        switch (op1) {\n                    case \"+\":\n                   \
    \     result += op2;\n                        break;\n                    case\
    \ \"-\":\n                        result -= op2;\n                        break;\n\
    \                    case \"*\":\n                        result *= op2;\n   \
    \                     break;\n                    case \"//\":\n             \
    \           result /= op2;\n                        break;\n                 \
    \   case \"**\":\n                        result *= op2;\n                   \
    \     break;\n                    default:\n                        throw new\
    \ Exception(\"Invalid operator: \" + op1);\n                }\n            }\n\
    \        }\n        return result;", "        long result = 0;\n        foreach\
    \ (string opr in op) {\n            switch (opr) {\n                case \"+\"\
    :\n                    result += operand[0];\n                    break;\n   \
    \             case \"-\":\n                    result -= operand[0];\n       \
    \             break;\n                case \"*\":\n                    result\
    \ *= operand[0];\n                    break;\n                case \"//\":\n \
    \                   result /= operand[0];\n                    break;\n      \
    \          case \"**\":\n                    result *= operand[0];\n         \
    \           result /= operand[1];\n                    break;\n              \
    \  default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string opr in op) {\n            switch (opr) {\n          \
    \      case \"+\":\n                    result += operand[0];\n              \
    \      break;\n                case \"-\":\n                    result -= operand[0];\n\
    \                    break;\n                case \"*\":\n                   \
    \ result *= operand[0];\n                    break;\n                case \"//\"\
    :\n                    result /= operand[0];\n                    break;\n   \
    \             case \"**\":\n                    result *= operand[0];\n      \
    \              result /= operand[1];\n                    break;\n           \
    \     default:\n                    throw new Exception(\"Invalid operator\");\n\
    \            }\n        }\n        return result;", "        long result = 0;\n\
    \        foreach (string op1 in op) {\n            foreach (long op2 in operand)\
    \ {\n                switch (op1) {\n                    case \"+\":\n       \
    \                 result += op2;\n                        break;\n           \
    \         case \"-\":\n                        result -= op2;\n              \
    \          break;\n                    case \"*\":\n                        result\
    \ *= op2;\n                        break;\n                    case \"//\":\n\
    \                        result /= op2;\n                        break;\n    \
    \                case \"**\":\n                        result *= op2;\n      \
    \                  break;\n                }\n            }\n        }\n     \
    \   return result;", "        long result = 0;\n        foreach (string op in\
    \ op) {\n            long operand1 = operand[0];\n            long operand2 =\
    \ operand[1];\n            switch (op) {\n                case \"+\":\n      \
    \              result += operand1;\n                    result += operand2;\n\
    \                    break;\n                case \"-\":\n                   \
    \ result -= operand1;\n                    result -= operand2;\n             \
    \       break;\n                case \"*\":\n                    result *= operand1;\n\
    \                    result *= operand2;\n                    break;\n       \
    \         case \"//\":\n                    result /= operand1;\n            \
    \        result /= operand2;\n                    break;\n                case\
    \ \"**\":\n                    result *= operand1;\n                    result\
    \ *= operand2;\n                    break;\n            }\n        }\n       \
    \ return result;"]
stop_tokens:
- "\n    }\n"
