name: HumanEval_105_by_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
  \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\",\
  \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    //\
  \ >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L,\
  \ (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"\
  Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\"\
  , (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty,\
  \ return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n\
  \    // If the list has any strange number ignore it:\n    // >>> ByLength((new\
  \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new\
  \ string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
  \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
  \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
  , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
  Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
  \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
  \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
  }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
  , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
  \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
  Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
completions: ["        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        List<long> newArr = new List<long>();\n        long maxNum\
    \ = arr.Max();\n        long minNum = arr.Min();\n        long num;\n        string\
    \ name;\n        if (maxNum < 10) {\n            name = \"One\";\n        } else\
    \ if (maxNum < 20) {\n            name = \"Two\";\n        } else if (maxNum <\
    \ 30) {\n            name = \"Three\";\n        } else if (maxNum < 40) {\n  \
    \          name = \"Four\";\n        } else if (maxNum < 50) {\n            name\
    \ = \"Five\";\n        } else if (maxNum < 60) {\n            name = \"Six\";\n\
    \        } else if (maxNum < 70) {\n            name = \"Seven\";\n        } else\
    \ if (maxNum < 80) {\n            name = \"Eight\";\n        } else if (maxNum\
    \ < 90) {\n            name = \"Nine\";\n        } else {\n            name =\
    \ \"Ten\";\n        }\n        foreach (long num in arr) {\n            if (num\
    \ < minNum) {\n                newArr.Add(minNum);\n            } else if (num\
    \ > maxNum) {\n                newArr.Add(maxNum);\n            } else {\n   \
    \             num = num - minNum;\n                while (num > 0) {\n       \
    \             newArr.Add(num % 10);\n                    num = num / 10;\n   \
    \             }\n            }\n        }\n        return newArr.Select(x => name\
    \ + x).ToList();", "        if (arr.Count == 0) return new List<string>();\n \
    \       var result = new List<string>();\n        var digits = new Dictionary<long,\
    \ string>();\n        var digitNames = new Dictionary<long, string>();\n     \
    \   var digitValues = new Dictionary<long, string>();\n        var maxDigit =\
    \ arr.Max();\n        var minDigit = arr.Min();\n        var maxDigitName = digitNames.ContainsKey(maxDigit)\
    \ ? digitNames[maxDigit] : \"Nine\";\n        var minDigitName = digitNames.ContainsKey(minDigit)\
    \ ? digitNames[minDigit] : \"One\";\n        var maxDigitValue = digitValues.ContainsKey(maxDigit)\
    \ ? digitValues[maxDigit] : \"Two\";\n        var minDigitValue = digitValues.ContainsKey(minDigit)\
    \ ? digitValues[minDigit] : \"One\";\n        digits[maxDigit] = maxDigitName;\n\
    \        digits[minDigit] = minDigitName;\n        digitValues[maxDigit] = maxDigitValue;\n\
    \        digitValues[minDigit] = minDigitValue;\n        var digitCount = maxDigit\
    \ - minDigit + 1;\n        var digitNamesCount = digitNames.Count;\n        var\
    \ digitValuesCount = digitValues.Count;\n        var digitNamesArray = new string[digitNamesCount];\n\
    \        var digitValuesArray = new string[digitValuesCount];\n        var digitValuesArrayIndex\
    \ = 0;\n        var digitNamesArrayIndex = 0;\n        for (var i = minDigit;\
    \ i <= maxDigit; i++) {\n            digitNamesArray[digitNamesArrayIndex] = digits[i\
    \ - 1];\n            digitValuesArray[digitValuesArrayIndex] = digitValues[i -\
    \ 1];\n            digitValuesArrayIndex++;\n            digitNamesArrayIndex++;\n\
    \        }\n        var digitNamesArrayLength = digitNamesArray.Length;\n    \
    \    var digitValuesArrayLength = digitValuesArray.Length;\n        var digitValuesArrayIndex\
    \ = 0;\n        for (var i = minDigit; i <= maxDigit; i++) {\n            var\
    \ digit = i - minDigit;\n            if (digitNames.ContainsKey(digit)) {\n  \
    \              result.Add(digitNames[digit]);\n            } else {\n        \
    \        result.Add(digitValuesArray[digitValuesArrayIndex]);\n            }\n\
    \            digitValuesArrayIndex++;\n        }\n        return result;", " \
    \       if (arr.Count < 1)\n            return new List<string>();\n        List<string>\
    \ result = new List<string>();\n        long max = arr.Max();\n        long min\
    \ = arr.Min();\n        if (max < 1 || min > 9)\n            return new List<string>();\n\
    \        string one = \"One\";\n        string two = \"Two\";\n        string\
    \ three = \"Three\";\n        string four = \"Four\";\n        string five = \"\
    Five\";\n        string six = \"Six\";\n        string seven = \"Seven\";\n  \
    \      string eight = \"Eight\";\n        string nine = \"Nine\";\n        string\
    \ ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string thousand\
    \ = \"Thousand\";\n        string million = \"Million\";\n        string billion\
    \ = \"Billion\";\n        string trillion = \"Trillion\";\n        string quadrillion\
    \ = \"Quadrillion\";\n        string quintillion = \"Quintillion\";\n        string\
    \ sextillion = \"Sextillion\";\n        string septillion = \"Septillion\";\n\
    \        string octillion = \"Octillion\";\n        string nonillion = \"Nonillion\"\
    ;\n        string decillion = \"Decillion\";\n        string undecillion = \"\
    Undecillion\";\n        string duodecillion = \"Duodecillion\";\n        string\
    \ tredecillion = \"Tredecillion\";\n        string quattuordecillion = \"Quattuordecillion\"\
    ;\n        string quindecillion = \"Quindecillion\";\n        string sexdecillion\
    \ = \"Sexdecillion\";\n        string septendecillion = \"Septendecillion\";\n\
    \        string octodecillion = \"Octodecillion\";\n        string novemdecillion\
    \ = \"Novemdecillion\";\n        string vigintillion = \"Vigintillion\";\n   \
    \     string unvigintillion = \"Unvigintillion\";\n        string duovigintillion\
    \ = \"Duovigintillion\";\n        string trevigintillion = \"Trevigintillion\"\
    ;\n        string quattuorvigintillion = \"Quattuorvigintillion\";\n        string\
    \ quinvigintillion = \"Quinvigintillion", "        if (arr.Count <= 0) return\
    \ new List<string>();\n        var result = new List<string>();\n        var maxLength\
    \ = arr.Max();\n        var minLength = arr.Min();\n        var length = maxLength\
    \ - minLength + 1;\n        var digits = new Dictionary<long, string>();\n   \
    \     digits.Add(1L, \"One\");\n        digits.Add(2L, \"Two\");\n        digits.Add(3L,\
    \ \"Three\");\n        digits.Add(4L, \"Four\");\n        digits.Add(5L, \"Five\"\
    );\n        digits.Add(6L, \"Six\");\n        digits.Add(7L, \"Seven\");\n   \
    \     digits.Add(8L, \"Eight\");\n        digits.Add(9L, \"Nine\");\n        digits.Add(0L,\
    \ \"Zero\");\n        digits.Add(-1L, \"Minus\");\n        digits.Add(55L, \"\
    Fifty-Five\");\n        digits.Add(100L, \"Hundred\");\n        digits.Add(1000L,\
    \ \"Thousand\");\n        digits.Add(10000L, \"Lakh\");\n        digits.Add(100000L,\
    \ \"Crore\");\n        digits.Add(1000000L, \"Million\");\n        digits.Add(10000000L,\
    \ \"Billion\");\n        digits.Add(100000000L, \"Trillion\");\n        digits.Add(1000000000L,\
    \ \"Quadrillion\");\n        digits.Add(10000000000L, \"Quintillion\");\n    \
    \    digits.Add(100000000000L, \"Sextillion\");\n        digits.Add(1000000000000L,\
    \ \"Septillion\");\n        digits.Add(10000000000000L, \"Octillion\");\n    \
    \    digits.Add(100000000000000L, \"Nonillion\");\n        digits.Add(1000000000000000L,\
    \ \"Decillion\");\n        digits.Add(10000000000000000L, \"Undecillion\");\n\
    \        digits.Add(100000000000000000L, \"Duodecillion\");\n        digits.Add(1000000000000000000L,\
    \ \"Duodecillion\");\n        digits.Add(10000000000000000000L, \"Tridecillion\"\
    );\n        digits.Add(100000000000000000000L, \"Tridecillion\");\n        digits.Add(1000000000000000000000L,\
    \ \"Quaddecillion\");\n        digits.Add(10000000000000000000000L, \"Quaddecillion\"\
    );\n        digits.Add(100000000000000000000000L, \"Quattuordecillion\");\n  \
    \      digits.Add(1000000000000000000000000L, \"Quattuordecillion\");\n      \
    \  digits.Add(10000000000000000000000000L, \"Sexdecillion\");\n        digits.Add(100000000000000000000000000L,\
    \ \"Sexdecillion\");\n        digits.Add(1000000000000000000000000000", "    \
    \    if (arr.Count == 0) return new List<string>();\n        List<string> result\
    \ = new List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        long range = max - min + 1;\n        long digit = range / 10;\n     \
    \   long remainder = range % 10;\n        string one = \"One\";\n        string\
    \ two = \"Two\";\n        string three = \"Three\";\n        string four = \"\
    Four\";\n        string five = \"Five\";\n        string six = \"Six\";\n    \
    \    string seven = \"Seven\";\n        string eight = \"Eight\";\n        string\
    \ nine = \"Nine\";\n        string ten = \"Ten\";\n        string hundred = \"\
    Hundred\";\n        string thousand = \"Thousand\";\n        string million =\
    \ \"Million\";\n        string billion = \"Billion\";\n        string trillion\
    \ = \"Trillion\";\n        string quadrillion = \"Quadrillion\";\n        string\
    \ quintillion = \"Quintillion\";\n        string sextillion = \"Sextillion\";\n\
    \        string septillion = \"Septillion\";\n        string octillion = \"Octillion\"\
    ;\n        string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintilli", "        if (arr.Count\
    \ == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var maxLength = arr.Max(x => x.ToString().Length);\n        var minLength\
    \ = arr.Min(x => x.ToString().Length);\n        var maxDigit = maxLength - minLength;\n\
    \        var maxDigitDigit = maxDigit / 10;\n        var minDigit = minLength\
    \ / 10;\n        var maxDigitDigitDigit = maxDigit % 10;\n        var minDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigit = maxDigit % 10;\n   \
    \     var minDigitDigitDigit = minDigit % 10;\n        var maxDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigit = minDigit % 10;\n   \
    \     var maxDigitDigitDigitDigitDigit = maxDigit % 10;\n        var minDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigit = maxDigit %\
    \ 10;\n        var minDigitDigitDigitDigitDigitDigit = minDigit % 10;\n      \
    \  var maxDigitDigitDigitDigitDigitDigitDigit = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigit = minDigit\
    \ % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit %\
    \ 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigit = minDigit % 10;\n\
    \        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % 10;\n\
    \        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = minDigit\
    \ % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit\
    \ % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n", "        if (arr.Count == 0) {\n            return new\
    \ List<string>();\n        }\n        List<long> reversed = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            reversed.Add(i);\n            }\n        }\n        List<string>\
    \ result = new List<string>();\n        foreach (long i in reversed) {\n     \
    \       string name = GetName(i);\n            result.Add(name);\n        }\n\
    \        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<string> result = new List<string>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long range = max - min + 1;\n        long\
    \ digit = range / 10;\n        long remainder = range % 10;\n        bool isFirstDigit\
    \ = true;\n        string firstDigit = \"One\";\n        string secondDigit =\
    \ \"Two\";\n        string thirdDigit = \"Three\";\n        string fourthDigit\
    \ = \"Four\";\n        string fifthDigit = \"Five\";\n        string sixthDigit\
    \ = \"Six\";\n        string seventhDigit = \"Seven\";\n        string eighthDigit\
    \ = \"Eight\";\n        string ninthDigit = \"Nine\";\n        string tenthDigit\
    \ = \"Ten\";\n        string eleventhDigit = \"Eleven\";\n        string twelfthDigit\
    \ = \"Twelve\";\n        string thirteenthDigit = \"Thirteen\";\n        string\
    \ fourteenthDigit = \"Fourteen\";\n        string fifteenthDigit = \"Fifteen\"\
    ;\n        string sixteenthDigit = \"Sixteen\";\n        string seventeenthDigit\
    \ = \"Seventeen\";\n        string eighteenthDigit = \"Eighteen\";\n        string\
    \ nineteenthDigit = \"Nineteen\";\n        string twentiethDigit = \"Twenty\"\
    ;\n        string twentyFirstDigit = \"TwentyFirst\";\n        string twentySecondDigit\
    \ = \"TwentySecond\";\n        string twentyThirdDigit = \"TwentyThird\";\n  \
    \      string twentyFourthDigit = \"TwentyFourth\";\n        string twentyFifthDigit\
    \ = \"TwentyFifth\";\n        string twentySixthDigit = \"TwentySixth\";\n   \
    \     string twentySeventhDigit = \"TwentySeventh\";\n        string twentyEighthDigit\
    \ = \"TwentyEighth\";\n        string twentyNinthDigit = \"TwentyNinth\";\n  \
    \      string thirtiethDigit = \"Thirty\";\n        string thirtyFirstDigit =\
    \ \"ThirtyFirst\";\n        string thirtySecondDigit = \"ThirtySecond\";\n   \
    \     string thirtyThirdDigit = \"ThirtyThird\";\n        string thirtyFourthDigit\
    \ = \"ThirtyFourth\";\n        string thirtyFifthDigit = \"ThirtyFifth\";\n",
  "        if (arr.Count == 0) return new List<string>();\n        List<long> reversed\
    \ = new List<long>();\n        foreach (long n in arr) {\n            if (n >\
    \ 9) reversed.Add(n - 10);\n            else if (n < 1) reversed.Add(n + 10);\n\
    \            else reversed.Add(n);\n        }\n        List<string> result = new\
    \ List<string>();\n        foreach (long n in reversed) {\n            string\
    \ name = GetName(n);\n            if (name != null) result.Add(name);\n      \
    \  }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var digits = new Dictionary<long,\
    \ string>();\n        var ones = new List<long>();\n        var tens = new List<long>();\n\
    \        var hundreds = new List<long>();\n        var thousands = new List<long>();\n\
    \        var tenths = new List<long>();\n        var hundredths = new List<long>();\n\
    \        var thousandths = new List<long>();\n        var tenthths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n", "        if (arr.Count == 0)\n      \
    \      return new List<string>();\n        List<long> reversed = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n >= 1 && n <= 9)\n      \
    \          reversed.Add(n);\n        }\n        List<string> result = new List<string>();\n\
    \        foreach (long n in reversed) {\n            string name = \"\";\n   \
    \         switch (n) {\n                case 1:\n                    name = \"\
    One\";\n                    break;\n                case 2:\n                \
    \    name = \"Two\";\n                    break;\n                case 3:\n  \
    \                  name = \"Three\";\n                    break;\n           \
    \     case 4:\n                    name = \"Four\";\n                    break;\n\
    \                case 5:\n                    name = \"Five\";\n             \
    \       break;\n                case 6:\n                    name = \"Six\";\n\
    \                    break;\n                case 7:\n                    name\
    \ = \"Seven\";\n                    break;\n                case 8:\n        \
    \            name = \"Eight\";\n                    break;\n                case\
    \ 9:\n                    name = \"Nine\";\n                    break;\n     \
    \       }\n            result.Add(name);\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        if (arr.Count > 0) {\n\
    \            long min = arr.Min();\n            long max = arr.Max();\n      \
    \      long range = max - min;\n            long tens = range / 10;\n        \
    \    long ones = range % 10;\n            string one = \"One\";\n            string\
    \ two = \"Two\";\n            string three = \"Three\";\n            string four\
    \ = \"Four\";\n            string five = \"Five\";\n            string six = \"\
    Six\";\n            string seven = \"Seven\";\n            string eight = \"Eight\"\
    ;\n            string nine = \"Nine\";\n            string ten = \"Ten\";\n  \
    \          string hundred = \"Hundred\";\n            string thousand = \"Thousand\"\
    ;\n            string million = \"Million\";\n            string billion = \"\
    Billion\";\n            string trillion = \"Trillion\";\n            string quadrillion\
    \ = \"Quadrillion\";\n            string quintillion = \"Quintillion\";\n    \
    \        string sextillion = \"Sextillion\";\n            string septillion =\
    \ \"Septillion\";\n            string octillion = \"Octillion\";\n           \
    \ string nonillion = \"Nonillion\";\n            string decillion = \"Decillion\"\
    ;\n            string undecillion = \"Undecillion\";\n            string duodecillion\
    \ = \"Duodecillion\";\n            string tredecillion = \"Tredecillion\";\n \
    \           string quattuordecillion = \"Quattuordecillion\";\n            string\
    \ quindecillion = \"Quindecillion\";\n            string sexdecillion = \"Sexdecillion\"\
    ;\n            string septendecillion = \"Septendecillion\";\n            string\
    \ octodecillion = \"Octodecillion\";\n            string novemdecillion = \"Novemdecillion\"\
    ;\n            string vigintillion = \"Vigintillion\";\n            string unvigintillion\
    \ = \"Unvigintillion\";\n            string duovigintillion = \"Duovigintillion\"\
    ;\n            string trevigintillion = \"Trevigintillion\";\n            string\
    \ quattuorvigintillion = \"Quattuorvigintillion\";\n            string quinvigintillion\
    \ = \"Quinvigintil", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var digits = new\
    \ Dictionary<long, string>();\n        foreach (var item in arr) {\n         \
    \   long digit = item % 10;\n            if (digit < 1 || digit > 9) {\n     \
    \           continue;\n            }\n            digits[item] = digits[item]\
    \ ?? GetName(digit);\n        }\n        foreach (var item in digits) {\n    \
    \        result.Add(item.Value);\n        }\n        return result;", "      \
    \  if (arr.Count == 0)\n            return new List<string>();\n        var result\
    \ = new List<string>();\n        var digits = new Dictionary<long, string>();\n\
    \        var maxDigit = arr.Max();\n        var minDigit = arr.Min();\n      \
    \  var maxDigitName = digits.Keys.Max();\n        var minDigitName = digits.Keys.Min();\n\
    \        var maxDigitValue = digits.Values.Max();\n        var minDigitValue =\
    \ digits.Values.Min();\n        var maxDigitNameValue = digits.Keys.Max();\n \
    \       var minDigitNameValue = digits.Keys.Min();\n        var maxDigitValueValue\
    \ = digits.Values.Max();\n        var minDigitValueValue = digits.Values.Min();\n\
    \        var maxDigitNameNameValue = digits.Keys.Max();\n        var minDigitNameNameValue\
    \ = digits.Keys.Min();\n        var maxDigitValueNameValue = digits.Values.Max();\n\
    \        var minDigitValueNameValue = digits.Values.Min();\n        var maxDigitNameValueNameValue\
    \ = digits.Keys.Max();\n        var minDigitNameValueNameValue = digits.Keys.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Max();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameNameNameValue = digits.Keys.Max();\n\
    \        var minDigitNameNameNameValue = digits.Keys.Min();\n        var maxDigitValueNameNameValue\
    \ = digits.Values.Max();\n        var minDigitValueNameNameValue = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameNameNameValue = digits.Keys.Max();\n\
    \        var minDigitNameNameNameValue = digits.Keys.Min();\n        var maxDigitValueNameNameValue\
    \ = digits.Values.Max();\n        var minDigitValueNameNameValue = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameValueNameValue = digits.Keys.Max();\n\
    \        var minDigitNameValueNameValue = digits.Keys.Min();\n        var maxDigitValueNameValueName\
    \ = digits.Values.Max();\n        var minDigitValueNameValueName = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameNameValueName = digits.Keys.Max();\n\
    \        var minDigitNameNameValueName = digits.Keys.Min();\n        var maxDigitValueNameValueName\
    \ = digits.Values.Max();\n        var minDigitValueNameValueName = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var ",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var reversed = arr.OrderByDescending(i => i).ToList();\n\
    \        var digits = Enumerable.Range(1, 9).Select(i => (long)reversed[i]).ToList();\n\
    \        var ones = Enumerable.Range(1, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var tens = Enumerable.Range(10, 9).Select(i =>\
    \ (long)reversed[i]).Where(i => i <= 9).ToList();\n        var hundreds = Enumerable.Range(100,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ thousands = Enumerable.Range(1000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var tenThousands = Enumerable.Range(10000, 9).Select(i\
    \ => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var hundredThousands\
    \ = Enumerable.Range(100000, 9).Select(i => (long)reversed[i]).Where(i => i <=\
    \ 9).ToList();\n        var millions = Enumerable.Range(1000000, 9).Select(i =>\
    \ (long)reversed[i]).Where(i => i <= 9).ToList();\n        var billions = Enumerable.Range(100000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ trillions = Enumerable.Range(10000000000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var quadrillions = Enumerable.Range(1000000000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ quintillions = Enumerable.Range(100000000000000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var sextillions = Enumerable.Range(1000000000000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ septillions = Enumerable.Range(10000000000000000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var octillions = Enumerable.Range(1000000000000000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();", "        if\
    \ (arr.Count == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var min = arr.Min();\n        var max = arr.Max();\n        var digits\
    \ = new List<string>();\n        foreach (var i in arr) {\n            if (i >=\
    \ min && i <= max) {\n                digits.Add(i.ToString());\n            }\
    \ else {\n                result.Add(string.Join(\"\", digits));\n           \
    \     digits.Clear();\n            }\n        }\n        result.Add(string.Join(\"\
    \", digits));\n        return result;", "        if (arr.Count == 0) {\n     \
    \       return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        var digits = new List<string>();\n        var maxDigit = arr.Max();\n\
    \        var minDigit = arr.Min();\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigit", "        if\
    \ (arr.Count == 0)\n            return new List<string>();\n        var result\
    \ = new List<string>();\n        var maxLength = arr.Max(x => x.ToString().Length);\n\
    \        var minLength = arr.Min(x => x.ToString().Length);\n        var maxDigit\
    \ = maxLength - minLength;\n        var maxDigitDigit = maxDigit / 10;\n     \
    \   var minDigit = minLength / 10;\n        var minDigitDigit = minDigit / 10;\n\
    \        var digits = new List<string>();\n        var digit = minDigit;\n   \
    \     while (digit <= maxDigit) {\n            digits.Add(GetDigit(digit, arr));\n\
    \            digit += minDigitDigit;\n        }\n        digits.Reverse();\n \
    \       foreach (var digit in digits)\n            result.Add(GetName(digit));\n\
    \        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var list = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        list.Reverse();\n        foreach (var item in list) {\n            int\
    \ digit = item % 10;\n            string name = GetName(digit);\n            list.Remove(item);\n\
    \            list.Insert(0, name);\n        }\n        return list;", "      \
    \  if (arr.Count == 0) return new List<string>();\n        List<string> result\
    \ = new List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        if (max > 9) max = 9L;\n        if (min < 1) min = 1L;\n        long\
    \ range = (max - min);\n        long digit = range / 10;\n        long rest =\
    \ range % 10;\n        string one = \"One\";\n        string two = \"Two\";\n\
    \        string three = \"Three\";\n        string four = \"Four\";\n        string\
    \ five = \"Five\";\n        string six = \"Six\";\n        string seven = \"Seven\"\
    ;\n        string eight = \"Eight\";\n        string nine = \"Nine\";\n      \
    \  string ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string\
    \ thousand = \"Thousand\";\n        string million = \"Million\";\n        string\
    \ billion = \"Billion\";\n        string trillion = \"Trillion\";\n        string\
    \ quadrillion = \"Quadrillion\";\n        string quintillion = \"Quintillion\"\
    ;\n        string sextillion = \"Sextillion\";\n        string septillion = \"\
    Septillion\";\n        string octillion = \"Octillion\";\n        string nonillion\
    \ = \"Nonillion\";\n        string decillion = \"Decillion\";\n        string\
    \ undecillion = \"Undecillion\";\n        string duodecillion = \"Duodecillion\"\
    ;\n        string tredecillion = \"Tredecillion\";\n        string quattuordecillion\
    \ = \"Quattuordecillion\";\n        string quindecillion = \"Quindecillion\";\n\
    \        string sexdecillion = \"Sexdecillion\";\n        string septendecillion\
    \ = \"Septendecillion\";\n        string octodecillion = \"Octodecillion\";\n\
    \        string novemdecillion = \"Novemdecillion\";\n        string vigintillion\
    \ = \"Vigintillion\";\n        string unvigintillion = \"Unvigintillion\";\n \
    \       string duovigintillion = \"Duovigintillion\";\n        string trevigintillion\
    \ = \"Trevigintillion\";\n        string quattuorvigintillion = \""]
stop_tokens:
- "\n    }\n"
