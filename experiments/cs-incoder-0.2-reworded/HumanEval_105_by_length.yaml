name: HumanEval_105_by_length
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a list of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    // reverse the resulting list, and then replace each digit\
  \ by its corresponding name from\n    // \"One\", \"Two\", \"Three\", \"Four\",\
  \ \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n    // For example:\n    //\
  \ >>> ByLength((new List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L,\
  \ (long)5L, (long)8L, (long)2L, (long)3L})))\n    // (new List<string>(new string[]{(string)\"\
  Eight\", (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\"\
  , (string)\"Two\", (string)\"One\", (string)\"One\"}))\n    // If the list is empty,\
  \ return an empty list:\n    // >>> ByLength((new List<long>()))\n    // (new List<string>())\n\
  \    // If the list has any strange number ignore it:\n    // >>> ByLength((new\
  \ List<long>(new long[]{(long)1L, (long)-1L, (long)55L})))\n    // (new List<string>(new\
  \ string[]{(string)\"One\"}))\n    public static List<string> ByLength(List<long>\
  \ arr) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(ByLength((new\
  \ List<long>(new long[]{(long)2L, (long)1L, (long)1L, (long)4L, (long)5L, (long)8L,\
  \ (long)2L, (long)3L}))).Equals((new List<string>(new string[]{(string)\"Eight\"\
  , (string)\"Five\", (string)\"Four\", (string)\"Three\", (string)\"Two\", (string)\"\
  Two\", (string)\"One\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>())).Equals((new\
  \ List<string>())));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L,\
  \ (long)-1L, (long)55L}))).Equals((new List<string>(new string[]{(string)\"One\"\
  }))));\n    Debug.Assert(ByLength((new List<long>(new long[]{(long)1L, (long)-1L,\
  \ (long)3L, (long)2L}))).Equals((new List<string>(new string[]{(string)\"Three\"\
  , (string)\"Two\", (string)\"One\"}))));\n    Debug.Assert(ByLength((new List<long>(new\
  \ long[]{(long)9L, (long)4L, (long)8L}))).Equals((new List<string>(new string[]{(string)\"\
  Nine\", (string)\"Eight\", (string)\"Four\"}))));\n    }\n\n}\n"
completions: ["        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        List<long> newArr = new List<long>();\n        long maxNum\
    \ = arr.Max();\n        long minNum = arr.Min();\n        long num;\n        string\
    \ name;\n        if (maxNum < 10) {\n            name = \"One\";\n        } else\
    \ if (maxNum < 20) {\n            name = \"Two\";\n        } else if (maxNum <\
    \ 30) {\n            name = \"Three\";\n        } else if (maxNum < 40) {\n  \
    \          name = \"Four\";\n        } else if (maxNum < 50) {\n            name\
    \ = \"Five\";\n        } else if (maxNum < 60) {\n            name = \"Six\";\n\
    \        } else if (maxNum < 70) {\n            name = \"Seven\";\n        } else\
    \ if (maxNum < 80) {\n            name = \"Eight\";\n        } else if (maxNum\
    \ < 90) {\n            name = \"Nine\";\n        } else {\n            name =\
    \ \"Ten\";\n        }\n        foreach (long num in arr) {\n            if (num\
    \ < minNum) {\n                newArr.Add(minNum);\n            } else if (num\
    \ > maxNum) {\n                newArr.Add(maxNum);\n            } else {\n   \
    \             num = num - minNum;\n                while (num > 0) {\n       \
    \             newArr.Add(num % 10);\n                    num = num / 10;\n   \
    \             }\n            }\n        }\n        return newArr.Select(x => name\
    \ + x).ToList();", "        if (arr.Count == 0) return new List<string>();\n \
    \       var result = new List<string>();\n        var digits = new Dictionary<long,\
    \ string>();\n        var digitNames = new Dictionary<long, string>();\n     \
    \   var digitValues = new Dictionary<long, string>();\n        var maxDigit =\
    \ arr.Max();\n        var minDigit = arr.Min();\n        var maxDigitName = digitNames.ContainsKey(maxDigit)\
    \ ? digitNames[maxDigit] : \"Nine\";\n        var minDigitName = digitNames.ContainsKey(minDigit)\
    \ ? digitNames[minDigit] : \"One\";\n        var maxDigitValue = digitValues.ContainsKey(maxDigit)\
    \ ? digitValues[maxDigit] : \"Two\";\n        var minDigitValue = digitValues.ContainsKey(minDigit)\
    \ ? digitValues[minDigit] : \"One\";\n        digits[maxDigit] = maxDigitName;\n\
    \        digits[minDigit] = minDigitName;\n        digitValues[maxDigit] = maxDigitValue;\n\
    \        digitValues[minDigit] = minDigitValue;\n        var digitCount = maxDigit\
    \ - minDigit + 1;\n        var digitNamesCount = digitNames.Count;\n        var\
    \ digitValuesCount = digitValues.Count;\n        var digitNamesArray = new string[digitNamesCount];\n\
    \        var digitValuesArray = new string[digitValuesCount];\n        var digitValuesArrayIndex\
    \ = 0;\n        var digitNamesArrayIndex = 0;\n        for (var i = minDigit;\
    \ i <= maxDigit; i++) {\n            digitNamesArray[digitNamesArrayIndex] = digits[i\
    \ - 1];\n            digitValuesArray[digitValuesArrayIndex] = digitValues[i -\
    \ 1];\n            digitValuesArrayIndex++;\n            digitNamesArrayIndex++;\n\
    \        }\n        var digitNamesArrayLength = digitNamesArray.Length;\n    \
    \    var digitValuesArrayLength = digitValuesArray.Length;\n        var digitValuesArrayIndex\
    \ = 0;\n        for (var i = minDigit; i <= maxDigit; i++) {\n            var\
    \ digit = i - minDigit;\n            if (digitNames.ContainsKey(digit)) {\n  \
    \              result.Add(digitNames[digit]);\n            } else {\n        \
    \        result.Add(digitValuesArray[digitValuesArrayIndex]);\n            }\n\
    \            digitValuesArrayIndex++;\n        }\n        return result;", " \
    \       if (arr.Count < 1)\n            return new List<string>();\n        List<string>\
    \ result = new List<string>();\n        long max = arr.Max();\n        long min\
    \ = arr.Min();\n        if (max < 1 || min > 9)\n            return new List<string>();\n\
    \        string one = \"One\";\n        string two = \"Two\";\n        string\
    \ three = \"Three\";\n        string four = \"Four\";\n        string five = \"\
    Five\";\n        string six = \"Six\";\n        string seven = \"Seven\";\n  \
    \      string eight = \"Eight\";\n        string nine = \"Nine\";\n        string\
    \ ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string thousand\
    \ = \"Thousand\";\n        string million = \"Million\";\n        string billion\
    \ = \"Billion\";\n        string trillion = \"Trillion\";\n        string quadrillion\
    \ = \"Quadrillion\";\n        string quintillion = \"Quintillion\";\n        string\
    \ sextillion = \"Sextillion\";\n        string septillion = \"Septillion\";\n\
    \        string octillion = \"Octillion\";\n        string nonillion = \"Nonillion\"\
    ;\n        string decillion = \"Decillion\";\n        string undecillion = \"\
    Undecillion\";\n        string duodecillion = \"Duodecillion\";\n        string\
    \ tredecillion = \"Tredecillion\";\n        string quattuordecillion = \"Quattuordecillion\"\
    ;\n        string quindecillion = \"Quindecillion\";\n        string sexdecillion\
    \ = \"Sexdecillion\";\n        string septendecillion = \"Septendecillion\";\n\
    \        string octodecillion = \"Octodecillion\";\n        string novemdecillion\
    \ = \"Novemdecillion\";\n        string vigintillion = \"Vigintillion\";\n   \
    \     string unvigintillion = \"Unvigintillion\";\n        string duovigintillion\
    \ = \"Duovigintillion\";\n        string trevigintillion = \"Trevigintillion\"\
    ;\n        string quattuorvigintillion = \"Quattuorvigintillion\";\n        string\
    \ quinvigintillion = \"Quinvigintillion", "        if (arr.Count <= 0) return\
    \ new List<string>();\n        var result = new List<string>();\n        var maxLength\
    \ = arr.Max();\n        var minLength = arr.Min();\n        var length = maxLength\
    \ - minLength + 1;\n        var digits = new Dictionary<long, string>();\n   \
    \     digits.Add(1L, \"One\");\n        digits.Add(2L, \"Two\");\n        digits.Add(3L,\
    \ \"Three\");\n        digits.Add(4L, \"Four\");\n        digits.Add(5L, \"Five\"\
    );\n        digits.Add(6L, \"Six\");\n        digits.Add(7L, \"Seven\");\n   \
    \     digits.Add(8L, \"Eight\");\n        digits.Add(9L, \"Nine\");\n        digits.Add(0L,\
    \ \"Zero\");\n        digits.Add(-1L, \"Minus\");\n        digits.Add(55L, \"\
    Fifty-Five\");\n        digits.Add(100L, \"Hundred\");\n        digits.Add(1000L,\
    \ \"Thousand\");\n        digits.Add(10000L, \"Lakh\");\n        digits.Add(100000L,\
    \ \"Crore\");\n        digits.Add(1000000L, \"Million\");\n        digits.Add(10000000L,\
    \ \"Billion\");\n        digits.Add(100000000L, \"Trillion\");\n        digits.Add(1000000000L,\
    \ \"Quadrillion\");\n        digits.Add(10000000000L, \"Quintillion\");\n    \
    \    digits.Add(100000000000L, \"Sextillion\");\n        digits.Add(1000000000000L,\
    \ \"Septillion\");\n        digits.Add(10000000000000L, \"Octillion\");\n    \
    \    digits.Add(100000000000000L, \"Nonillion\");\n        digits.Add(1000000000000000L,\
    \ \"Decillion\");\n        digits.Add(10000000000000000L, \"Undecillion\");\n\
    \        digits.Add(100000000000000000L, \"Duodecillion\");\n        digits.Add(1000000000000000000L,\
    \ \"Duodecillion\");\n        digits.Add(10000000000000000000L, \"Tridecillion\"\
    );\n        digits.Add(100000000000000000000L, \"Tridecillion\");\n        digits.Add(1000000000000000000000L,\
    \ \"Quaddecillion\");\n        digits.Add(10000000000000000000000L, \"Quaddecillion\"\
    );\n        digits.Add(100000000000000000000000L, \"Quattuordecillion\");\n  \
    \      digits.Add(1000000000000000000000000L, \"Quattuordecillion\");\n      \
    \  digits.Add(10000000000000000000000000L, \"Sexdecillion\");\n        digits.Add(100000000000000000000000000L,\
    \ \"Sexdecillion\");\n        digits.Add(1000000000000000000000000000", "    \
    \    if (arr.Count == 0) return new List<string>();\n        List<string> result\
    \ = new List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        long range = max - min + 1;\n        long digit = range / 10;\n     \
    \   long remainder = range % 10;\n        string one = \"One\";\n        string\
    \ two = \"Two\";\n        string three = \"Three\";\n        string four = \"\
    Four\";\n        string five = \"Five\";\n        string six = \"Six\";\n    \
    \    string seven = \"Seven\";\n        string eight = \"Eight\";\n        string\
    \ nine = \"Nine\";\n        string ten = \"Ten\";\n        string hundred = \"\
    Hundred\";\n        string thousand = \"Thousand\";\n        string million =\
    \ \"Million\";\n        string billion = \"Billion\";\n        string trillion\
    \ = \"Trillion\";\n        string quadrillion = \"Quadrillion\";\n        string\
    \ quintillion = \"Quintillion\";\n        string sextillion = \"Sextillion\";\n\
    \        string septillion = \"Septillion\";\n        string octillion = \"Octillion\"\
    ;\n        string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintilli", "        if (arr.Count\
    \ == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var maxLength = arr.Max(x => x.ToString().Length);\n        var minLength\
    \ = arr.Min(x => x.ToString().Length);\n        var maxDigit = maxLength - minLength;\n\
    \        var maxDigitDigit = maxDigit / 10;\n        var minDigit = minLength\
    \ / 10;\n        var maxDigitDigitDigit = maxDigit % 10;\n        var minDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigit = maxDigit % 10;\n   \
    \     var minDigitDigitDigit = minDigit % 10;\n        var maxDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigit = minDigit % 10;\n   \
    \     var maxDigitDigitDigitDigitDigit = maxDigit % 10;\n        var minDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigit = maxDigit %\
    \ 10;\n        var minDigitDigitDigitDigitDigitDigit = minDigit % 10;\n      \
    \  var maxDigitDigitDigitDigitDigitDigitDigit = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigit =\
    \ maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigit = minDigit\
    \ % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit %\
    \ 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigit = minDigit % 10;\n\
    \        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit % 10;\n\
    \        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = minDigit\
    \ % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit = maxDigit\
    \ % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n        var maxDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = maxDigit % 10;\n        var minDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigitDigit\
    \ = minDigit % 10;\n", "        if (arr.Count == 0) {\n            return new\
    \ List<string>();\n        }\n        List<long> reversed = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n    \
    \            reversed.Add(i);\n            }\n        }\n        List<string>\
    \ result = new List<string>();\n        foreach (long i in reversed) {\n     \
    \       string name = GetName(i);\n            result.Add(name);\n        }\n\
    \        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<string> result = new List<string>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long range = max - min + 1;\n        long\
    \ digit = range / 10;\n        long remainder = range % 10;\n        bool isFirstDigit\
    \ = true;\n        string firstDigit = \"One\";\n        string secondDigit =\
    \ \"Two\";\n        string thirdDigit = \"Three\";\n        string fourthDigit\
    \ = \"Four\";\n        string fifthDigit = \"Five\";\n        string sixthDigit\
    \ = \"Six\";\n        string seventhDigit = \"Seven\";\n        string eighthDigit\
    \ = \"Eight\";\n        string ninthDigit = \"Nine\";\n        string tenthDigit\
    \ = \"Ten\";\n        string eleventhDigit = \"Eleven\";\n        string twelfthDigit\
    \ = \"Twelve\";\n        string thirteenthDigit = \"Thirteen\";\n        string\
    \ fourteenthDigit = \"Fourteen\";\n        string fifteenthDigit = \"Fifteen\"\
    ;\n        string sixteenthDigit = \"Sixteen\";\n        string seventeenthDigit\
    \ = \"Seventeen\";\n        string eighteenthDigit = \"Eighteen\";\n        string\
    \ nineteenthDigit = \"Nineteen\";\n        string twentiethDigit = \"Twenty\"\
    ;\n        string twentyFirstDigit = \"TwentyFirst\";\n        string twentySecondDigit\
    \ = \"TwentySecond\";\n        string twentyThirdDigit = \"TwentyThird\";\n  \
    \      string twentyFourthDigit = \"TwentyFourth\";\n        string twentyFifthDigit\
    \ = \"TwentyFifth\";\n        string twentySixthDigit = \"TwentySixth\";\n   \
    \     string twentySeventhDigit = \"TwentySeventh\";\n        string twentyEighthDigit\
    \ = \"TwentyEighth\";\n        string twentyNinthDigit = \"TwentyNinth\";\n  \
    \      string thirtiethDigit = \"Thirty\";\n        string thirtyFirstDigit =\
    \ \"ThirtyFirst\";\n        string thirtySecondDigit = \"ThirtySecond\";\n   \
    \     string thirtyThirdDigit = \"ThirtyThird\";\n        string thirtyFourthDigit\
    \ = \"ThirtyFourth\";\n        string thirtyFifthDigit = \"ThirtyFifth\";\n",
  "        if (arr.Count == 0) return new List<string>();\n        List<long> reversed\
    \ = new List<long>();\n        foreach (long n in arr) {\n            if (n >\
    \ 9) reversed.Add(n - 10);\n            else if (n < 1) reversed.Add(n + 10);\n\
    \            else reversed.Add(n);\n        }\n        List<string> result = new\
    \ List<string>();\n        foreach (long n in reversed) {\n            string\
    \ name = GetName(n);\n            if (name != null) result.Add(name);\n      \
    \  }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var digits = new Dictionary<long,\
    \ string>();\n        var ones = new List<long>();\n        var tens = new List<long>();\n\
    \        var hundreds = new List<long>();\n        var thousands = new List<long>();\n\
    \        var tenths = new List<long>();\n        var hundredths = new List<long>();\n\
    \        var thousandths = new List<long>();\n        var tenthths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n", "        if (arr.Count == 0)\n      \
    \      return new List<string>();\n        List<long> reversed = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n >= 1 && n <= 9)\n      \
    \          reversed.Add(n);\n        }\n        List<string> result = new List<string>();\n\
    \        foreach (long n in reversed) {\n            string name = \"\";\n   \
    \         switch (n) {\n                case 1:\n                    name = \"\
    One\";\n                    break;\n                case 2:\n                \
    \    name = \"Two\";\n                    break;\n                case 3:\n  \
    \                  name = \"Three\";\n                    break;\n           \
    \     case 4:\n                    name = \"Four\";\n                    break;\n\
    \                case 5:\n                    name = \"Five\";\n             \
    \       break;\n                case 6:\n                    name = \"Six\";\n\
    \                    break;\n                case 7:\n                    name\
    \ = \"Seven\";\n                    break;\n                case 8:\n        \
    \            name = \"Eight\";\n                    break;\n                case\
    \ 9:\n                    name = \"Nine\";\n                    break;\n     \
    \       }\n            result.Add(name);\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        if (arr.Count > 0) {\n\
    \            long min = arr.Min();\n            long max = arr.Max();\n      \
    \      long range = max - min;\n            long tens = range / 10;\n        \
    \    long ones = range % 10;\n            string one = \"One\";\n            string\
    \ two = \"Two\";\n            string three = \"Three\";\n            string four\
    \ = \"Four\";\n            string five = \"Five\";\n            string six = \"\
    Six\";\n            string seven = \"Seven\";\n            string eight = \"Eight\"\
    ;\n            string nine = \"Nine\";\n            string ten = \"Ten\";\n  \
    \          string hundred = \"Hundred\";\n            string thousand = \"Thousand\"\
    ;\n            string million = \"Million\";\n            string billion = \"\
    Billion\";\n            string trillion = \"Trillion\";\n            string quadrillion\
    \ = \"Quadrillion\";\n            string quintillion = \"Quintillion\";\n    \
    \        string sextillion = \"Sextillion\";\n            string septillion =\
    \ \"Septillion\";\n            string octillion = \"Octillion\";\n           \
    \ string nonillion = \"Nonillion\";\n            string decillion = \"Decillion\"\
    ;\n            string undecillion = \"Undecillion\";\n            string duodecillion\
    \ = \"Duodecillion\";\n            string tredecillion = \"Tredecillion\";\n \
    \           string quattuordecillion = \"Quattuordecillion\";\n            string\
    \ quindecillion = \"Quindecillion\";\n            string sexdecillion = \"Sexdecillion\"\
    ;\n            string septendecillion = \"Septendecillion\";\n            string\
    \ octodecillion = \"Octodecillion\";\n            string novemdecillion = \"Novemdecillion\"\
    ;\n            string vigintillion = \"Vigintillion\";\n            string unvigintillion\
    \ = \"Unvigintillion\";\n            string duovigintillion = \"Duovigintillion\"\
    ;\n            string trevigintillion = \"Trevigintillion\";\n            string\
    \ quattuorvigintillion = \"Quattuorvigintillion\";\n            string quinvigintillion\
    \ = \"Quinvigintil", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var digits = new\
    \ Dictionary<long, string>();\n        foreach (var item in arr) {\n         \
    \   long digit = item % 10;\n            if (digit < 1 || digit > 9) {\n     \
    \           continue;\n            }\n            digits[item] = digits[item]\
    \ ?? GetName(digit);\n        }\n        foreach (var item in digits) {\n    \
    \        result.Add(item.Value);\n        }\n        return result;", "      \
    \  if (arr.Count == 0)\n            return new List<string>();\n        var result\
    \ = new List<string>();\n        var digits = new Dictionary<long, string>();\n\
    \        var maxDigit = arr.Max();\n        var minDigit = arr.Min();\n      \
    \  var maxDigitName = digits.Keys.Max();\n        var minDigitName = digits.Keys.Min();\n\
    \        var maxDigitValue = digits.Values.Max();\n        var minDigitValue =\
    \ digits.Values.Min();\n        var maxDigitNameValue = digits.Keys.Max();\n \
    \       var minDigitNameValue = digits.Keys.Min();\n        var maxDigitValueValue\
    \ = digits.Values.Max();\n        var minDigitValueValue = digits.Values.Min();\n\
    \        var maxDigitNameNameValue = digits.Keys.Max();\n        var minDigitNameNameValue\
    \ = digits.Keys.Min();\n        var maxDigitValueNameValue = digits.Values.Max();\n\
    \        var minDigitValueNameValue = digits.Values.Min();\n        var maxDigitNameValueNameValue\
    \ = digits.Keys.Max();\n        var minDigitNameValueNameValue = digits.Keys.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Max();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameNameNameValue = digits.Keys.Max();\n\
    \        var minDigitNameNameNameValue = digits.Keys.Min();\n        var maxDigitValueNameNameValue\
    \ = digits.Values.Max();\n        var minDigitValueNameNameValue = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameNameNameValue = digits.Keys.Max();\n\
    \        var minDigitNameNameNameValue = digits.Keys.Min();\n        var maxDigitValueNameNameValue\
    \ = digits.Values.Max();\n        var minDigitValueNameNameValue = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameValueNameValue = digits.Keys.Max();\n\
    \        var minDigitNameValueNameValue = digits.Keys.Min();\n        var maxDigitValueNameValueName\
    \ = digits.Values.Max();\n        var minDigitValueNameValueName = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var minDigitValueValueNameValue\
    \ = digits.Values.Min();\n        var maxDigitNameNameValueName = digits.Keys.Max();\n\
    \        var minDigitNameNameValueName = digits.Keys.Min();\n        var maxDigitValueNameValueName\
    \ = digits.Values.Max();\n        var minDigitValueNameValueName = digits.Values.Min();\n\
    \        var maxDigitValueValueNameValue = digits.Values.Min();\n        var ",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var reversed = arr.OrderByDescending(i => i).ToList();\n\
    \        var digits = Enumerable.Range(1, 9).Select(i => (long)reversed[i]).ToList();\n\
    \        var ones = Enumerable.Range(1, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var tens = Enumerable.Range(10, 9).Select(i =>\
    \ (long)reversed[i]).Where(i => i <= 9).ToList();\n        var hundreds = Enumerable.Range(100,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ thousands = Enumerable.Range(1000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var tenThousands = Enumerable.Range(10000, 9).Select(i\
    \ => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var hundredThousands\
    \ = Enumerable.Range(100000, 9).Select(i => (long)reversed[i]).Where(i => i <=\
    \ 9).ToList();\n        var millions = Enumerable.Range(1000000, 9).Select(i =>\
    \ (long)reversed[i]).Where(i => i <= 9).ToList();\n        var billions = Enumerable.Range(100000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ trillions = Enumerable.Range(10000000000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var quadrillions = Enumerable.Range(1000000000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ quintillions = Enumerable.Range(100000000000000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var sextillions = Enumerable.Range(1000000000000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();\n        var\
    \ septillions = Enumerable.Range(10000000000000000, 9).Select(i => (long)reversed[i]).Where(i\
    \ => i <= 9).ToList();\n        var octillions = Enumerable.Range(1000000000000000000,\
    \ 9).Select(i => (long)reversed[i]).Where(i => i <= 9).ToList();", "        if\
    \ (arr.Count == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var min = arr.Min();\n        var max = arr.Max();\n        var digits\
    \ = new List<string>();\n        foreach (var i in arr) {\n            if (i >=\
    \ min && i <= max) {\n                digits.Add(i.ToString());\n            }\
    \ else {\n                result.Add(string.Join(\"\", digits));\n           \
    \     digits.Clear();\n            }\n        }\n        result.Add(string.Join(\"\
    \", digits));\n        return result;", "        if (arr.Count == 0) {\n     \
    \       return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        var digits = new List<string>();\n        var maxDigit = arr.Max();\n\
    \        var minDigit = arr.Min();\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigit", "        if\
    \ (arr.Count == 0)\n            return new List<string>();\n        var result\
    \ = new List<string>();\n        var maxLength = arr.Max(x => x.ToString().Length);\n\
    \        var minLength = arr.Min(x => x.ToString().Length);\n        var maxDigit\
    \ = maxLength - minLength;\n        var maxDigitDigit = maxDigit / 10;\n     \
    \   var minDigit = minLength / 10;\n        var minDigitDigit = minDigit / 10;\n\
    \        var digits = new List<string>();\n        var digit = minDigit;\n   \
    \     while (digit <= maxDigit) {\n            digits.Add(GetDigit(digit, arr));\n\
    \            digit += minDigitDigit;\n        }\n        digits.Reverse();\n \
    \       foreach (var digit in digits)\n            result.Add(GetName(digit));\n\
    \        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var list = arr.Where(x => x >= 1 && x <= 9).OrderBy(x => x).ToList();\n\
    \        list.Reverse();\n        foreach (var item in list) {\n            int\
    \ digit = item % 10;\n            string name = GetName(digit);\n            list.Remove(item);\n\
    \            list.Insert(0, name);\n        }\n        return list;", "      \
    \  if (arr.Count == 0) return new List<string>();\n        List<string> result\
    \ = new List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        if (max > 9) max = 9L;\n        if (min < 1) min = 1L;\n        long\
    \ range = (max - min);\n        long digit = range / 10;\n        long rest =\
    \ range % 10;\n        string one = \"One\";\n        string two = \"Two\";\n\
    \        string three = \"Three\";\n        string four = \"Four\";\n        string\
    \ five = \"Five\";\n        string six = \"Six\";\n        string seven = \"Seven\"\
    ;\n        string eight = \"Eight\";\n        string nine = \"Nine\";\n      \
    \  string ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string\
    \ thousand = \"Thousand\";\n        string million = \"Million\";\n        string\
    \ billion = \"Billion\";\n        string trillion = \"Trillion\";\n        string\
    \ quadrillion = \"Quadrillion\";\n        string quintillion = \"Quintillion\"\
    ;\n        string sextillion = \"Sextillion\";\n        string septillion = \"\
    Septillion\";\n        string octillion = \"Octillion\";\n        string nonillion\
    \ = \"Nonillion\";\n        string decillion = \"Decillion\";\n        string\
    \ undecillion = \"Undecillion\";\n        string duodecillion = \"Duodecillion\"\
    ;\n        string tredecillion = \"Tredecillion\";\n        string quattuordecillion\
    \ = \"Quattuordecillion\";\n        string quindecillion = \"Quindecillion\";\n\
    \        string sexdecillion = \"Sexdecillion\";\n        string septendecillion\
    \ = \"Septendecillion\";\n        string octodecillion = \"Octodecillion\";\n\
    \        string novemdecillion = \"Novemdecillion\";\n        string vigintillion\
    \ = \"Vigintillion\";\n        string unvigintillion = \"Unvigintillion\";\n \
    \       string duovigintillion = \"Duovigintillion\";\n        string trevigintillion\
    \ = \"Trevigintillion\";\n        string quattuorvigintillion = \"", "       \
    \ if (arr.Count == 0)\n            return new List<string>();\n        var result\
    \ = new List<string>();\n        var digits = new List<string>();\n        var\
    \ reversed = arr.OrderByDescending(x => x).ToList();\n        var reversedDigits\
    \ = new List<string>();\n        var reversedDigitNames = new List<string>();\n\
    \        var maxDigit = reversed.Max();\n        var minDigit = reversed.Min();\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = reversed.IndexOf(maxDigit);\n\
    \        var minDigitIndex = reversed.IndexOf(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        if (maxDigitIndex == -1)\n            maxDigitIndex = 0;\n        if\
    \ (minDigitIndex == -1)\n            minDigitIndex = 0;\n        for (int i =\
    \ minDigitIndex; i <= maxDigitIndex; i++) {\n            digits.Add(reversed[i].ToString());\n\
    \        }\n        for (int i = minDigitIndex; i <= maxDigitIndex; i++) {\n \
    \           reversedDigits.Add(reversed[i].ToString());\n        }\n        for\
    \ (int i = minDigitIndex; i <= maxDigitIndex; i++) {\n            reversedDigitNames.Add(GetDigitName(reversed[i]));\n\
    \        }\n        for (int i = minDigitIndex; i <= maxDigitIndex; i++) {\n \
    \           string digitName = reversedDigitNames[i];\n            string reversedDigitName\
    \ = reversedDigits[i];\n            string reversedDigitNameReversed = reversedDigitNames[i];\n\
    \            string reversedDigitNameReversedReversed = reversedDigitNames[i];\n\
    \            string reversedDigitNameReversedReversedReversed = reversedDigitNames[i];\n\
    \            string reversedDigitNameReversedReversedReversedReversed = reversedDigitNames[i];\n\
    \            string reversedDigitNameReversedReversedReversedReversedReversed\
    \ = reversedDigitNames[i];\n            string reversedDigitNameReversedReversedReversedReversedReversedReversed\
    \ = reversedDigitNames[i];\n            string reversedDigitNameReversedReversedReversedReversedReversedReversedReversed\
    \ = reversedDigitNames[i];\n            string reversedDigitNameReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = reversedDigitNames[i];\n            string reversedDigitNameReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = reversedDigitNames[i];\n            string reversedDigitNameReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = reversedDigitNames[i];\n", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var digits = new Dictionary<long,\
    \ string>();\n        foreach (var item in arr) {\n            if (item < 1 ||\
    \ item > 9) continue;\n            digits.Add(item, names[item - 1]);\n      \
    \  }\n        var reversed = arr.Reverse();\n        foreach (var item in reversed)\
    \ {\n            if (item < 1 || item > 9) continue;\n            result.Add(digits[item]);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0) {\n            return result;\n        }\n      \
    \  long max = arr.Max();\n        long min = arr.Min();\n        long range =\
    \ (max - min) + 1;\n        long digit = max - min;\n        string one = \"One\"\
    ;\n        string two = \"Two\";\n        string three = \"Three\";\n        string\
    \ four = \"Four\";\n        string five = \"Five\";\n        string six = \"Six\"\
    ;\n        string seven = \"Seven\";\n        string eight = \"Eight\";\n    \
    \    string nine = \"Nine\";\n        string ten = \"Ten\";\n        string hundred\
    \ = \"Hundred\";\n        string thousand = \"Thousand\";\n        string million\
    \ = \"Million\";\n        string billion = \"Billion\";\n        string trillion\
    \ = \"Trillion\";\n        string quadrillion = \"Quadrillion\";\n        string\
    \ quintillion = \"Quintillion\";\n        string sextillion = \"Sextillion\";\n\
    \        string septillion = \"Septillion\";\n        string octillion = \"Octillion\"\
    ;\n        string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintillion = \"Quinvigintil",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var min = arr.Min();\n        var max\
    \ = arr.Max();\n        var digits = Enumerable.Range(0, 10).Select(i => (long)Math.Pow(10,\
    \ i)).ToArray();\n        var digitNames = Enumerable.Range(0, 10).Select(i =>\
    \ (string)Enum.GetName(typeof(Digits), i)).ToArray();\n        var digitNamesReversed\
    \ = Enumerable.Range(0, 10).Select(i => (string)Enum.GetName(typeof(Digits), 10\
    \ - i)).ToArray();\n        var ones = arr.Where(i => i <= min).Select(i => (long)Math.Pow(10,\
    \ i)).ToArray();\n        var tens = arr.Where(i => i >= min && i <= max).Select(i\
    \ => (long)Math.Pow(10, i)).ToArray();\n        var tensReversed = Enumerable.Range(0,\
    \ 10).Select(i => (long)Math.Pow(10, 10 - i)).ToArray();\n        var tensReversedReversed\
    \ = Enumerable.Range(0, 10).Select(i => (long)Math.Pow(10, 10 - 10 - i)).ToArray();\n\
    \        var tensReversedReversedReversed = Enumerable.Range(0, 10).Select(i =>\
    \ (long)Math.Pow(10, 10 - 10 - 10 - i)).ToArray();\n        var tensReversedReversedReversedReversed\
    \ = Enumerable.Range(0, 10).Select(i => (long)Math.Pow(10, 10 - 10 - 10 - 10 -\
    \ i)).ToArray();\n        var tensReversedReversedReversedReversedReversed = Enumerable.Range(0,\
    \ 10).Select(i => (long)Math.Pow(10, 10 - 10 - 10 - 10 - 10 - i)).ToArray();\n\
    \        var tensReversedReversedReversedReversedReversedReversed = Enumerable.Range(0,\
    \ 10).Select(i => (long)Math.Pow(10, 10 - 10 - 10 - 10 - 10 - 10 - i)).ToArray();\n\
    \        var tensReversedReversedReversedReversedReversedReversedReversed = Enumerable.Range(0,\
    \ 10).Select(i => (long)Math.Pow(10, 10 - 10 - 10 - 10 - 10 - 10 - 10 - i)).ToArray();\n\
    \        var tensReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = Enumerable.Range(0, 10).Select(i => (long)Math.Pow(10, 10 - 10 - 10 - 10 -\
    \ 10 - 10 - 10 - 10 - i)).ToArray();\n        var tensReversedReversedReversedReversedReversedReversedReversed",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var maxLength = arr.Max(x => x.ToString().Length);\n\
    \        var minLength = arr.Min(x => x.ToString().Length);\n        var maxDigit\
    \ = maxLength - minLength;\n        var minDigit = minLength - maxLength;\n  \
    \      var digits = new Dictionary<string, int>();\n        foreach (var item\
    \ in arr) {\n            var digit = item.ToString().Length - 1;\n           \
    \ if (digits.ContainsKey(digit)) digits[digit]++;\n            else digits.Add(digit,\
    \ 1);\n        }\n        var maxDigitCount = digits.Max(x => x.Value);\n    \
    \    var minDigitCount = digits.Min(x => x.Value);\n        var maxDigitName =\
    \ maxDigitCount > 9 ? \"Nine\" : maxDigitCount > 8 ? \"Eight\" : maxDigitCount\
    \ > 7 ? \"Seven\" : maxDigitCount > 6 ? \"Six\" : maxDigitCount > 5 ? \"Five\"\
    \ : maxDigitCount > 4 ? \"Four\" : maxDigitCount > 3 ? \"Three\" : maxDigitCount\
    \ > 2 ? \"Two\" : maxDigitCount > 1 ? \"One\" : maxDigitCount > 0 ? \"Zero\" :\
    \ \"\";\n        var minDigitName = minDigitCount > 9 ? \"Nine\" : minDigitCount\
    \ > 8 ? \"Eight\" : minDigitCount > 7 ? \"Seven\" : minDigitCount > 6 ? \"Six\"\
    \ : minDigitCount > 5 ? \"Five\" : minDigitCount > 4 ? \"Four\" : minDigitCount\
    \ > 3 ? \"Three\" : minDigitCount > 2 ? \"Two\" : minDigitCount > 1 ? \"One\"\
    \ : minDigitCount > 0 ? \"Zero\" : \"\";\n        foreach (var item in arr) {\n\
    \            var digit = item.ToString().Length - 1;\n            if (digits.ContainsKey(digit))\
    \ {\n                var count = digits[digit];\n                if (count > maxDigitCount)\
    \ {\n                    result.Add(string.Format(\"{0}{1}\", maxDigitName, item.ToString()));\n\
    \                } else if (count < minDigitCount) {\n                    result.Add(string.Format(\"\
    {0}{1}\", minDigitName, item.ToString()));\n                } else {\n       \
    \             result.Add(item.ToString());\n                }\n            }\n\
    \        }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<long> reversed = new List<long>();\n        long max = 0;\n    \
    \    foreach (long n in arr) {\n            if (n > max) max = n;\n        }\n\
    \        foreach (long n in arr) {\n            if (n >= 1 && n <= 9) {\n    \
    \            reversed.Add(n);\n            }\n        }\n        List<string>\
    \ result = new List<string>();\n        foreach (long n in reversed) {\n     \
    \       string name = \"\";\n            while (n > 0) {\n                name\
    \ = GetName(n);\n                result.Add(name);\n                n /= 10;\n\
    \            }\n        }\n        return result;", "        if (arr.Count ==\
    \ 0)\n            return new List<string>();\n        var result = new List<string>();\n\
    \        var reversed = arr.OrderByDescending(i => i).ToList();\n        var ones\
    \ = reversed.Where(i => i >= 1 && i <= 9).Select(i => i.ToString()).ToList();\n\
    \        var tens = reversed.Where(i => i >= 10 && i <= 99).Select(i => i.ToString()).ToList();\n\
    \        var hundreds = reversed.Where(i => i >= 100 && i <= 999).Select(i =>\
    \ i.ToString()).ToList();\n        var thousands = reversed.Where(i => i >= 1000\
    \ && i <= 9999).Select(i => i.ToString()).ToList();\n        var tenThousands\
    \ = reversed.Where(i => i >= 10000 && i <= 99999).Select(i => i.ToString()).ToList();\n\
    \        var oneThousands = reversed.Where(i => i >= 100000 && i <= 999999).Select(i\
    \ => i.ToString()).ToList();\n        var oneHundreds = reversed.Where(i => i\
    \ >= 1000000 && i <= 999999999).Select(i => i.ToString()).ToList();\n        var\
    \ oneThousandThousands = reversed.Where(i => i >= 10000000 && i <= 99999999999).Select(i\
    \ => i.ToString()).ToList();\n        var oneThousandThousandHundreds = reversed.Where(i\
    \ => i >= 1000000000 && i <= 999999999999).Select(i => i.ToString()).ToList();\n\
    \        var oneThousandThousandHundredThousands = reversed.Where(i => i >= 10000000000\
    \ && i <= 999999999999999).Select(i => i.ToString()).ToList();\n        var oneThousandThousandHundredThousandHundreds\
    \ = reversed.Where(i => i >= 100000000000 && i <= 999999999999999999).Select(i\
    \ => i.ToString()).ToList();\n        var oneThousandThousandHundredThousandHundredThousands\
    \ = reversed.Where(i => i >= 1000000000000 && i <= 999999999999999999999).Select(i\
    \ => i.ToString()).ToList();\n        var oneThousandThousandHundredThousandHundredThousandHundreds\
    \ = reversed.Where(i => i >= 100000000000000 && i <= 99999999999999999999989).Select(i\
    \ => i.ToString()).ToList();\n        var oneThousandThousandHundredThousandHundredThousandHund",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var digits = arr.Select(x => x.ToString());\n     \
    \   var digitCount = digits.Count();\n        var digitNames = Enumerable.Range(1,\
    \ 9).Select(x => x.ToString()).ToList();\n        var digitNameCount = digitNames.Count;\n\
    \        var digitNamesSorted = new List<string>(digitNames);\n        digitNames.Sort();\n\
    \        var digitNamesSortedCount = digitNamesSorted.Count;\n        var digitNamesSortedReversed\
    \ = new List<string>(digitNamesSorted);\n        digitNamesSorted.Reverse();\n\
    \        var digitNamesSortedReversedCount = digitNamesSortedReversed.Count;\n\
    \        var digitNamesSortedReversedReversed = new List<string>(digitNamesSortedReversed);\n\
    \        digitNamesSortedReversed.Reverse();\n        var digitNamesSortedReversedReversedCount\
    \ = digitNamesSortedReversedReversed.Count;\n        var digitNamesSortedReversedReversedReversedSorted\
    \ = new List<string>(digitNamesSortedReversedReversed);\n        digitNamesSortedReversedReversedSorted.Sort();\n\
    \        var digitNamesSortedReversedReversedReversedSortedCount = digitNamesSortedReversedReversedSorted.Count;\n\
    \        var digitNamesSortedReversedReversedReversedSortedSortedReversed = new\
    \ List<string>(digitNamesSortedReversedReversedSorted);\n        digitNamesSortedReversedReversedReversedSortedSortedReversed.Reverse();\n\
    \        var digitNamesSortedReversedReversedReversedSortedSortedReversedCount\
    \ = digitNamesSortedReversedReversedSortedSortedReversed.Count;\n        var digitNamesSortedReversedReversedReversedSortedSortedReversedReversed\
    \ = new List<string>(digitNamesSortedReversedReversedSortedSortedReversed);\n\
    \        digitNamesSortedReversedReversedReversedSortedSortedReversedReversed.Reverse();\n\
    \        var digitNamesSortedReversedReversedReversedSortedSortedReversedReversedCount\
    \ = digitNamesSortedReversedReversedSortedSortedReversedReversed.Count;\n    \
    \    var digitNamesSortedReversedReversedReversedSortedSortedReversedReversedReversed\
    \ = new List<string>(digitNamesSortedReversedReversedSortedSortedReversedReversed);\n\
    \        digitNamesSortedReversedReversedReversedSortedSortedReversedReversedReversedReversed.Reverse();\n\
    \        var digitNamesSortedReversedReversedReversedSortedSortedReversedReversedReversedCount\
    \ = digit", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var digits = arr.Select(x\
    \ => x.ToString());\n        var digitCount = digits.Count();\n        var firstDigit\
    \ = digits[0];\n        var lastDigit = digits[digitCount - 1];\n        var firstDigitName\
    \ = GetName(firstDigit);\n        var lastDigitName = GetName(lastDigit);\n  \
    \      var reversed = digits.Reverse();\n        var reversedDigits = reversed.Select(x\
    \ => x.ToString());\n        var reversedDigitCount = reversedDigits.Count();\n\
    \        var reversedFirstDigit = reversedDigits[0];\n        var reversedLastDigit\
    \ = reversedDigits[reversedDigitCount - 1];\n        var reversedFirstDigitName\
    \ = GetName(reversedFirstDigit);\n        var reversedLastDigitName = GetName(reversedLastDigit);\n\
    \        var oneDigit = digits.FirstOrDefault(x => x == 1);\n        var oneDigitName\
    \ = GetName(oneDigit);\n        var twoDigit = digits.FirstOrDefault(x => x ==\
    \ 2);\n        var twoDigitName = GetName(twoDigit);\n        var threeDigit =\
    \ digits.FirstOrDefault(x => x == 3);\n        var threeDigitName = GetName(threeDigit);\n\
    \        var fourDigit = digits.FirstOrDefault(x => x == 4);\n        var fourDigitName\
    \ = GetName(fourDigit);\n        var fiveDigit = digits.FirstOrDefault(x => x\
    \ == 5);\n        var fiveDigitName = GetName(fiveDigit);\n        var sixDigit\
    \ = digits.FirstOrDefault(x => x == 6);\n        var sixDigitName = GetName(sixDigit);\n\
    \        var sevenDigit = digits.FirstOrDefault(x => x == 7);\n        var sevenDigitName\
    \ = GetName(sevenDigit);\n        var eightDigit = digits.FirstOrDefault(x =>\
    \ x == 8);\n        var eightDigitName = GetName(eightDigit);\n        var nineDigit\
    \ = digits.FirstOrDefault(x => x == 9);\n        var nineDigitName = GetName(nineDigit);\n\
    \        var firstDigitIndex = digits.IndexOf(firstDigit);\n        var lastDigitIndex\
    \ = digits.IndexOf(lastDigit);\n        var reversedFirstDigitIndex = digits.IndexOf(reversedFirstDigit);\n\
    \        var reversedLastDigitIndex = digits.IndexOf(reversedLastDigit);\n   \
    \     var oneDigitIndex = digits.IndexOf(oneDigit);\n        var twoDigitIndex\
    \ = digits.IndexOf(twoDigit);\n        var threeDigitIndex = digits.IndexOf(threeDigit);\n\
    \        var fourDigitIndex = digits.IndexOf(fourDigit);\n        var fiveDigitIndex\
    \ = digits.IndexOf(fiveDigit);\n        var sixDigitIndex = digits.IndexOf(sixDigit);",
  "        if (arr.Count == 0) return new List<string>();\n        List<string> result\
    \ = new List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        long len = max - min + 1;\n        string one = \"One\";\n        string\
    \ two = \"Two\";\n        string three = \"Three\";\n        string four = \"\
    Four\";\n        string five = \"Five\";\n        string six = \"Six\";\n    \
    \    string seven = \"Seven\";\n        string eight = \"Eight\";\n        string\
    \ nine = \"Nine\";\n        string ten = \"Ten\";\n        string hundred = \"\
    Hundred\";\n        string thousand = \"Thousand\";\n        string million =\
    \ \"Million\";\n        string billion = \"Billion\";\n        string trillion\
    \ = \"Trillion\";\n        string quadrillion = \"Quadrillion\";\n        string\
    \ quintillion = \"Quintillion\";\n        string sextillion = \"Sextillion\";\n\
    \        string septillion = \"Septillion\";\n        string octillion = \"Octillion\"\
    ;\n        string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintillion = \"Quinvigintillion\"\
    ;\n        string sexvigin", "        List<string> result = new List<string>();\n\
    \        if (arr.Count > 0) {\n            long max = arr.Max();\n           \
    \ long min = arr.Min();\n            long range = max - min + 1;\n           \
    \ long digit = max - min + 1;\n            long tens = Math.Pow(10, digit);\n\
    \            long ones = Math.Pow(10, digit - 1);\n            long tensDigit\
    \ = tens / 10;\n            long onesDigit = ones / 10;\n            long tensDigitRem\
    \ = tens % 10;\n            long onesDigitRem = ones % 10;\n            long tensDigitRemRem\
    \ = tensDigitRem / 10;\n            long onesDigitRemRem = onesDigitRem / 10;\n\
    \            long tensDigitRemRemRem = tensDigitRemRem / 10;\n            long\
    \ onesDigitRemRemRem = onesDigitRemRem / 10;\n            long tensDigitRemRemRemRem\
    \ = tensDigitRemRemRem / 10;\n            long onesDigitRemRemRemRem = onesDigitRemRemRem\
    \ / 10;\n            long tensDigitRemRemRemRemRem = tensDigitRemRemRemRem / 10;\n\
    \            long onesDigitRemRemRemRemRem = onesDigitRemRemRemRem / 10;\n   \
    \         long tensDigitRemRemRemRemRemRem = tensDigitRemRemRemRemRem / 10;\n\
    \            long onesDigitRemRemRemRemRemRem = onesDigitRemRemRemRemRemRem /\
    \ 10;\n            long tensDigitRemRemRemRemRemRemRem = tensDigitRemRemRemRemRemRem\
    \ / 10;\n            long onesDigitRemRemRemRemRemRemRem = onesDigitRemRemRemRemRemRemRem\
    \ / 10;\n            long tensDigitRemRemRemRemRemRemRemRem = tensDigitRemRemRemRemRemRemRemRem\
    \ / 10;\n            long onesDigitRemRemRemRemRemRemRemRemRem = onesDigitRemRemRe",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        var result = new List<string>();\n        var max = arr.Max();\n\
    \        var min = arr.Min();\n        if (max < 1 || min > 9) {\n           \
    \ return result;\n        }\n        var digits = new Dictionary<long, string>\
    \ {\n            {1L, \"One\"},\n            {2L, \"Two\"},\n            {3L,\
    \ \"Three\"},\n            {4L, \"Four\"},\n            {5L, \"Five\"},\n    \
    \        {6L, \"Six\"},\n            {7L, \"Seven\"},\n            {8L, \"Eight\"\
    },\n            {9L, \"Nine\"}\n        };\n        var reversed = arr.Reverse();\n\
    \        var reversedDigits = reversed.Select((x, i) => new {\n            Value\
    \ = x,\n            Index = i\n        }).Where(x => x.Value >= 1 && x.Value <=\
    \ 9).ToList();\n        var reversedDigitNames = reversedDigits.Select(x => digits[x.Value]).ToList();\n\
    \        var reversedDigitNamesReversed = reversedDigitNames.Select(x => digits[x.Value]).ToList();\n\
    \        var reversedDigitNamesReversedString = reversedDigitNamesReversed.Select(x\
    \ => x.ToString()).ToList();\n        var reversedDigitNamesReversedStringString\
    \ = string.Join(\"\", reversedDigitNamesReversedString);\n        var reversedDigitNamesReversedStringStringReversed\
    \ = reversedDigitNamesReversedString.Reverse().ToList();\n        var reversedDigitNamesReversedStringStringReversedString\
    \ = string.Join(\"\", reversedDigitNamesReversedStringStringReversed);\n     \
    \   var reversedDigitNamesReversedStringStringReversedStringReversed = reversedDigitNamesReversedStringStringReversed.Reverse().ToList();\n\
    \        var reversedDigitNamesReversedStringStringReversedStringStringReversed\
    \ = reversedDigitNamesReversedStringStringReversedStringReversed.Reverse().ToList();\n\
    \        var reversedDigitNamesReversedStringStringReversedStringStringReversedString\
    \ = reversedDigitNamesReversedStringStringReversedStringStringReversed.Reverse().ToList();\n\
    \        var reversedDigitNamesReversedStringStringReversedStringStringStringReversedStringStringReversed\
    \ = reversedDigitNamesReversedStringStringReversedStringStringReversedStringStringReversed.Reverse().ToList();\n\
    \        var reversedDigitNamesReversedStringStringReversedStringStringStringReversedStringStringStringReversedStringStringReversedStringStringReversedString",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var digits = new List<string>();\n   \
    \     var digitNames = new List<string>();\n        var maxDigit = arr.Max();\n\
    \        var minDigit = arr.Min();\n        var maxDigitName = digitNames.Count;\n\
    \        var minDigitName = digitNames.Count;\n        var maxDigitDigit = maxDigit\
    \ / 10;\n        var minDigitDigit = minDigit / 10;\n        var maxDigitDigitName\
    \ = maxDigitName - 1;\n        var minDigitDigitName = minDigitName - 1;\n   \
    \     var maxDigitDigitDigit = maxDigit % 10;\n        var minDigitDigitDigit\
    \ = minDigit % 10;\n        foreach (var digit in arr) {\n            if (digit\
    \ < minDigit)\n                continue;\n            if (digit > maxDigit)\n\
    \                continue;\n            var digitName = digitNames.FirstOrDefault(n\
    \ => n.Length == digit.ToString().Length);\n            if (digitName == null)\n\
    \                digitName = digitNames.LastOrDefault();\n            digits.Add(digit.ToString());\n\
    \            digitNames.Add(digitName);\n        }\n        foreach (var digit\
    \ in digits) {\n            var digitName = digitNames.FirstOrDefault(n => n.Length\
    \ == digit.Length);\n            if (digitName == null)\n                digitName\
    \ = digitNames.LastOrDefault();\n            result.Add(digitName);\n        }\n\
    \        foreach (var digitName in digitNames) {\n            var digit = digits.FirstOrDefault(n\
    \ => n.Length == digitName.Length);\n            if (digit == null)\n        \
    \        digit = digits.LastOrDefault();\n            result.Add(digit);\n   \
    \     }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long range\
    \ = (max - min) + 1;\n        long digit = max - 1;\n        List<string> result\
    \ = new List<string>();\n        List<long> reversed = arr.Reverse().ToList();\n\
    \        string one = \"One\";\n        string two = \"Two\";\n        string\
    \ three = \"Three\";\n        string four = \"Four\";\n        string five = \"\
    Five\";\n        string six = \"Six\";\n        string seven = \"Seven\";\n  \
    \      string eight = \"Eight\";\n        string nine = \"Nine\";\n        string\
    \ ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string thousand\
    \ = \"Thousand\";\n        string million = \"Million\";\n        string billion\
    \ = \"Billion\";\n        string trillion = \"Trillion\";\n        string quadrillion\
    \ = \"Quadrillion\";\n        string quintillion = \"Quintillion\";\n        string\
    \ sextillion = \"Sextillion\";\n        string septillion = \"Septillion\";\n\
    \        string octillion = \"Octillion\";\n        string nonillion = \"Nonillion\"\
    ;\n        string decillion = \"Decillion\";\n        string undecillion = \"\
    Undecillion\";\n        string duodecillion = \"Duodecillion\";\n        string\
    \ tredecillion = \"Tredecillion\";\n        string quattuordecillion = \"Quattuordecillion\"\
    ;\n        string quindecillion = \"Quindecillion\";\n        string sexdecillion\
    \ = \"Sexdecillion\";\n        string septendecillion = \"Septendecillion\";\n\
    \        string octodecillion = \"Octodecillion\";\n        string novemdecillion\
    \ = \"Novemdecillion\";\n        string vigintillion = \"Vigintillion\";\n   \
    \     string unvigintillion = \"Unvigintillion\";\n        string duovigintillion\
    \ = \"Duovigintillion\";\n        string trevigintillion = \"Trevigintillion\"\
    ;\n        string quattuorvigintillion = \"Quattuorvigintillion\";\n        string\
    \ qu", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        List<long> reversed = arr.Reverse();\n        List<string>\
    \ result = new List<string>();\n        foreach (long num in reversed) {\n   \
    \         string name = GetName(num);\n            if (name != null) {\n     \
    \           result.Add(name);\n            }\n        }\n        return result;",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        List<long> sortedArr = arr.OrderBy(x => x).ToList();\n        List<string>\
    \ result = new List<string>();\n        long maxValue = sortedArr.Max();\n   \
    \     long minValue = sortedArr.Min();\n        long maxDigit = maxValue / 10;\n\
    \        long minDigit = minValue / 10;\n        long maxDigitName = maxDigit\
    \ == 0 ? \"Zero\" : maxDigit.ToString();\n        long minDigitName = minDigit\
    \ == 0 ? \"Zero\" : minDigit.ToString();\n        string maxDigitName = maxDigitName\
    \ == \"Zero\" ? \"Zero\" : maxDigitName;\n        string minDigitName = minDigitName\
    \ == \"Zero\" ? \"Zero\" : minDigitName;\n        string maxDigitNameReverse =\
    \ maxDigitName.Substring(1) + maxDigitName.Substring(0, 1);\n        string minDigitNameReverse\
    \ = minDigitName.Substring(1) + minDigitName.Substring(0, 1);\n        string\
    \ maxDigitNameReverseReverse = maxDigitNameReverse.Substring(1) + maxDigitNameReverse.Substring(0,\
    \ 1);\n        string minDigitNameReverseReverse = minDigitNameReverse.Substring(1)\
    \ + minDigitNameReverse.Substring(0, 1);\n        string maxDigitNameReverseReverseReverse\
    \ = maxDigitNameReverseReverse.Substring(1) + maxDigitNameReverseReverse.Substring(0,\
    \ 1);\n        string minDigitNameReverseReverseReverse = minDigitNameReverseReverse.Substring(1)\
    \ + minDigitNameReverseReverse.Substring(0, 1);\n        string maxDigitNameReverseReverseReverseReverse\
    \ = maxDigitNameReverseReverseReverse.Substring(1) + maxDigitNameReverseReverseReverse.Substring(0,\
    \ 1);\n        string minDigitNameReverseReverseReverseReverse = minDigitNameReverseReverseReverseReverse.Substring(1)\
    \ + minDigitNameReverseReverseReverseReverse.Substring(0, 1);\n        string\
    \ maxDigitNameReverseReverseReverseReverseReverse = maxDigitNameReverseReverseReverseReverse.Substring(1)\
    \ + maxDigitNameReverseReverseReverseReverse.Substring(0, 1);\n        string\
    \ minDigitNameReverseReverseReverseReverseReverse = minDigitNameReverseReverseReverseReverseReverse.Substring(1)\
    \ + minDigitNameReverseReverseReverseReverseReverse.Substring(0, 1);\n       \
    \ string maxDigitNameReverseReverseReverseReverseReverseReverse = maxDigitNameReverseReverseReverseReverseReverseReverse.Substring(1)\
    \ + maxDigitNameReverseReverseReverseReverseReverseReverse.Substring(0, 1);\n\
    \        string minDigitNameReverseReverseReverseReverseReverseReverseReverse\
    \ = minDigitNameReverseReverseReverseReverseReverseReverseReverse.Substring(1)\
    \ + ", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        if (arr.Count == 1)\n            return new List<string>(new string[]{(string)arr.ElementAt(0)});\n\
    \        List<long> sortedArr = arr.OrderBy(x => x).ToList();\n        List<string>\
    \ result = new List<string>();\n        long lastDigit = sortedArr[sortedArr.Count\
    \ - 1];\n        long lastDigitDigit = lastDigit % 10;\n        string lastDigitName\
    \ = lastDigitName =\n            new string(new char[] { '0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9' }).\n                Substring(lastDigitDigit);\n  \
    \      long lastDigitReverse = lastDigit / 10;\n        string lastDigitReverseName\
    \ = lastDigitReverseName =\n            new string(new char[] { '0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9' }).\n                Substring(lastDigitReverse);\n\
    \        string lastDigitName = lastDigitReverseName;\n        bool isLastDigitReverse\
    \ = false;\n        for (int i = 0; i < sortedArr.Count; i++) {\n            long\
    \ curDigit = sortedArr[i];\n            long curDigitDigit = curDigit % 10;\n\
    \            string curDigitName = curDigitName =\n                new string(new\
    \ char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' }).\n            \
    \        Substring(curDigitDigit);\n            long curDigitReverse = curDigit\
    \ / 10;\n            string curDigitReverseName = curDigitReverseName =\n    \
    \            new string(new char[] { '0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9' }).\n                    Substring(curDigitReverse);\n            if (curDigit\
    \ == lastDigit) {\n                result.Add(lastDigitName);\n              \
    \  isLastDigitReverse = true;\n            } else if (isLastDigitReverse) {\n\
    \                result.Add(lastDigitReverseName);\n                isLastDigitReverse\
    \ = false;\n            } else {\n                result.Add(curDigitName);\n\
    \            }\n        }\n        return result;", "        if (arr.Count ==\
    \ 0) {\n            return new List<string>();\n        }\n        List<long>\
    \ reversed = arr.Reverse();\n        List<string> result = new List<string>();\n\
    \        foreach (long num in reversed) {\n            string name = GetName(num);\n\
    \            if (name != \"\") {\n                result.Add(name);\n        \
    \    }\n        }\n        return result;", "        if (arr.Count == 0) return\
    \ new List<string>();\n        var result = new List<string>();\n        var min\
    \ = arr.Min();\n        var max = arr.Max();\n        var digits = new List<long>();\n\
    \        var tens = new List<long>();\n        var hundreds = new List<long>();\n\
    \        var thousands = new List<long>();\n        var tenths = new List<long>();\n\
    \        var hundredths = new List<long>();\n        var thousandths = new List<long>();\n\
    \        var tenthths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<long>();\n        var hundredthths\
    \ = new List<long>();\n        var thousandthths = new List<long>();\n       \
    \ var tenththths = new List<long>();\n        var hundredthths = new List<long>();\n\
    \        var thousandthths = new List<long>();\n        var tenththths = new List<long>();\n\
    \        var hundredthths = new List<long>();\n        var thousandthths = new\
    \ List<long>();\n        var tenththths = new List<", "        List<string> result\
    \ = new List<string>();\n        if (arr.Count > 0) {\n            long max =\
    \ arr.Max();\n            long min = arr.Min();\n            long diff = max -\
    \ min;\n            long tens = diff / 10;\n            long ones = diff % 10;\n\
    \            string tensName = GetName(tens);\n            string onesName = GetName(ones);\n\
    \            foreach (long num in arr) {\n                if (num < min) {\n \
    \                   result.Add(GetName(num));\n                } else if (num\
    \ > max) {\n                    result.Add(GetName(num));\n                } else\
    \ if (num == min) {\n                    result.Add(GetName(num));\n         \
    \       } else if (num == max) {\n                    result.Add(GetName(num));\n\
    \                } else if (num < tens) {\n                    result.Add(GetName(num));\n\
    \                } else if (num > tens) {\n                    result.Add(GetName(num));\n\
    \                } else if (num == tens) {\n                    result.Add(GetName(num));\n\
    \                } else if (num == ones) {\n                    result.Add(GetName(num));\n\
    \                } else {\n                    result.Add(GetName(num));\n   \
    \             }\n            }\n        }\n        return result;", "        if\
    \ (arr.Count == 0) {\n            return new List<string>();\n        }\n    \
    \    List<long> reversed = arr.Reverse();\n        List<string> result = new List<string>();\n\
    \        foreach (long num in reversed) {\n            string name = GetName(num);\n\
    \            if (name != \"\") {\n                result.Add(name);\n        \
    \    }\n        }\n        return result;", "        if (arr.Count == 0) return\
    \ new List<string>();\n        var result = new List<string>();\n        var ones\
    \ = arr.Where(x => x == 1L).ToList();\n        var tens = arr.Where(x => x ==\
    \ 10L).ToList();\n        var hundreds = arr.Where(x => x == 100L).ToList();\n\
    \        var thousands = arr.Where(x => x == 1000L).ToList();\n        var millions\
    \ = arr.Where(x => x == 1000000L).ToList();\n        var billions = arr.Where(x\
    \ => x == 1000000000L).ToList();\n        var trillions = arr.Where(x => x ==\
    \ 1000000000000L).ToList();\n        var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n\
    \        var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var sextillions = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var septillions = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var octillions = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var nonillions = arr.Where(x => x == 1000000000000000000000000000000L).ToList();\n\
    \        var onesAndTens = ones.Concat(tens).ToList();\n        var onesAndHundreds\
    \ = ones.Concat(onesAndTens).ToList();\n        var onesAndThousands = ones.Concat(onesAndHundreds).ToList();\n\
    \        var onesAndMillions = ones.Concat(onesAndThousands).ToList();\n     \
    \   var onesAndBillions = ones.Concat(onesAndMillions).ToList();\n        var\
    \ onesAndTrillions = ones.Concat(onesAndBillions).ToList();\n        var onesAndQuadrillions\
    \ = ones.Concat(onesAndTrillions).ToList();\n        var onesAndQuintillions =\
    \ ones.Concat(onesAndQuadrillions).ToList();\n        var onesAndSextillions =\
    \ ones.Concat(onesAndQuintillions).ToList();\n        var onesAndSeptillions =\
    \ ones.Concat(onesAndSextillions).ToList();\n        var onesAndOctillions = ones.Concat(onesAndSeptillions).ToList();\n\
    \        var onesAndNonillions = ones.Concat(onesAndOctillions).ToList();\n  \
    \      var ten", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        var result = new List<string>();\n        var firstDigit = arr[0];\n\
    \        var lastDigit = arr[arr.Count - 1];\n        var firstDigitName = GetName(firstDigit);\n\
    \        var lastDigitName = GetName(lastDigit);\n        if (firstDigit == lastDigit)\n\
    \            result.Add(firstDigitName);\n        else {\n            var middleDigit\
    \ = firstDigit + (lastDigit - firstDigit) / 2;\n            var middleDigitName\
    \ = GetName(middleDigit);\n            if (middleDigit == lastDigit)\n       \
    \         result.Add(firstDigitName);\n            else if (middleDigit < lastDigit)\n\
    \                result.Add(middleDigitName);\n            else\n            \
    \    result.Add(lastDigitName);\n        }\n        return result;", "       \
    \ if (arr.Count == 0)\n            return new List<string>();\n        var result\
    \ = new List<string>();\n        var ones = new List<long>();\n        var tens\
    \ = new List<long>();\n        var hundreds = new List<long>();\n        var thousands\
    \ = new List<long>();\n        var tenThousands = new List<long>();\n        var\
    \ hundredThousands = new List<long>();\n        var thousandThousands = new List<long>();\n\
    \        var hundredThousandThousands = new List<long>();\n        var thousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousands = new List<long>();\n\
    \        var thousandThousandThousandThousands = new List<long>();\n        var\
    \ hundredThousandThousandThousandThousands = new List<long>();\n        var thousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var ", "        if (arr.Count == 0)\n         \
    \   return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long mid\
    \ = max / 10;\n        long remainder = max % 10;\n        long lastDigit = mid;\n\
    \        string lastDigitName = GetDigitName(lastDigit);\n        foreach (long\
    \ num in arr) {\n            if (num < min)\n                continue;\n     \
    \       if (num > max)\n                break;\n            long digit = num /\
    \ 10;\n            long remainderOfDigit = num % 10;\n            if (digit ==\
    \ lastDigit) {\n                result.Add(lastDigitName);\n                continue;\n\
    \            }\n            if (digit > lastDigit) {\n                result.Add(GetDigitName(digit));\n\
    \                lastDigit = digit;\n                lastDigitName = GetDigitName(lastDigit);\n\
    \                continue;\n            }\n            if (digit < lastDigit)\
    \ {\n                result.Add(GetDigitName(lastDigit));\n                lastDigit\
    \ = digit;\n                lastDigitName = GetDigitName(lastDigit);\n       \
    \         continue;\n            }\n            if (remainderOfDigit == lastDigit)\
    \ {\n                result.Add(lastDigitName);\n                continue;\n \
    \           }\n            if (remainderOfDigit > lastDigit) {\n             \
    \   result.Add(GetDigitName(lastDigit));\n                lastDigit = remainderOfDigit;\n\
    \                lastDigitName = GetDigitName(lastDigit);\n                continue;\n\
    \            }\n            if (remainderOfDigit < lastDigit) {\n            \
    \    result.Add(GetDigitName(lastDigit));\n                lastDigit = remainderOfDigit;\n\
    \                lastDigitName = GetDigitName(lastDigit);\n                continue;\n\
    \            }\n        }\n        if (lastDigit != mid)\n            result.Add(GetDigitName(lastDigit));\n\
    \        return result;", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        List<string> result = new List<string>();\n       \
    \ long max = arr.Max();\n        long min = arr.Min();\n        long range = max\
    \ - min + 1;\n        long digit = range / 10;\n        long remainder = range\
    \ % 10;\n        string one = \"One\";\n        string two = \"Two\";\n      \
    \  string three = \"Three\";\n        string four = \"Four\";\n        string\
    \ five = \"Five\";\n        string six = \"Six\";\n        string seven = \"Seven\"\
    ;\n        string eight = \"Eight\";\n        string nine = \"Nine\";\n      \
    \  string ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string\
    \ thousand = \"Thousand\";\n        string million = \"Million\";\n        string\
    \ billion = \"Billion\";\n        string trillion = \"Trillion\";\n        string\
    \ quadrillion = \"Quadrillion\";\n        string quintillion = \"Quintillion\"\
    ;\n        string sextillion = \"Sextillion\";\n        string septillion = \"\
    Septillion\";\n        string octillion = \"Octillion\";\n        string nonillion\
    \ = \"Nonillion\";\n        string decillion = \"Decillion\";\n        string\
    \ undecillion = \"Undecillion\";\n        string duodecillion = \"Duodecillion\"\
    ;\n        string tredecillion = \"Tredecillion\";\n        string quattuordecillion\
    \ = \"Quattuordecillion\";\n        string quindecillion = \"Quindecillion\";\n\
    \        string sexdecillion = \"Sexdecillion\";\n        string septendecillion\
    \ = \"Septendecillion\";\n        string octodecillion = \"Octodecillion\";\n\
    \        string novemdecillion = \"Novemdecillion\";\n        string vigintillion\
    \ = \"Vigintillion\";\n        string unvigintillion = \"Unvigintillion\";\n \
    \       string duovigintillion = \"Duovigintillion\";\n        string trevigintillion\
    \ = \"Trevigintillion\";\n        string quattuorvigintillion = \"Quattuorvigintillion\"\
    ;\n        string quinvigintil", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<long> reversed = new List<long>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long range = (max - min) + 1;\n      \
    \  long digit = max - min;\n        long tens = range / 10;\n        long ones\
    \ = range % 10;\n        long tensDigit = tens / 10;\n        long onesDigit =\
    \ ones % 10;\n        string one = \"One\";\n        string ten = \"Ten\";\n \
    \       string two = \"Two\";\n        string three = \"Three\";\n        string\
    \ four = \"Four\";\n        string five = \"Five\";\n        string six = \"Six\"\
    ;\n        string seven = \"Seven\";\n        string eight = \"Eight\";\n    \
    \    string nine = \"Nine\";\n        string tens = \"Tens\";\n        string\
    \ ones = \"Ones\";\n        string tenss = \"Tenss\";\n        string twos = \"\
    Twos\";\n        string threes = \"Threes\";\n        string fours = \"Fours\"\
    ;\n        string fives = \"Fives\";\n        string sixs = \"Sixs\";\n      \
    \  string sevens = \"Sevens\";\n        string eights = \"Eights\";\n        string\
    \ nines = \"Nines\";\n        string tenss = \"Tenss\";\n        string oness\
    \ = \"Oness\";\n        string tensss = \"Tensss\";\n        string twoss = \"\
    Twoss\";\n        string threess = \"Threess\";\n        string fourss = \"Fourss\"\
    ;\n        string fivess = \"Fivess\";\n        string sixss = \"Sixss\";\n  \
    \      string sevenss = \"Sevenss\";\n        string eightss = \"Eightss\";\n\
    \        string niness = \"Niness\";\n        string tensss = \"Tensss\";\n  \
    \      string onesss = \"Onesss\";\n        string tenssss = \"Tenssss\";\n  \
    \      string twosss = \"Twosss\";\n        string threesss = \"Threesss\";\n\
    \        string fourss = \"Foursss\";\n        string fivesss = \"Fivesss\";\n\
    \        string sixsss = \"Sixsss\";\n        string sevensss = \"Sevensss\";\n\
    \        string eightsss = \"Eightsss\";\n        string ninesss = \"Ninesss\"\
    ;\n        string tensssss = \"Tenssss\";\n        string onessss = \"Onessss\"\
    ;\n        string tensssss = \"Tensssss\";\n        string twosss", "        if\
    \ (arr.Count == 0)\n            return new List<string>();\n        List<long>\
    \ reversed = new List<long>();\n        foreach (long n in arr)\n            reversed.Add(n);\n\
    \        reversed.Reverse();\n        List<string> result = new List<string>();\n\
    \        foreach (long n in reversed)\n            result.Add(GetName(n));\n \
    \       return result;", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        var result = new List<string>();\n        var ones\
    \ = arr.Where(x => x == 1L).ToList();\n        var tens = arr.Where(x => x ==\
    \ 10L).ToList();\n        var hundreds = arr.Where(x => x == 100L).ToList();\n\
    \        var thousands = arr.Where(x => x == 1000L).ToList();\n        var tenThousands\
    \ = arr.Where(x => x == 10000L).ToList();\n        var hundredThousands = arr.Where(x\
    \ => x == 100000L).ToList();\n        var thousandThousands = arr.Where(x => x\
    \ == 1000000L).ToList();\n        var hundredThousandThousands = arr.Where(x =>\
    \ x == 10000000L).ToList();\n        var thousandThousandThousands = arr.Where(x\
    \ => x == 100000000L).ToList();\n        var hundredThousandThousandThousands\
    \ = arr.Where(x => x == 1000000000L).ToList();\n        var thousandThousandThousandThousands\
    \ = arr.Where(x => x == 10000000000L).ToList();\n        var hundredThousandThousandThousandThousands\
    \ = arr.Where(x => x == 100000000000L).ToList();\n        var thousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 1000000000000L).ToList();\n        var hundredThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 10000000000000L).ToList();\n        var thousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 100000000000000L).ToList();\n        var hundredThousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 1000000000000000L).ToList();\n        var thousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 10000000000000000L).ToList();\n        var hundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 100000000000000000L).ToList();\n        var thousandThousandThousandThousandThousandThousandThousandTh",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var digits = new List<string>();\n   \
    \     var digitNames = new List<string>();\n        var digitValues = new List<long>();\n\
    \        var digitValue = 0;\n        var digitName = 0;\n        var digitNameValue\
    \ = 0;\n        var digitNameValue2 = 0;\n        var digitNameValue3 = 0;\n \
    \       var digitNameValue4 = 0;\n        var digitNameValue5 = 0;\n        var\
    \ digitNameValue6 = 0;\n        var digitNameValue7 = 0;\n        var digitNameValue8\
    \ = 0;\n        var digitNameValue9 = 0;\n        var digitNameValue10 = 0;\n\
    \        var digitNameValue11 = 0;\n        var digitNameValue12 = 0;\n      \
    \  var digitNameValue13 = 0;\n        var digitNameValue14 = 0;\n        var digitNameValue15\
    \ = 0;\n        var digitNameValue16 = 0;\n        var digitNameValue17 = 0;\n\
    \        var digitNameValue18 = 0;\n        var digitNameValue19 = 0;\n      \
    \  var digitNameValue20 = 0;\n        var digitNameValue21 = 0;\n        var digitNameValue22\
    \ = 0;\n        var digitNameValue23 = 0;\n        var digitNameValue24 = 0;\n\
    \        var digitNameValue25 = 0;\n        var digitNameValue26 = 0;\n      \
    \  var digitNameValue27 = 0;\n        var digitNameValue28 = 0;\n        var digitNameValue29\
    \ = 0;\n        var digitNameValue30 = 0;\n        var digitNameValue31 = 0;\n\
    \        var digitNameValue32 = 0;\n        var digitNameValue33 = 0;\n      \
    \  var digitNameValue34 = 0;\n        var digitNameValue35 = 0;\n        var digitNameValue36\
    \ = 0;\n        var digitNameValue37 = 0;\n        var digitNameValue38 = 0;\n\
    \        var digitNameValue39 = 0;\n        var digitNameValue40 = 0;\n      \
    \  var digitNameValue41 = 0;\n        var digitNameValue42 = 0;\n        var digitNameValue43\
    \ = 0;\n        var digitNameValue44 = 0;\n        var digitNameValue45 = 0;\n\
    \        var digitNameValue46 = 0;\n        var digitNameValue47 = 0;\n      \
    \  var digitNameValue48 = 0;\n        var digitNameValue49 = 0;\n        var digitNameValue50\
    \ = 0;\n        var digitNameValue51 = 0;\n        var digitNameValue52 = 0;\n\
    \        var digitNameValue53 = 0;\n        var digitNameValue54 = 0;\n      \
    \  var digitNameValue55 = 0;\n        var digitNameValue56 = 0;\n        var digitNameValue57\
    \ = 0;\n        var digitNameValue58 = 0;\n        var digitNameValue59 = 0;\n\
    \        var digitNameValue60 = 0;\n        var digitNameValue61 = 0;\n      \
    \  var digitNameValue62 = 0;\n        var digitNameValue63 = 0;\n        var digitNameValue64\
    \ = 0;\n        var digitNameValue65 = 0;\n        var digitNameValue66 = 0;\n\
    \        var digitName", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var ones = arr.Where(x => x\
    \ == 1L).ToList();\n        var tens = arr.Where(x => x == 10L).ToList();\n  \
    \      var hundreds = arr.Where(x => x == 100L).ToList();\n        var thousands\
    \ = arr.Where(x => x == 1000L).ToList();\n        var millions = arr.Where(x =>\
    \ x == 1000000L).ToList();\n        var billions = arr.Where(x => x == 1000000000L).ToList();\n\
    \        var trillions = arr.Where(x => x == 1000000000000L).ToList();\n     \
    \   var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n    \
    \    var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var sextillions = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var septillions = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var octillions = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var nonillions = arr.Where(x => x == 100000000000000000000000000000L).ToList();\n\
    \        var decillions = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var undecillions = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var decillionsCount = arr.Where(x => x == 100000000000000000000000000000000L).Count();\n\
    \        var undecillionsCount = arr.Where(x => x == 1000000000000000000000000000000000L).Count();\n\
    \        var tensCount = arr.Where(x => x == 10L).Count();\n        var onesCount\
    \ = arr.Where(x => x == 1L).Count();\n        var hundredsCount = arr.Where(x\
    \ => x == 100L).Count();\n        var thousandsCount = arr.Where(x => x == 1000L).Count();\n\
    \        var millionsCount = arr.Where(x => x == 1000000L).Count();\n        var\
    \ billionsCount = arr.Where(x => x == 1000000000L).Count();\n        var trillionsCount\
    \ = arr.Where(x => x == 1000000000000L).Count();\n        var quadrillionsCount\
    \ = arr.Where(x => x == 1000000000000000L).Count();\n        var quintillionsCount\
    \ = arr.Where(x => x == 1000000000000000000L", "        if (arr.Count == 0) {\n\
    \            return new List<string>();\n        }\n        List<long> reversed\
    \ = new List<long>();\n        foreach (long i in arr) {\n            if (i >=\
    \ 1 && i <= 9) {\n                reversed.Add(i);\n            }\n        }\n\
    \        List<string> result = new List<string>();\n        foreach (long i in\
    \ reversed) {\n            string name = GetName(i);\n            result.Add(name);\n\
    \        }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var list = arr.OrderBy(i => i).ToList();\n        var result = new List<string>();\n\
    \        var lastDigit = list[list.Count - 1];\n        var lastDigitName = GetName(lastDigit);\n\
    \        if (lastDigit == 0) return new List<string>();\n        if (lastDigit\
    \ == 1) return new List<string>(new string[]{lastDigitName});\n        if (lastDigit\
    \ == 9) return new List<string>(new string[]{lastDigitName});\n        var lastDigitName\
    \ = GetName(lastDigit - 1);\n        if (lastDigit == 2) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 8) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 7) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 6) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 5) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 4) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 3) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 2) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 1) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 0) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 9) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 8) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 7) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 6) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 5) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 4) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 3) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 2) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 1) return new List<string>(new\
    \ string[]{lastDigitName});\n        if (lastDigit == 0) return new List<string>(new\
    \ string[]{lastDigit", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        var result = new List<string>();\n        var digits = new Dictionary<long,\
    \ string>();\n        foreach (var item in arr) {\n            long digit = item\
    \ % 10;\n            if (digit < 1 || digit > 9)\n                continue;\n\
    \            digits[item] = digits.ContainsKey(digit) ? digits[digit] : \"One\"\
    ;\n        }\n        foreach (var item in digits)\n            result.Add(item.Value);\n\
    \        foreach (var item in arr.Reverse())\n            result.Add(digits.ContainsKey(item)\
    \ ? digits[item] : \"One\");\n        return result;", "        if (arr.Count\
    \ == 0) return new List<string>();\n        List<long> reversed = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n >= 1 && n <= 9) {\n    \
    \            reversed.Add(n);\n            }\n        }\n        List<string>\
    \ result = new List<string>();\n        foreach (long n in reversed) {\n     \
    \       string name = GetName(n);\n            result.Add(name);\n        }\n\
    \        return result;", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        var result = new List<string>();\n        var ones\
    \ = arr.Where(x => x <= 9).ToList();\n        var tens = arr.Where(x => x > 9).ToList();\n\
    \        var tensReversed = tens.Reverse();\n        var tensReversedString =\
    \ tensReversed.Select(x => x.ToString()).ToList();\n        var tensReversedStringReversed\
    \ = tensReversedString.Reverse();\n        var tensReversedStringReversedString\
    \ = tensReversedStringReversed.Select(x => x.ToString()).ToList();\n        var\
    \ tensReversedStringReversedStringReversed = tensReversedStringReversedString.Reverse();\n\
    \        var tensReversedStringReversedStringReversedString = tensReversedStringReversedStringReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversed.Select(x => x.ToString()).ToList();\n\
    \        var tensReversedStringReversedStringReversedStringReversedString = tensReversedStringReversedStringReversedStringReversedString.Reverse();\n\
    \        var tensReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedString.Reverse();\n\
    \        var tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedString\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed\
    \ = tensReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversedStringReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringReversedStringReversedStringReversedStringReverse",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var digits = new List<string>();\n        var digitNames\
    \ = new List<string>();\n        var maxDigit = arr.Max();\n        var minDigit\
    \ = arr.Min();\n        var maxDigitName = digitNames.Max();\n        var minDigitName\
    \ = digitNames.Min();\n        var maxDigitDigit = maxDigit - minDigit + 1;\n\
    \        var minDigitDigit = minDigit - minDigit + 1;\n        var maxDigitDigitName\
    \ = maxDigitName - minDigitName + 1;\n        var minDigitDigitName = minDigitName\
    \ - minDigitName + 1;\n        var maxDigitDigitDigit = maxDigit - minDigit +\
    \ 1;\n        var minDigitDigit = minDigit - minDigit + 1;\n        var maxDigitDigitName\
    \ = maxDigitName - minDigitName + 1;\n        var minDigitDigitName = minDigitName\
    \ - minDigitName + 1;\n        var maxDigitDigitDigit = maxDigit - minDigit +\
    \ 1;\n        var minDigitDigit = minDigit - minDigit + 1;\n        var maxDigitDigitName\
    \ = maxDigitName - minDigitName + 1;\n        var minDigitDigitName = minDigitName\
    \ - minDigitName + 1;\n        var maxDigitDigitDigit = maxDigit - minDigit +\
    \ 1;\n        var minDigitDigit = minDigit - minDigit + 1;\n        var maxDigitDigitName\
    \ = maxDigitName - minDigitName + 1;\n        var minDigitDigitName = minDigitName\
    \ - minDigitName + 1;\n        var maxDigitDigitDigit = maxDigit - minDigit +\
    \ 1;\n        var minDigitDigit = minDigit - minDigit + 1;\n        var maxDigitDigitName\
    \ = maxDigitName - minDigitName + 1;\n        var minDigitDigitName = minDigitName\
    \ - minDigitName + 1;\n        var maxDigitDigitDigit = maxDigit - minDigit +\
    \ 1;\n        var minDigitDigit = minDigit - minDigit + 1;\n        var maxDigitDigitName\
    \ = maxDigitName - minDigitName + 1;\n        var minDigitDigitName = minDigitName\
    \ - minDigitName + 1;\n        var maxDigitDigitDigit = maxDigit - minDigit +\
    \ 1;\n        var minDigitDigit = minDigit - minDigit + 1;\n        var maxDigitDigitName\
    \ = maxDigitName - minDigitName + 1;\n        var minDigitDigitName = minDigitName\
    \ - minDigitName + 1;\n        var maxDigitDigitDigit = maxDigit - minDigit +\
    \ 1;\n        var minDigit", "        if (arr.Count == 0)\n            return\
    \ new List<string>();\n        if (arr.Count == 1)\n            return new List<string>(new\
    \ string[]{(string)arr.First().ToString()});\n        List<long> reversed = new\
    \ List<long>(arr.Count);\n        reversed.AddRange(arr);\n        reversed.Reverse();\n\
    \        List<string> result = new List<string>(arr.Count);\n        foreach (long\
    \ n in reversed) {\n            string name = GetName(n);\n            result.Add(name);\n\
    \        }\n        return result;", "        if (arr.Count == 0)\n          \
    \  return new List<string>();\n        var result = new List<string>();\n    \
    \    var firstDigit = arr[0];\n        var lastDigit = arr[arr.Count - 1];\n \
    \       var firstDigitName = GetName(firstDigit);\n        var lastDigitName =\
    \ GetName(lastDigit);\n        var firstDigitIndex = arr.IndexOf(firstDigit);\n\
    \        var lastDigitIndex = arr.IndexOf(lastDigit);\n        var firstDigitCount\
    \ = arr.Count - firstDigitIndex;\n        var lastDigitCount = arr.Count - lastDigitIndex;\n\
    \        var firstDigitCount = arr.Count - firstDigitIndex;\n        var lastDigitCount\
    \ = arr.Count - lastDigitIndex;\n        var firstDigitName = GetName(firstDigit);\n\
    \        var lastDigitName = GetName(lastDigit);\n        var firstDigitIndex\
    \ = arr.IndexOf(firstDigit);\n        var lastDigitIndex = arr.IndexOf(lastDigit);\n\
    \        var firstDigitCount = arr.Count - firstDigitIndex;\n        var lastDigitCount\
    \ = arr.Count - lastDigitIndex;\n        var firstDigitCount = arr.Count - firstDigitIndex;\n\
    \        var lastDigitCount = arr.Count - lastDigitIndex;\n        var firstDigitName\
    \ = GetName(firstDigit);\n        var lastDigitName = GetName(lastDigit);\n  \
    \      var firstDigitIndex = arr.IndexOf(firstDigit);\n        var lastDigitIndex\
    \ = arr.IndexOf(lastDigit);\n        var firstDigitCount = arr.Count - firstDigitIndex;\n\
    \        var lastDigitCount = arr.Count - lastDigitIndex;\n        var firstDigitCount\
    \ = arr.Count - firstDigitIndex;\n        var lastDigitCount = arr.Count - lastDigitIndex;\n\
    \        var firstDigitName = GetName(firstDigit);\n        var lastDigitName\
    \ = GetName(lastDigit);\n        var firstDigitIndex = arr.IndexOf(firstDigit);\n\
    \        var lastDigitIndex = arr.IndexOf(lastDigit);\n        var firstDigitCount\
    \ = arr.Count - firstDigitIndex;\n        var lastDigitCount = arr.Count - lastDigitIndex;\n\
    \        var firstDigitCount = arr.Count - firstDigitIndex;\n        var lastDigitCount\
    \ = arr.Count - lastDigitIndex;\n        var firstDigitName = GetName(firstDigit);\n\
    \        var lastDigitName = GetName(lastDigit);\n        var firstDigitIndex\
    \ = arr.IndexOf(firstDigit);\n        var lastDigitIndex = arr.IndexOf(lastDigit);\n\
    \        var firstDigitCount = arr.Count - firstDigitIndex;\n        var lastDigitCount\
    \ = arr.Count - lastDigitIndex;\n        var firstDigitCount = arr.Count - firstDigitIndex;\n\
    \        var lastDigitCount = arr.Count - lastDigitIndex;\n        var firstDigitName\
    \ = GetName(firstDigit);\n        var lastDigitName = GetName(lastDigit);\n  \
    \      var firstDigitIndex = arr.IndexOf(firstDigit);\n        var lastDigitIndex\
    \ = arr.IndexOf(lastDigit);\n        var firstDigitCount = ", "        if (arr.Count\
    \ == 0)\n            return new List<string>();\n        List<long> reversed =\
    \ new List<long>();\n        foreach (long num in arr)\n            if (num >\
    \ 9)\n                reversed.Add(num / 10);\n            else\n            \
    \    reversed.Add(num);\n        reversed.Reverse();\n        List<string> result\
    \ = new List<string>();\n        foreach (long num in reversed) {\n          \
    \  string name = GetName(num);\n            result.Add(name);\n        }\n   \
    \     return result;", "        List<string> result = new List<string>();\n  \
    \      if (arr.Count > 0) {\n            long max = arr.Max();\n            long\
    \ min = arr.Min();\n            long diff = max - min;\n            long ten =\
    \ diff / 10;\n            long ones = diff % 10;\n            long tens = ten\
    \ * 10;\n            long ones = ones * 10;\n            long tens = tens * 10;\n\
    \            long tens = tens * 10;\n            long tens = tens * 10;\n    \
    \        long tens = tens * 10;\n            long tens = tens * 10;\n        \
    \    long tens = tens * 10;\n            long tens = tens * 10;\n            long\
    \ tens = tens * 10;\n            long tens = tens * 10;\n            long tens\
    \ = tens * 10;\n            long tens = tens * 10;\n            long tens = tens\
    \ * 10;\n            long tens = tens * 10;\n            long tens = tens * 10;\n\
    \            long tens = tens * 10;\n            long tens = tens * 10;\n    \
    \        long tens = tens * 10;\n            long tens = tens * 10;\n        \
    \    long tens = tens * 10;\n            long tens = tens * 10;\n            long\
    \ tens = tens * 10;\n            long tens = tens * 10;\n            long tens\
    \ = tens * 10;\n            long tens = tens * 10;\n            long tens = tens\
    \ * 10;\n            long tens = tens * 10;\n            long tens = tens * 10;\n\
    \            long tens = tens * 10;\n            long tens = tens * 10;\n    \
    \        long tens = tens * 10;\n            long tens = tens * 10;\n        \
    \    long tens = tens * 10;\n            long tens = tens * 10;\n            long\
    \ tens = tens * 10;\n            long tens = tens * 10;\n            long tens\
    \ = tens * 10;\n            long tens = tens * 10;\n            long tens = tens\
    \ * 10;\n            long tens = tens * 10;\n            long tens = tens * 10;\n\
    \            long tens = tens * 10;\n            long tens = tens * 10;\n    \
    \        long tens = tens * 10;\n            long tens = tens * 10;\n        \
    \    long tens = tens * 10;\n            long tens = tens * 10;\n            long\
    \ tens = tens * 10;\n            long tens = tens * 10;\n            long tens\
    \ = tens * 10;\n            long tens = tens * 10;\n            long tens = tens\
    \ * 10;\n            long tens = tens * 10;\n            long tens = tens * 10;\n\
    \            long tens = tens * 10;\n            long tens = tens * 10;\n    \
    \        long tens = ", "        List<string> result = new List<string>();\n \
    \       if (arr.Count > 0) {\n            long max = arr.Max();\n            long\
    \ min = arr.Min();\n            long digits = max - min + 1;\n            long\
    \ tens = digits / 10;\n            long ones = digits % 10;\n            string\
    \ tensName = GetName((int)tens);\n            string onesName = GetName((int)ones);\n\
    \            string name = tensName + onesName;\n            foreach (long n in\
    \ arr) {\n                if (n < min) {\n                    result.Add(name);\n\
    \                } else if (n > max) {\n                    result.Add(name);\n\
    \                } else {\n                    long temp = n;\n              \
    \      while (temp > 0) {\n                        long digit = temp % 10;\n \
    \                       temp = temp / 10;\n                        string digitName\
    \ = GetName((int)digit);\n                        name = name + digitName;\n \
    \                   }\n                    result.Add(name);\n               \
    \ }\n            }\n        }\n        return result;", "        if (arr.Count\
    \ == 0)\n            return new List<string>();\n        if (arr.Count == 1)\n\
    \            return new List<string>(new string[]{(string)arr.First().ToString()});\n\
    \        List<long> reversed = arr.Reverse();\n        List<string> result = new\
    \ List<string>();\n        foreach (long num in reversed) {\n            string\
    \ name = GetName(num);\n            if (name != null)\n                result.Add(name);\n\
    \        }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var maxValue = arr.Max();\n\
    \        var minValue = arr.Min();\n        var digits = new Dictionary<long,\
    \ string> {\n            {1L, \"One\"},\n            {2L, \"Two\"},\n        \
    \    {3L, \"Three\"},\n            {4L, \"Four\"},\n            {5L, \"Five\"\
    },\n            {6L, \"Six\"},\n            {7L, \"Seven\"},\n            {8L,\
    \ \"Eight\"},\n            {9L, \"Nine\"}\n        };\n        foreach (var item\
    \ in arr) {\n            if (item < minValue || item > maxValue) continue;\n \
    \           var digit = item - minValue;\n            var name = digits.FirstOrDefault(d\
    \ => d.Key == digit).Value;\n            result.Add(name);\n        }\n      \
    \  return result;", "        List<string> result = new List<string>();\n     \
    \   if (arr.Count > 0) {\n            long max = arr.Max();\n            long\
    \ min = arr.Min();\n            long length = max - min + 1;\n            long\
    \ tens = 10 * length;\n            long hundreds = 100 * length;\n           \
    \ long thousands = 1000 * length;\n            long tenThousands = 10000 * length;\n\
    \            long oneThousands = 100000 * length;\n            long oneHundreds\
    \ = 1000000 * length;\n            long oneThousandHundreds = 10000000 * length;\n\
    \            long oneThousandThousands = 100000000 * length;\n            long\
    \ oneHundredThousands = 1000000000 * length;\n            long oneThousandHundredThousands\
    \ = 10000000000 * length;\n            long oneThousandThousandHundredThousands\
    \ = 100000000000 * length;\n            long oneHundredThousandThousandHundredThousands\
    \ = 1000000000000 * length;\n            long oneThousandHundredThousandHundredThousands\
    \ = 10000000000000 * length;\n            long oneThousandThousandHundredThousandHundredThousands\
    \ = 100000000000000 * length;\n            long oneHundredThousandThousandHundredThousandHundredThousands\
    \ = 1000000000000000 * length;\n            long oneThousandHundredThousandHundredThousandHundredThousands\
    \ = 10000000000000000 * length;\n            long oneThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = 100000000000000000 * length;\n            long oneHundredThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = 1000000000000000000 * length;\n            long oneThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 10000000000000000000 * length;\n            long oneThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 100000000000000000000 * length;\n            long oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundredThousands\
    \ = 1000000000000000000000 * length;\n            ", "        if (arr.Count ==\
    \ 0) return new List<string>();\n        var result = new List<string>();\n  \
    \      var digits = new List<string>();\n        var maxDigit = arr.Max();\n \
    \       var minDigit = arr.Min();\n        var maxDigitName = GetName(maxDigit);\n\
    \        var minDigitName = GetName(minDigit);\n        var maxDigitIndex = GetIndex(maxDigit);\n\
    \        var minDigitIndex = GetIndex(minDigit);\n        var maxDigitName = GetName(maxDigitIndex);\n\
    \        var minDigitName = GetName(minDigitIndex);\n        var maxDigitIndex\
    \ = GetIndex(maxDigitIndex);\n        var minDigitIndex = GetIndex(minDigitIndex);\n\
    \        var maxDigitName = GetName(maxDigitIndex);\n        var minDigitName\
    \ = GetName(minDigitIndex);\n        var maxDigitIndex = GetIndex(maxDigitIndex);\n\
    \        var minDigitIndex = GetIndex(minDigitIndex);\n        var maxDigitName\
    \ = GetName(maxDigitIndex);\n        var minDigitName = GetName(minDigitIndex);\n\
    \        var maxDigitIndex = GetIndex(maxDigitIndex);\n        var minDigitIndex\
    \ = GetIndex(minDigitIndex);\n        var maxDigitName = GetName(maxDigitIndex);\n\
    \        var minDigitName = GetName(minDigitIndex);\n        var maxDigitIndex\
    \ = GetIndex(maxDigitIndex);\n        var minDigitIndex = GetIndex(minDigitIndex);\n\
    \        var maxDigitName = GetName(maxDigitIndex);\n        var minDigitName\
    \ = GetName(minDigitIndex);\n        var maxDigitIndex = GetIndex(maxDigitIndex);\n\
    \        var minDigitIndex = GetIndex(minDigitIndex);\n        var maxDigitName\
    \ = GetName(maxDigitIndex);\n        var minDigitName = GetName(minDigitIndex);\n\
    \        var maxDigitIndex = GetIndex(maxDigitIndex);\n        var minDigitIndex\
    \ = GetIndex(minDigitIndex);\n        var maxDigitName = GetName(maxDigitIndex);\n\
    \        var minDigitName = GetName(minDigitIndex);\n        var maxDigitIndex\
    \ = GetIndex(maxDigitIndex);\n        var minDigitIndex = GetIndex(minDigitIndex);\n\
    \        var maxDigitName = GetName(maxDigitIndex);\n        var minDigitName\
    \ = GetName(minDigitIndex);\n        var maxDigitIndex = GetIndex(maxDigitIndex);\n\
    \        var minDigitIndex = GetIndex(minDigitIndex);\n        var maxDigitName\
    \ = GetName(maxDigitIndex);\n        var minDigitName = GetName(minDigitIndex);\n\
    \        var maxDigitIndex = GetIndex(maxDigitIndex);\n        var minDigitIndex\
    \ = GetIndex(minDigitIndex);\n        var maxDigitName = GetName(maxDigitIndex);\n\
    \        var minDigitName = GetName(minDigitIndex);\n        var maxDigitIndex\
    \ = GetIndex(maxDigitIndex);\n        var minDigitIndex = GetIndex(minDigitIndex);\n\
    \        var maxDigitName = GetName(maxDigitIndex);\n        var minDigitName\
    \ = GetName(minDigitIndex);\n        var maxDigitIndex = GetIndex(maxDigitIndex);\n\
    \        var ", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        List<string> result = new List<string>();\n        List<long> sortedArr\
    \ = arr.OrderBy(x => x).ToList();\n        string one = \"One\";\n        string\
    \ two = \"Two\";\n        string three = \"Three\";\n        string four = \"\
    Four\";\n        string five = \"Five\";\n        string six = \"Six\";\n    \
    \    string seven = \"Seven\";\n        string eight = \"Eight\";\n        string\
    \ nine = \"Nine\";\n        string ten = \"Ten\";\n        string hundred = \"\
    Hundred\";\n        string thousand = \"Thousand\";\n        string million =\
    \ \"Million\";\n        string billion = \"Billion\";\n        string trillion\
    \ = \"Trillion\";\n        string quadrillion = \"Quadrillion\";\n        string\
    \ quintillion = \"Quintillion\";\n        string sextillion = \"Sextillion\";\n\
    \        string septillion = \"Septillion\";\n        string octillion = \"Octillion\"\
    ;\n        string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintillion = \"Quinvigintillion\"\
    ;\n        string sexvigintillion = \"", "        if (arr.Count == 0)\n      \
    \      return new List<string>();\n        if (arr.Count == 1)\n            return\
    \ new List<string>(new string[]{(string)arr[0].ToString()});\n        var sorted\
    \ = arr.OrderBy(i => i).ToList();\n        var reversed = sorted.Reverse();\n\
    \        var result = new List<string>();\n        foreach (var i in reversed)\
    \ {\n            var str = i.ToString();\n            var index = str.Length -\
    \ 1;\n            while (index >= 0) {\n                result.Add(str[index--]);\n\
    \            }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        if (arr.Count > 0) {\n            long maxValue\
    \ = arr.Max();\n            long minValue = arr.Min();\n            long range\
    \ = (maxValue - minValue) + 1;\n            long digit = minValue;\n         \
    \   while (digit <= 9) {\n                string name = GetName(digit);\n    \
    \            if (name != null)\n                    result.Add(name);\n      \
    \          digit += range;\n            }\n        }\n        return result;",
  "        if (arr.Count == 0)\n            return new List<string>();\n        List<long>\
    \ result = new List<long>();\n        long max = arr.Max();\n        long min\
    \ = arr.Min();\n        if (max < 1 || min > 9)\n            return new List<string>();\n\
    \        long digit = max - min;\n        long tens = digit / 10;\n        long\
    \ ones = digit % 10;\n        long tensDigit = tens / 10;\n        long onesDigit\
    \ = ones % 10;\n        string tensName = GetName(tensDigit);\n        string\
    \ onesName = GetName(onesDigit);\n        string tensReversed = Reverse(tensName);\n\
    \        string onesReversed = Reverse(onesName);\n        string tensReversedString\
    \ = tensReversed + onesReversed + tensName;\n        string onesReversedString\
    \ = onesReversed + tensName + onesName;\n        result.Add(tensReversedString);\n\
    \        result.Add(onesReversedString);\n        return result;", "        if\
    \ (arr.Count == 0)\n            return new List<string>();\n        List<long>\
    \ reversed = new List<long>();\n        foreach (long n in arr)\n            if\
    \ (n >= 1 && n <= 9)\n                reversed.Add(n);\n        else\n       \
    \     return new List<string>();\n        List<string> result = new List<string>();\n\
    \        foreach (long n in reversed) {\n            string name = GetName(n);\n\
    \            if (name != null)\n                result.Add(name);\n        }\n\
    \        return result;", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        List<long> reversed = arr.Reverse().ToList();\n   \
    \     List<string> result = new List<string>();\n        foreach (long n in reversed)\
    \ {\n            string name = GetName(n);\n            if (name != null)\n  \
    \              result.Add(name);\n        }\n        return result;", "      \
    \  if (arr.Count == 0)\n            return new List<string>();\n        var result\
    \ = new List<string>();\n        var digits = new Dictionary<long, string>();\n\
    \        foreach (var item in arr) {\n            if (item < 1 || item > 9)\n\
    \                continue;\n            digits[item] = GetDigitName(item);\n \
    \       }\n        foreach (var item in arr) {\n            if (item < 1 || item\
    \ > 9)\n                continue;\n            var digit = item - 1;\n       \
    \     var name = digits[digit];\n            if (name == null)\n             \
    \   continue;\n            result.Add(name);\n        }\n        return result.Reverse().ToList();",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        var result = new List<string>();\n        var digits = new List<string>();\n\
    \        var digitNames = new List<string>();\n        var lastDigit = -1;\n \
    \       var lastDigitName = string.Empty;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n        var lastDigitNameIndex = -1;\n\
    \        var lastDigitNameIndex = -1;\n", "        if (arr.Count == 0) return\
    \ new List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        long digit = max - min;\n        long tens = digit / 10;\n        long\
    \ ones = digit % 10;\n        List<string> result = new List<string>();\n    \
    \    string one = \"One\";\n        string two = \"Two\";\n        string three\
    \ = \"Three\";\n        string four = \"Four\";\n        string five = \"Five\"\
    ;\n        string six = \"Six\";\n        string seven = \"Seven\";\n        string\
    \ eight = \"Eight\";\n        string nine = \"Nine\";\n        string ten = \"\
    Ten\";\n        string hundred = \"Hundred\";\n        string thousand = \"Thousand\"\
    ;\n        string million = \"Million\";\n        string billion = \"Billion\"\
    ;\n        string trillion = \"Trillion\";\n        string quadrillion = \"Quadrillion\"\
    ;\n        string quintillion = \"Quintillion\";\n        string sextillion =\
    \ \"Sextillion\";\n        string septillion = \"Septillion\";\n        string\
    \ octillion = \"Octillion\";\n        string nonillion = \"Nonillion\";\n    \
    \    string decillion = \"Decillion\";\n        string undecillion = \"Undecillion\"\
    ;\n        string duodecillion = \"Duodecillion\";\n        string tredecillion\
    \ = \"Tredecillion\";\n        string quattuordecillion = \"Quattuordecillion\"\
    ;\n        string quindecillion = \"Quindecillion\";\n        string sexdecillion\
    \ = \"Sexdecillion\";\n        string septendecillion = \"Septendecillion\";\n\
    \        string octodecillion = \"Octodecillion\";\n        string novemdecillion\
    \ = \"Novemdecillion\";\n        string vigintillion = \"Vigintillion\";\n   \
    \     string unvigintillion = \"Unvigintillion\";\n        string duovigintillion\
    \ = \"Duovigintillion\";\n        string trevigintillion = \"Trevigintillion\"\
    ;\n        string quattuorvigintillion = \"Quattuorvigintillion\";\n        string\
    \ quinvigintilli", "        if (arr.Count == 0) return new List<string>();\n \
    \       var result = new List<string>();\n        var max = (long)Math.Pow(10,\
    \ arr.Count);\n        var min = max - 1;\n        var digits = new Dictionary<long,\
    \ string>();\n        foreach (var i in arr) {\n            digits.Add(i, i.ToString());\n\
    \        }\n        var reversed = new List<long>();\n        foreach (var i in\
    \ digits) {\n            reversed.Add(i.Value);\n        }\n        var reversedDigits\
    \ = new Dictionary<long, string>();\n        foreach (var i in reversed) {\n \
    \           reversedDigits.Add(i, i.ToString());\n        }\n        foreach (var\
    \ i in reversedDigits) {\n            if (min <= i.Value && i.Value <= max) {\n\
    \                result.Add(i.Value);\n            }\n        }\n        foreach\
    \ (var i in reversedDigits) {\n            if (min <= i.Value && i.Value <= max)\
    \ {\n                result.Add(i.Value);\n            }\n        }\n        return\
    \ result;", "        if (arr.Count == 0) return new List<string>();\n        List<long>\
    \ newArr = new List<long>();\n        long maxValue = arr.Max();\n        long\
    \ minValue = arr.Min();\n        long maxDigit = maxValue / 10;\n        long\
    \ minDigit = minValue / 10;\n        long maxDigitName = maxDigit < 10 ? \"Zero\"\
    \ : maxDigit < 100 ? \"One\" : maxDigit < 1000 ? \"Two\" : maxDigit < 10000 ?\
    \ \"Three\" : maxDigit < 100000 ? \"Four\" : maxDigit < 1000000 ? \"Five\" : maxDigit\
    \ < 10000000 ? \"Six\" : maxDigit < 100000000 ? \"Seven\" : maxDigit < 1000000000\
    \ ? \"Eight\" : maxDigit < 10000000000 ? \"Nine\" : maxDigit < 100000000000 ?\
    \ \"Ten\" : maxDigit < 1000000000000 ? \"Eleven\" : maxDigit < 10000000000000\
    \ ? \"Twelve\" : maxDigit < 100000000000000 ? \"Thirteen\" : maxDigit < 1000000000000000\
    \ ? \"Fourteen\" : maxDigit < 10000000000000000 ? \"Fifteen\" : maxDigit < 100000000000000000\
    \ ? \"Sixteen\" : maxDigit < 100000000000000000 ? \"Seventeen\" : maxDigit < 100000000000000000\
    \ ? \"Eighteen\" : maxDigit < 100000000000000000 ? \"Nineteen\" : maxDigit < 100000000000000000\
    \ ? \"Twenty\" : maxDigit < 100000000000000000 ? \"Twenty-one\" : maxDigit < 100000000000000000\
    \ ? \"Twenty-two\" : maxDigit < 100000000000000000 ? \"Twenty-three\" : maxDigit\
    \ < 100000000000000000 ? \"Twenty-four\" : maxDigit < 100000000000000000 ? \"\
    Twenty-five\" : maxDigit < 100000000000000000 ? \"Twenty-six\" : maxDigit < 100000000000000000\
    \ ? \"Twenty-seven\" : maxDigit < 100000000000000000 ? \"Twenty-eight\" : maxDigit\
    \ < 100000000000000000 ? \"Twenty-nine\" : maxDigit < 100000000000000000 ? \"\
    Thirty\" : maxDigit < 100000000000000000 ? \"Thirty-one\" : maxDigit < 100000000000000000\
    \ ? \"Thirty-two\" : maxDigit < 100000000000000000 ? \"Thirty-three\" : maxDigit\
    \ < 100000000000000000 ? \"Thirty-four\" : maxDigit < 100000000000000000 ? \"\
    Thirty-five\" : maxDigit < ", "        List<string> result = new List<string>();\n\
    \        if (arr.Count == 0)\n            return result;\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        if (min == max)\n            return result;\n\
    \        long mid = min + (max - min) / 2;\n        long midDigit = arr[mid];\n\
    \        long digit = midDigit % 10;\n        string name = GetName(digit);\n\
    \        result.Add(name);\n        long nextDigit = midDigit / 10;\n        if\
    \ (nextDigit == 0)\n            return result;\n        digit = nextDigit % 10;\n\
    \        name = GetName(digit);\n        result.Add(name);\n        return result;",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var digits = new Dictionary<long, string>();\n\
    \        foreach (var item in arr) {\n            long digit = item % 10;\n  \
    \          if (digits.ContainsKey(digit))\n                digits[digit] = digits[digit]\
    \ + \" \" + item;\n            else\n                digits.Add(digit, item);\n\
    \        }\n        foreach (var item in digits)\n            result.Add(item.Value);\n\
    \        return result.Reverse().ToList();", "        if (arr.Count == 0) return\
    \ new List<string>();\n        var result = new List<string>();\n        var digits\
    \ = new Dictionary<long, string>();\n        foreach (var item in arr) {\n   \
    \         if (item < 10) {\n                digits.Add(item, \"One\");\n     \
    \       } else if (item < 100) {\n                digits.Add(item, \"Two\");\n\
    \            } else if (item < 1000) {\n                digits.Add(item, \"Three\"\
    );\n            } else if (item < 10000) {\n                digits.Add(item, \"\
    Four\");\n            } else if (item < 100000) {\n                digits.Add(item,\
    \ \"Five\");\n            } else if (item < 1000000) {\n                digits.Add(item,\
    \ \"Six\");\n            } else if (item < 10000000) {\n                digits.Add(item,\
    \ \"Seven\");\n            } else if (item < 100000000) {\n                digits.Add(item,\
    \ \"Eight\");\n            } else if (item < 1000000000) {\n                digits.Add(item,\
    \ \"Nine\");\n            } else {\n                digits.Add(item, \"Ten\");\n\
    \            }\n        }\n        var sorted = arr.OrderBy(x => x).ToList();\n\
    \        sorted.Reverse();\n        foreach (var item in sorted) {\n         \
    \   var key = item % 10;\n            var value = digits[item];\n            if\
    \ (key != 0) {\n                result.Add(value);\n            }\n        }\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<string>();\n        }\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long max\
    \ = Math.Max(max, min);\n        long min = Math.Min(max, min);\n        long\
    \ length = max - min + 1;\n        string one = \"One\";\n        string two =\
    \ \"Two\";\n        string three = \"Three\";\n        string four = \"Four\"\
    ;\n        string five = \"Five\";\n        string six = \"Six\";\n        string\
    \ seven = \"Seven\";\n        string eight = \"Eight\";\n        string nine =\
    \ \"Nine\";\n        string ten = \"Ten\";\n        string hundred = \"Hundred\"\
    ;\n        string thousand = \"Thousand\";\n        string million = \"Million\"\
    ;\n        string billion = \"Billion\";\n        string trillion = \"Trillion\"\
    ;\n        string quadrillion = \"Quadrillion\";\n        string quintillion =\
    \ \"Quintillion\";\n        string sextillion = \"Sextillion\";\n        string\
    \ septillion = \"Septillion\";\n        string octillion = \"Octillion\";\n  \
    \      string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        ", "        if (arr.Count == 0)\n     \
    \       return new List<string>();\n        List<long> reversed = new List<long>();\n\
    \        foreach (long n in arr)\n            if (n >= 1 && n <= 9)\n        \
    \        reversed.Add(n);\n        else\n            return new List<string>();\n\
    \        List<string> result = new List<string>();\n        foreach (long n in\
    \ reversed) {\n            string name = \"\";\n            switch (n) {\n   \
    \             case 1:\n                    name = \"One\";\n                 \
    \   break;\n                case 2:\n                    name = \"Two\";\n   \
    \                 break;\n                case 3:\n                    name =\
    \ \"Three\";\n                    break;\n                case 4:\n          \
    \          name = \"Four\";\n                    break;\n                case\
    \ 5:\n                    name = \"Five\";\n                    break;\n     \
    \           case 6:\n                    name = \"Six\";\n                   \
    \ break;\n                case 7:\n                    name = \"Seven\";\n   \
    \                 break;\n                case 8:\n                    name =\
    \ \"Eight\";\n                    break;\n                case 9:\n          \
    \          name = \"Nine\";\n                    break;\n                default:\n\
    \                    break;\n            }\n            result.Add(name);\n  \
    \      }\n        return result;", "        if (arr.Count == 0)\n            return\
    \ new List<string>();\n        List<long> reversed = new List<long>();\n     \
    \   foreach (long n in arr)\n            if (n >= 1 && n <= 9)\n             \
    \   reversed.Add(n);\n        else\n            return new List<string>();\n \
    \       List<string> result = new List<string>();\n        foreach (long n in\
    \ reversed) {\n            string name = \"\";\n            while (n != 0) {\n\
    \                name += (n % 10).ToString();\n                n /= 10;\n    \
    \        }\n            result.Add(name);\n        }\n        return result;",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var len = arr.Count;\n        var digits = new int[len];\n\
    \        var digitNames = new string[len];\n        var ones = arr.Where(x =>\
    \ x == 1L).ToArray();\n        var tens = arr.Where(x => x == 10L).ToArray();\n\
    \        var hundreds = arr.Where(x => x == 100L).ToArray();\n        var thousands\
    \ = arr.Where(x => x == 1000L).ToArray();\n        var tenThousands = arr.Where(x\
    \ => x == 10000L).ToArray();\n        var hundredThousands = arr.Where(x => x\
    \ == 100000L).ToArray();\n        var thousandThousands = arr.Where(x => x ==\
    \ 1000000L).ToArray();\n        var hundredThousandThousands = arr.Where(x =>\
    \ x == 10000000L).ToArray();\n        var thousandThousandThousands = arr.Where(x\
    \ => x == 100000000L).ToArray();\n        var hundredThousandThousandThousands\
    \ = arr.Where(x => x == 1000000000L).ToArray();\n        var thousandThousandThousandThousands\
    \ = arr.Where(x => x == 10000000000L).ToArray();\n        var hundredThousandThousandThousandThousands\
    \ = arr.Where(x => x == 100000000000L).ToArray();\n        var thousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 1000000000000L).ToArray();\n        var hundredThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 10000000000000L).ToArray();\n        var thousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 100000000000000L).ToArray();\n        var hundredThousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 1000000000000000L).ToArray();\n        var thousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 10000000000000000L).ToArray();\n        var hundredThousandThousandThousandThousandThousandThousandThousands\
    \ = arr.Where(x => x == 100000000000000000L).ToArray();\n", "        if (arr.Count\
    \ == 0) return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long maxValue = arr.Max();\n        long minValue = arr.Min();\n    \
    \    long maxDigit = maxValue / 10;\n        long minDigit = minValue / 10;\n\
    \        long maxDigitName = maxDigit < 10 ? \"Zero\" : maxDigit < 100 ? \"One\"\
    \ : maxDigit < 1000 ? \"Two\" : maxDigit < 10000 ? \"Three\" : maxDigit < 100000\
    \ ? \"Four\" : maxDigit < 1000000 ? \"Five\" : maxDigit < 10000000 ? \"Six\" :\
    \ maxDigit < 100000000 ? \"Seven\" : maxDigit < 1000000000 ? \"Eight\" : maxDigit\
    \ < 10000000000 ? \"Nine\" : maxDigit < 100000000000 ? \"Ten\" : maxDigit < 1000000000000\
    \ ? \"Eleven\" : maxDigit < 10000000000000 ? \"Twelve\" : maxDigit < 100000000000000\
    \ ? \"Thirteen\" : maxDigit < 1000000000000000 ? \"Fourteen\" : maxDigit < 10000000000000000\
    \ ? \"Fifteen\" : maxDigit < 100000000000000000 ? \"Sixteen\" : maxDigit < 100000000000000000\
    \ ? \"Seventeen\" : maxDigit < 100000000000000000 ? \"Eighteen\" : maxDigit <\
    \ 100000000000000000 ? \"Nineteen\" : maxDigit < 100000000000000000 ? \"Twenty\"\
    \ : maxDigit < 100000000000000000 ? \"Twenty one\" : maxDigit < 100000000000000000\
    \ ? \"Twenty two\" : maxDigit < 100000000000000000 ? \"Twenty three\" : maxDigit\
    \ < 100000000000000000 ? \"Twenty four\" : maxDigit < 100000000000000000 ? \"\
    Twenty five\" : maxDigit < 100000000000000000 ? \"Twenty six\" : maxDigit < 100000000000000000\
    \ ? \"Twenty seven\" : maxDigit < 100000000000000000 ? \"Twenty eight\" : maxDigit\
    \ < 100000000000000000 ? \"Twenty nine\" : maxDigit < 100000000000000000 ? \"\
    Thirty\" : maxDigit < 100000000000000000 ? \"Thirty one\" : maxDigit < 100000000000000000\
    \ ? \"Thirty two\" : maxDigit < 100000000000000000 ? \"Thirty three\" : maxDigit\
    \ < 100000000000000000 ? \"Thirty four\" : maxDigit < 100000000000000000 ? \"\
    Thirty five\" : maxDigit < 100000000000000000 ? \"Thirty ", "        if (arr.Count\
    \ == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var ones = new List<long>();\n        var tens = new List<long>();\n\
    \        var hundreds = new List<long>();\n        var thousands = new List<long>();\n\
    \        var tenThousands = new List<long>();\n        var oneHundred = new List<long>();\n\
    \        var oneThousand = new List<long>();\n        var oneHundredThousand =\
    \ new List<long>();\n        var oneThousandHundred = new List<long>();\n    \
    \    var oneHundredThousandThousand = new List<long>();\n        var oneThousandHundredThousand\
    \ = new List<long>();\n        var oneHundredThousandThousandHundred = new List<long>();\n\
    \        var oneThousandHundredThousandHundred = new List<long>();\n        var\
    \ oneHundredThousandThousandHundredThousand = new List<long>();\n        var oneThousandHundredThousandHundredThousand\
    \ = new List<long>();\n        var oneHundredThousandThousandHundredThousandHundred\
    \ = new List<long>();\n        var oneThousandHundredThousandHundredThousandHundred\
    \ = new List<long>();\n        var oneHundredThousandThousandHundredThousandHundredThousand\
    \ = new List<long>();\n        var oneThousandHundredThousandHundredThousandHundredThousand\
    \ = new List<long>();\n        var oneHundredThousandThousandHundredThousandHundredThousandHundred\
    \ = new List<long>();\n        var oneThousandHundredThousandHundredThousandHundredThousandHundredThousand\
    \ = new List<long>();\n        var oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundred\
    \ = new List<long>();\n        var oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundredThousand\
    \ = new List<long>();\n        var oneHundredThousandThousandHundredThousandHundredThousandHundredThousandHundredThousandHundred\
    \ = new List<long>();\n        var oneTh", "        if (arr.Count == 0)\n    \
    \        return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long maxValue = arr.Max();\n        long minValue = arr.Min();\n    \
    \    long maxDigit = maxValue / 10;\n        long minDigit = minValue / 10;\n\
    \        long maxDigitName = maxDigit == 0 ? \"Zero\" : maxDigit.ToString();\n\
    \        long minDigitName = minDigit == 0 ? \"Zero\" : minDigit.ToString();\n\
    \        long maxDigitNameLength = maxDigitName.Length;\n        long minDigitNameLength\
    \ = minDigitName.Length;\n        string maxDigitName = maxDigitName.Substring(0,\
    \ maxDigitNameLength - 1);\n        string minDigitName = minDigitName.Substring(0,\
    \ minDigitNameLength - 1);\n        string maxDigitNameReversed = maxDigitName.Substring(0,\
    \ 1) + maxDigitName.Substring(maxDigitNameLength - 1);\n        string minDigitNameReversed\
    \ = minDigitName.Substring(0, 1) + minDigitName.Substring(minDigitNameLength -\
    \ 1);\n        string maxDigitNameReversedReversed = maxDigitNameReversed.Substring(0,\
    \ 1) + maxDigitNameReversed.Substring(maxDigitNameLength - 1);\n        string\
    \ minDigitNameReversedReversed = minDigitNameReversed.Substring(0, 1) + minDigitNameReversed.Substring(minDigitNameLength\
    \ - 1);\n        string maxDigitNameReversedReversedReversed = maxDigitNameReversedReversed.Substring(0,\
    \ 1) + maxDigitNameReversedReversed.Substring(maxDigitNameLength - 1);\n     \
    \   string minDigitNameReversedReversedReversed = minDigitNameReversedReversed.Substring(0,\
    \ 1) + minDigitNameReversedReversed.Substring(minDigitNameLength - 1);\n     \
    \   string maxDigitNameReversedReversedReversedReversed = maxDigitNameReversedReversedReversedReversed.Substring(0,\
    \ 1) + maxDigitNameReversedReversedReversedReversed.Substring(maxDigitNameLength\
    \ - 1);\n        string minDigitNameReversedReversedReversedReversed = minDigitNameReversedReversedReversedReversed.Substring(0,\
    \ 1) + minDigitNameReversedReversedReversedReversed.Substring(minDigitNameLength\
    \ - 1);\n        string maxDigitNameReversedReversedReversedReversedReversed =\
    \ maxDigitNameReversedReversedReversedReversedReversedReversed.Substring(0, 1)\
    \ + maxDigitNameReversedReversedReversedReversedReversedReversed.Substring(maxDigitNameLength\
    \ - 1);\n        string minDigitNameReversedReversedReverse", "        if (arr.Count\
    \ == 0)\n            return new List<string>();\n        var result = new List<string>();\n\
    \        var digits = new Dictionary<long, string>();\n        foreach (var item\
    \ in arr)\n            digits[item] = item.ToString();\n        var maxDigit =\
    \ arr.Max();\n        var minDigit = arr.Min();\n        var maxDigitName = digits.Where(x\
    \ => x.Value == maxDigit).Select(x => x.Key).FirstOrDefault();\n        var minDigitName\
    \ = digits.Where(x => x.Value == minDigit).Select(x => x.Key).FirstOrDefault();\n\
    \        foreach (var item in arr) {\n            if (item < minDigit || item\
    \ > maxDigit)\n                continue;\n            var digitName = digits[item];\n\
    \            if (digitName == maxDigitName)\n                result.Add(maxDigitName);\n\
    \            else if (digitName == minDigitName)\n                result.Add(minDigitName);\n\
    \            else\n                result.Add(digitName);\n        }\n       \
    \ return result;", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        var result = new List<string>();\n        var ones = arr.Where(x => x\
    \ == 1L).ToList();\n        var tens = arr.Where(x => x == 10L).ToList();\n  \
    \      var hundreds = arr.Where(x => x == 100L).ToList();\n        var thousands\
    \ = arr.Where(x => x == 1000L).ToList();\n        var tenThousands = arr.Where(x\
    \ => x == 10000L).ToList();\n        var hundredThousands = arr.Where(x => x ==\
    \ 100000L).ToList();\n        var thousandThousands = arr.Where(x => x == 1000000L).ToList();\n\
    \        var oneThousands = arr.Where(x => x == 10000000L).ToList();\n       \
    \ var tenThousandThousands = arr.Where(x => x == 100000000L).ToList();\n     \
    \   var hundredThousandThousands = arr.Where(x => x == 1000000000L).ToList();\n\
    \        var thousandThousandThousands = arr.Where(x => x == 10000000000L).ToList();\n\
    \        var oneThousandThousands = arr.Where(x => x == 100000000000L).ToList();\n\
    \        var tenThousandThousandThousands = arr.Where(x => x == 1000000000000L).ToList();\n\
    \        var hundredThousandThousandThousands = arr.Where(x => x == 10000000000000L).ToList();\n\
    \        var thousandThousandThousandThousands = arr.Where(x => x == 100000000000000L).ToList();\n\
    \        var oneThousandThousandThousands = arr.Where(x => x == 1000000000000000L).ToList();\n\
    \        var tenThousandThousandThousandThousands = arr.Where(x => x == 10000000000000000L).ToList();\n\
    \        var hundredThousandThousandThousandThousands = arr.Where(x => x == 100000000000000000L).ToList();\n\
    \        var thousandThousandThousandThousandThousands = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var oneThousandThousandThousandThousands = arr.Where(x => x == 10000000000000000000L).ToList();\n\
    \        var tenThousandThousandThousandThousandThousands = arr.Where(x ", " \
    \       if (arr.Count == 0) {\n            return new List<string>();\n      \
    \  }\n        long maxValue = arr.Max();\n        long minValue = arr.Min();\n\
    \        long maxDigit = maxValue % 10;\n        long minDigit = minValue % 10;\n\
    \        long maxDigitName = maxDigit < 10 ? \"Zero\" : maxDigit < 100 ? \"One\"\
    \ : maxDigit < 1000 ? \"Two\" : maxDigit < 10000 ? \"Three\" : maxDigit < 100000\
    \ ? \"Four\" : maxDigit < 1000000 ? \"Five\" : maxDigit < 10000000 ? \"Six\" :\
    \ maxDigit < 100000000 ? \"Seven\" : maxDigit < 1000000000 ? \"Eight\" : maxDigit\
    \ < 10000000000 ? \"Nine\" : maxDigit < 100000000000 ? \"Ten\" : maxDigit < 1000000000000\
    \ ? \"Eleven\" : maxDigit < 10000000000000 ? \"Twelve\" : maxDigit < 100000000000000\
    \ ? \"Thirteen\" : maxDigit < 1000000000000000 ? \"Fourteen\" : maxDigit < 10000000000000000\
    \ ? \"Fifteen\" : maxDigit < 100000000000000000 ? \"Sixteen\" : maxDigit < 100000000000000000\
    \ ? \"Seventeen\" : maxDigit < 100000000000000000 ? \"Eighteen\" : maxDigit <\
    \ 100000000000000000 ? \"Nineteen\" : maxDigit < 100000000000000000 ? \"Twenty\"\
    \ : maxDigit < 100000000000000000 ? \"Twenty One\" : maxDigit < 100000000000000000\
    \ ? \"Twenty Two\" : maxDigit < 100000000000000000 ? \"Twenty Three\" : maxDigit\
    \ < 100000000000000000 ? \"Twenty Four\" : maxDigit < 100000000000000000 ? \"\
    Twenty Five\" : maxDigit < 100000000000000000 ? \"Twenty Six\" : maxDigit < 100000000000000000\
    \ ? \"Twenty Seven\" : maxDigit < 100000000000000000 ? \"Twenty Eight\" : maxDigit\
    \ < 100000000000000000 ? \"Twenty Nine\" : maxDigit < 100000000000000000 ? \"\
    Twenty Ten\" : maxDigit < 100000000000000000 ? \"Twenty Eleven\" : maxDigit <\
    \ 100000000000000000 ? \"Twenty Twelve\" : maxDigit < 100000000000000000 ? \"\
    Twenty Thirteen\" : maxDigit < 100000000000000000 ? \"Twenty Fourteen\" : maxDigit\
    \ < 100000000000000000 ? \"Twenty Fifteen\" : maxDigit < ", "        if (arr.Count\
    \ == 0) return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        if (max\
    \ < 1 || min > 9) return result;\n        long range = (max - min) + 1;\n    \
    \    long digit = max - min + 1;\n        long tens = range / 10;\n        long\
    \ ones = range % 10;\n        long tensDigit = tens / 10;\n        long onesDigit\
    \ = ones % 10;\n        string tensName = GetName(tensDigit);\n        string\
    \ onesName = GetName(onesDigit);\n        string tensNameReversed = GetNameReversed(tensDigit);\n\
    \        string onesNameReversed = GetNameReversed(onesDigit);\n        string\
    \ tensNameReversedName = GetNameReversedName(tensDigit);\n        string onesNameReversedName\
    \ = GetNameReversedName(onesDigit);\n        string tensNameReversedNameReversed\
    \ = GetNameReversedNameReversed(tensDigit);\n        string onesNameReversedNameReversed\
    \ = GetNameReversedNameReversed(onesDigit);\n        string tensNameReversedNameReversedName\
    \ = GetNameReversedNameReversedName(tensDigit);\n        string onesNameReversedNameReversedName\
    \ = GetNameReversedNameReversedName(onesDigit);\n        string tensNameReversedNameReversedNameReversed\
    \ = GetNameReversedNameReversedNameReversed(tensDigit);\n        string onesNameReversedNameReversedNameReversed\
    \ = GetNameReversedNameReversedNameReversed(onesDigit);\n        string tensNameReversedNameReversedNameReversedName\
    \ = GetNameReversedNameReversedNameReversedName(tensDigit);\n        string onesNameReversedNameReversedNameReversedName\
    \ = GetNameReversedNameReversedNameReversedName(onesDigit);\n        string tensNameReversedNameReversedNameReversedNameReversed\
    \ = GetNameReversedNameReversedNameReversedNameReversed(tensDigit);\n        string\
    \ onesNameReversedNameReversedNameReversedNameReversed = GetNameReversedNameReversedNameReversedNameReversed(onesDigit);\n\
    \        string tensNameReversedNameReversedNameReversedNameReversedName = GetNameReversedNameReversedNameReversedNameReversedName(tensDigit);\n\
    \        string onesNameReversedNameReverse", "        List<string> result = new\
    \ List<string>();\n        if (arr.Count > 0) {\n            long max = arr.Max();\n\
    \            long min = arr.Min();\n            long mid = max / 10;\n       \
    \     long remainder = max % 10;\n            int count = 0;\n            while\
    \ (min <= 9) {\n                long current = min * 10 + mid;\n             \
    \   long next = current + remainder;\n                if (next > 9) {\n      \
    \              next = next - 10;\n                }\n                string name\
    \ = GetName(next);\n                if (name != null) {\n                    result.Add(name);\n\
    \                    count++;\n                }\n                min = next +\
    \ 1;\n                mid = current / 10;\n                remainder = current\
    \ % 10;\n            }\n            if (count > 0) {\n                result.Reverse();\n\
    \            }\n        }\n        return result;", "        if (arr.Count ==\
    \ 0)\n            return new List<string>();\n        var result = new List<string>();\n\
    \        var min = arr.Min();\n        var max = arr.Max();\n        var digits\
    \ = new Dictionary<long, string>();\n        foreach (var n in arr)\n        \
    \    digits[n] = GetDigitName(n);\n        foreach (var n in arr)\n          \
    \  if (n >= min && n <= max)\n                result.Add(digits[n]);\n       \
    \ return result;", "        if (arr.Count == 0) return new List<string>();\n \
    \       var result = new List<string>();\n        var ones = arr.Where(x => x\
    \ == 1L).ToList();\n        var tens = arr.Where(x => x == 10L).ToList();\n  \
    \      var hundreds = arr.Where(x => x == 100L).ToList();\n        var thousands\
    \ = arr.Where(x => x == 1000L).ToList();\n        var millions = arr.Where(x =>\
    \ x == 1000000L).ToList();\n        var billions = arr.Where(x => x == 1000000000L).ToList();\n\
    \        var trillions = arr.Where(x => x == 1000000000000L).ToList();\n     \
    \   var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n    \
    \    var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var thousandThousands = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var millionThousands = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var billionThousands = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var trillionThousands = arr.Where(x => x == 1000000000000000000000000000000L).ToList();\n\
    \        var quadrillionThousands = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var quintillionThousands = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var thousandThousandThousands = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var millionThousandThousands = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var billionThousandThousands = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var trillionThousandThousands = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var quadrillionThousandThousands = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var quintillionThousandThousands = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var thousandThousandThousandThousands = arr.Where(x => x == 1000000000000000000000000000000000L).",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var reversed = arr.Reverse();\n      \
    \  var digits = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).ToArray();\n\
    \        var ones = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).Where(i\
    \ => i == 1).ToArray();\n        var tens = Enumerable.Range(1, 9).Select(i =>\
    \ reversed.ElementAt(i)).Where(i => i == 10).ToArray();\n        var hundreds\
    \ = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).Where(i => i ==\
    \ 100).ToArray();\n        var thousands = Enumerable.Range(1, 9).Select(i =>\
    \ reversed.ElementAt(i)).Where(i => i == 1000).ToArray();\n        var tenThousands\
    \ = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).Where(i => i ==\
    \ 10000).ToArray();\n        var hundredThousands = Enumerable.Range(1, 9).Select(i\
    \ => reversed.ElementAt(i)).Where(i => i == 100000).ToArray();\n        var thousandThousands\
    \ = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).Where(i => i ==\
    \ 1000000).ToArray();\n        var millions = Enumerable.Range(1, 9).Select(i\
    \ => reversed.ElementAt(i)).Where(i => i == 10000000).ToArray();\n        var\
    \ billions = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).Where(i\
    \ => i == 100000000).ToArray();\n        var trillions = Enumerable.Range(1, 9).Select(i\
    \ => reversed.ElementAt(i)).Where(i => i == 1000000000).ToArray();\n        var\
    \ quadrillions = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).Where(i\
    \ => i == 10000000000).ToArray();\n        var quintillions = Enumerable.Range(1,\
    \ 9).Select(i => reversed.ElementAt(i)).Where(i => i == 100000000000).ToArray();\n\
    \        var sextillions = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).Where(i\
    \ => i == 1000000000000).ToArray();\n        var septillions = Enumerable.Range(1,\
    \ 9).Select(i => reversed.ElementAt(i)).Where(i => i == 10000000000000).ToArray();\n\
    \        var octillion", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        var result = new List<string>();\n        var ones\
    \ = arr.Where(x => x <= 9).ToList();\n        var tens = arr.Where(x => x > 9).ToList();\n\
    \        var tensReversed = tens.Reverse();\n        var tensReversedStrings =\
    \ tensReversed.Select(x => x.ToString()).ToList();\n        var onesReversed =\
    \ ones.Reverse();\n        var onesReversedStrings = onesReversed.Select(x =>\
    \ x.ToString()).ToList();\n        var tensReversedStringsString = string.Join(\"\
    \", tensReversedStrings);\n        var onesReversedStringsString = string.Join(\"\
    \", onesReversedStrings);\n        var tensReversedStringsStringReversed = string.Join(\"\
    \", tensReversedStrings.Reverse());\n        var onesReversedStringsStringReversed\
    \ = string.Join(\"\", onesReversedStrings.Reverse());\n        var tensReversedStringsStringReversedString\
    \ = string.Join(\"\", tensReversedStrings.Reverse().Select(x => x.ToString()));\n\
    \        var onesReversedStringsStringReversedString = string.Join(\"\", onesReversedStrings.Reverse().Select(x\
    \ => x.ToString()));\n        var tensReversedStringsStringReversedStringReversed\
    \ = string.Join(\"\", tensReversedStrings.Reverse().Select(x => x.ToString()).Reverse());\n\
    \        var onesReversedStringsStringReversedStringReversed = string.Join(\"\"\
    , onesReversedStrings.Reverse().Select(x => x.ToString()).Reverse());\n      \
    \  var tensReversedStringsStringReversedStringReversedString = string.Join(\"\"\
    , tensReversedStrings.Reverse().Select(x => x.ToString()).Reverse().Select(x =>\
    \ x.ToString()));\n        var onesReversedStringsStringReversedStringReversedString\
    \ = string.Join(\"\", onesReversedStrings.Reverse().Select(x => x.ToString()).Reverse().Select(x\
    \ => x.ToString()));\n        var tensReversedStringsStringReversedStringReversedStringReversed\
    \ = string.Join(\"\", tensReversedStrings.Reverse().Select(x => x.ToString()).Reverse().Select(x\
    \ => x.ToString()).Reverse());\n        var onesReversedStringsStringReversedStringReversedStringReversed\
    \ = string.Join(\"\", onesReversedStrings.Reverse().Select(x => x.ToString()).Reverse().Select(x\
    \ => x.ToString()).Reverse());\n        var tensReverse", "        if (arr.Count\
    \ == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var digits = new List<string>();\n        var digitNames = new List<string>();\n\
    \        var digitValues = new List<long>();\n        var digitValue = 0;\n  \
    \      var digitName = 0;\n        var digitNameValue = 0;\n        var digitNameValue2\
    \ = 0;\n        var digitNameValue3 = 0;\n        var digitNameValue4 = 0;\n \
    \       var digitNameValue5 = 0;\n        var digitNameValue6 = 0;\n        var\
    \ digitNameValue7 = 0;\n        var digitNameValue8 = 0;\n        var digitNameValue9\
    \ = 0;\n        var digitNameValue10 = 0;\n        var digitNameValue11 = 0;\n\
    \        var digitNameValue12 = 0;\n        var digitNameValue13 = 0;\n      \
    \  var digitNameValue14 = 0;\n        var digitNameValue15 = 0;\n        var digitNameValue16\
    \ = 0;\n        var digitNameValue17 = 0;\n        var digitNameValue18 = 0;\n\
    \        var digitNameValue19 = 0;\n        var digitNameValue20 = 0;\n      \
    \  var digitNameValue21 = 0;\n        var digitNameValue22 = 0;\n        var digitNameValue23\
    \ = 0;\n        var digitNameValue24 = 0;\n        var digitNameValue25 = 0;\n\
    \        var digitNameValue26 = 0;\n        var digitNameValue27 = 0;\n      \
    \  var digitNameValue28 = 0;\n        var digitNameValue29 = 0;\n        var digitNameValue30\
    \ = 0;\n        var digitNameValue31 = 0;\n        var digitNameValue32 = 0;\n\
    \        var digitNameValue33 = 0;\n        var digitNameValue34 = 0;\n      \
    \  var digitNameValue35 = 0;\n        var digitNameValue36 = 0;\n        var digitNameValue37\
    \ = 0;\n        var digitNameValue38 = 0;\n        var digitNameValue39 = 0;\n\
    \        var digitNameValue40 = 0;\n        var digitNameValue41 = 0;\n      \
    \  var digitNameValue42 = 0;\n        var digitNameValue43 = 0;\n        var digitNameValue44\
    \ = 0;\n        var digitNameValue45 = 0;\n        var digitNameValue46 = 0;\n\
    \        var digitNameValue47 = 0;\n        var digitNameValue48 = 0;\n      \
    \  var digitNameValue49 = 0;\n        var digitNameValue50 = 0;\n        var digitNameValue51\
    \ = 0;\n        var digitNameValue52 = 0;\n        var digitNameValue53 = 0;\n\
    \        var digitNameValue54 = 0;\n        var digitNameValue55 = 0;\n      \
    \  var digitNameValue56 = 0;\n        var digitNameValue57 = 0;\n        var digitNameValue58\
    \ = 0;\n        var digitNameValue59 = 0;\n        var digitNameValue60 = 0;\n\
    \        var digitNameValue61 = 0;\n        var digitNameValue62 = 0;\n      \
    \  var digitNameValue63 = 0;\n        var digitNameValue64 = 0;\n        var digitNameValue65\
    \ = 0;\n        var digitNameValue66 = 0;\n        var digitNameValue", "    \
    \    List<string> result = new List<string>();\n        if (arr.Count > 0) {\n\
    \            long max = arr.Max();\n            long min = arr.Min();\n      \
    \      long diff = max - min;\n            long tens = diff / 10;\n          \
    \  long ones = diff % 10;\n            string one = One[ones];\n            string\
    \ ten = Ten[tens];\n            string tens = ten;\n            string ones =\
    \ one;\n            string tensReversed = tens.Reverse();\n            string\
    \ onesReversed = ones.Reverse();\n            string reversed = onesReversed +\
    \ tensReversed;\n            foreach (string s in reversed.Split(',')) {\n   \
    \             result.Add(s);\n            }\n        }\n        return result;",
  "        if (arr.Count == 0) return new List<string>();\n        List<long> sorted\
    \ = arr.OrderBy(x => x).ToList();\n        List<string> result = new List<string>();\n\
    \        long max = sorted.Max();\n        long min = sorted.Min();\n        long\
    \ range = max - min + 1;\n        long digit = range / 10;\n        long remainder\
    \ = range % 10;\n        string one = \"One\";\n        string two = \"Two\";\n\
    \        string three = \"Three\";\n        string four = \"Four\";\n        string\
    \ five = \"Five\";\n        string six = \"Six\";\n        string seven = \"Seven\"\
    ;\n        string eight = \"Eight\";\n        string nine = \"Nine\";\n      \
    \  string ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string\
    \ thousand = \"Thousand\";\n        string million = \"Million\";\n        string\
    \ billion = \"Billion\";\n        string trillion = \"Trillion\";\n        string\
    \ quadrillion = \"Quadrillion\";\n        string quintillion = \"Quintillion\"\
    ;\n        string sextillion = \"Sextillion\";\n        string septillion = \"\
    Septillion\";\n        string octillion = \"Octillion\";\n        string nonillion\
    \ = \"Nonillion\";\n        string decillion = \"Decillion\";\n        string\
    \ undecillion = \"Undecillion\";\n        string duodecillion = \"Duodecillion\"\
    ;\n        string tredecillion = \"Tredecillion\";\n        string quattuordecillion\
    \ = \"Quattuordecillion\";\n        string quindecillion = \"Quindecillion\";\n\
    \        string sexdecillion = \"Sexdecillion\";\n        string septendecillion\
    \ = \"Septendecillion\";\n        string octodecillion = \"Octodecillion\";\n\
    \        string novemdecillion = \"Novemdecillion\";\n        string vigintillion\
    \ = \"Vigintillion\";\n        string unvigintillion = \"Unvigintillion\";\n \
    \       string duovigintillion = \"Duovigintillion\";\n        string trevigintillion\
    \ = \"Trevigintillion\";\n        string quattuorvigintillion = \"Qu", "     \
    \   List<string> result = new List<string>();\n        if (arr.Count == 0)\n \
    \           return result;\n        long max = arr.Max();\n        long min =\
    \ arr.Min();\n        long range = (max - min) + 1;\n        long digit = max\
    \ - 1;\n        long power = 1;\n        bool isNegative = false;\n        bool\
    \ isPositive = true;\n        bool isOdd = true;\n        bool isEven = true;\n\
    \        bool isZero = true;\n        bool isOne = true;\n        bool isTwo =\
    \ true;\n        bool isThree = true;\n        bool isFour = true;\n        bool\
    \ isFive = true;\n        bool isSix = true;\n        bool isSeven = true;\n \
    \       bool isEight = true;\n        bool isNine = true;\n        bool isTen\
    \ = true;\n        bool isEleven = true;\n        bool isTwelve = true;\n    \
    \    bool isThirteen = true;\n        bool isFourteen = true;\n        bool isFifteen\
    \ = true;\n        bool isSixteen = true;\n        bool isSeventeen = true;\n\
    \        bool isEighteen = true;\n        bool isNineteen = true;\n        bool\
    \ isTwenty = true;\n        bool isTwentyOne = true;\n        bool isTwentyTwo\
    \ = true;\n        bool isTwentyThree = true;\n        bool isTwentyFour = true;\n\
    \        bool isTwentyFive = true;\n        bool isTwentySix = true;\n       \
    \ bool isTwentySeven = true;\n        bool isTwentyEight = true;\n        bool\
    \ isTwentyNine = true;\n        bool isThirty = true;\n        bool isThirtyOne\
    \ = true;\n        bool isThirtyTwo = true;\n        bool isThirtyThree = true;\n\
    \        bool isThirtyFour = true;\n        bool isThirtyFive = true;\n      \
    \  bool isThirtySix = true;\n        bool isThirtySeven = true;\n        bool\
    \ isThirtyEight = true;\n        bool isThirtyNine = true;\n        bool isFourty\
    \ = true;\n        bool isFourtyOne = true;\n        bool isFourtyTwo = true;\n\
    \        bool isFourtyThree = true;\n        bool isFourtyFour = true;\n     \
    \   bool isFourtyFive = true;\n        bool isFourtySix = true;\n        bool\
    \ isFourtySeven = true;\n        bool isFourtyEight = true;\n        bool isFourtyNine\
    \ = true;\n        bool isFifty = true;\n        bool isFiftyOne = true;\n   \
    \     bool isFiftyTwo = true;\n        bool isF", "        if (arr.Count == 0)\n\
    \            return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long digit\
    \ = max - min;\n        long tens = digit / 10;\n        long ones = digit % 10;\n\
    \        long tensDigit = tens / 10;\n        long onesDigit = ones % 10;\n  \
    \      string tensName = GetName(tensDigit);\n        string onesName = GetName(onesDigit);\n\
    \        foreach (long num in arr) {\n            if (num < 1 || num > 9)\n  \
    \              continue;\n            long digit = num - min;\n            long\
    \ tens = digit / 10;\n            long ones = digit % 10;\n            long tensDigit\
    \ = tens / 10;\n            long onesDigit = ones % 10;\n            string tensName\
    \ = GetName(tensDigit);\n            string onesName = GetName(onesDigit);\n \
    \           string name = tensName + onesName;\n            result.Add(name);\n\
    \        }\n        return result;", "        if (arr.Count == 0) {\n        \
    \    return new List<string>();\n        }\n        List<long> reversed = new\
    \ List<long>();\n        foreach (long n in arr) {\n            if (n >= 1 &&\
    \ n <= 9) {\n                reversed.Add(n);\n            }\n        }\n    \
    \    List<string> result = new List<string>();\n        foreach (long n in reversed)\
    \ {\n            string name = GetName(n);\n            result.Add(name);\n  \
    \      }\n        return result;", "        if (arr.Count == 0)\n            return\
    \ new List<string>();\n        List<string> result = new List<string>();\n   \
    \     long maxValue = arr.Max();\n        long minValue = arr.Min();\n       \
    \ long maxDigit = maxValue % 10;\n        long minDigit = minValue % 10;\n   \
    \     long maxDigitName = maxDigit == 0 ? \"Zero\" : Convert.ToString(maxDigit);\n\
    \        long minDigitName = minDigit == 0 ? \"Zero\" : Convert.ToString(minDigit);\n\
    \        string maxDigitNameReversed = maxDigitName == \"Zero\" ? maxDigitName\
    \ : maxDigitName.Substring(1, 1) + maxDigitName.Substring(0, 1);\n        string\
    \ minDigitNameReversed = minDigitName == \"Zero\" ? minDigitName : minDigitName.Substring(1,\
    \ 1) + minDigitName.Substring(0, 1);\n        bool isNegative = minValue < 0;\n\
    \        bool isNegativeReversed = isNegative && minValue < 0;\n        bool isPositive\
    \ = maxValue > 0;\n        bool isPositiveReversed = isPositive && maxValue >\
    \ 0;\n        bool isZero = maxValue == 0;\n        bool isZeroReversed = isZero\
    \ && maxValue == 0;\n        bool isOne = maxValue == 1;\n        bool isOneReversed\
    \ = isOne && maxValue == 1;\n        bool isTwo = maxValue == 2;\n        bool\
    \ isTwoReversed = isTwo && maxValue == 2;\n        bool isThree = maxValue ==\
    \ 3;\n        bool isThreeReversed = isThree && maxValue == 3;\n        bool isFour\
    \ = maxValue == 4;\n        bool isFourReversed = isFour && maxValue == 4;\n \
    \       bool isFive = maxValue == 5;\n        bool isFiveReversed = isFive &&\
    \ maxValue == 5;\n        bool isSix = maxValue == 6;\n        bool isSixReversed\
    \ = isSix && maxValue == 6;\n        bool isSeven = maxValue == 7;\n        bool\
    \ isSevenReversed = isSeven && maxValue == 7;\n        bool isEight = maxValue\
    \ == 8;\n        bool isEightReversed = isEight && maxValue == 8;\n        bool\
    \ isNine = maxValue == 9;\n        bool isNineReversed = isNine && maxValue ==\
    \ 9;\n        bool isTen = maxValue == 10;\n        bool isTenReversed = isTen\
    \ && maxValue == 10;\n        bool isEleven = maxValue == 11;\n        bool isEleven",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        long max = arr.Max();\n        long min = arr.Min();\n        if\
    \ (max < 1 || min > 9) {\n            return new List<string>();\n        }\n\
    \        List<long> reversed = arr.Reverse().ToList();\n        List<string> result\
    \ = new List<string>();\n        foreach (long n in arr) {\n            if (n\
    \ < 1 || n > 9) {\n                continue;\n            }\n            string\
    \ name = GetName(n);\n            if (name == null) {\n                continue;\n\
    \            }\n            result.Add(name);\n        }\n        return result;",
  "        if (arr.Count == 0)\n            return new List<string>();\n        List<string>\
    \ result = new List<string>();\n        long max = arr.Max();\n        long min\
    \ = arr.Min();\n        if (max < 1 || min > 9)\n            return result;\n\
    \        long maxDigit = max - min;\n        long maxDigitName = (long)Math.Pow(10,\
    \ maxDigit);\n        long minDigit = min - 1;\n        long minDigitName = (long)Math.Pow(10,\
    \ minDigit);\n        long maxDigitNameReversed = maxDigitName - 1;\n        long\
    \ minDigitNameReversed = minDigit + 1;\n        long maxDigitNameReversedName\
    \ = (long)Math.Pow(10, maxDigitNameReversed);\n        long minDigitNameReversedName\
    \ = (long)Math.Pow(10, minDigitNameReversed);\n        long maxDigitNameReversedNameReversed\
    \ = maxDigitNameReversed - 1;\n        long minDigitNameReversedNameReversed =\
    \ minDigitNameReversed + 1;\n        long maxDigitNameReversedNameReversedName\
    \ = (long)Math.Pow(10, maxDigitNameReversedNameReversed);\n        long minDigitNameReversedNameReversedName\
    \ = (long)Math.Pow(10, minDigitNameReversedNameReversed);\n        long maxDigitNameReversedNameReversedNameReversed\
    \ = maxDigitNameReversedNameReversed - 1;\n        long minDigitNameReversedNameReversedNameReversed\
    \ = minDigitNameReversedNameReversed + 1;\n        long maxDigitNameReversedNameReversedNameReversedName\
    \ = (long)Math.Pow(10, maxDigitNameReversedNameReversedNameReversed);\n      \
    \  long minDigitNameReversedNameReversedNameReversedName = (long)Math.Pow(10,\
    \ minDigitNameReversedNameReversedNameReversedName);\n        long maxDigitNameReversedNameReversedNameReversedNameReversed\
    \ = maxDigitNameReversedNameReversedNameReversed - 1;\n        long minDigitNameReversedNameReversedNameReversedNameReversed\
    \ = minDigitNameReversedNameReversedNameReversed + 1;\n        long maxDigitNameReversedNameReversedNameReversedNameReversedName\
    \ = (long)Math.Pow(10, maxDigitNameReversedNameReversedNameReversedNameReversed);\n\
    \        long minDigitNameReversedNameReversedNameReversedNameReversedName = (long)Math.Pow(10,\
    \ minDigitNameReversedNameReversedNameReversedNameReversedName);\n        long\
    \ maxDigitNameReversedNameReversedNameReversedNameReversedName", "        List<string>\
    \ result = new List<string>();\n        if (arr.Count > 0) {\n            long\
    \ max = arr.Max();\n            long min = arr.Min();\n            long length\
    \ = max - min + 1;\n            long tens = Math.Abs(min / 10);\n            long\
    \ ones = min % 10;\n            long tensDigit = tens / 10;\n            long\
    \ onesDigit = ones % 10;\n            string tensName = GetName(tensDigit);\n\
    \            string onesName = GetName(onesDigit);\n            string tensNameReversed\
    \ = GetName(tensDigit * -1);\n            string onesNameReversed = GetName(onesDigit\
    \ * -1);\n            string tensNameReversedWithOnes = GetName(tensDigit * -1\
    \ + (onesDigit * -1));\n            string onesNameReversedWithOnes = GetName(onesDigit\
    \ * -1 + (tensDigit * -1));\n            string tensNameReversedWithOnesAndTens\
    \ = GetName(tensDigit * -1 + (onesDigit * -1) + (tensDigit * -1));\n         \
    \   string onesNameReversedWithOnesAndTens = GetName(onesDigit * -1 + (tensDigit\
    \ * -1) + (tensDigit * -1));\n            string tensNameReversedWithOnesAndTensAndOnes\
    \ = GetName(tensDigit * -1 + (onesDigit * -1) + (tensDigit * -1) + (onesDigit\
    \ * -1));\n            string onesNameReversedWithOnesAndTensAndOnes = GetName(onesDigit\
    \ * -1 + (tensDigit * -1) + (tensDigit * -1) + (onesDigit * -1));\n          \
    \  string tensNameReversedWithOnesAndTensAndOnesAndTens = GetName(tensDigit *\
    \ -1 + (onesDigit * -1) + (tensDigit * -1) + (onesDigit * -1) + (tensDigit * -1));\n\
    \            string onesNameReversedWithOnesAndTensAndOnesAndTens = GetName(onesDigit\
    \ * -1 + (tensDigit * -1) + (tensDigit * -1) + (onesDigit * -1) + (tensDigit *\
    \ -1));\n            string tensNameReversedWithOnesAndTensAndOnesAndTensAndOnes\
    \ = GetName(tensDigit * -1 + (onesDigit * -1) + (tensDigit * -1) + (onesDigit\
    \ * -1) + (tensDigit * -1) + (one", "        if (arr.Count < 1) return new List<string>();\n\
    \        List<string> result = new List<string>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long digits = max - min + 1;\n       \
    \ string one = \"One\";\n        string two = \"Two\";\n        string three =\
    \ \"Three\";\n        string four = \"Four\";\n        string five = \"Five\"\
    ;\n        string six = \"Six\";\n        string seven = \"Seven\";\n        string\
    \ eight = \"Eight\";\n        string nine = \"Nine\";\n        string ten = \"\
    Ten\";\n        string hundred = \"Hundred\";\n        string thousand = \"Thousand\"\
    ;\n        string million = \"Million\";\n        string billion = \"Billion\"\
    ;\n        string trillion = \"Trillion\";\n        string quadrillion = \"Quadrillion\"\
    ;\n        string quintillion = \"Quintillion\";\n        string sextillion =\
    \ \"Sextillion\";\n        string septillion = \"Septillion\";\n        string\
    \ octillion = \"Octillion\";\n        string nonillion = \"Nonillion\";\n    \
    \    string decillion = \"Decillion\";\n        string undecillion = \"Undecillion\"\
    ;\n        string duodecillion = \"Duodecillion\";\n        string tredecillion\
    \ = \"Tredecillion\";\n        string quattuordecillion = \"Quattuordecillion\"\
    ;\n        string quindecillion = \"Quindecillion\";\n        string sexdecillion\
    \ = \"Sexdecillion\";\n        string septendecillion = \"Septendecillion\";\n\
    \        string octodecillion = \"Octodecillion\";\n        string novemdecillion\
    \ = \"Novemdecillion\";\n        string vigintillion = \"Vigintillion\";\n   \
    \     string unvigintillion = \"Unvigintillion\";\n        string duovigintillion\
    \ = \"Duovigintillion\";\n        string trevigintillion = \"Trevigintillion\"\
    ;\n        string quattuorvigintillion = \"Quattuorvigintillion\";\n        string\
    \ quinvigintillion = \"Quinvigintillion\";\n        string sexvi", "        if\
    \ (arr.Count == 0) {\n            return new List<string>();\n        }\n    \
    \    List<long> result = new List<long>();\n        long max = 0;\n        foreach\
    \ (long n in arr) {\n            if (n < 1 || n > 9) {\n                continue;\n\
    \            }\n            if (n > max) {\n                max = n;\n       \
    \     }\n        }\n        long curr = max;\n        long next = 1;\n       \
    \ bool isFirst = true;\n        foreach (long n in arr) {\n            if (n <\
    \ 1 || n > 9) {\n                continue;\n            }\n            if (n >\
    \ max) {\n                max = n;\n            }\n            if (curr == next)\
    \ {\n                result.Add(isFirst ? \"One\" : \"Two\");\n              \
    \  isFirst = false;\n                next++;\n            } else {\n         \
    \       result.Add(isFirst ? \"Two\" : \"One\");\n                isFirst = true;\n\
    \                next++;\n            }\n            curr = next;\n        }\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<string>();\n        }\n        var result = new List<string>();\n     \
    \   var ones = arr.Where(x => x > 0 && x < 10).ToList();\n        var tens = arr.Where(x\
    \ => x > 10 && x < 100).ToList();\n        var hundreds = arr.Where(x => x > 100\
    \ && x < 1000).ToList();\n        var thousands = arr.Where(x => x > 1000 && x\
    \ < 10000).ToList();\n        var millions = arr.Where(x => x > 10000 && x < 100000).ToList();\n\
    \        var billions = arr.Where(x => x > 100000 && x < 1000000).ToList();\n\
    \        var trillions = arr.Where(x => x > 1000000 && x < 10000000).ToList();\n\
    \        var quadrillions = arr.Where(x => x > 10000000 && x < 100000000).ToList();\n\
    \        var quintillions = arr.Where(x => x > 100000000 && x < 1000000000).ToList();\n\
    \        var sextillions = arr.Where(x => x > 1000000000 && x < 10000000000).ToList();\n\
    \        var septillions = arr.Where(x => x > 10000000000 && x < 100000000000).ToList();\n\
    \        var octillions = arr.Where(x => x > 100000000000 && x < 1000000000000).ToList();\n\
    \        var nonillions = arr.Where(x => x > 1000000000000 && x < 10000000000000).ToList();\n\
    \        var decillions = arr.Where(x => x > 10000000000000 && x < 100000000000000).ToList();\n\
    \        var undecillions = arr.Where(x => x > 100000000000000 && x < 1000000000000000).ToList();\n\
    \        var duodecillions = arr.Where(x => x > 1000000000000000 && x < 10000000000000000).ToList();\n\
    \        var tredecillions = arr.Where(x => x > 10000000000000000 && x < 100000000000000000).ToList();\n\
    \        var quattuordecillions = arr.Where(x => x > 100000000000000000 && x <\
    \ 1000000000000000000).ToList();\n        var quindecillions = arr.Where(x =>\
    \ x > 1000000000000000000 && x < 10000000000000000000).ToList();\n        var\
    \ sexdecillions = arr.Where(x => x > 10000000000000000000 && x < 100000000000000000000).ToList();\n\
    \        var septendecillions = arr.Where(x => x > 100000000000000000000 && x\
    \ < 1000000000000000000000).ToList();\n        var octodecillions = arr.Where(x\
    \ => x > 1000000000000000000000 && ", "        if (arr.Count == 0)\n         \
    \   return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long maxDigit\
    \ = max / 10;\n        long minDigit = min / 10;\n        long digit = maxDigit\
    \ - minDigit + 1;\n        string one = \"One\";\n        string two = \"Two\"\
    ;\n        string three = \"Three\";\n        string four = \"Four\";\n      \
    \  string five = \"Five\";\n        string six = \"Six\";\n        string seven\
    \ = \"Seven\";\n        string eight = \"Eight\";\n        string nine = \"Nine\"\
    ;\n        string ten = \"Ten\";\n        string hundred = \"Hundred\";\n    \
    \    string thousand = \"Thousand\";\n        string million = \"Million\";\n\
    \        string billion = \"Billion\";\n        string trillion = \"Trillion\"\
    ;\n        string quadrillion = \"Quadrillion\";\n        string quintillion =\
    \ \"Quintillion\";\n        string sextillion = \"Sextillion\";\n        string\
    \ septillion = \"Septillion\";\n        string octillion = \"Octillion\";\n  \
    \      string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";", "        if (arr.Count == 0)\n            return\
    \ new List<string>();\n        var result = new List<string>();\n        var digits\
    \ = new Dictionary<long, string>();\n        foreach (var i in arr) {\n      \
    \      if (i <= 9) {\n                digits.Add(i, i.ToString());\n         \
    \   } else {\n                var key = i - 10;\n                if (digits.ContainsKey(key))\
    \ {\n                    result.Add(digits[key]);\n                } else {\n\
    \                    result.Add(i.ToString());\n                }\n          \
    \  }\n        }\n        return result;", "        if (arr.Count == 0) {\n   \
    \         return new List<string>();\n        }\n        List<string> result =\
    \ new List<string>();\n        long maxValue = arr.Max();\n        long minValue\
    \ = arr.Min();\n        long range = (maxValue - minValue) + 1;\n        long\
    \ digit = maxValue % range;\n        long remainder = maxValue - digit;\n    \
    \    string one = \"One\";\n        string two = \"Two\";\n        string three\
    \ = \"Three\";\n        string four = \"Four\";\n        string five = \"Five\"\
    ;\n        string six = \"Six\";\n        string seven = \"Seven\";\n        string\
    \ eight = \"Eight\";\n        string nine = \"Nine\";\n        string ten = \"\
    Ten\";\n        string eleven = \"Eleven\";\n        string twelve = \"Twelve\"\
    ;\n        string thirteen = \"Thirteen\";\n        string fourteen = \"Fourteen\"\
    ;\n        string fifteen = \"Fifteen\";\n        string sixteen = \"Sixteen\"\
    ;\n        string seventeen = \"Seventeen\";\n        string eighteen = \"Eighteen\"\
    ;\n        string nineteen = \"Nineteen\";\n        string twenty = \"Twenty\"\
    ;\n        string twentyone = \"Twenty One\";\n        string twentytwo = \"Twenty\
    \ Two\";\n        string twentythree = \"Twenty Three\";\n        string twentyfour\
    \ = \"Twenty Four\";\n        string twentyfive = \"Twenty Five\";\n        string\
    \ twentysix = \"Twenty Six\";\n        string twentyseven = \"Twenty Seven\";\n\
    \        string twentyeight = \"Twenty Eight\";\n        string twentynine = \"\
    Twenty Nine\";\n        string thirty = \"Thirty\";\n        string thirtyone\
    \ = \"Thirty One\";\n        string thirtytwo = \"Thirty Two\";\n        string\
    \ thirtythree = \"Thirty Three\";\n        string thirtyfour = \"Thirty Four\"\
    ;\n        string thirtyfive = \"Thirty Five\";\n        string thirtysix = \"\
    Thirty Six\";\n        string thirtyseven = \"Thirty Seven\";\n        string\
    \ thirtyeight = \"Thirty Eight\";\n        string thirtynine = \"Thirty Nine\"\
    ;\n        string forty = \"Forty\";\n        string fortyone = \"Forty One",
  "        if (arr.Count == 0) return new List<string>();\n        List<long> result\
    \ = new List<long>();\n        long max = 0;\n        foreach (long num in arr)\
    \ {\n            if (num > max) max = num;\n        }\n        long min = arr.Min();\n\
    \        long diff = max - min;\n        long tens = diff / 10;\n        long\
    \ ones = diff % 10;\n        long tensMax = max / 10;\n        long onesMax =\
    \ max % 10;\n        long tensMin = min / 10;\n        long onesMin = min % 10;\n\
    \        string tensName = GetName(tensMax);\n        string onesName = GetName(onesMax);\n\
    \        string tensMinName = GetName(tensMin);\n        string onesMinName =\
    \ GetName(onesMin);\n        string tensName = GetName(tens);\n        string\
    \ onesName = GetName(ones);\n        string tensMinName = GetName(tensMin);\n\
    \        string onesMinName = GetName(onesMin);\n        string tensName = GetName(tens);\n\
    \        string onesName = GetName(ones);\n        string tensMinName = GetName(tensMin);\n\
    \        string onesMinName = GetName(onesMin);\n        string tensName = GetName(tens);\n\
    \        string onesName = GetName(ones);\n        string tensMinName = GetName(tensMin);\n\
    \        string onesMinName = GetName(onesMin);\n        string tensName = GetName(tens);\n\
    \        string onesName = GetName(ones);\n        string tensMinName = GetName(tensMin);\n\
    \        string onesMinName = GetName(onesMin);\n        string tensName = GetName(tens);\n\
    \        string onesName = GetName(ones);\n        string tensMinName = GetName(tensMin);\n\
    \        string onesMinName = GetName(onesMin);\n        string tensName = GetName(tens);\n\
    \        string onesName = GetName(ones);\n        string tensMinName = GetName(tensMin);\n\
    \        string onesMinName = GetName(onesMin);\n        string tensName = GetName(tens);\n\
    \        string onesName = GetName(ones);\n        string tensMinName = GetName(tensMin);\n\
    \        string onesMinName = GetName(onesMin);\n        string tensName = GetName(tens);\n\
    \        string onesName = GetName(ones);\n        string tensMin", "        if\
    \ (arr.Count == 0) {\n            return new List<string>();\n        }\n    \
    \    List<long> reversed = new List<long>();\n        foreach (long n in arr)\
    \ {\n            if (n >= 1 && n <= 9) {\n                reversed.Add(n);\n \
    \           }\n        }\n        List<string> result = new List<string>();\n\
    \        foreach (long n in reversed) {\n            string name = GetName(n);\n\
    \            result.Add(name);\n        }\n        return result;", "        if\
    \ (arr.Count == 0)\n            return new List<string>();\n        List<long>\
    \ newArr = new List<long>();\n        long cur = arr[0];\n        bool isFirst\
    \ = true;\n        foreach (long n in arr) {\n            if (isFirst) {\n   \
    \             isFirst = false;\n                newArr.Add(n);\n             \
    \   continue;\n            }\n            if (cur < 9) {\n                newArr.Add(n);\n\
    \                cur++;\n                continue;\n            }\n          \
    \  int index = n - 1;\n            while (index >= 0) {\n                newArr.Add(cur);\n\
    \                cur = cur * 10 + index--;\n            }\n        }\n       \
    \ List<string> ret = new List<string>();\n        foreach (long n in newArr) {\n\
    \            ret.Add(GetName(n));\n        }\n        return ret;", "        if\
    \ (arr.Count == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var digits = new Dictionary<long, string> {\n            {1L, \"One\"\
    },\n            {2L, \"Two\"},\n            {3L, \"Three\"},\n            {4L,\
    \ \"Four\"},\n            {5L, \"Five\"},\n            {6L, \"Six\"},\n      \
    \      {7L, \"Seven\"},\n            {8L, \"Eight\"},\n            {9L, \"Nine\"\
    }\n        };\n        var reversed = arr.OrderByDescending(x => x).Reverse();\n\
    \        foreach (var item in reversed) {\n            var str = item.ToString();\n\
    \            var reversed = str.Reverse();\n            var reversedDigits = reversed.Select(x\
    \ => digits[x]);\n            result.AddRange(reversedDigits);\n        }\n  \
    \      return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<string>();\n        }\n        List<long> result = new List<long>();\n\
    \        long maxValue = arr.Max();\n        long minValue = arr.Min();\n    \
    \    long maxDigit = maxValue % 10;\n        long minDigit = minValue % 10;\n\
    \        long maxDigitName = maxDigit == 0 ? \"Zero\" : maxDigit == 1 ? \"One\"\
    \ : maxDigit == 2 ? \"Two\" : maxDigit == 3 ? \"Three\" : maxDigit == 4 ? \"Four\"\
    \ : maxDigit == 5 ? \"Five\" : maxDigit == 6 ? \"Six\" : maxDigit == 7 ? \"Seven\"\
    \ : maxDigit == 8 ? \"Eight\" : maxDigit == 9 ? \"Nine\" : maxDigit;\n       \
    \ long minDigitName = minDigit == 0 ? \"Zero\" : minDigit == 1 ? \"One\" : minDigit\
    \ == 2 ? \"Two\" : minDigit == 3 ? \"Three\" : minDigit == 4 ? \"Four\" : minDigit\
    \ == 5 ? \"Five\" : minDigit == 6 ? \"Six\" : minDigit == 7 ? \"Seven\" : minDigit\
    \ == 8 ? \"Eight\" : minDigit == 9 ? \"Nine\" : minDigit;\n        bool isReverse\
    \ = false;\n        bool isDigit = false;\n        bool isDigitName = false;\n\
    \        foreach (long value in arr) {\n            if (isDigit) {\n         \
    \       isDigitName = false;\n                isDigit = false;\n            }\n\
    \            if (isReverse) {\n                isDigitName = false;\n        \
    \        isDigit = false;\n            }\n            if (value < minValue) {\n\
    \                isDigit = true;\n                isDigitName = false;\n     \
    \       }\n            if (value > maxValue) {\n                isDigit = true;\n\
    \                isDigitName = false;\n            }\n            if (value ==\
    \ minValue) {\n                isDigit = true;\n                isDigitName =\
    \ true;\n            }\n            if (value == maxValue) {\n               \
    \ isDigit = true;\n                isDigitName = true;\n            }\n      \
    \      if (value == minDigit || value == maxDigit) {\n                isDigit\
    \ = true;\n                isDigitName = true;\n            }\n            if\
    \ (value == minDigitName || value == maxDigitName) {\n                isDigit\
    \ = true;\n                isDigitName = true;\n            }\n            if\
    \ (value == minDigit || value == maxDigit) {\n                isDigit = true;\n\
    \                isDigitName = true;\n            }\n            if (value ==\
    \ minDigitName || value == maxDigitName) {\n                isDigit = true;\n\
    \                isDigitName = true;\n            }\n            if (value ==\
    \ minDigit || value == maxDigit) {\n                isDigit = true;\n        \
    \        isDigitName = true;\n            }\n            if (value == minDigitName\
    \ || value == maxDigitName) {", "        if (arr.Count == 0)\n            return\
    \ new List<string>();\n        List<long> sortedArr = arr.OrderBy(x => x).ToList();\n\
    \        List<string> result = new List<string>();\n        long lastDigit = sortedArr[0];\n\
    \        string lastDigitName = GetDigitName(lastDigit);\n        result.Add(lastDigitName);\n\
    \        foreach (long digit in sortedArr.Skip(1))\n        {\n            string\
    \ digitName = GetDigitName(digit);\n            if (digitName != lastDigitName)\n\
    \            {\n                result.Add(digitName);\n                lastDigitName\
    \ = digitName;\n            }\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        if (arr.Count > 0) {\n            long\
    \ max = arr.Max();\n            long min = arr.Min();\n            long length\
    \ = max - min + 1;\n            long lastDigit = min % 10;\n            long lastDigitIndex\
    \ = arr.FindIndex(x => x == lastDigit);\n            long lastDigitName = lastDigitIndex\
    \ == arr.Count - 1 ? 9 : arr[lastDigitIndex + 1];\n            long lastDigitNameIndex\
    \ = arr.FindIndex(x => x == lastDigitName);\n            long lastDigitNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1];\n            long lastDigitNameNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1];\n            long lastDigitNameNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1];\n            long lastDigitNameNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1];\n            long lastDigitNameNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1];\n            long lastDigitNameNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1];\n            long lastDigitNameNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1];\n            long lastDigitNameNameLength\
    \ = lastDigitNameIndex == arr.Count - 1 ? 9 : arr[lastDigitNameIndex + 1];\n \
    \           long lastDigitNameNameLength = lastDigitNameIndex == arr.Count - 1\
    \ ? 9 : arr[lastDigitNameIndex + 1]", "        if (arr.Count == 0) return new\
    \ List<string>();\n        var result = new List<string>();\n        var ones\
    \ = arr.Where(x => x == 1L).ToList();\n        var tens = arr.Where(x => x ==\
    \ 10L).ToList();\n        var hundreds = arr.Where(x => x == 100L).ToList();\n\
    \        var thousands = arr.Where(x => x == 1000L).ToList();\n        var millions\
    \ = arr.Where(x => x == 1000000L).ToList();\n        var billions = arr.Where(x\
    \ => x == 1000000000L).ToList();\n        var trillions = arr.Where(x => x ==\
    \ 1000000000000L).ToList();\n        var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n\
    \        var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var sextillions = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var septillions = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var octillions = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var nonillions = arr.Where(x => x == 1000000000000000000000000000000L).ToList();\n\
    \        var onesAndTens = ones.Concat(tens).ToList();\n        var onesAndHundreds\
    \ = ones.Concat(onesAndTens).ToList();\n        var onesAndThousands = ones.Concat(onesAndHundreds).ToList();\n\
    \        var onesAndMillions = ones.Concat(onesAndThousands).ToList();\n     \
    \   var onesAndBillions = ones.Concat(onesAndMillions).ToList();\n        var\
    \ onesAndTrillions = ones.Concat(onesAndBillions).ToList();\n        var onesAndQuadrillions\
    \ = ones.Concat(onesAndTrillions).ToList();\n        var onesAndQuintillions =\
    \ ones.Concat(onesAndQuadrillions).ToList();\n        var onesAndSextillions =\
    \ ones.Concat(onesAndQuintillions).ToList();\n        var onesAndSeptillions =\
    \ ones.Concat(onesAndSextillions).ToList();\n        var onesAndOctillions = ones.Concat(onesAndSeptillions).ToList();\n\
    \        var onesAndNonillions = ones.Concat(onesAndOctillions).ToList();\n  \
    \      var ten", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        List<long> reversed = new List<long>(arr.Count);\n       \
    \ foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n           \
    \     reversed.Add(i);\n            }\n        }\n        List<string> result\
    \ = new List<string>();\n        foreach (long i in reversed) {\n            string\
    \ name = GetName(i);\n            result.Add(name);\n        }\n        return\
    \ result;", "        if (arr.Count == 0) return new List<string>();\n        long\
    \ max = arr.Max();\n        long min = arr.Min();\n        List<long> result =\
    \ new List<long>();\n        bool isReverse = false;\n        if (min == max)\
    \ {\n            isReverse = true;\n            max = 9L;\n            min = 1L;\n\
    \        }\n        long cur = min;\n        while (cur <= max) {\n          \
    \  long next = (cur + 9L) / 10L;\n            if (next == cur) {\n           \
    \     result.Add(cur);\n            } else {\n                result.Add(next);\n\
    \            }\n            cur = next;\n        }\n        if (isReverse) {\n\
    \            foreach (long num in result) {\n                num = num * 10L;\n\
    \            }\n            long temp = result.First();\n            result.RemoveAt(0);\n\
    \            result.Insert(0, temp);\n        }\n        List<string> result =\
    \ new List<string>();\n        foreach (long num in result) {\n            string\
    \ name = GetName(num);\n            if (name != null) result.Add(name);\n    \
    \    }\n        return result;", "        if (arr.Count == 0)\n            return\
    \ new List<string>();\n        var result = new List<string>();\n        var digits\
    \ = new List<string>();\n        var digitNames = new List<string>();\n      \
    \  var maxDigit = arr.Max();\n        var minDigit = arr.Min();\n        var maxDigitName\
    \ = digitNames.Max();\n        var minDigitName = digitNames.Min();\n        var\
    \ maxDigitValue = digits.Max();\n        var minDigitValue = digits.Min();\n \
    \       var maxDigitNameValue = digitNames.Max();\n        var minDigitNameValue\
    \ = digitNames.Min();\n        var maxDigitValueName = digits.Max();\n       \
    \ var minDigitValueName = digits.Min();\n        var maxDigitNameNameValue = digitNames.Max();\n\
    \        var minDigitNameNameValue = digitNames.Min();\n        var maxDigitValueValueName\
    \ = digits.Max();\n        var minDigitValueValueName = digits.Min();\n      \
    \  var maxDigitNameValueNameValue = digitNames.Max();\n        var minDigitNameValueNameValue\
    \ = digitNames.Min();\n        var maxDigitValueValueValueName = digits.Max();\n\
    \        var minDigitValueValueValueName = digits.Min();\n        var maxDigitNameNameNameValue\
    \ = digitNames.Max();\n        var minDigitNameNameNameValue = digitNames.Min();\n\
    \        var maxDigitValueNameNameValue = digitNames.Max();\n        var minDigitValueNameNameValue\
    \ = digitNames.Min();\n        var maxDigitValueValueNameValue = digitNames.Max();\n\
    \        var minDigitValueValueNameValue = digitNames.Min();\n        var maxDigitNameNameValueNameValue\
    \ = digitNames.Max();\n        var minDigitNameNameValueNameValue = digitNames.Min();\n\
    \        var maxDigitValueNameValueNameValue = digitNames.Max();\n        var\
    \ minDigitValueNameValueNameValue = digitNames.Min();\n        var maxDigitValueValueValueNameValue\
    \ = digitNames.Max();\n        var minDigitValueValueValueNameValue = digitNames.Min();\n\
    \        var maxDigitNameNameNameNameValue = digitNames.Max();\n        var minDigitNameNameNameNameValue\
    \ = digitNames.Min();\n        var maxDigitValueNameNameNameValue = digitNames.Max();\n\
    \        var minDigitValueNameNameNameValue = digitNames.Min();\n        var maxDigitValueValueNameNameValue\
    \ = digitNames.Max();\n        var minDigitValueValueNameNameValue = digitNames.Min();\n\
    \        var maxDigitNameNameValueNameValue = digitNames.Max();\n        var minDigitValueNameValueNameValue\
    \ = digitNames.Min();\n        var maxDigitValueNameValueNameValue = digitNames.Max();\n\
    \        var minDigitValueValueNameValueName = digitNames.Min();\n        var\
    \ maxDigitValueValueValueNameValue = digitNames.Max();\n        var minDigitValueValueValueNameValue\
    \ = digit", "        if (arr.Count == 0) return new List<string>();\n        var\
    \ result = new List<string>();\n        var maxLength = arr.Max();\n        var\
    \ minLength = arr.Min();\n        var digits = new Dictionary<long, string>();\n\
    \        foreach (var item in arr) {\n            if (item < minLength) continue;\n\
    \            if (item > maxLength) continue;\n            digits.Add(item, GetDigitName(item));\n\
    \        }\n        var orderedDigits = digits.OrderBy(x => x.Key).ToArray();\n\
    \        var reversedDigits = orderedDigits.Reverse().ToArray();\n        var\
    \ reversedOrderedDigits = reversedDigits.OrderBy(x => x.Key).ToArray();\n    \
    \    var reversedOrderedOrderedDigits = reversedOrderedDigits.OrderBy(x => x.Key).ToArray();\n\
    \        var reversedOrderedOrderedOrderedDigits = reversedOrderedOrderedDigits.OrderBy(x\
    \ => x.Key).ToArray();\n        var reversedOrderedOrderedOrderedOrderedDigits\
    \ = reversedOrderedOrderedOrderedDigits.OrderBy(x => x.Key).ToArray();\n     \
    \   var reversedOrderedOrderedOrderedOrderedOrderedDigits = reversedOrderedOrderedOrderedOrderedDigits.OrderBy(x\
    \ => x.Key).ToArray();\n        var reversedOrderedOrderedOrderedOrderedOrderedOrderedDigits\
    \ = reversedOrderedOrderedOrderedOrderedOrderedDigits.OrderBy(x => x.Key).ToArray();\n\
    \        var reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits =\
    \ reversedOrderedOrderedOrderedOrderedOrderedOrderedDigits.OrderBy(x => x.Key).ToArray();\n\
    \        var reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits\
    \ = reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits.OrderBy(x\
    \ => x.Key).ToArray();\n        var reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits\
    \ = reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits.OrderBy(x\
    \ => x.Key).ToArray();\n        var reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits\
    \ = reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits.OrderBy(x\
    \ => x.Key).ToArray();\n        var reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits\
    \ = reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits.OrderBy(x\
    \ => x.Key).ToArray();\n        var reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits\
    \ = reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedDigits.OrderBy(x\
    \ => x.Key).ToArray();\n        var reversedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrderedOrdered",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var reversed = arr.Reverse();\n      \
    \  var digits = Enumerable.Range(1, 9).Select(i => reversed.ElementAtOrDefault(i)).ToArray();\n\
    \        var ones = Enumerable.Range(1, 9).Select(i => $\"One{i}\").ToArray();\n\
    \        var tens = Enumerable.Range(1, 9).Select(i => $\"Ten{i}\").ToArray();\n\
    \        var hundreds = Enumerable.Range(1, 9).Select(i => $\"Hundred{i}\").ToArray();\n\
    \        var thousands = Enumerable.Range(1, 9).Select(i => $\"Thousand{i}\").ToArray();\n\
    \        var tenThousands = Enumerable.Range(1, 9).Select(i => $\"TenThousand{i}\"\
    ).ToArray();\n        var oneThousands = Enumerable.Range(1, 9).Select(i => $\"\
    OneThousand{i}\").ToArray();\n        var tenMillions = Enumerable.Range(1, 9).Select(i\
    \ => $\"TenMillion{i}\").ToArray();\n        var oneMillions = Enumerable.Range(1,\
    \ 9).Select(i => $\"OneMillion{i}\").ToArray();\n        var tenBillions = Enumerable.Range(1,\
    \ 9).Select(i => $\"TenBillion{i}\").ToArray();\n        var oneBillions = Enumerable.Range(1,\
    \ 9).Select(i => $\"OneBillion{i}\").ToArray();\n        var tenTrillions = Enumerable.Range(1,\
    \ 9).Select(i => $\"TenTrillion{i}\").ToArray();\n        var oneTrillions = Enumerable.Range(1,\
    \ 9).Select(i => $\"OneTrillion{i}\").ToArray();\n        var tenQuadrillions\
    \ = Enumerable.Range(1, 9).Select(i => $\"TenQuadrillion{i}\").ToArray();\n  \
    \      var oneQuadrillions = Enumerable.Range(1, 9).Select(i => $\"OneQuadrillion{i}\"\
    ).ToArray();\n        var tenQuintillions = Enumerable.Range(1, 9).Select(i =>\
    \ $\"TenQuintillion{i}\").ToArray();\n        var oneQuintillions = Enumerable.Range(1,\
    \ 9).Select(i => $\"OneQuintillion{i}\").ToArray();\n        var tenSextillions\
    \ = Enumerable.Range(1, 9).Select(i => $\"TenSextil", "        if (arr.Count ==\
    \ 0) return new List<string>();\n        List<long> sorted = arr.OrderBy(i =>\
    \ i).ToList();\n        List<string> result = new List<string>();\n        long\
    \ curr = sorted[0];\n        long prev = 0;\n        bool first = true;\n    \
    \    for (int i = 0; i < sorted.Count; i++) {\n            if (sorted[i] > prev)\
    \ {\n                if (first) {\n                    result.Add(GetName(curr));\n\
    \                    first = false;\n                } else {\n              \
    \      result.Add(GetName(prev));\n                }\n                prev = sorted[i];\n\
    \            }\n        }\n        if (first) {\n            result.Add(GetName(curr));\n\
    \        }\n        return result;", "        if (arr.Count == 0) {\n        \
    \    return new List<string>();\n        }\n        List<string> result = new\
    \ List<string>();\n        long max = 0;\n        foreach (long num in arr) {\n\
    \            if (num > max) {\n                max = num;\n            }\n   \
    \     }\n        long min = arr.Min();\n        long mid = min + (max - min) /\
    \ 2;\n        long mid2 = mid / 10;\n        long mid3 = mid2 % 10;\n        long\
    \ mid4 = mid3 / 10;\n        long mid5 = mid4 % 10;\n        long mid6 = mid5\
    \ / 10;\n        long mid7 = mid6 % 10;\n        long mid8 = mid7 / 10;\n    \
    \    long mid9 = mid8 % 10;\n        long mid10 = mid9 / 10;\n        long mid11\
    \ = mid10 % 10;\n        long mid12 = mid11 / 10;\n        long mid13 = mid12\
    \ % 10;\n        long mid14 = mid13 / 10;\n        long mid15 = mid14 % 10;\n\
    \        long mid16 = mid15 / 10;\n        long mid17 = mid16 % 10;\n        long\
    \ mid18 = mid17 / 10;\n        long mid19 = mid18 % 10;\n        long mid20 =\
    \ mid19 / 10;\n        long mid21 = mid20 % 10;\n        long mid22 = mid21 /\
    \ 10;\n        long mid23 = mid22 % 10;\n        long mid24 = mid23 / 10;\n  \
    \      long mid25 = mid24 % 10;\n        long mid26 = mid25 / 10;\n        long\
    \ mid27 = mid26 % 10;\n        long mid28 = mid27 / 10;\n        long mid29 =\
    \ mid28 % 10;\n        long mid30 = mid29 / 10;\n        long mid31 = mid30 %\
    \ 10;\n        long mid32 = mid31 / 10;\n        long mid33 = mid32 % 10;\n  \
    \      long mid34 = mid33 / 10;\n        long mid35 = mid34 % 10;\n        long\
    \ mid36 = mid35 / 10;\n        long mid37 = mid36 % 10;\n        long mid38 =\
    \ mid37 / 10;\n        long mid39 = mid38 % 10;\n        long mid40 = mid39 /\
    \ 10;\n        long mid41 = mid40 % 10;\n        long mid42 = mid41 / 10;\n  \
    \      long mid43 = mid42 % 10;\n        long mid44 = mid43 / 10;\n        long\
    \ mid45 = mid44 % 10;\n        long mid46 = mid45 / 10;\n        ", "        if\
    \ (arr.Count == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var digits = new Dictionary<long, string>();\n        var digitNames\
    \ = new Dictionary<long, string>();\n        foreach (var item in arr) {\n   \
    \         if (item < 1 || item > 9) continue;\n            digits.Add(item, ((int)item).ToString());\n\
    \            digitNames.Add(item, ((int)item).ToString());\n        }\n      \
    \  foreach (var item in digits) {\n            var key = item.Key;\n         \
    \   var value = item.Value;\n            var reversed = new List<long>();\n  \
    \          foreach (var item in digits) {\n                if (item.Key == key)\
    \ {\n                    reversed.Add(item.Value);\n                }\n      \
    \      }\n            reversed.Reverse();\n            foreach (var item in reversed)\
    \ {\n                result.Add(digitNames[item]);\n            }\n        }\n\
    \        return result;", "        if (arr.Count == 0) {\n            return new\
    \ List<string>();\n        }\n        List<long> reversed = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n >= 1 && n <= 9) {\n    \
    \            reversed.Add(n);\n            }\n        }\n        List<string>\
    \ result = new List<string>();\n        foreach (long n in reversed) {\n     \
    \       string name = GetName(n);\n            result.Add(name);\n        }\n\
    \        return result;", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        if (arr.Count == 1)\n            return new List<string>(new\
    \ string[]{(string)arr.First().ToString()});\n        List<long> reversed = new\
    \ List<long>(arr.Count);\n        foreach (long i in arr)\n            reversed.Add(i);\n\
    \        reversed.Reverse();\n        List<string> result = new List<string>(arr.Count);\n\
    \        foreach (long i in reversed)\n            result.Add(GetName(i));\n \
    \       return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var min = arr.Min();\n    \
    \    var max = arr.Max();\n        var digits = new List<int>();\n        var\
    \ digitNames = new List<string>();\n        foreach (var n in arr) {\n       \
    \     if (n >= min && n <= max) {\n                digits.Add(n);\n          \
    \  }\n        }\n        foreach (var d in digits) {\n            digitNames.Add(digitNames[digits.IndexOf(d)]);\n\
    \        }\n        foreach (var n in digits) {\n            result.Add(digitNames[digits.IndexOf(n)]);\n\
    \        }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        if (max\
    \ > 9) max = 9L;\n        if (min < 1) min = 1L;\n        long diff = max - min;\n\
    \        List<string> result = new List<string>();\n        long curr = min;\n\
    \        while (curr < max) {\n            result.Add(GetName(curr));\n      \
    \      curr += diff;\n        }\n        long last = arr.Last();\n        if (last\
    \ == 9L) {\n            result.Add(GetName(last));\n        }\n        return\
    \ result;", "        List<string> result = new List<string>();\n        if (arr.Count\
    \ > 0) {\n            long max = arr.Max();\n            long min = arr.Min();\n\
    \            long range = max - min + 1;\n            long tens = 10 * range;\n\
    \            long hundreds = 100 * range;\n            long thousands = 1000 *\
    \ range;\n            long tenThousands = 10000 * range;\n            long oneThousands\
    \ = 100000 * range;\n            long oneHundreds = 1000000 * range;\n       \
    \     long oneThousandHundreds = 10000000 * range;\n            long oneThousandThousands\
    \ = 100000000 * range;\n            long oneHundredThousands = 1000000000 * range;\n\
    \            long oneHundredThousandThousands = 10000000000 * range;\n       \
    \     long oneThousandThousandThousands = 100000000000 * range;\n            long\
    \ oneHundredThousandThousandThousands = 1000000000000 * range;\n            long\
    \ oneHundredThousandThousandThousands = 10000000000000 * range;\n            long\
    \ oneHundredThousandThousandThousands = 100000000000000 * range;\n           \
    \ long oneHundredThousandThousandThousands = 1000000000000000 * range;\n     \
    \       long oneHundredThousandThousandThousands = 10000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 100000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 10000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 100000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 10000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 100000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 10000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 100000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 10000000000000000 * range;\n\
    \            long oneHundredThousandThousandThousands = 100000000000000000 * range;\n\
    \            ", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        List<string> result = new List<string>();\n        long maxValue = arr.Max();\n\
    \        long minValue = arr.Min();\n        long maxDigit = maxValue / 10;\n\
    \        long minDigit = minValue / 10;\n        long digit = minDigit;\n    \
    \    while (digit <= maxDigit) {\n            string name = GetName(digit);\n\
    \            if (name != null)\n                result.Add(name);\n          \
    \  digit++;\n        }\n        long reversedMaxValue = maxDigit * 10;\n     \
    \   long reversedMinValue = reversedMaxValue - minDigit;\n        long reversedDigit\
    \ = reversedMinValue;\n        while (reversedDigit >= minDigit) {\n         \
    \   string name = GetName(reversedDigit);\n            if (name != null)\n   \
    \             result.Add(name);\n            reversedDigit--;\n        }\n   \
    \     return result;", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        var result = new List<string>();\n        var ones = arr.Where(x => x\
    \ >= 1 && x <= 9).ToList();\n        var tens = arr.Where(x => x >= 10 && x <=\
    \ 99).ToList();\n        var hundreds = arr.Where(x => x >= 100 && x <= 999).ToList();\n\
    \        var thousands = arr.Where(x => x >= 1000 && x <= 9999).ToList();\n  \
    \      var tenThousands = arr.Where(x => x >= 10000 && x <= 99999).ToList();\n\
    \        var oneThousands = arr.Where(x => x >= 100000 && x <= 999999).ToList();\n\
    \        var oneHundreds = arr.Where(x => x >= 1000000 && x <= 999999999).ToList();\n\
    \        var oneThousandThousands = arr.Where(x => x >= 10000000 && x <= 99999999999).ToList();\n\
    \        var oneThousandHundreds = arr.Where(x => x >= 1000000000 && x <= 999999999).ToList();\n\
    \        var oneThousandThousandHundreds = arr.Where(x => x >= 1000000000 && x\
    \ <= 99999999999).ToList();\n        var oneHundredThousands = arr.Where(x =>\
    \ x >= 10000000000 && x <= 999999999999).ToList();\n        var oneHundredThousandHundreds\
    \ = arr.Where(x => x >= 10000000000 && x <= 999999999999).ToList();\n        var\
    \ oneHundredThousandThousands = arr.Where(x => x >= 100000000000 && x <= 999999999999999).ToList();\n\
    \        var oneHundredThousandThousandHundreds = arr.Where(x => x >= 1000000000000\
    \ && x <= 999999999999999).ToList();\n        var oneHundredThousandThousandThousands\
    \ = arr.Where(x => x >= 10000000000000 && x <= 9999999999999999).ToList();\n \
    \       var oneHundredThousandThousandThousandHundreds = arr.Where(x => x >= 100000000000000\
    \ && x <= 9999999999999999).ToList();\n        var oneHundredThousandThousandThousandThousands\
    \ = arr.Where(x => x >= 1000000000000000 && x <= 9999999999999999999).ToList();\n\
    \        var oneHundredThousandThousandThousandThousandHundreds = arr.Where(x\
    \ => x >= 10000000000000000 && x <= 9999999999999999999).", "        if (arr.Count\
    \ == 0) return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long maxValue = arr.Max();\n        long minValue = arr.Min();\n    \
    \    long maxDigit = maxValue % 10;\n        long minDigit = minValue % 10;\n\
    \        long maxDigitName = GetDigitName(maxDigit);\n        long minDigitName\
    \ = GetDigitName(minDigit);\n        long maxDigitValue = maxValue / 10;\n   \
    \     long minDigitValue = minValue / 10;\n        long maxDigitValueName = GetDigitName(maxDigitValue);\n\
    \        long minDigitValueName = GetDigitName(minDigitValue);\n        long maxDigitName\
    \ = GetDigitName(maxDigit);\n        long minDigitName = GetDigitName(minDigit);\n\
    \        long maxDigitValue = maxValue / 10;\n        long minDigitValue = minValue\
    \ / 10;\n        long maxDigitValueName = GetDigitName(maxDigitValue);\n     \
    \   long minDigitValueName = GetDigitName(minDigitValue);\n        long maxDigitName\
    \ = GetDigitName(maxDigit);\n        long minDigitName = GetDigitName(minDigit);\n\
    \        long maxDigitValue = maxValue / 10;\n        long minDigitValue = minValue\
    \ / 10;\n        long maxDigitValueName = GetDigitName(maxDigitValue);\n     \
    \   long minDigitValueName = GetDigitName(minDigitValue);\n        long maxDigitName\
    \ = GetDigitName(maxDigit);\n        long minDigitName = GetDigitName(minDigit);\n\
    \        long maxDigitValue = maxValue / 10;\n        long minDigitValue = minValue\
    \ / 10;\n        long maxDigitValueName = GetDigitName(maxDigitValue);\n     \
    \   long minDigitValueName = GetDigitName(minDigitValue);\n        long maxDigitName\
    \ = GetDigitName(maxDigit);\n        long minDigitName = GetDigitName(minDigit);\n\
    \        long maxDigitValue = maxValue / 10;\n        long minDigitValue = minValue\
    \ / 10;\n        long maxDigitValueName = GetDigitName(maxDigitValue);\n     \
    \   long minDigitValueName = GetDigitName(minDigitValue);\n        long maxDigitName\
    \ = GetDigitName(maxDigit);\n        long minDigitName = GetDigitName(minDigit);\n\
    \        long maxDigitValue = maxValue / 10;\n        long minDigitValue = minValue\
    \ / 10;\n        long maxDigitValueName = GetDigitName(maxDigitValue);\n     \
    \   long minDigitValueName = GetDigitName(minDigitValue);\n        long maxDigitName\
    \ = GetDigitName(maxDigit);\n        long minDigitName = GetDigitName(minDigit);\n\
    \        long maxDigitValue = maxValue / 10;\n        ", "        List<string>\
    \ result = new List<string>();\n        if (arr.Any()) {\n            long max\
    \ = arr.Max();\n            long min = arr.Min();\n            long length = max\
    \ - min + 1;\n            long tens = 10L;\n            long ones = 1L;\n    \
    \        long tensTens = tens * tens;\n            long onesOnes = ones * ones;\n\
    \            long tensOnes = tens * ones;\n            long onesTens = ones *\
    \ tens;\n            long tensTensTens = tens * tens * tens;\n            long\
    \ onesTensOnes = ones * tens * ones;\n            long tensOnesTens = tens * ones\
    \ * tens;\n            long onesOnesOnes = ones * ones * ones;\n            long\
    \ tensOnesTensOnes = tens * ones * ones * ones;\n            long onesTensTensOnes\
    \ = ones * tens * tens * ones;\n            long onesTensOnesOnes = ones * tens\
    \ * ones * ones;\n            long tensTensTensOnes = tens * tens * tens * ones;\n\
    \            long onesTensTensOnesOnes = ones * tens * tens * ones * ones;\n \
    \           long onesTensOnesTensOnes = ones * tens * ones * ones * tens;\n  \
    \          long onesOnesTensTensOnes = ones * ones * ones * tens * ones;\n   \
    \         long onesTensOnesOnesOnes = ones * tens * ones * ones * ones;\n    \
    \        long tensTensTensTensOnes = tens * tens * tens * tens * ones;\n     \
    \       long onesTensTensTensOnesOnes = ones * tens * tens * ones * ones * ones;\n\
    \            long onesTensOnesTensOnesOnes = ones * tens * ones * ones * tens\
    \ * ones;\n            long onesOnesTensTensOnesOnes = ones * ones * ones * tens\
    \ * ones * ones;\n            long onesTensOnesOnesTensOnes = ones * tens * ones\
    \ * ones * ones * tens;\n            long onesTensOnesTensOnesOnesOnes = ones\
    \ * tens * ones * ones * ones * ones * ones;\n            long onesTensTensTensTensOnes\
    \ = tens * tens * tens * tens * ones * one", "        if (arr.Count == 0) {\n\
    \            return new List<string>();\n        }\n        List<long> reversed\
    \ = new List<long>();\n        foreach (long n in arr) {\n            if (n >=\
    \ 1 && n <= 9) {\n                reversed.Add(n);\n            }\n        }\n\
    \        List<string> result = new List<string>();\n        foreach (long n in\
    \ reversed) {\n            string name = GetName(n);\n            result.Add(name);\n\
    \        }\n        return result;", "        if (arr.Count == 0) {\n        \
    \    return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        var ones = arr.Where(x => x == 1L).ToList();\n        var tens = arr.Where(x\
    \ => x == 10L).ToList();\n        var hundreds = arr.Where(x => x == 100L).ToList();\n\
    \        var thousands = arr.Where(x => x == 1000L).ToList();\n        var millions\
    \ = arr.Where(x => x == 1000000L).ToList();\n        var billions = arr.Where(x\
    \ => x == 1000000000L).ToList();\n        var trillions = arr.Where(x => x ==\
    \ 1000000000000L).ToList();\n        var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n\
    \        var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var sextillions = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var septillions = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var octillions = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var nonillions = arr.Where(x => x == 1000000000000000000000000000000L).ToList();\n\
    \        var onesAndTens = ones.Concat(tens).ToList();\n        var onesAndHundreds\
    \ = ones.Concat(tens).Concat(hundreds).ToList();\n        var onesAndThousands\
    \ = ones.Concat(tens).Concat(hundreds).Concat(thousands).ToList();\n        var\
    \ onesAndMillions = ones.Concat(tens).Concat(hundreds).Concat(thousands).Concat(millions).ToList();\n\
    \        var onesAndBillions = ones.Concat(tens).Concat(hundreds).Concat(thousands).Concat(millions).Concat(billions).ToList();\n\
    \        var onesAndTrillions = ones.Concat(tens).Concat(hundreds).Concat(thousands).Concat(millions).Concat(billions).Concat(trillions).ToList();\n\
    \        var onesAndQuadrillions = ones.Concat(tens).Concat(hundreds).Concat(thousands).Concat(millions).Concat(billions).Concat(trillions).Concat(quadrillions).ToList();\n\
    \        var onesAndQuintillions = ones.Concat(tens).Concat(hundreds).Concat(thousands).",
  "        if (arr.Count == 0)\n            return new List<string>();\n        List<string>\
    \ result = new List<string>();\n        long maxValue = arr.Max();\n        long\
    \ minValue = arr.Min();\n        long maxDigit = Convert.ToInt64(Math.Pow(10,\
    \ maxValue.ToString().Length - 1));\n        long minDigit = Convert.ToInt64(Math.Pow(10,\
    \ minValue.ToString().Length - 1));\n        long digit = minDigit;\n        string\
    \ lastDigit = Convert.ToString(digit);\n        string lastDigitName = lastDigit.Substring(0,\
    \ lastDigit.Length - 1);\n        string lastDigitNameReversed = lastDigitName.Substring(1,\
    \ lastDigitName.Length - 2);\n        string lastDigitNameReversedReversed = lastDigitNameReversed.Substring(0,\
    \ lastDigitNameReversed.Length - 1);\n        string lastDigitNameReversedReversedReversed\
    \ = lastDigitNameReversedReversed.Substring(1, lastDigitNameReversedReversed.Length\
    \ - 2);\n        string lastDigitNameReversedReversedReversedReversed = lastDigitNameReversedReversedReversed.Substring(0,\
    \ lastDigitNameReversedReversedReversed.Length - 1);\n        string lastDigitNameReversedReversedReversedReversedReversed\
    \ = lastDigitNameReversedReversedReversedReversed.Substring(1, lastDigitNameReversedReversedReversedReversed.Length\
    \ - 2);\n        string lastDigitNameReversedReversedReversedReversedReversedReversed\
    \ = lastDigitNameReversedReversedReversedReversedReversedReversed.Substring(0,\
    \ lastDigitNameReversedReversedReversedReversedReversedReversed.Length - 1);\n\
    \        string lastDigitNameReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = lastDigitNameReversedReversedReversedReversedReversedReversedReversedReversedReversed.Substring(1,\
    \ lastDigitNameReversedReversedReversedReversedReversedReversedReversedReversed.Length\
    \ - 2);\n        string lastDigitNameReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = lastDigitNameReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.Substring(0,\
    \ lastDigitNameReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed.Length\
    \ - 1);\n        string lastDigitNameReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = lastDigitNameReversed", "        if (arr.Count == 0) return new List<string>();\n\
    \        if (arr.Count == 1) return new List<string>(new string[]{(string)arr[0]});\n\
    \        if (arr.Count > 9) return new List<string>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        List<long> reversed = new List<long>();\n\
    \        foreach (long n in arr) {\n            if (n < min || n > max) continue;\n\
    \            reversed.Add(n);\n        }\n        List<string> result = new List<string>();\n\
    \        foreach (long n in reversed) {\n            string name = GetName(n);\n\
    \            result.Add(name);\n        }\n        return result;", "        if\
    \ (arr.Count == 0) {\n            return new List<string>();\n        }\n    \
    \    var result = new List<string>();\n        var ones = arr.Where(x => x ==\
    \ 1L).ToList();\n        var tens = arr.Where(x => x == 10L).ToList();\n     \
    \   var hundreds = arr.Where(x => x == 100L).ToList();\n        var thousands\
    \ = arr.Where(x => x == 1000L).ToList();\n        var millions = arr.Where(x =>\
    \ x == 1000000L).ToList();\n        var billions = arr.Where(x => x == 1000000000L).ToList();\n\
    \        var trillions = arr.Where(x => x == 1000000000000L).ToList();\n     \
    \   var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n    \
    \    var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var onesAndTens = ones.Concat(tens).ToList();\n        var onesAndHundreds\
    \ = ones.Concat(hundreds).ToList();\n        var onesAndThousands = ones.Concat(thousands).ToList();\n\
    \        var onesAndMillions = ones.Concat(millions).ToList();\n        var onesAndBillions\
    \ = ones.Concat(billions).ToList();\n        var onesAndTrillions = ones.Concat(trillions).ToList();\n\
    \        var onesAndQuadrillions = ones.Concat(quadrillions).ToList();\n     \
    \   var onesAndQuintillions = ones.Concat(quintillions).ToList();\n        var\
    \ onesAndOnesAndTens = onesAndTens.Concat(onesAndHundreds).ToList();\n       \
    \ var onesAndOnesAndHundreds = onesAndOnesAndTens.Concat(onesAndThousands).ToList();\n\
    \        var onesAndOnesAndThousands = onesAndOnesAndHundreds.Concat(onesAndMillions).ToList();\n\
    \        var onesAndOnesAndMillions = onesAndOnesAndThousands.Concat(onesAndBillions).ToList();\n\
    \        var onesAndOnesAndBillions = onesAndOnesAndMillions.Concat(onesAndTrillions).ToList();\n\
    \        var onesAndOnesAndTrillions = onesAndOnesAndBillions.Concat(onesAndQuadrillions).ToList();\n\
    \        var onesAndOnesAndQuadrillions = onesAndOnesAndTrillions.Concat(onesAnd",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var ones = arr.Where(x => x == 1L).ToList();\n\
    \        var tens = arr.Where(x => x == 10L).ToList();\n        var hundreds =\
    \ arr.Where(x => x == 100L).ToList();\n        var thousands = arr.Where(x =>\
    \ x == 1000L).ToList();\n        var millions = arr.Where(x => x == 1000000L).ToList();\n\
    \        var billions = arr.Where(x => x == 1000000000L).ToList();\n        var\
    \ trillions = arr.Where(x => x == 1000000000000L).ToList();\n        var quadrillions\
    \ = arr.Where(x => x == 1000000000000000L).ToList();\n        var quintillions\
    \ = arr.Where(x => x == 1000000000000000000L).ToList();\n        var thousandsTens\
    \ = arr.Where(x => x == 1000L).Where(y => y == 10L).ToList();\n        var millionsHundreds\
    \ = arr.Where(x => x == 1000000L).Where(y => y == 100L).ToList();\n        var\
    \ billionsThousands = arr.Where(x => x == 1000000000L).Where(y => y == 1000L).ToList();\n\
    \        var trillionsHundreds = arr.Where(x => x == 1000000000000L).Where(y =>\
    \ y == 100000L).ToList();\n        var quadrillionsThousands = arr.Where(x =>\
    \ x == 1000000000000000L).Where(y => y == 1000000L).ToList();\n        var quintillionsThousands\
    \ = arr.Where(x => x == 1000000000000000000L).Where(y => y == 10000000L).ToList();\n\
    \        var thousandsHundreds = arr.Where(x => x == 1000L).Where(y => y == 100L).ToList();\n\
    \        var millionsThousands = arr.Where(x => x == 1000000L).Where(y => y ==\
    \ 1000L).ToList();\n        var billionsThousands = arr.Where(x => x == 1000000000L).Where(y\
    \ => y == 10000L).ToList();\n        var trillionsThousands = arr.Where(x => x\
    \ == 1000000000000L).Where(y => y == 100000L).ToList();\n        var quadrillionsThousands\
    \ = arr.Where(x => x == 1000000000000000L).Where", "        if (arr.Count == 0)\
    \ return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long range\
    \ = max - min;\n        long digit = range / 10;\n        string one = \"One\"\
    ;\n        string two = \"Two\";\n        string three = \"Three\";\n        string\
    \ four = \"Four\";\n        string five = \"Five\";\n        string six = \"Six\"\
    ;\n        string seven = \"Seven\";\n        string eight = \"Eight\";\n    \
    \    string nine = \"Nine\";\n        string ten = \"Ten\";\n        string hundred\
    \ = \"Hundred\";\n        string thousand = \"Thousand\";\n        string million\
    \ = \"Million\";\n        string billion = \"Billion\";\n        string trillion\
    \ = \"Trillion\";\n        string quadrillion = \"Quadrillion\";\n        string\
    \ quintillion = \"Quintillion\";\n        string sextillion = \"Sextillion\";\n\
    \        string septillion = \"Septillion\";\n        string octillion = \"Octillion\"\
    ;\n        string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintillion = \"Quinvigintillion",
  "        List<string> result = new List<string>();\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        long max = arr.Max();\n  \
    \      long min = arr.Min();\n        long range = (max - min) + 1;\n        long\
    \ digit = max - min;\n        long tens = range / 10;\n        long ones = range\
    \ % 10;\n        long tensDigit = tens / 10;\n        long onesDigit = ones %\
    \ 10;\n        long tensDigitReversed = tensDigit * 10;\n        long onesDigitReversed\
    \ = onesDigit * 10;\n        long tensDigitReversedReversed = tensDigitReversed\
    \ / 10;\n        long onesDigitReversedReversed = onesDigitReversed % 10;\n  \
    \      string tensDigitName = GetDigitName(tensDigit);\n        string onesDigitName\
    \ = GetDigitName(onesDigit);\n        string tensDigitNameReversed = GetDigitName(tensDigitReversed);\n\
    \        string onesDigitNameReversed = GetDigitName(onesDigitReversed);\n   \
    \     string tensDigitNameReversedReversed = GetDigitName(tensDigitReversedReversed);\n\
    \        string onesDigitNameReversedReversed = GetDigitName(onesDigitReversedReversed);\n\
    \        string tensDigitNameReversedReversedName = GetDigitName(tensDigitReversedReversed);\n\
    \        string onesDigitNameReversedReversedName = GetDigitName(onesDigitReversedReversed);\n\
    \        string tensDigitNameReversedReversedNameReversed = GetDigitName(tensDigitReversedReversedReversed);\n\
    \        string onesDigitNameReversedReversedNameReversed = GetDigitName(onesDigitReversedReversedReversed);\n\
    \        string tensDigitNameReversedReversedNameReversedReversed = GetDigitName(tensDigitReversedReversedReversedReversed);\n\
    \        string onesDigitNameReversedReversedNameReversedReversed = GetDigitName(onesDigitReversedReversedReversedReversed);\n\
    \        string tensDigitNameReversedReversedNameReversedReversedReversed = GetDigitName(tensDigitReversedReversedReversedReversedReversed);\n\
    \        string onesDigitNameReversedReversedNameReversedReversedReversedReversed\
    \ = GetDigitName(onesDigitReversedReversedReversedReversedReversedReversed);\n\
    \        string tensDigitNameReversedReversedNameReversedReversedReversedReversedReversed\
    \ = GetDigitName(tensDigitReverse", "        if (arr.Count == 0) {\n         \
    \   return new List<string>();\n        }\n        List<string> result = new List<string>();\n\
    \        long maxValue = arr.Max();\n        long minValue = arr.Min();\n    \
    \    long maxDigit = maxValue / 10;\n        long minDigit = minValue / 10;\n\
    \        long maxDigitName = maxDigit == 0 ? \"Zero\" : maxDigit.ToString();\n\
    \        long minDigitName = minDigit == 0 ? \"Zero\" : minDigit.ToString();\n\
    \        long maxDigitNameLength = maxDigitName.Length;\n        long minDigitNameLength\
    \ = minDigitName.Length;\n        string maxDigitName = maxDigitName.PadLeft(maxDigitNameLength,\
    \ '0');\n        string minDigitName = minDigitName.PadLeft(minDigitNameLength,\
    \ '0');\n        string maxDigitNameReverse = maxDigitName.Substring(maxDigitNameLength\
    \ - 1, 1);\n        string minDigitNameReverse = minDigitName.Substring(minDigitNameLength\
    \ - 1, 1);\n        string maxDigitNameReversed = maxDigitNameReverse.ToUpper();\n\
    \        string minDigitNameReversed = minDigitNameReverse.ToUpper();\n      \
    \  string maxDigitNameReversedLength = maxDigitNameReversed.Length;\n        string\
    \ minDigitNameReversedLength = minDigitNameReversed.Length;\n        string maxDigitNameReversedReversed\
    \ = maxDigitNameReversed.Substring(maxDigitNameReversedLength - 1, 1);\n     \
    \   string minDigitNameReversedReversed = minDigitNameReversed.Substring(minDigitNameReversedLength\
    \ - 1, 1);\n        string maxDigitNameReversedReversedLength = maxDigitNameReversedReversed.Length;\n\
    \        string minDigitNameReversedReversedLength = minDigitNameReversedReversed.Length;\n\
    \        string maxDigitNameReversedReversedReversed = maxDigitNameReversedReversed.Substring(maxDigitNameReversedReversedLength\
    \ - 1, 1);\n        string minDigitNameReversedReversedReversed = minDigitNameReversedReversed.Substring(minDigitNameReversedReversedLength\
    \ - 1, 1);\n        string maxDigitNameReversedReversedReversedLength = maxDigitNameReversedReversedReversed.Length;\n\
    \        string minDigitNameReversedReversedReversedLength = minDigitNameReversedReversedReversed.Length;\n\
    \        string maxDigitNameReversedReversedReversedReversedReversed = maxDigitNameReversedReversedReversedReversed.Substring(maxDigitNameReversedReversedReversedReversedLength\
    \ - 1, ", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var digits = new\
    \ List<string>();\n        var digitNames = new List<string>();\n        var maxDigit\
    \ = arr.Max();\n        var minDigit = arr.Min();\n        var maxDigitName =\
    \ digitNames.Max();\n        var minDigitName = digitNames.Min();\n        var\
    \ maxDigitValue = digits.Max();\n        var minDigitValue = digits.Min();\n \
    \       var maxDigitNameValue = digitNames.Max();\n        var minDigitNameValue\
    \ = digitNames.Min();\n        var maxDigitValueName = digits.Max();\n       \
    \ var minDigitValueName = digits.Min();\n        var maxDigitNameNameValue = digitNames.Max();\n\
    \        var minDigitNameNameValue = digitNames.Min();\n        var maxDigitValueValueName\
    \ = digits.Max();\n        var minDigitValueValueName = digits.Min();\n      \
    \  var maxDigitNameValueNameValue = digitNames.Max();\n        var minDigitNameValueNameValue\
    \ = digitNames.Min();\n        var maxDigitValueValueValueName = digits.Max();\n\
    \        var minDigitValueValueValueName = digits.Min();\n        var maxDigitNameValueNameValueName\
    \ = digitNames.Max();\n        var minDigitNameValueNameValueName = digitNames.Min();\n\
    \        var maxDigitValueValueValueValueName = digits.Max();\n        var minDigitValueValueValueValueName\
    \ = digits.Min();\n        var maxDigitNameValueNameValueValueName = digitNames.Max();\n\
    \        var minDigitNameValueNameValueValueName = digitNames.Min();\n       \
    \ var maxDigitValueValueValueValueValueName = digits.Max();\n        var minDigitValueValueValueValueValueName\
    \ = digits.Min();\n        var maxDigitNameValueNameValueValueValueName = digitNames.Max();\n\
    \        var minDigitNameValueNameValueValueValueName = digitNames.Min();\n  \
    \      var maxDigitValueValueValueValueValueValueName = digits.Max();\n      \
    \  var minDigitValueValueValueValueValueValueName = digits.Min();\n        var\
    \ maxDigitNameValueNameValueValueValueValueName = digitNames.Max();\n        var\
    \ minDigitNameValueNameValueValueValueValueName = digitNames.Min();\n        var\
    \ maxDigitValueValueValueValueValueValueName = digits.Max();\n        var minDigitValueValueValueValueValueValueName\
    \ = digits.Min();\n        var maxDigitNameValueNameValueValueValueValueName =\
    \ digitNames.Max();\n        var minDigitNameValueNameValueValueValueValueName\
    \ = digitNames.Min();\n        var maxDigitValueValueValueValueValueValueValueName\
    \ = digits.Max();\n        var minDigitValueValueValueValueValueValueValueName\
    \ = digits.Min();\n        var maxDigitNameValueNameValueValueValueValueValueName\
    \ = digitNames.Max();", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        List<long> newArr = new List<long>();\n        List<string> newList =\
    \ new List<string>();\n        long temp;\n        string tempStr;\n        bool\
    \ isFirst = true;\n        bool isLast = true;\n        bool isMiddle = true;\n\
    \        bool isFirstMiddle = true;\n        bool isLastMiddle = true;\n     \
    \   bool isFirstLast = true;\n        bool isLastFirst = true;\n        bool isFirstMiddleLast\
    \ = true;\n        bool isMiddleMiddle = true;\n        bool isLastMiddleLast\
    \ = true;\n        bool isFirstLastLast = true;\n        bool isMiddleLastLast\
    \ = true;\n        bool isFirstMiddleMiddle = true;\n        bool isMiddleMiddleMiddle\
    \ = true;\n        bool isLastMiddleMiddleLast = true;\n        bool isFirstLastMiddleMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstMiddleLastMiddle = true;\n        bool isMiddleMiddleLastMiddle\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isMiddleLastLastMiddle = true;\n        bool isFirstMiddleMiddleLast\
    \ = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddle = true;\n        bool isMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastMiddleMiddle = true;\n        bool isMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool isFirstLastLastMiddle\
    \ = true;\n        bool isMiddleMiddleMiddleLast = true;\n        bool isLastMiddleMiddleMiddleLast\
    \ = true;\n        bool isFirstLastLastMiddle = true;\n        bool isMiddleMiddleMiddleLast\
    \ = true;\n        bool isLastMiddleMiddleMiddleLast = true;\n        bool ",
  "        if (arr.Count == 0) return new List<string>();\n        if (arr.Count ==\
    \ 1) return new List<string>(new string[]{(string)arr[0]});\n        List<long>\
    \ sortedArr = arr.OrderBy(x => x).ToList();\n        List<string> result = new\
    \ List<string>();\n        long curr = sortedArr[0];\n        string currStr =\
    \ string.Empty;\n        string nextStr = string.Empty;\n        while (curr !=\
    \ 0) {\n            currStr = GetName(curr);\n            if (currStr.Length >\
    \ 0) {\n                nextStr = GetName(curr + 1);\n                if (nextStr.Length\
    \ > 0) {\n                    result.Add(currStr + \" \" + nextStr);\n       \
    \         }\n            }\n            curr = curr >> 1;\n        }\n       \
    \ return result;", "        List<string> result = new List<string>();\n      \
    \  if (arr.Count > 0) {\n            long min = arr.Min();\n            long max\
    \ = arr.Max();\n            long range = (max - min) + 1;\n            long digit\
    \ = min % 10;\n            long remainder = (min / 10) % 10;\n            long\
    \ tens = (min / 100) % 10;\n            long hundreds = (min / 1000) % 10;\n \
    \           long thousands = (min / 10000) % 10;\n            long tenThousands\
    \ = (min / 100000) % 10;\n            long hundredThousands = (min / 1000000)\
    \ % 10;\n            long thousandThousands = (min / 10000000) % 10;\n       \
    \     long millions = (min / 100000000) % 10;\n            long billions = (min\
    \ / 1000000000) % 10;\n            long trillions = (min / 10000000000) % 10;\n\
    \            long quadrillions = (min / 100000000000) % 10;\n            long\
    \ quintillions = (min / 1000000000000) % 10;\n            long sextillions = (min\
    \ / 10000000000000) % 10;\n            long septillions = (min / 100000000000000)\
    \ % 10;\n            long octillions = (min / 1000000000000000) % 10;\n      \
    \      long nonillions = (min / 10000000000000000) % 10;\n            long decillions\
    \ = (min / 100000000000000000) % 10;\n            long undecillions = (min / 1000000000000000000)\
    \ % 10;\n            long decillionThousands = (min / 10000000000000000000) %\
    \ 10;\n            long undecillionThousands = (min / 100000000000000000000) %\
    \ 10;\n            long quadrillionThousands = (min / 1000000000000000000000)\
    \ % 10;\n            long quintillionThousands = (min / 10000000000000000000000)\
    \ % 10;\n            long sextillionThousands = (min / 100000000000000000000000)\
    \ % 10;\n            long septillionThousands = (min / 1000000000000000000000000)\
    \ % 10;\n            long octillionThousands = (min / 10000000000000000000000000)\
    \ % 10;\n            long nonillionThousands = (min / 100000000000000000000000000)\
    \ % 10;\n            long billionThousands = (min / 1000000000000000000000000000)\
    \ % 10;\n            long trillionThousands = (min / 10000000000000000000000000000)\
    \ % 10;\n            long quadrillionThousands = (min / 100000000000000000000000000000)\
    \ % 10;\n            long quintillionThousands = (min / 1000000000000000000000000000000)\
    \ % 10;\n            long sextillionTh", "        if (arr.Count == 0) return new\
    \ List<string>();\n        var result = new List<string>();\n        var reversed\
    \ = arr.Reverse();\n        var digits = Enumerable.Range(1, 9).Select(i => reversed.Skip(i).First()).ToArray();\n\
    \        var names = new[] { \"One\", \"Two\", \"Three\", \"Four\", \"Five\",\
    \ \"Six\", \"Seven\", \"Eight\", \"Nine\" };\n        foreach (var digit in digits)\
    \ {\n            var index = digits.IndexOf(digit);\n            if (index >=\
    \ 0) {\n                result.Add(names[index]);\n            } else {\n    \
    \            result.Add(digit.ToString());\n            }\n        }\n       \
    \ return result;", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var digits = new\
    \ List<string>();\n        var reversed = arr.OrderByDescending(i => i).Reverse();\n\
    \        foreach (var item in reversed) {\n            if (item < 10) {\n    \
    \            digits.Add(string.Format(\"{0}\", item));\n            } else {\n\
    \                digits.Add(string.Format(\"{0}\", item % 10));\n            \
    \    result.Add(string.Format(\"{0}\", item / 10));\n            }\n        }\n\
    \        foreach (var item in digits) {\n            if (result.Contains(item))\
    \ {\n                result.Remove(item);\n            }\n        }\n        return\
    \ result;", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        List<string> result = new List<string>();\n        long maxValue\
    \ = arr.Max();\n        long minValue = arr.Min();\n        long maxDigit = maxValue\
    \ % 10;\n        long minDigit = minValue % 10;\n        long maxDigitName = maxDigit\
    \ == 0 ? \"Zero\" : ((int)maxDigit).ToString();\n        long minDigitName = minDigit\
    \ == 0 ? \"Zero\" : ((int)minDigit).ToString();\n        long maxDigitValue =\
    \ maxValue / 10;\n        long minDigitValue = minValue / 10;\n        long maxDigitValueName\
    \ = maxDigitValue == 0 ? \"Zero\" : ((int)maxDigitValue).ToString();\n       \
    \ long minDigitValueName = minDigitValue == 0 ? \"Zero\" : ((int)minDigitValue).ToString();\n\
    \        string maxDigitNameValue = maxDigitName + maxDigitValueName;\n      \
    \  string minDigitNameValue = minDigitName + minDigitValueName;\n        string\
    \ maxDigitNameNameValue = maxDigitName + minDigitNameValue;\n        string minDigitNameNameValue\
    \ = minDigitName + maxDigitNameValue;\n        string maxDigitValueNameValue =\
    \ maxDigitValueName + minDigitNameValue;\n        string minDigitValueNameValue\
    \ = minDigitValueName + maxDigitNameValue;\n        string maxDigitNameNameNameValue\
    \ = maxDigitName + minDigitNameNameValue;\n        string minDigitNameNameNameValue\
    \ = minDigitName + maxDigitNameNameValue;\n        string maxDigitValueNameNameValue\
    \ = maxDigitValueName + minDigitNameNameValue;\n        string minDigitValueNameNameValue\
    \ = minDigitValueName + maxDigitNameNameValue;\n        string maxDigitNameValueNameValue\
    \ = maxDigitName + minDigitValueNameValue;\n        string minDigitNameValueNameValue\
    \ = minDigitName + maxDigitValueNameValue;\n        string maxDigitValueNameNameValue\
    \ = maxDigitValueName + minDigitValueNameValue;\n        string minDigitValueNameNameValue\
    \ = minDigitValueName + maxDigitValueNameValue;\n        string maxDigitNameNameValueNameValue\
    \ = maxDigitName + minDigitNameNameValue;\n        string minDigitNameNameValueNameValue\
    \ = minDigitName + maxDigitNameNameValue;\n        string maxDigitValueNameValueNameValue\
    \ = maxDigitValueName + minDigitNameNameValue;\n        string minDigitValueNameValueNameValue\
    \ = minDigitValueName + maxDigitValueNameNameValue;\n        string maxDigitNameNameNameValueNameValue\
    \ = maxDigitName + minDigitNameNameValueNameValue;", "        if (arr.Count ==\
    \ 0) return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long digit\
    \ = max - min;\n        long tens = digit / 10;\n        long ones = digit % 10;\n\
    \        string tensName = GetName(tens);\n        string onesName = GetName(ones);\n\
    \        foreach (long num in arr) {\n            if (num < 1 || num > 9) continue;\n\
    \            long reversed = num * 10 + ones;\n            long reversedDigit\
    \ = reversed % 10;\n            long reversedOnes = reversed / 10;\n         \
    \   string reversedName = GetName(reversedDigit);\n            string reversedOnesName\
    \ = GetName(reversedOnes);\n            result.Add(string.Format(\"{0}{1}\", reversedName,\
    \ reversedOnesName));\n        }\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<string>();\n        }\n        List<string>\
    \ result = new List<string>();\n        long max = arr.Max();\n        long min\
    \ = arr.Min();\n        long length = max - min + 1;\n        long tens = 10L;\n\
    \        long hundreds = 100L;\n        long thousands = 1000L;\n        long\
    \ tenThousands = 10000L;\n        long hundredThousands = 100000L;\n        long\
    \ thousandThousands = 1000000L;\n        long millionThousands = 10000000L;\n\
    \        long billionThousands = 100000000L;\n        long trillionThousands =\
    \ 1000000000L;\n        long quadrillionThousands = 10000000000L;\n        long\
    \ quintillionThousands = 1000000000000L;\n        long sextillionThousands = 10000000000000L;\n\
    \        long septillionThousands = 100000000000000L;\n        long octillionThousands\
    \ = 1000000000000000L;\n        long nonillionThousands = 10000000000000000L;\n\
    \        long decillionThousands = 100000000000000000L;\n        long undecillionThousands\
    \ = 1000000000000000000L;\n        long decillionThousandsOne = decillionThousands;\n\
    \        long decillionThousandsTwo = decillionThousandsOne * 10L;\n        long\
    \ decillionThousandsThree = decillionThousandsTwo * 10L;\n        long decillionThousandsFour\
    \ = decillionThousandsThree * 10L;\n        long decillionThousandsFive = decillionThousandsFour\
    \ * 10L;\n        long decillionThousandsSix = decillionThousandsFive * 10L;\n\
    \        long decillionThousandsSeven = decillionThousandsSix * 10L;\n       \
    \ long decillionThousandsEight = decillionThousandsSeven * 10L;\n        long\
    \ decillionThousandsNine = decillionThousandsEight * 10L;\n        long decillionThousandsTen\
    \ = decillionThousandsN", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        List<string> result = new List<string>();\n        long cur = min;\n\
    \        while (cur <= max) {\n            long next = (cur + 9) % 10;\n     \
    \       result.Add(names[next]);\n            cur = next;\n        }\n       \
    \ long cur2 = min;\n        while (cur2 <= max) {\n            long next2 = (cur2\
    \ + 9) % 10;\n            result.Add(names[next2]);\n            cur2 = next2;\n\
    \        }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<long> result = new List<long>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long length = max - min + 1;\n       \
    \ long tens = 10L;\n        long hundreds = 100L;\n        long thousands = 1000L;\n\
    \        long tenThousands = 10000L;\n        long oneThousands = 100000L;\n \
    \       long oneHundreds = 1000000L;\n        long oneThousandHundreds = 10000000L;\n\
    \        long oneThousandThousands = 100000000L;\n        long oneHundredThousands\
    \ = 1000000000L;\n        long oneThousandHundredThousands = 10000000000L;\n \
    \       long oneThousandThousandHundreds = 100000000000L;\n        long oneHundredThousandThousands\
    \ = 1000000000000L;\n        long oneThousandHundredThousandHundreds = 10000000000000L;\n\
    \        long oneThousandThousandHundredThousands = 100000000000000L;\n      \
    \  long oneHundredThousandThousandHundredThousands = 1000000000000000L;\n    \
    \    long oneThousandHundredThousandHundredThousands = 10000000000000000L;\n \
    \       long oneThousandThousandHundredThousandHundreds = 100000000000000000L;\n\
    \        long oneHundredThousandThousandHundredThousandHundreds = 1000000000000000000L;\n\
    \        long oneThousandHundredThousandHundredThousandHundredThousands = 10000000000000000000L;\n\
    \        long oneThousandThousandHundredThousandHundredThousandHundreds = 100000000000000000000L;\n\
    \        long oneHundredThousandThousandHundredThousandHundredThousandHundredThousands\
    \ = 1000000000000000000000L;\n        long oneThousandHundredThousandHundredThousandHundredThousandHundredThousandHundreds\
    \ = 10000000000000000000000L;\n        long oneThousandThousandHundredThousandHundredThousandHundred",
  "        if (arr.Count == 0) return new List<string>();\n        List<long> sortedArr\
    \ = arr.OrderBy(x => x).ToList();\n        List<string> result = new List<string>();\n\
    \        long lastDigit = sortedArr.Last();\n        string lastDigitName = GetName(lastDigit);\n\
    \        foreach (long num in sortedArr) {\n            if (num < 1 || num > 9)\
    \ continue;\n            string name = GetName(num);\n            if (name ==\
    \ lastDigitName) continue;\n            result.Add(name);\n            lastDigitName\
    \ = name;\n        }\n        return result;", "        if (arr.Count == 0) {\n\
    \            return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        var digits = new List<string>();\n        var tens = new List<string>();\n\
    \        var hundreds = new List<string>();\n        var thousands = new List<string>();\n\
    \        var tenths = new List<string>();\n        var hundredths = new List<string>();\n\
    \        var thousandths = new List<string>();\n        var tenthths = new List<string>();\n\
    \        var hundredthths = new List<string>();\n        var thousandthths = new\
    \ List<string>();\n        var tenththths = new List<string>();\n        var hundredthths\
    \ = new List<string>();\n        var thousandthths = new List<string>();\n   \
    \     var tenththths = new List<string>();\n        var hundredthths = new List<string>();\n\
    \        var thousandthths = new List<string>();\n        var tenththths = new\
    \ List<string>();\n        var hundredthths = new List<string>();\n        var\
    \ thousandthths = new List<string>();\n        var tenththths = new List<string>();\n\
    \        var hundredthths = new List<string>();\n        var thousandthths = new\
    \ List<string>();\n        var tenththths = new List<string>();\n        var hundredthths\
    \ = new List<string>();\n        var thousandthths = new List<string>();\n   \
    \     var tenththths = new List<string>();\n        var hundredthths = new List<string>();\n\
    \        var thousandthths = new List<string>();\n        var tenththths = new\
    \ List<string>();\n        var hundredthths = new List<string>();\n        var\
    \ thousandthths = new List<string>();\n        var tenththths = new List<string>();\n\
    \        var hundredthths = new List<string>();\n        var thousandthths = new\
    \ List<string>();\n        var tenththths = new List<string>();\n        var hundredthths\
    \ = new List<string>();\n        var thousandthths = new List<string>();\n   \
    \     var tenththths = new List<string>();\n        var hundredthths = new List<string>();\n\
    \        var thousandthths = new List<string>();\n        var tenththths = new\
    \ List<string>();\n        var hundredthths = new List<string>();\n        var\
    \ thousandthths = new List<string>();\n        var tenththths = new List<string>();\n\
    \        var hundredthths = new List<string>();\n        var thousandthths = new\
    \ List<string>();\n        var tenththths = new List<string>();\n        var hundredthths\
    \ = new List<string>();\n        var thousandthths = new List<string>();\n   \
    \     var tenththths = new List<string>();\n        var hundredthths = new ",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        var result = new List<string>();\n        var reversed = arr.Reverse();\n\
    \        var digits = Enumerable.Range(1, 9).Select(i => reversed.ElementAt(i)).ToArray();\n\
    \        var names = new string[] {\n            \"One\", \"Two\", \"Three\",\
    \ \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        };\n  \
    \      var reversedDigits = Enumerable.Range(0, 9).Select(i => digits.ElementAt(i)).ToArray();\n\
    \        var reversedNames = Enumerable.Range(0, 9).Select(i => names.ElementAt(i)).ToArray();\n\
    \        var reversedDigitNames = Enumerable.Range(0, 9).Select(i => reversedNames.ElementAt(i)).ToArray();\n\
    \        var digitNames = Enumerable.Range(0, 9).Select(i => reversedDigitNames.ElementAt(i)).ToArray();\n\
    \        var digitNamesReversed = Enumerable.Range(0, 9).Select(i => digitNames.ElementAt(i)).ToArray();\n\
    \        var digitNamesReversedReversed = Enumerable.Range(0, 9).Select(i => digitNamesReversed.ElementAt(i)).ToArray();\n\
    \        var digitNamesReversedReversedReversed = Enumerable.Range(0, 9).Select(i\
    \ => digitNamesReversedReversed.ElementAt(i)).ToArray();\n        var digitNamesReversedReversedReversedReversed\
    \ = Enumerable.Range(0, 9).Select(i => digitNamesReversedReversedReversed.ElementAt(i)).ToArray();\n\
    \        var digitNamesReversedReversedReversedReversedReversed = Enumerable.Range(0,\
    \ 9).Select(i => digitNamesReversedReversedReversedReversed.ElementAt(i)).ToArray();\n\
    \        var digitNamesReversedReversedReversedReversedReversedReversed = Enumerable.Range(0,\
    \ 9).Select(i => digitNamesReversedReversedReversedReversedReversed.ElementAt(i)).ToArray();\n\
    \        var digitNamesReversedReversedReversedReversedReversedReversedReversed\
    \ = Enumerable.Range(0, 9).Select(i => digitNamesReversedReversedReversedReversedReversedReversed.ElementAt(i)).ToArray();\n\
    \        var digitNamesReversedReversedReversedReversedReversedReversedReversedReversedReversed\
    \ = Enumerable.Range(0, 9).Select(i => digitNamesReversedReversedReversedReversedReversedReversedReversedReversed.ElementAt(i)).",
  "        if (arr.Count == 0)\n            return new List<string>();\n        List<long>\
    \ reversed = new List<long>();\n        foreach (long i in arr)\n            reversed.Add(i);\n\
    \        reversed.Reverse();\n        List<string> result = new List<string>();\n\
    \        foreach (long i in reversed) {\n            string name = GetName(i);\n\
    \            if (name != null)\n                result.Add(name);\n        }\n\
    \        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        List<long> result = new List<long>();\n        long maxValue = arr.Max();\n\
    \        long minValue = arr.Min();\n        long maxDigit = maxValue / 10;\n\
    \        long minDigit = minValue / 10;\n        long digit = maxDigit;\n    \
    \    while (digit < minDigit) {\n            result.Add(digit + \"One\");\n  \
    \          digit += 10;\n        }\n        while (digit > maxDigit) {\n     \
    \       result.Add(digit + \"Ten\");\n            digit -= 10;\n        }\n  \
    \      foreach (long i in arr) {\n            if (i >= 1 && i <= 9) {\n      \
    \          result.Add(i);\n            }\n        }\n        return Reverse(result);",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var digits = new List<string>();\n        var ones\
    \ = new List<string>();\n        var tens = new List<string>();\n        var hundreds\
    \ = new List<string>();\n        var thousands = new List<string>();\n       \
    \ var tenThousands = new List<string>();\n        var hundredThousands = new List<string>();\n\
    \        var thousandThousands = new List<string>();\n        var hundredThousandThousands\
    \ = new List<string>();\n        var thousandThousandThousands = new List<string>();\n\
    \        var hundredThousandThousandThousands = new List<string>();\n        var\
    \ thousandThousandThousandThousands = new List<string>();\n        var hundredThousandThousandThousandThousands\
    \ = new List<string>();\n        var thousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var hundredThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var thousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var hundredThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var thousandThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var hundredThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var thousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var thousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var thousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<string>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousand",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var ones = arr.Where(x => x >= 1 && x <= 9).ToList();\n\
    \        var tens = arr.Where(x => x >= 10 && x <= 99).ToList();\n        var\
    \ hundreds = arr.Where(x => x >= 100 && x <= 999).ToList();\n        var thousands\
    \ = arr.Where(x => x >= 1000 && x <= 9999).ToList();\n        var millions = arr.Where(x\
    \ => x >= 10000 && x <= 99999).ToList();\n        var billions = arr.Where(x =>\
    \ x >= 100000 && x <= 999999).ToList();\n        var trillions = arr.Where(x =>\
    \ x >= 1000000 && x <= 9999999).ToList();\n        var quadrillions = arr.Where(x\
    \ => x >= 10000000 && x <= 99999999).ToList();\n        var quintillions = arr.Where(x\
    \ => x >= 100000000 && x <= 999999999).ToList();\n        var sextillions = arr.Where(x\
    \ => x >= 1000000000 && x <= 99999999999).ToList();\n        var septillions =\
    \ arr.Where(x => x >= 10000000000 && x <= 999999999999).ToList();\n        var\
    \ octillions = arr.Where(x => x >= 100000000000 && x <= 999999999999999).ToList();\n\
    \        var nonillions = arr.Where(x => x >= 1000000000000 && x <= 999999999999999999).ToList();\n\
    \        var onesAndTens = ones + tens;\n        var onesAndHundreds = ones +\
    \ hundreds;\n        var onesAndThousands = ones + thousands;\n        var onesAndMillions\
    \ = ones + millions;\n        var onesAndBillions = ones + billions;\n       \
    \ var onesAndTrillions = ones + trillions;\n        var onesAndQuadrillions =\
    \ ones + quadrillions;\n        var onesAndQuintillions = ones + quintillions;\n\
    \        var onesAndSextillions = ones + sextillions;\n        var onesAndSeptillions\
    \ = ones + septillions;\n        var onesAndOctillions = ones + octillions;\n\
    \        var onesAndNonillions = ones + nonillions;\n        var tensAndHundreds\
    \ = tens + hundreds;\n        var tensAndThousands = tens + thousands;\n     \
    \   var tensAndMillions = tens + millions;\n        var tensAndBillion", "   \
    \     if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var maxLength = arr.Max();\n        var minLength =\
    \ arr.Min();\n        var digits = Enumerable.Range(0, maxLength - minLength +\
    \ 1).Select(x => minLength + x).ToArray();\n        foreach (var digit in digits)\
    \ {\n            var index = arr.FindIndex(x => x >= digit && x <= digit + 9);\n\
    \            if (index != -1) result.Add(arr[index].ToString());\n        }\n\
    \        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var maxLength = arr.Max(x =>\
    \ x.ToString().Length);\n        var minLength = arr.Min(x => x.ToString().Length);\n\
    \        var maxDigit = maxLength - minLength;\n        var digits = new Dictionary<char,\
    \ string>();\n        foreach (var item in arr) {\n            var digit = item.ToString().Substring(0,\
    \ maxDigit);\n            if (digits.ContainsKey(digit)) {\n                result.Add(digits[digit]);\n\
    \            } else {\n                digits.Add(digit, string.Format(\"{0}{1}\"\
    , digits[digit], item.ToString().Substring(maxDigit)));\n            }\n     \
    \   }\n        return result;", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var ones = arr.Where(x => x\
    \ % 10 == 1).ToList();\n        var tens = arr.Where(x => x % 10 == 0).ToList();\n\
    \        var tensReversed = tens.Reverse();\n        var tensReversedStrings =\
    \ tensReversed.Select(x => x.ToString()).ToList();\n        var tensReversedStringsReversed\
    \ = tensReversedStrings.Reverse();\n        var tensReversedStringsReversedStrings\
    \ = tensReversedStringsReversed.Select(x => x.ToString()).ToList();\n        var\
    \ tensReversedStringsReversedStringsReversed = tensReversedStringsReversedStrings.Reverse();\n\
    \        var tensReversedStringsReversedStringsReversedStrings = tensReversedStringsReversedStringsReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsReversedStringsReversedStrings.Reverse();\n        var\
    \ tensReversedStringsReversedStringsReversedStringsReversedStrings = tensReversedStringsReversedStringsReversedStringsReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsReversedStringsReversedStringsReversedStrings.Reverse();\n\
    \        var tensReversedStringsReversedStringsReversedStringsReversedStringsReversedStrings\
    \ = tensReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed.Select(x\
    \ => x.ToString()).ToList();\n        var tensReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStrings.Reverse();\n\
    \        var tensReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversed\
    \ = tensReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStringsReversedStrings.Reverse();\n\
    \        var tensReversedStringsReversedStringsReversedStringsReversedStringsReverse",
  "        if (arr.Count == 0) return new List<string>();\n        var result = new\
    \ List<string>();\n        var digits = new Dictionary<long, string> {\n     \
    \       {1L, \"One\"},\n            {2L, \"Two\"},\n            {3L, \"Three\"\
    },\n            {4L, \"Four\"},\n            {5L, \"Five\"},\n            {6L,\
    \ \"Six\"},\n            {7L, \"Seven\"},\n            {8L, \"Eight\"},\n    \
    \        {9L, \"Nine\"}\n        };\n        long max = 0;\n        foreach (var\
    \ item in arr) {\n            if (item > max) max = item;\n        }\n       \
    \ long min = max - 10;\n        long curr = min;\n        while (curr < max) {\n\
    \            long next = curr + 10;\n            while (next < max) {\n      \
    \          result.Add(digits[next]);\n                next += 10;\n          \
    \  }\n            curr = next;\n        }\n        return result;", "        if\
    \ (arr.Count == 0) return new List<string>();\n        List<string> result = new\
    \ List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        long length = max - min + 1;\n        long digit = max / 10;\n      \
    \  long rest = max % 10;\n        string one = \"One\";\n        string two =\
    \ \"Two\";\n        string three = \"Three\";\n        string four = \"Four\"\
    ;\n        string five = \"Five\";\n        string six = \"Six\";\n        string\
    \ seven = \"Seven\";\n        string eight = \"Eight\";\n        string nine =\
    \ \"Nine\";\n        string ten = \"Ten\";\n        string hundred = \"Hundred\"\
    ;\n        string thousand = \"Thousand\";\n        string million = \"Million\"\
    ;\n        string billion = \"Billion\";\n        string trillion = \"Trillion\"\
    ;\n        string quadrillion = \"Quadrillion\";\n        string quintillion =\
    \ \"Quintillion\";\n        string sextillion = \"Sextillion\";\n        string\
    \ septillion = \"Septillion\";\n        string octillion = \"Octillion\";\n  \
    \      string nonillion = \"Nonillion\";\n        string decillion = \"Decillion\"\
    ;\n        string undecillion = \"Undecillion\";\n        string duodecillion\
    \ = \"Duodecillion\";\n        string tredecillion = \"Tredecillion\";\n     \
    \   string quattuordecillion = \"Quattuordecillion\";\n        string quindecillion\
    \ = \"Quindecillion\";\n        string sexdecillion = \"Sexdecillion\";\n    \
    \    string septendecillion = \"Septendecillion\";\n        string octodecillion\
    \ = \"Octodecillion\";\n        string novemdecillion = \"Novemdecillion\";\n\
    \        string vigintillion = \"Vigintillion\";\n        string unvigintillion\
    \ = \"Unvigintillion\";\n        string duovigintillion = \"Duovigintillion\"\
    ;\n        string trevigintillion = \"Trevigintillion\";\n        string quattuorvigintillion\
    \ = \"Quattuorvigintillion\";\n        string quinvigintilli", "        if (arr.Count\
    \ == 0)\n            return new List<string>();\n        if (arr.Count == 1)\n\
    \            return new List<string>(new string[]{(string)arr[0].ToString()});\n\
    \        List<string> result = new List<string>();\n        long maxValue = arr.Max();\n\
    \        long minValue = arr.Min();\n        long maxDigit = maxValue % 10;\n\
    \        long minDigit = minValue % 10;\n        long maxDigitName = maxDigit\
    \ < 10 ? \"Zero\" : maxDigit.ToString();\n        long minDigitName = minDigit\
    \ < 10 ? \"Zero\" : minDigit.ToString();\n        long maxDigitNameLength = maxDigitName.Length;\n\
    \        long minDigitNameLength = minDigitName.Length;\n        long maxDigitValue\
    \ = maxValue / 10;\n        long minDigitValue = minValue / 10;\n        long\
    \ maxDigitValueName = maxDigitValue < 10 ? \"Zero\" : maxDigitValue.ToString();\n\
    \        long minDigitValueName = minDigitValue < 10 ? \"Zero\" : minDigitValue.ToString();\n\
    \        long maxDigitValueNameLength = maxDigitValueName.Length;\n        long\
    \ minDigitValueNameLength = minDigitValueName.Length;\n        bool isDigit =\
    \ maxDigitValue == minDigitValue;\n        bool isDigitName = maxDigitValue ==\
    \ minDigitValue;\n        bool isDigitNameLength = maxDigitValueNameLength ==\
    \ minDigitValueNameLength;\n        bool isDigitValue = maxDigitValue == minDigitValue;\n\
    \        bool isDigitValueName = maxDigitValue == minDigitValue;\n        bool\
    \ isDigitValueNameLength = maxDigitValueNameLength == minDigitValueNameLength;\n\
    \        bool isDigitNameLength = maxDigitNameLength == minDigitNameLength;\n\
    \        bool isDigitValueNameLength = maxDigitValueNameLength == minDigitValueNameLength;\n\
    \        bool isDigitNameLength = maxDigitNameLength == minDigitNameLength;\n\
    \        bool isDigitValueNameLength = maxDigitValueNameLength == minDigitValueNameLength;\n\
    \        bool isDigitNameLength = maxDigitNameLength == minDigitNameLength;\n\
    \        bool isDigitValueNameLength = maxDigitValueNameLength == minDigitValueNameLength;\n\
    \        bool isDigitNameLength = maxDigitNameLength == minDigitNameLength;\n\
    \        bool isDigitValueNameLength = maxDigitValueNameLength == minDigitValueNameLength;\n\
    \        bool isDigitNameLength = maxDigitNameLength == minDigitNameLength;\n\
    \        bool isDigitValueNameLength = maxDigitValueNameLength == minDigitValueNameLength;\n\
    \        bool isDigit", "        if (arr.Count == 0) {\n            return new\
    \ List<string>();\n        }\n        var result = new List<string>();\n     \
    \   var max = arr.Max();\n        var min = arr.Min();\n        var maxDigit =\
    \ Convert.ToInt32(Math.Floor(Math.Log10(max)));\n        var minDigit = Convert.ToInt32(Math.Floor(Math.Log10(min)));\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = arr.FindIndex(x => x\
    \ == max);\n        var minDigitIndex = arr.FindIndex(x => x == min);\n      \
    \  if (maxDigitIndex == -1 || minDigitIndex == -1) {\n            return result;\n\
    \        }\n        var maxDigit = arr[maxDigitIndex];\n        var minDigit =\
    \ arr[minDigitIndex];\n        var maxDigitName = GetDigitName(maxDigit);\n  \
    \      var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex =\
    \ arr.FindIndex(x => x == max);\n        var minDigitIndex = arr.FindIndex(x =>\
    \ x == min);\n        if (maxDigitIndex == -1 || minDigitIndex == -1) {\n    \
    \        return result;\n        }\n        var maxDigit = arr[maxDigitIndex];\n\
    \        var minDigit = arr[minDigitIndex];\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = arr.FindIndex(x => x == max);\n        var minDigitIndex = arr.FindIndex(x\
    \ => x == min);\n        if (maxDigitIndex == -1 || minDigitIndex == -1) {\n \
    \           return result;\n        }\n        var maxDigit = arr[maxDigitIndex];\n\
    \        var minDigit = arr[minDigitIndex];\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = arr.FindIndex(x => x == max);\n        var minDigitIndex = arr.FindIndex(x\
    \ => x == min);\n        if (maxDigitIndex == -1 || minDigitIndex == -1) {\n \
    \           return result;\n        }\n        var maxDigit = arr[maxDigitIndex];\n\
    \        var minDigit = arr[minDigitIndex];\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = arr.FindIndex(x => x == max);\n        var minDigitIndex = arr.FindIndex(x\
    \ => x == min);\n        if (maxDigitIndex == -1 || minDigitIndex == -1) {\n \
    \           return result;\n        }\n        var maxDigit = arr[maxDigitIndex];\n\
    \        var minDigit = arr[minDigitIndex];\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var ", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var digits = new\
    \ List<string>();\n        var digitNames = new List<string>();\n        var maxDigit\
    \ = arr.Max();\n        var minDigit = arr.Min();\n        var maxDigitName =\
    \ digitNames.Max();\n        var minDigitName = digitNames.Min();\n        var\
    \ maxDigitIndex = digits.Count;\n        var minDigitIndex = digits.Count;\n \
    \       var maxDigitNameIndex = digitNames.Count;\n        var minDigitNameIndex\
    \ = digitNames.Count;\n        var maxDigitIndexName = digits.Count;\n       \
    \ var minDigitIndexName = digits.Count;\n        var maxDigitNameIndexName = digitNames.Count;\n\
    \        var minDigitNameIndexName = digitNames.Count;\n        var maxDigitIndexNameIndex\
    \ = digits.Count;\n        var minDigitIndexNameIndex = digits.Count;\n      \
    \  var maxDigitNameIndexNameIndex = digitNames.Count;\n        var minDigitNameIndexNameIndex\
    \ = digitNames.Count;\n        var maxDigitIndexNameIndexName = digits.Count;\n\
    \        var minDigitIndexNameIndexName = digits.Count;\n        var maxDigitNameIndexNameIndexName\
    \ = digitNames.Count;\n        var minDigitNameIndexNameIndexName = digitNames.Count;\n\
    \        var maxDigitIndexNameIndexNameIndex = digits.Count;\n        var minDigitNameIndexNameIndexName\
    \ = digits.Count;\n        var maxDigitIndexNameIndexNameIndexName = digits.Count;\n\
    \        var minDigitNameIndexNameIndexNameIndex = digits.Count;\n        var\
    \ maxDigitIndexNameIndexNameIndexNameIndex = digits.Count;\n        var minDigitNameIndexNameIndexNameIndexName\
    \ = digits.Count;\n        var maxDigitIndexNameIndexNameIndexNameIndex = digits.Count;\n\
    \        var minDigitNameIndexNameIndexNameIndexNameIndex = digits.Count;\n  \
    \      var maxDigitIndexNameIndexNameIndexNameIndexName = digits.Count;\n    \
    \    var minDigitNameIndexNameIndexNameIndexNameIndex = digits.Count;\n      \
    \  var maxDigitIndexNameIndexNameIndexNameIndexNameIndex = digits.Count;\n   \
    \     var minDigitNameIndexNameIndexNameIndexNameIndexName = digits.Count;\n \
    \       var maxDigitIndexNameIndexNameIndexNameIndexNameIndex = digits.Count;\n\
    \        var minDigitNameIndexNameIndexNameIndexNameIndexNameIndex = digits.Count;\n\
    \        var maxDigitIndexNameIndexNameIndexNameIndexNameIndexName = digits.Count;\n\
    \        var minDigitNameIndexNameIndexNameIndexNameIndexNameIndex = digits.Count;\n\
    \        var maxDigitIndexNameIndexNameIndexNameIndexNameIndexNameIndex = digits.Count;\n\
    \        var minDigitNameIndexNameIndexNameIndexNameIndexNameIndexName = digits.Count;\n\
    \        var max", "        if (arr.Count == 0)\n            return new List<string>();\n\
    \        List<string> result = new List<string>();\n        List<long> reversed\
    \ = new List<long>();\n        foreach (long n in arr) {\n            if (n >=\
    \ 1 && n <= 9)\n                reversed.Add(n);\n            else\n         \
    \       result.Add(String.Format(\"{0}\", n));\n        }\n        foreach (long\
    \ n in reversed) {\n            string name = GetName(n);\n            if (name\
    \ != null)\n                result.Add(name);\n        }\n        return result;",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        List<long> reversed = new List<long>();\n        foreach (long n\
    \ in arr) {\n            if (n >= 1 && n <= 9) {\n                reversed.Add(n);\n\
    \            }\n        }\n        List<string> result = new List<string>();\n\
    \        foreach (long n in reversed) {\n            string name = GetName(n);\n\
    \            result.Add(name);\n        }\n        return result;", "        if\
    \ (arr.Count == 0) return new List<string>();\n        List<string> result = new\
    \ List<string>();\n        long max = arr.Max();\n        long min = arr.Min();\n\
    \        if (max < 1 || min > 9) return result;\n        long maxDigit = max -\
    \ min;\n        long maxDigitName = maxDigit == 9 ? \"Nine\" : maxDigit == 8 ?\
    \ \"Eight\" : maxDigit == 7 ? \"Seven\" : maxDigit == 6 ? \"Six\" : maxDigit ==\
    \ 5 ? \"Five\" : maxDigit == 4 ? \"Four\" : maxDigit == 3 ? \"Three\" : maxDigit\
    \ == 2 ? \"Two\" : maxDigit == 1 ? \"One\" : maxDigit;\n        long minDigit\
    \ = min - 1;\n        long minDigitName = minDigit == 9 ? \"Nine\" : minDigit\
    \ == 8 ? \"Eight\" : minDigit == 7 ? \"Seven\" : minDigit == 6 ? \"Six\" : minDigit\
    \ == 5 ? \"Five\" : minDigit == 4 ? \"Four\" : minDigit == 3 ? \"Three\" : minDigit\
    \ == 2 ? \"Two\" : minDigit == 1 ? \"One\" : minDigit;\n        foreach (long\
    \ num in arr) {\n            if (num < 1 || num > 9) continue;\n            long\
    \ digit = num - min;\n            string digitName = digit == 9 ? \"Nine\" : digit\
    \ == 8 ? \"Eight\" : digit == 7 ? \"Seven\" : digit == 6 ? \"Six\" : digit ==\
    \ 5 ? \"Five\" : digit == 4 ? \"Four\" : digit == 3 ? \"Three\" : digit == 2 ?\
    \ \"Two\" : digit == 1 ? \"One\" : digit;\n            result.Add(string.Format(\"\
    {0}{1}\", digitName, num));\n        }\n        return result;", "        if (arr.Count\
    \ == 0)\n            return new List<string>();\n        var result = new List<string>();\n\
    \        var min = arr.Min();\n        var max = arr.Max();\n        var digits\
    \ = Enumerable.Range(0, 10).Where(i => min <= i && i <= max).ToArray();\n    \
    \    var digitNames = new[] {\n            \"One\", \"Two\", \"Three\", \"Four\"\
    , \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\"\n        };\n        var reversed\
    \ = arr.Reverse();\n        var reversedDigits = Enumerable.Range(0, 10).Where(i\
    \ => min <= i && i <= max).ToArray();\n        var reversedDigitNames = new[]\
    \ {\n            \"Ten\", \"Nine\", \"Eight\", \"Seven\", \"Six\", \"Five\", \"\
    Four\", \"Three\", \"Two\", \"One\"\n        };\n        foreach (var digit in\
    \ digits) {\n            var index = reversed.IndexOf(digit);\n            if\
    \ (index != -1)\n                result.Add(reversedDigitNames[index]);\n    \
    \    }\n        return result;", "        if (arr.Count == 0)\n            return\
    \ new List<string>();\n        List<string> result = new List<string>();\n   \
    \     long max = arr.Max();\n        long min = arr.Min();\n        long range\
    \ = (max - min) + 1;\n        long digit = range / 10;\n        long remainder\
    \ = range % 10;\n        string one = \"One\";\n        string two = \"Two\";\n\
    \        string three = \"Three\";\n        string four = \"Four\";\n        string\
    \ five = \"Five\";\n        string six = \"Six\";\n        string seven = \"Seven\"\
    ;\n        string eight = \"Eight\";\n        string nine = \"Nine\";\n      \
    \  string ten = \"Ten\";\n        string hundred = \"Hundred\";\n        string\
    \ thousand = \"Thousand\";\n        string million = \"Million\";\n        string\
    \ billion = \"Billion\";\n        string trillion = \"Trillion\";\n        string\
    \ quadrillion = \"Quadrillion\";\n        string quintillion = \"Quintillion\"\
    ;\n        string sextillion = \"Sextillion\";\n        string septillion = \"\
    Septillion\";\n        string octillion = \"Octillion\";\n        string nonillion\
    \ = \"Nonillion\";\n        string decillion = \"Decillion\";\n        string\
    \ undecillion = \"Undecillion\";\n        string duodecillion = \"Duodecillion\"\
    ;\n        string tredecillion = \"Tredecillion\";\n        string quattuordecillion\
    \ = \"Quattuordecillion\";\n        string quindecillion = \"Quindecillion\";\n\
    \        string sexdecillion = \"Sexdecillion\";\n        string septendecillion\
    \ = \"Septendecillion\";\n        string octodecillion = \"Octodecillion\";\n\
    \        string novemdecillion = \"Novemdecillion\";\n        string vigintillion\
    \ = \"Vigintillion\";\n        string unvigintillion = \"Unvigintillion\";\n \
    \       string duovigintillion = \"Duovigintillion\";\n        string trevigintillion\
    \ = \"Trevigintillion\";\n        string quattuorvigintillion = \"Quattuorvigintillion\"\
    ;\n        string quinvigin", "        if (arr.Count == 0) return new List<string>();\n\
    \        var result = new List<string>();\n        var ones = arr.Where(x => x\
    \ == 1L).ToList();\n        var tens = arr.Where(x => x == 10L).ToList();\n  \
    \      var hundreds = arr.Where(x => x == 100L).ToList();\n        var thousands\
    \ = arr.Where(x => x == 1000L).ToList();\n        var millions = arr.Where(x =>\
    \ x == 1000000L).ToList();\n        var billions = arr.Where(x => x == 1000000000L).ToList();\n\
    \        var trillions = arr.Where(x => x == 1000000000000L).ToList();\n     \
    \   var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n    \
    \    var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var sextillions = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var septillions = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var octillions = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var nonillions = arr.Where(x => x == 1000000000000000000000000000000L).ToList();\n\
    \        var decillions = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var undecillions = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var decillionsOne = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var decillionsTwo = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var decillionsThree = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var decillionsFour = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var decillionsFive = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var decillionsSix = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var decillionsSeven = arr.Where(x => x == 100000000000000000000000000000000L).ToList();\n\
    \        var decillionsEight = arr.Where(x => x == 1000000000000000000000000000000000L).ToList();\n\
    \        var decillionsNine = arr.Where(x => x == 1000000000000000000", "    \
    \    if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var digits = new Dictionary<long, string>();\n\
    \        var digitNames = new Dictionary<long, string>();\n        var one = digitNames[1]\
    \ = \"One\";\n        var two = digitNames[2] = \"Two\";\n        var three =\
    \ digitNames[3] = \"Three\";\n        var four = digitNames[4] = \"Four\";\n \
    \       var five = digitNames[5] = \"Five\";\n        var six = digitNames[6]\
    \ = \"Six\";\n        var seven = digitNames[7] = \"Seven\";\n        var eight\
    \ = digitNames[8] = \"Eight\";\n        var nine = digitNames[9] = \"Nine\";\n\
    \        var ten = digitNames[10] = \"Ten\";\n        var hundred = digitNames[100]\
    \ = \"Hundred\";\n        var thousand = digitNames[1000] = \"Thousand\";\n  \
    \      var million = digitNames[1000000] = \"Million\";\n        var billion =\
    \ digitNames[1000000000] = \"Billion\";\n        var trillion = digitNames[1000000000000]\
    \ = \"Trillion\";\n        var quadrillion = digitNames[1000000000000000] = \"\
    Quadrillion\";\n        var quintillion = digitNames[1000000000000000000] = \"\
    Quintillion\";\n        var sextillion = digitNames[100000000000000000000] = \"\
    Sextillion\";\n        var septillion = digitNames[10000000000000000000000] =\
    \ \"Septillion\";\n        var octillion = digitNames[1000000000000000000000000]\
    \ = \"Octillion\";\n        var nonillion = digitNames[100000000000000000000000000]\
    \ = \"Nonillion\";\n        var decillion = digitNames[10000000000000000000000000000]\
    \ = \"Decillion\";\n        var undecillion = digitNames[1000000000000000000000000000000]\
    \ = \"Undecillion\";\n        var duodecillion = digitNames[100000000000000000000000000000000]\
    \ = \"Duodecillion\";\n        var tredecillion = digitNames[1000000000000000000000000000000000]\
    \ = \"Tredecillion\";\n        var quattuordecillion = digitNames[1000000000000000000000000000000000]\
    \ = \"Quattuordecillion\";\n        var sexdecillion = digitNames[10000000000000000000000000000000001]\
    \ = \"Sexdecillion\";\n        var septendecillion = digitNames[10000000000000000000000000000000010]\
    \ = \"Septendecillion\";\n        var octodecillion = digitNames[100000000000000000000000000000000100]\
    \ = \"Octodecillion\";\n        var novemdecillion = digitNames[1000000000000000000000000000000001000]\
    \ = \"Novemdecillion\";\n        var vigintillion = digitNames[100000000000000000000000000000000",
  "        if (arr.Count == 0) {\n            return new List<string>();\n       \
    \ }\n        List<long> reversed = new List<long>(arr.Count);\n        foreach\
    \ (long n in arr) {\n            if (n >= 1 && n <= 9) {\n                reversed.Add(n);\n\
    \            }\n        }\n        List<string> result = new List<string>(arr.Count);\n\
    \        foreach (long n in reversed) {\n            string name = GetName(n);\n\
    \            result.Add(name);\n        }\n        return result;", "        if\
    \ (arr.Count == 0) return new List<string>();\n        var result = new List<string>();\n\
    \        var ones = arr.Where(x => x == 1L).ToList();\n        var tens = arr.Where(x\
    \ => x == 10L).ToList();\n        var hundreds = arr.Where(x => x == 100L).ToList();\n\
    \        var thousands = arr.Where(x => x == 1000L).ToList();\n        var millions\
    \ = arr.Where(x => x == 1000000L).ToList();\n        var billions = arr.Where(x\
    \ => x == 1000000000L).ToList();\n        var trillions = arr.Where(x => x ==\
    \ 1000000000000L).ToList();\n        var quadrillions = arr.Where(x => x == 1000000000000000L).ToList();\n\
    \        var quintillions = arr.Where(x => x == 1000000000000000000L).ToList();\n\
    \        var sextillions = arr.Where(x => x == 1000000000000000000000L).ToList();\n\
    \        var septillions = arr.Where(x => x == 1000000000000000000000000L).ToList();\n\
    \        var octillions = arr.Where(x => x == 100000000000000000000000000L).ToList();\n\
    \        var nonillions = arr.Where(x => x == 1000000000000000000000000000000L).ToList();\n\
    \        var one = ones[0];\n        var ten = tens[0];\n        var hundred =\
    \ hundreds[0];\n        var thousand = thousands[0];\n        var million = millions[0];\n\
    \        var billion = billions[0];\n        var trillion = trillions[0];\n  \
    \      var quadrillion = quadrillions[0];\n        var quintillion = quintillions[0];\n\
    \        var sextillion = sextillions[0];\n        var septillion = septillions[0];\n\
    \        var octillion = octillions[0];\n        var nonillion = nonillions[0];\n\
    \        var ones = ones.Skip(1).ToList();\n        var tens = tens.Skip(1).ToList();\n\
    \        var hundreds = hundreds.Skip(1).ToList();\n        var thousands = thousands.Skip(1).ToList();\n\
    \        var millions = millions.Skip(1).ToList();\n        var billions = billions.Skip(1).ToList();\n\
    \        var trillions = trillions.Skip(1).ToList();\n        var quadrillions\
    \ = quadrillions.Skip(1).ToList();\n        var quintillions = quintillion", " \
    \       List<string> result = new List<string>();\n        if (arr.Count > 0)\
    \ {\n            long maxValue = arr.Max();\n            long minValue = arr.Min();\n\
    \            long maxDigit = maxValue / 10;\n            long minDigit = minValue\
    \ / 10;\n            long maxDigitName = maxDigit == 0 ? \"Zero\" : maxDigit.ToString();\n\
    \            long minDigitName = minDigit == 0 ? \"Zero\" : minDigit.ToString();\n\
    \            long maxDigitValue = maxDigit % 10;\n            long minDigitValue\
    \ = minDigit % 10;\n            long maxDigitValueName = maxDigitValue == 0 ?\
    \ \"Zero\" : maxDigitValue.ToString();\n            long minDigitValueName = minDigitValue\
    \ == 0 ? \"Zero\" : minDigitValue.ToString();\n            string maxDigitName\
    \ = maxDigitName == maxDigitValueName ? \"Zero\" : maxDigitName;\n           \
    \ string minDigitName = minDigitName == minDigitValueName ? \"Zero\" : minDigitName;\n\
    \            string maxDigitValueName = maxDigitValueName == maxDigitName ? \"\
    Zero\" : maxDigitValueName;\n            string minDigitValueName = minDigitValueName\
    \ == minDigitName ? \"Zero\" : minDigitValueName;\n            string maxDigitValueNameReversed\
    \ = maxDigitValueName + minDigitValueName;\n            string minDigitValueNameReversed\
    \ = minDigitValueName + maxDigitValueName;\n            string maxDigitNameReversed\
    \ = maxDigitName + minDigitName;\n            string minDigitNameReversed = minDigitName\
    \ + maxDigitName;\n            string maxDigitValueNameReversed = maxDigitValueName\
    \ + minDigitValueName;\n            string minDigitValueNameReversed = minDigitValueName\
    \ + maxDigitValueName;\n            string maxDigitNameReversed = maxDigitName\
    \ + minDigitName;\n            string minDigitNameReversed = minDigitName + maxDigitName;\n\
    \            string maxDigitValueNameReversed = maxDigitValueName + minDigitValueName;\n\
    \            string minDigitValueNameReversed = minDigitValueName + maxDigitValueName;\n\
    \            string maxDigitNameReversed = maxDigitName + minDigitName;\n    \
    \        string minDigitNameReversed = minDigitName + maxDigitName;\n        \
    \    string maxDigitValueNameReversed = maxDigitValueName + minDigitValueName;\n\
    \            string minDigitValueNameReversed = minDigitValueName + maxDigitValueName;\n\
    \            string maxDigitNameReversed = maxDigitName + minDigitName;\n    \
    \        string minDigitNameReversed = minDigitName + maxDigitName;\n        \
    \    string maxDigitValueNameReversed = maxDigitValueName + ", "        if (arr.Count\
    \ == 0) {\n            return new List<string>();\n        }\n        var result\
    \ = new List<string>();\n        var ones = arr.Where(x => x <= 9 && x >= 1).ToList();\n\
    \        var tens = arr.Where(x => x <= 99 && x >= 10).ToList();\n        var\
    \ hundreds = arr.Where(x => x <= 999 && x >= 100).ToList();\n        var thousands\
    \ = arr.Where(x => x <= 9999 && x >= 1000).ToList();\n        var tenThousands\
    \ = arr.Where(x => x <= 999999 && x >= 10000).ToList();\n        var hundredThousands\
    \ = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n        var thousandThousands\
    \ = arr.Where(x => x <= 99999999999 && x >= 1000000).ToList();\n        var oneThousands\
    \ = arr.Where(x => x <= 999999999999 && x >= 1000000).ToList();\n        var oneHundreds\
    \ = arr.Where(x => x <= 999999999999999 && x >= 100000).ToList();\n        var\
    \ oneThousandThousands = arr.Where(x => x <= 9999999999999999999 && x >= 1000000).ToList();\n\
    \        var oneThousandHundreds = arr.Where(x => x <= 99999999999999999999999\
    \ && x >= 100000).ToList();\n        var oneThousandThousandHundreds = arr.Where(x\
    \ => x <= 999999999999999999999999999 && x >= 100000).ToList();\n        var oneThousandThousandThousandHundreds\
    \ = arr.Where(x => x <= 9999999999999999999999999999999 && x >= 100000).ToList();\n\
    \        var oneThousandThousandThousandThousandHundreds = arr.Where(x => x <=\
    \ 99999999999999999999999999999999999 && x >= 100000).ToList();\n        var oneThousandThousandThousandThousandThousandHundreds\
    \ = arr.Where(x => x <= 999999999999999999999999999999999999999 && x >= 100000).ToList();\n\
    \        var oneThousandThousandThousandThousandThousandThousandHundreds = arr.Where(x\
    \ => x <= 9999999999999999999999999999999999999999999 && x >= 100000).ToList();\n\
    \        var oneThousandThousandThousandThousandThousandThousandThousandHundreds\
    \ = arr.Where(x => x <= 99999999999999999999999999999999", "        if (arr.Count\
    \ == 0)\n            return new List<string>();\n        var result = new List<string>();\n\
    \        var maxLength = arr.Max();\n        var minLength = arr.Min();\n    \
    \    var maxDigit = maxLength / 10;\n        var minDigit = minLength / 10;\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigitIndex);\n        var minDigitName = GetDigitName(minDigitIndex);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigitIndex);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigitIndex);\n        var maxDigitName = GetDigitName(maxDigitIndex);\n\
    \        var minDigitName = GetDigitName(minDigitIndex);\n        var maxDigitName\
    \ = GetDigitName(maxDigitIndex);\n        var minDigitName = GetDigitName(minDigitIndex);\n\
    \        var maxDigitName = GetDigitName(maxDigitIndex);\n        var minDigitName\
    \ = GetDigitName(minDigitIndex);\n        var maxDigitName = GetDigitName(maxDigitIndex);\n\
    \        var minDigitName = GetDigitName(minDigitIndex);\n        var maxDigitName\
    \ = GetDigitName(maxDigitIndex);\n        var minDigitName = GetDigitName(minDigitIndex);\n\
    \        var maxDigitName = GetDigitName(maxDigitIndex);\n        var minDigitName\
    \ = GetDigitName(minDigitIndex);\n        var maxDigitName = GetDigitName(maxDigitIndex);\n\
    \        var minDigitName = GetDigitName(minDigitIndex);\n        var maxDigitName\
    \ = GetDigitName(maxDigitIndex);\n        var minDigitName = GetDigitName(minDigitIndex);\n\
    \        var maxDigitName = GetDigitName(maxDigitIndex);\n        var minDigitName\
    \ = GetDigitName(minDigitIndex);\n        var maxDigitName = GetDigitName(maxDigitIndex);\n\
    \        var minDigitName = GetDigitName(minDigitIndex);\n        var maxDigitName\
    \ = GetDigitName(maxDigitIndex);\n        var minDigitName = GetDigitName(minDigitIndex);\n\
    \        var maxDigitName = GetDigitName(maxDigitIndex);\n        var minDigitName\
    \ = GetDigitName(minDigitIndex);\n        var maxDigitName = GetDigitName(maxDigitIndex);\n\
    \        var minDigitName = GetDigitName(minDigitIndex);\n        var maxDigitName\
    \ = GetDigitName(maxDigitIndex);\n        var minDigitName = GetDigitName(minDigitIndex);\n\
    \        var maxDigitName = GetDigitName(maxDigitIndex);\n        var minDigitName\
    \ = GetDigitName(minDigitIndex);\n        var maxDigitName = GetDigitName(maxDigitIndex);\n\
    \        var minDigitName = GetDigitName(minDigitIndex);\n        var maxDigitName\
    \ = GetDigitName(maxDigitIndex);\n        var minDigitName = GetDigitName(minDigitIndex);",
  "        List<string> result = new List<string>();\n        if (arr.Count == 0)\
    \ {\n            return result;\n        }\n        long max = arr.Max();\n  \
    \      long min = arr.Min();\n        long range = (max - min) + 1;\n        long\
    \ digit = max - min;\n        long tens = 10 * range;\n        long hundreds =\
    \ 100 * range;\n        long thousands = 1000 * range;\n        long tenThousands\
    \ = 10000 * range;\n        long hundredThousands = 100000 * range;\n        long\
    \ millions = 1000000 * range;\n        long billions = 1000000000 * range;\n \
    \       long trillions = 1000000000000 * range;\n        long quadrillions = 1000000000000000\
    \ * range;\n        long quintillions = 1000000000000000000 * range;\n       \
    \ long sextillions = 1000000000000000000000 * range;\n        long septillions\
    \ = 1000000000000000000000000 * range;\n        long octillions = 100000000000000000000000000\
    \ * range;\n        long nonillions = 100000000000000000000000000000 * range;\n\
    \        long decillions = 100000000000000000000000000000000 * range;\n      \
    \  long undecillions = 1000000000000000000000000000000000 * range;\n        long\
    \ duodecillions = 10000000000000000000000000000000000 * range;\n        long tredecillions\
    \ = 100000000000000000000000000000000000000 * range;\n        long quattuordecillions\
    \ = 10000000000000000000000000000000000000000 * range;\n        long quindecillions\
    \ = 100000000000000000000000000000000000000000 * range;\n        long sexdecillions\
    \ = 10000000000000000000000000000000000000000000000 * range;\n        long septendecillions\
    \ = 1000000000000000000000000000000000000000000000000 * range;\n        long octodecillions\
    \ = 10000000000000000000000000000000000000000000000000 * range;\n        long\
    \ novemdecillions = 1000000000000000000000000000000000000000000000000000000 *\
    \ range;\n        long vigintillions = 10000000000000000000000000000000000000000000000000\
    \ * range;\n        long unvigintillions = 1000000000000000000000000000000000000000000000000000000\
    \ * range;\n        long duovigintillions = 100000000000000000000000000000000000000000000000000000000\
    \ * range;\n        long trevigintillions = 1000000000000000000000000000000000000000000000000000000000\
    \ * range;\n        long quattuorvigintillions = 100000000000000000000000000000000000000000000000000000000\
    \ * range;\n        long quinvigintillions = 100000000000000000000000000000000000000000000000000",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var ones = arr.Where(x => x == 1L).ToArray();\n\
    \        var tens = arr.Where(x => x == 10L).ToArray();\n        var hundreds\
    \ = arr.Where(x => x == 100L).ToArray();\n        var thousands = arr.Where(x\
    \ => x == 1000L).ToArray();\n        var tenThousands = arr.Where(x => x == 10000L).ToArray();\n\
    \        var hundredThousands = arr.Where(x => x == 100000L).ToArray();\n    \
    \    var thousandThousands = arr.Where(x => x == 1000000L).ToArray();\n      \
    \  var millionThousands = arr.Where(x => x == 10000000L).ToArray();\n        var\
    \ billionThousands = arr.Where(x => x == 100000000L).ToArray();\n        var trillionThousands\
    \ = arr.Where(x => x == 1000000000L).ToArray();\n        var quadrillionThousands\
    \ = arr.Where(x => x == 10000000000L).ToArray();\n        var quintillionThousands\
    \ = arr.Where(x => x == 100000000000L).ToArray();\n        var sextillionThousands\
    \ = arr.Where(x => x == 1000000000000L).ToArray();\n        var septillionThousands\
    \ = arr.Where(x => x == 10000000000000L).ToArray();\n        var octillionThousands\
    \ = arr.Where(x => x == 100000000000000L).ToArray();\n        var nonillionThousands\
    \ = arr.Where(x => x == 1000000000000000L).ToArray();\n        var decillionThousands\
    \ = arr.Where(x => x == 10000000000000000L).ToArray();\n        var undecillionThousands\
    \ = arr.Where(x => x == 100000000000000000L).ToArray();\n        var duodecillionThousands\
    \ = arr.Where(x => x == 1000000000000000000L).ToArray();\n        var tredecillionThousands\
    \ = arr.Where(x => x == 10000000000000000000L).ToArray();\n        var quattuordecillionThousands\
    \ = arr.Where(x => x == 100000000000000000000L).ToArray();\n        var quindecillionThousands\
    \ = arr.Where(x => x == 1000000000000000000000L).ToArray();\n        var sexdecillionThousands\
    \ = arr.Where(x ", "        if (arr.Count == 0) return new List<string>();\n \
    \       List<string> result = new List<string>();\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long maxDigit = Convert.ToInt64(Math.Pow(10,\
    \ Convert.ToInt32(Math.Log10(max))));\n        long minDigit = Convert.ToInt64(Math.Pow(10,\
    \ Convert.ToInt32(Math.Log10(min))));\n        long digit = maxDigit;\n      \
    \  bool isNegative = false;\n        if (max < min) {\n            isNegative\
    \ = true;\n            max = -max;\n            min = min;\n        }\n      \
    \  long maxDigitReversed = Convert.ToInt64(Math.Pow(10, Convert.ToInt32(Math.Log10(max))));\n\
    \        long minDigitReversed = Convert.ToInt64(Math.Pow(10, Convert.ToInt32(Math.Log10(min))));\n\
    \        long digitReversed = maxDigitReversed;\n        bool isNegativeReversed\
    \ = false;\n        if (max < min) {\n            isNegativeReversed = true;\n\
    \            max = -max;\n            min = min;\n        }\n        long maxDigitReversedDigit\
    \ = Convert.ToInt64(Math.Pow(10, Convert.ToInt32(Math.Log10(maxDigitReversed))));\n\
    \        long minDigitReversedDigit = Convert.ToInt64(Math.Pow(10, Convert.ToInt32(Math.Log10(minDigitReversed))));\n\
    \        long digitReversedDigit = maxDigitReversedDigit;\n        bool isNegativeReversedDigit\
    \ = false;\n        if (max < min) {\n            isNegativeReversedDigit = true;\n\
    \            max = -max;\n            min = min;\n        }\n        long maxDigitReversedDigitReversed\
    \ = Convert.ToInt64(Math.Pow(10, Convert.ToInt32(Math.Log10(maxDigitReversedDigit))));\n\
    \        long minDigitReversedDigitReversed = Convert.ToInt64(Math.Pow(10, Convert.ToInt32(Math.Log10(minDigitReversedDigit))));\n\
    \        long digitReversedDigitReversed = maxDigitReversedDigitReversed;\n  \
    \      bool isNegativeReversedDigitReversed = false;\n        if (max < min) {\n\
    \            isNegativeReversedDigitReversed = true;\n            max = -max;\n\
    \            min = min;\n        }\n        long maxDigitReversedDigitReversedDigit\
    \ = Convert.ToInt64(Math.Pow(10, Convert.ToInt32(Math.Log10(maxDigitReversedDigitReversed))));\n\
    \        long minDigitReversedDigitReversedDigit = Convert.ToInt64(Math.Pow(10,\
    \ Convert.", "        if (arr.Count == 0) {\n            return new List<string>();\n\
    \        }\n        var result = new List<string>();\n        var digits = new\
    \ List<string>();\n        var maxDigit = arr.Max();\n        var minDigit = arr.Min();\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigitIndex(maxDigit);\n        var minDigitIndex\
    \ = GetDigitIndex(minDigit);\n        var maxDigitName = GetDigitName(maxDigit);\n\
    \        var minDigitName = GetDigitName(minDigit);\n        var maxDigitIndex\
    \ = GetDigitIndex(maxDigit);\n        var minDigitIndex = GetDigitIndex(minDigit);\n\
    \        var maxDigitName = GetDigitName(maxDigit);\n        var minDigitName\
    \ = GetDigitName(minDigit);\n        var maxDigitIndex = GetDigitIndex(maxDigit);\n\
    \        var minDigitIndex = GetDigitIndex(minDigit);\n        var maxDigitName\
    \ = GetDigitName(maxDigit);\n        var minDigitName = GetDigitName(minDigit);\n\
    \        var maxDigitIndex = GetDigit", "        if (arr.Count == 0) {\n     \
    \       return new List<string>();\n        }\n        var result = new List<string>();\n\
    \        var ones = arr.Where(x => x >= 1 && x <= 9).ToList();\n        var tens\
    \ = arr.Where(x => x >= 10 && x <= 99).ToList();\n        var hundreds = arr.Where(x\
    \ => x >= 100 && x <= 999).ToList();\n        var thousands = arr.Where(x => x\
    \ >= 1000 && x <= 9999).ToList();\n        var millions = arr.Where(x => x >=\
    \ 10000 && x <= 99999).ToList();\n        var billions = arr.Where(x => x >= 100000\
    \ && x <= 999999).ToList();\n        var trillions = arr.Where(x => x >= 1000000\
    \ && x <= 9999999).ToList();\n        var quadrillions = arr.Where(x => x >= 10000000\
    \ && x <= 99999999).ToList();\n        var quintillions = arr.Where(x => x >=\
    \ 100000000 && x <= 999999999).ToList();\n        var sextillions = arr.Where(x\
    \ => x >= 1000000000 && x <= 99999999999).ToList();\n        var septillions =\
    \ arr.Where(x => x >= 10000000000 && x <= 999999999999).ToList();\n        var\
    \ octillions = arr.Where(x => x >= 100000000000 && x <= 999999999999999).ToList();\n\
    \        var nonillions = arr.Where(x => x >= 1000000000000 && x <= 999999999999999999).ToList();\n\
    \        var onesAndTens = ones + tens;\n        var onesAndHundreds = ones +\
    \ hundreds;\n        var onesAndThousands = ones + thousands;\n        var onesAndMillions\
    \ = ones + millions;\n        var onesAndBillions = ones + billions;\n       \
    \ var onesAndTrillions = ones + trillions;\n        var onesAndQuadrillions =\
    \ ones + quadrillions;\n        var onesAndQuintillions = ones + quintillions;\n\
    \        var onesAndSextillions = ones + sextillions;\n        var onesAndSeptillions\
    \ = ones + septillions;\n        var onesAndOctillions = ones + octillions;\n\
    \        var onesAndNonillions = ones + nonillions;\n        var tensAndHundreds\
    \ = tens + hundreds;\n        var tensAndThousands = tens + thousands;\n     \
    \   var tensAndMillions = tens + millions;\n        var tensAnd", "        if\
    \ (arr.Count == 0) {\n            return new List<string>();\n        }\n    \
    \    List<long> result = new List<long>();\n        bool first = true;\n     \
    \   foreach (long num in arr) {\n            if (first) {\n                first\
    \ = false;\n            } else {\n                result.Add(num);\n         \
    \   }\n        }\n        long max = 0;\n        foreach (long num in result)\
    \ {\n            if (num > max) {\n                max = num;\n            }\n\
    \        }\n        long min = 0;\n        foreach (long num in result) {\n  \
    \          if (num < min) {\n                min = num;\n            }\n     \
    \   }\n        List<string> result = new List<string>();\n        long curr =\
    \ min;\n        long next = 1;\n        while (curr < max) {\n            while\
    \ (next < 9) {\n                if (curr == next) {\n                    result.Add(names[next]);\n\
    \                }\n                next++;\n            }\n            curr++;\n\
    \            next = 1;\n        }\n        return result;", "        if (arr.Count\
    \ == 0) {\n            return new List<string>();\n        }\n        var result\
    \ = new List<string>();\n        var digits = new Dictionary<long, string>();\n\
    \        foreach (var item in arr) {\n            if (item < 1 || item > 9) {\n\
    \                continue;\n            }\n            digits.Add(item, \"One\"\
    );\n            digits.Add(item - 1, \"Two\");\n            digits.Add(item -\
    \ 2, \"Three\");\n            digits.Add(item - 3, \"Four\");\n            digits.Add(item\
    \ - 4, \"Five\");\n            digits.Add(item - 5, \"Six\");\n            digits.Add(item\
    \ - 6, \"Seven\");\n            digits.Add(item - 7, \"Eight\");\n           \
    \ digits.Add(item - 8, \"Nine\");\n            digits.Add(item - 9, \"Ten\");\n\
    \        }\n        var reversed = arr.Reverse().ToList();\n        foreach (var\
    \ item in reversed) {\n            if (item < 1 || item > 9) {\n             \
    \   continue;\n            }\n            var key = item - 1;\n            if\
    \ (digits.TryGetValue(key, out var value)) {\n                result.Add(value);\n\
    \            }\n        }\n        return result;", "        if (arr.Count ==\
    \ 0)\n            return new List<string>();\n        if (arr.Count == 1)\n  \
    \          return new List<string>(new string[]{(string)arr.ElementAt(0)});\n\
    \        List<long> reversed = new List<long>();\n        for (int i = 0; i <\
    \ arr.Count; i++)\n            reversed.Add(arr.Count - 1 - i);\n        List<string>\
    \ result = new List<string>();\n        string one = \"One\";\n        string\
    \ two = \"Two\";\n        string three = \"Three\";\n        string four = \"\
    Four\";\n        string five = \"Five\";\n        string six = \"Six\";\n    \
    \    string seven = \"Seven\";\n        string eight = \"Eight\";\n        string\
    \ nine = \"Nine\";\n        string ten = \"Ten\";\n        string eleven = \"\
    Eleven\";\n        string twelve = \"Twelve\";\n        string thirteen = \"Thirteen\"\
    ;\n        string fourteen = \"Fourteen\";\n        string fifteen = \"Fifteen\"\
    ;\n        string sixteen = \"Sixteen\";\n        string seventeen = \"Seventeen\"\
    ;\n        string eighteen = \"Eighteen\";\n        string nineteen = \"Nineteen\"\
    ;\n        string twenty = \"Twenty\";\n        string twentyone = \"TwentyOne\"\
    ;\n        string twentytwo = \"TwentyTwo\";\n        string twentythree = \"\
    TwentyThree\";\n        string twentyfour = \"TwentyFour\";\n        string twentyfive\
    \ = \"TwentyFive\";\n        string twentysix = \"TwentySix\";\n        string\
    \ twentyseven = \"TwentySeven\";\n        string twentyeight = \"TwentyEight\"\
    ;\n        string twentynine = \"TwentyNine\";\n        string thirty = \"Thirty\"\
    ;\n        string thirtyone = \"ThirtyOne\";\n        string thirtytwo = \"ThirtyTwo\"\
    ;\n        string thirtythree = \"ThirtyThree\";\n        string thirtyfour =\
    \ \"ThirtyFour\";\n        string thirtyfive = \"ThirtyFive\";\n        string\
    \ thirtysix = \"ThirtySix\";\n        string thirtyseven = \"ThirtySeven\";\n\
    \        string thirtyeight = \"ThirtyEight\";\n        string thirtynine = \"\
    ThirtyNine\";\n        string forty = \"Forty\";\n        string fortyone = \"\
    Forty", "        if (arr.Count == 0) return new List<string>();\n        var result\
    \ = new List<string>();\n        var ones = new List<long>();\n        var tens\
    \ = new List<long>();\n        var hundreds = new List<long>();\n        var thousands\
    \ = new List<long>();\n        var tenThousands = new List<long>();\n        var\
    \ hundredThousands = new List<long>();\n        var thousandThousands = new List<long>();\n\
    \        var hundredThousandThousands = new List<long>();\n        var thousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousands = new List<long>();\n\
    \        var thousandThousandThousandThousands = new List<long>();\n        var\
    \ hundredThousandThousandThousandThousands = new List<long>();\n        var thousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var hundredThousandThousandThousandThousandThousandThousandThousandThousandThousandThousands\
    \ = new List<long>();\n        var thous", "        if (arr.Count == 0) return\
    \ new List<string>();\n        var result = new List<string>();\n        var min\
    \ = arr.Min();\n        var max = arr.Max();\n        var digits = new Dictionary<long,\
    \ string> {\n            {1L, \"One\"},\n            {2L, \"Two\"},\n        \
    \    {3L, \"Three\"},\n            {4L, \"Four\"},\n            {5L, \"Five\"\
    },\n            {6L, \"Six\"},\n            {7L, \"Seven\"},\n            {8L,\
    \ \"Eight\"},\n            {9L, \"Nine\"}\n        };\n        var reversed =\
    \ arr.Reverse().ToList();\n        var reversedDigits = new Dictionary<long, string>\
    \ {\n            {1L, \"Ten\"},\n            {2L, \"Twelve\"},\n            {3L,\
    \ \"Thirteen\"},\n            {4L, \"Fourteen\"},\n            {5L, \"Fifteen\"\
    },\n            {6L, \"Sixteen\"},\n            {7L, \"Seventeen\"},\n       \
    \     {8L, \"Eighteen\"},\n            {9L, \"Nineteen\"}\n        };\n      \
    \  var reversedReversed = reversed.Reverse().ToList();\n        var reversedReversedDigits\
    \ = new Dictionary<long, string> {\n            {1L, \"Twenty\"},\n          \
    \  {2L, \"Twenty-one\"},\n            {3L, \"Twenty-two\"},\n            {4L,\
    \ \"Twenty-three\"},\n            {5L, \"Twenty-four\"},\n            {6L, \"\
    Twenty-five\"},\n            {7L, \"Twenty-six\"},\n            {8L, \"Twenty-seven\"\
    },\n            {9L, \"Twenty-eight\"}\n        };\n        var reversedReversedReversed\
    \ = reversedReversed.Reverse().ToList();\n        var reversedReversedReversedDigits\
    \ = new Dictionary<long, string> {\n            {1L, \"Twenty-ten\"},\n      \
    \      {2L, \"Twenty-eleven\"},\n            {3L, \"Twenty-twelve\"},\n      \
    \      {4L, \"Twenty-thirteen\"},\n            {5L, \"Twenty-fourteen\"},\n  \
    \          {6L, \"Twenty-fifteen\"},\n            {7L, \"Twenty-sixteen\"},\n\
    \            {8L, \"Twenty-seventeen\"},\n            {9L, \"Twenty-eighteen\"\
    }\n        };\n        var reversedReversedReversedReversed = reversedReversedReversed.Reverse().ToList();\n\
    \        var reversedReversedReversedReversedDigits = new Dictionary<long, string>\
    \ {\n            {1L, \"Twenty-twenty", "        if (arr.Count == 0)\n       \
    \     return new List<string>();\n        List<string> result = new List<string>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long length\
    \ = max - min + 1;\n        long tens = 10L;\n        long hundreds = 100L;\n\
    \        long thousands = 1000L;\n        long tenThousands = 10000L;\n      \
    \  long hundredThousands = 100000L;\n        long thousandThousands = 1000000L;\n\
    \        long millionThousands = 10000000L;\n        long billionThousands = 100000000L;\n\
    \        long trillionThousands = 1000000000L;\n        long quadrillionThousands\
    \ = 10000000000L;\n        long quintillionThousands = 1000000000000L;\n     \
    \   long sextillionThousands = 1000000000000000L;\n        long septillionThousands\
    \ = 10000000000000000L;\n        long octillionThousands = 100000000000000000L;\n\
    \        long nonillionThousands = 1000000000000000000L;\n        long decillionThousands\
    \ = 10000000000000000000L;\n        long undecillionThousands = 100000000000000000000L;\n\
    \        long duodecillionThousands = 1000000000000000000000L;\n        long tredecillionThousands\
    \ = 1000000000000000000000000L;\n        long quattuordecillionThousands = 10000000000000000000000000L;\n\
    \        long sexdecillionThousands = 100000000000000000000000000L;\n        long\
    \ septendecillionThousands = 1000000000000000000000000000L;\n        long octodecillionThousands\
    \ = 1000000000000000000000000000000L;\n        long novemdecillionThousands =\
    \ 100000000000000000000000000000000L;\n        long vigintillionThousands = 1000000000000000000000000000000000L;\n\
    \        long unvigintillionThousands = 1000000000000000000000000000000000L;\n\
    \        long duovigintillionThousands = 100000000000000000000000000000000L;\n\
    \        long trevigintillionThousands = 1000000000000000000000000000000000L;\n\
    \        long quattuorvigintillionThousands = 100000000000000000000000000000000L;\n\
    \        long sexvigintillionThousands = 1000000000000000000000000000000000L;\n\
    \        long ", "        if (arr.Count == 0) return new List<string>();\n   \
    \     var result = new List<string>();\n        var digits = new Dictionary<long,\
    \ string> {\n            {1L, \"One\"},\n            {2L, \"Two\"},\n        \
    \    {3L, \"Three\"},\n            {4L, \"Four\"},\n            {5L, \"Five\"\
    },\n            {6L, \"Six\"},\n            {7L, \"Seven\"},\n            {8L,\
    \ \"Eight\"},\n            {9L, \"Nine\"}\n        };\n        var reversed =\
    \ arr.Reverse().ToList();\n        var reversedDigits = new Dictionary<long, string>\
    \ {\n            {1L, \"One\"},\n            {2L, \"Two\"},\n            {3L,\
    \ \"Three\"},\n            {4L, \"Four\"},\n            {5L, \"Five\"},\n    \
    \        {6L, \"Six\"},\n            {7L, \"Seven\"},\n            {8L, \"Eight\"\
    },\n            {9L, \"Nine\"}\n        };\n        foreach (var item in reversed)\
    \ {\n            if (item < 10) {\n                result.Add(digits[item]);\n\
    \            } else {\n                result.Add(reversedDigits[item]);\n   \
    \         }\n        }\n        return result;", "        if (arr.Count == 0)\
    \ {\n            return new List<string>();\n        }\n        long max = arr.Max();\n\
    \        long min = arr.Min();\n        long range = (max - min) + 1;\n      \
    \  List<string> result = new List<string>();\n        long curr = min;\n     \
    \   while (curr < max) {\n            long next = (curr + range) % range;\n  \
    \          result.Add(GetName(next));\n            curr = next;\n        }\n \
    \       return result;", "        if (arr.Count == 0)\n            return new\
    \ List<string>();\n        if (arr.Count == 1)\n            return new List<string>(new\
    \ string[]{(string)arr[0].ToString()});\n        List<long> reversed = new List<long>();\n\
    \        foreach (long num in arr)\n            reversed.Add(num);\n        reversed.Reverse();\n\
    \        List<string> result = new List<string>();\n        foreach (long num\
    \ in reversed) {\n            string digit = num.ToString();\n            int\
    \ index = Array.IndexOf(new long[] {1L, 2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L}, num);\n\
    \            if (index >= 0)\n                digit = arr[index].ToString();\n\
    \            result.Add(digit);\n        }\n        return result;", "       \
    \ List<string> result = new List<string>();\n        if (arr.Count > 0) {\n  \
    \          long max = arr.Max();\n            long min = arr.Min();\n        \
    \    long range = (max - min) + 1;\n            int digits = (int)Math.Ceiling(Math.Log10(range));\n\
    \            int length = arr.Count;\n            int digit = 0;\n           \
    \ while (length > 0) {\n                long current = arr[digit];\n         \
    \       result.Add(GetName(current, digits, length));\n                length--;\n\
    \                digit++;\n            }\n        }\n        return result;",
  "        if (arr.Count == 0)\n            return new List<string>();\n        var\
    \ result = new List<string>();\n        var ones = arr.Where(x => x <= 9 && x\
    \ >= 1).ToList();\n        var tens = arr.Where(x => x <= 99 && x >= 10).ToList();\n\
    \        var hundreds = arr.Where(x => x <= 999 && x >= 100).ToList();\n     \
    \   var thousands = arr.Where(x => x <= 9999 && x >= 1000).ToList();\n       \
    \ var millions = arr.Where(x => x <= 99999 && x >= 10000).ToList();\n        var\
    \ billions = arr.Where(x => x <= 999999 && x >= 100000).ToList();\n        var\
    \ trillions = arr.Where(x => x <= 9999999 && x >= 1000000).ToList();\n       \
    \ var quadrillions = arr.Where(x => x <= 999999999 && x >= 10000000).ToList();\n\
    \        var quintillions = arr.Where(x => x <= 99999999999 && x >= 100000000).ToList();\n\
    \        var sextillions = arr.Where(x => x <= 999999999999 && x >= 1000000000).ToList();\n\
    \        var septillions = arr.Where(x => x <= 999999999999 && x >= 10000000000).ToList();\n\
    \        var octillions = arr.Where(x => x <= 999999999999999 && x >= 100000000000).ToList();\n\
    \        var nonillions = arr.Where(x => x <= 999999999999999999 && x >= 100000000000000).ToList();\n\
    \        var onehundreds = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var onethousands = arr.Where(x => x <= 999999999 && x >= 10000).ToList();\n\
    \        var onemillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var onebillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var onetrillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var onequadrillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var onequintillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var onesextillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var oneseptillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();\n\
    \        var oneoctillion = arr.Where(x => x <= 999999999 && x >= 100000).ToList();"]
stop_tokens:
- "\n    }\n"
