name: HumanEval_117_select_words
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given a string s and a natural number n, you have been tasked\
  \ to implement \n    // a function that returns a list of all words from string\
  \ s that contain exactly \n    // n consonants, in order these words appear in the\
  \ string s.\n    // If the string s is empty then the function should return an\
  \ empty list.\n    // Note: you may assume the input string contains only letters\
  \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
  ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    // >>>\
  \ SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
  \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
  \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
  Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"}))\n\
  \    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new string[]{(string)\"\
  Uncle\"}))\n    public static List<string> SelectWords(string s, long n) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
  Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
  little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
  \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
  simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
  Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
  \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
  \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
  \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
  \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
  f\"}))));\n    }\n\n}\n"
completions: ["        List<string> result = new List<string>();\n        long count\
    \ = 0;\n        foreach (string word in s.Split(' '))\n        {\n           \
    \ count += word.Length;\n            if (count >= n)\n            {\n        \
    \        result.Add(word);\n                count -= word.Length;\n          \
    \  }\n        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n\
    \        string vowels = \"aeiou\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        string vowelsConsonants = vowels + consonants;\n        string vowelsConsonantsString\
    \ = vowelsConsonants.ToLower();\n        string vowelsConsonantsStringLength =\
    \ vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.", "        List<string> result = new List<string>();\n\
    \        if (s.Length == 0) {\n            return result;\n        }\n       \
    \ string word = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = true;\n        long count = 0;\n      \
    \  foreach (char c in word) {\n            if (char.IsLetter(c)) {\n         \
    \       isConsonant = false;\n            }\n            if (isConsonant) {\n\
    \                count++;\n            }\n        }\n        if (count != n) {\n\
    \            return result;\n        }\n        foreach (char c in lastWord) {\n\
    \            if (char.IsLetter(c)) {\n                isConsonant = false;\n \
    \           }\n            if (isConsonant) {\n                count--;\n    \
    \        }\n        }\n        if (count != 0) {\n            return result;\n\
    \        }\n        result.Add(word);\n        return result;", "        List<string>\
    \ result = new List<string>();\n        if (s.Length == 0) {\n            return\
    \ result;\n        }\n        string word = \"\";\n        string lastWord = \"\
    \";\n        bool isConsonant = false;\n        long count = 1;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n                if (word.Length == n) {\n                    result.Add(word);\n\
    \                    isConsonant = true;\n                    count = 1;\n   \
    \                 word = \"\";\n                } else {\n                   \
    \ isConsonant = false;\n                    count++;\n                }\n    \
    \        } else {\n                if (isConsonant) {\n                    lastWord\
    \ = word;\n                    word = \"\";\n                    isConsonant =\
    \ false;\n                    count = 1;\n                }\n            }\n \
    \       }\n        if (lastWord.Length > 0) {\n            result.Add(lastWord);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if (s.Length == 0) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        HashSet<string> words = new HashSet<string>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                string word = s.Substring(0, s.IndexOf(c));\n           \
    \     words.Add(word);\n                s = s.Substring(s.IndexOf(c) + 1);\n \
    \           }\n        }\n        foreach (string word in words) {\n         \
    \   int count = 0;\n            foreach (char c in word) {\n                if\
    \ (char.IsLetterOrDigit(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;", "        List<string> result\
    \ = new List<string>();\n        if (s == \"\") {\n            return result;\n\
    \        }\n        long count = 0;\n        foreach (char c in s) {\n       \
    \     if (char.IsLetter(c)) {\n                count++;\n            }\n     \
    \   }\n        if (count != n) {\n            return result;\n        }\n    \
    \    string word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        List<string>\
    \ words = SelectWords(word, n - 1);\n        foreach (string word in words) {\n\
    \            result.Add(word);\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        if (string.IsNullOrEmpty(s)) {\n     \
    \       return result;\n        }\n        long counter = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                counter++;\n\
    \            }\n        }\n        if (counter == n) {\n            result.Add(s);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n\
    \        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n       \
    \ string word = \"\";\n        long count = 0;\n        bool isWord = false;\n\
    \        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n  \
    \              word += c;\n                isWord = true;\n                count++;\n\
    \            }\n            if (count == n) {\n                result.Add(word);\n\
    \                isWord = false;\n                count = 0;\n               \
    \ word = \"\";\n            }\n        }\n        if (isWord) {\n            result.Add(word);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n\
    \        string word = string.Empty;\n        string lastWord = string.Empty;\n\
    \        bool isWord = false;\n        long count = 1;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                isWord = true;\n\
    \                word += c;\n            }\n            if (isWord) {\n      \
    \          count++;\n                if (count == n) {\n                    result.Add(word);\n\
    \                    isWord = false;\n                    word = string.Empty;\n\
    \                    count = 1;\n                }\n            }\n          \
    \  if (char.IsWhiteSpace(c)) {\n                isWord = false;\n            }\n\
    \        }\n        if (word != string.Empty) {\n            result.Add(word);\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        string word = \"\";\n        long count = 0;\n        foreach (char c\
    \ in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n \
    \               count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.Add(word);\n        }\n        return result;", "        List<string>\
    \ result = new List<string>();\n        if (string.IsNullOrEmpty(s))\n       \
    \     return result;\n        string word = string.Empty;\n        long count\
    \ = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                if (count == n)\n                    result.Add(word);\n\
    \                word = word + c;\n                count++;\n            }\n \
    \       }\n        if (count == n)\n            result.Add(word);\n        return\
    \ result;", "        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\
    \ {\n            return result;\n        }\n        char[] chars = s.ToCharArray();\n\
    \        Array.Sort(chars);\n        char[] sortedChars = new char[chars.Length];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            sortedChars[i]\
    \ = chars[i];\n        }\n        Array.Sort(sortedChars);\n        List<string>\
    \ words = new List<string>();\n        string word = \"\";\n        bool isWord\
    \ = false;\n        long count = 0;\n        for (int i = 0; i < sortedChars.Length;\
    \ i++) {\n            if (sortedChars[i] == 'a') {\n                isWord = true;\n\
    \                count++;\n            }\n            if (isWord) {\n        \
    \        word += sortedChars[i];\n                if (count == n) {\n        \
    \            words.Add(word);\n                    isWord = false;\n         \
    \           count = 0;\n                    word = \"\";\n                }\n\
    \            }\n        }\n        return words;", "        List<string> result\
    \ = new List<string>();\n        if (s == \"\") {\n            return result;\n\
    \        }\n        char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n\
    \        string word = \"\";\n        long count = 0;\n        foreach (char c\
    \ in chars) {\n            if (chars.Contains(c)) {\n                count++;\n\
    \                if (count == n) {\n                    result.Add(word);\n  \
    \                  word = \"\";\n                    count = 0;\n            \
    \    }\n                word += c;\n            }\n        }\n        if (count\
    \ > 0) {\n            result.Add(word);\n        }\n        return result;", " \
    \       List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\
    \ return result;\n        string word = string.Empty;\n        bool isConsonant\
    \ = false;\n        long count = 0;\n        foreach (char c in s) {\n       \
    \     if (char.IsLetter(c)) {\n                isConsonant = true;\n         \
    \       word += c;\n                count++;\n            }\n            if (count\
    \ == n) {\n                if (isConsonant) {\n                    result.Add(word);\n\
    \                    isConsonant = false;\n                    word = string.Empty;\n\
    \                    count = 0;\n                }\n            }\n        }\n\
    \        return result;", "        List<string> result = new List<string>();\n\
    \        if (String.IsNullOrEmpty(s)) return result;\n        string word = \"\
    \";\n        bool isWord = false;\n        foreach (char c in s) {\n         \
    \   if (char.IsLetterOrDigit(c)) {\n                word += c;\n             \
    \   isWord = true;\n            }\n            if (isWord) {\n               \
    \ if (word.Length == n) result.Add(word);\n                word = \"\";\n    \
    \            isWord = false;\n            }\n        }\n        return result;",
  "        List<string> result = new List<string>();\n        if (string.IsNullOrEmpty(s))\
    \ return result;\n        string word = \"\";\n        string lastWord = \"\"\
    ;\n        bool isLastWord = false;\n        foreach (char c in s) {\n       \
    \     if (char.IsLetter(c)) {\n                word += c;\n                if\
    \ (word.Length == n) {\n                    result.Add(word);\n              \
    \      word = \"\";\n                    isLastWord = true;\n                }\n\
    \            } else {\n                isLastWord = false;\n            }\n  \
    \          if (isLastWord) {\n                lastWord = word;\n            }\n\
    \        }\n        return result;", "        List<string> result = new List<string>();\n\
    \        if (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n\
    \        char[] chars = s.ToCharArray();\n        int[] count = new int[26];\n\
    \        for (int i = 0; i < chars.Length; i++) {\n            count[chars[i]\
    \ - 'a']++;\n        }\n        Array.Sort(count);\n        long total = 0;\n\
    \        for (int i = 0; i < count.Length; i++) {\n            total += count[i];\n\
    \            if (total >= n) {\n                result.Add(new string(chars, i,\
    \ 1));\n                total -= count[i];\n            }\n        }\n       \
    \ return result;", "        List<string> result = new List<string>();\n      \
    \  if (s == \"\") return result;\n        string word = s.Substring(0, s.Length\
    \ - 1);\n        string lastWord = s.Substring(s.Length - 1, 1);\n        bool\
    \ isConsonant = false;\n        bool isLastConsonant = false;\n        bool isLastConsonantLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWord = false;\n        bool\
    \ isLastConsonantLastWordLastWordLastWord = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLast", "        List<string> result\
    \ = new List<string>();\n        if (string.IsNullOrEmpty(s)) return result;\n\
    \        string word = string.Empty;\n        string lastWord = string.Empty;\n\
    \        string lastWord2 = string.Empty;\n        string lastWord3 = string.Empty;\n\
    \        string lastWord4 = string.Empty;\n        string lastWord5 = string.Empty;\n\
    \        string lastWord6 = string.Empty;\n        string lastWord7 = string.Empty;\n\
    \        string lastWord8 = string.Empty;\n        string lastWord9 = string.Empty;\n\
    \        string lastWord10 = string.Empty;\n        string lastWord11 = string.Empty;\n\
    \        string lastWord12 = string.Empty;\n        string lastWord13 = string.Empty;\n\
    \        string lastWord14 = string.Empty;\n        string lastWord15 = string.Empty;\n\
    \        string lastWord16 = string.Empty;\n        string lastWord17 = string.Empty;\n\
    \        string lastWord18 = string.Empty;\n        string lastWord19 = string.Empty;\n\
    \        string lastWord20 = string.Empty;\n        string lastWord21 = string.Empty;\n\
    \        string lastWord22 = string.Empty;\n        string lastWord23 = string.Empty;\n\
    \        string lastWord24 = string.Empty;\n        string lastWord25 = string.Empty;\n\
    \        string lastWord26 = string.Empty;\n        string lastWord27 = string.Empty;\n\
    \        string lastWord28 = string.Empty;\n        string lastWord29 = string.Empty;\n\
    \        string lastWord30 = string.Empty;\n        string lastWord31 = string.Empty;\n\
    \        string lastWord32 = string.Empty;\n        string lastWord33 = string.Empty;\n\
    \        string lastWord34 = string.Empty;\n        string lastWord35 = string.Empty;\n\
    \        string lastWord36 = string.Empty;\n        string lastWord37 = string.Empty;\n\
    \        string lastWord38 = string.Empty;\n        string lastWord39 = string.Empty;\n\
    \        string lastWord40 = string.Empty;\n        string lastWord41 = string.Empty;\n\
    \        string lastWord42 = string.Empty;\n        string lastWord43 = string.Empty;\n\
    \        string lastWord44 = string.Empty;\n        string lastWord45 = string.Empty;\n\
    \        string lastWord46 = string.Empty;\n        string lastWord47 = string.Empty;\n\
    \        string lastWord48 = string.Empty;\n        string lastWord49 = string.Empty;\n\
    \        string lastWord50 = string.", "        List<string> result = new List<string>();\n\
    \        if (string.IsNullOrEmpty(s)) return result;\n        string word = \"\
    \";\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n  \
    \              word += c;\n            }\n        }\n        string word2 = \"\
    \";\n        long count = 1;\n        foreach (char c in word) {\n           \
    \ if (char.IsLetter(c)) {\n                word2 += c;\n                count++;\n\
    \            }\n        }\n        if (count != n) return result;\n        if\
    \ (n == 0) return result;\n        string word3 = \"\";\n        foreach (char\
    \ c in word2) {\n            if (char.IsLetter(c)) {\n                word3 +=\
    \ c;\n            }\n        }\n        string word4 = \"\";\n        foreach\
    \ (char c in word3) {\n            if (char.IsLetter(c)) {\n                word4\
    \ += c;\n            }\n        }\n        string word5 = \"\";\n        foreach\
    \ (char c in word4) {\n            if (char.IsLetter(c)) {\n                word5\
    \ += c;\n            }\n        }\n        string word6 = \"\";\n        foreach\
    \ (char c in word5) {\n            if (char.IsLetter(c)) {\n                word6\
    \ += c;\n            }\n        }\n        string word7 = \"\";\n        foreach\
    \ (char c in word6) {\n            if (char.IsLetter(c)) {\n                word7\
    \ += c;\n            }\n        }\n        string word8 = \"\";\n        foreach\
    \ (char c in word7) {\n            if (char.IsLetter(c)) {\n                word8\
    \ += c;\n            }\n        }\n        string word9 = \"\";\n        foreach\
    \ (char c in word8) {\n            if (char.IsLetter(c)) {\n                word9\
    \ += c;\n            }\n        }\n        string word10 = \"\";\n        foreach\
    \ (char c in word9) {\n            if (char.IsLetter(c)) {\n                word10\
    \ += c;\n            }\n        }\n        string word11 = \"\";\n        foreach\
    \ (char c in word10) {\n            if (char.IsLetter(c)) {\n                word11\
    \ += c;\n            }\n        }\n        string word12 = \"\";\n        foreach\
    \ (char c in word11) {\n            if (char.IsLetter(c)) {\n                word12\
    \ += c;\n            }\n        }\n        string word13 = \"\";\n        foreach\
    \ (char c in word12) {\n            if (char.IsLetter(c)) {\n                word13\
    \ += c;\n            }\n        }\n        string word14 = \"\";\n        foreach\
    \ (char c in word13) {\n            if (char.IsLetter(c)) {\n                word14\
    \ += c;\n            }\n        }\n        string word15 = \"\";\n        foreach\
    \ (char c in word14) {\n            if (char.IsLetter(c)) {\n                word15\
    \ += c;\n            }\n"]
stop_tokens:
- "\n    }\n"
