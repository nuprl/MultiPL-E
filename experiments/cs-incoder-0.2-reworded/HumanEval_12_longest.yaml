name: HumanEval_12_longest
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Out of list of strings, return the longest one. Return the first\
  \ one in case of multiple\n    // strings of the same length. Return null in case\
  \ the input list is empty.\n    // >>> Longest((new List<string>()))\n    // null\n\
  \    // >>> Longest((new List<string>(new string[]{(string)\"a\", (string)\"b\"\
  , (string)\"c\"})))\n    // (\"a\")\n    // >>> Longest((new List<string>(new string[]{(string)\"\
  a\", (string)\"bb\", (string)\"ccc\"})))\n    // (\"ccc\")\n    public static string\
  \ Longest(List<string> strings) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Longest((new\
  \ List<string>())).Equals(null));\n    Debug.Assert(Longest((new List<string>(new\
  \ string[]{(string)\"x\", (string)\"y\", (string)\"z\"}))).Equals((\"x\")));\n \
  \   Debug.Assert(Longest((new List<string>(new string[]{(string)\"x\", (string)\"\
  yyy\", (string)\"zzzz\", (string)\"www\", (string)\"kkkk\", (string)\"abc\"}))).Equals((\"\
  zzzz\")));\n    }\n\n}\n"
completions: ["        if (strings == null || strings.Count == 0) {\n            return\
    \ null;\n        }\n        string longest = null;\n        foreach (string s\
    \ in strings) {\n            if (longest == null || longest.Length < s.Length)\
    \ {\n                longest = s;\n            }\n        }\n        return longest;",
  "        if (strings == null || strings.Count == 0)\n            return null;\n\
    \        string longest = null;\n        foreach (string s in strings) {\n   \
    \         if (longest == null || longest.Length > s.Length)\n                longest\
    \ = s;\n        }\n        return longest;", "        if (strings == null || strings.Count\
    \ == 0) {\n            return null;\n        }\n        string longest = null;\n\
    \        string longestLength = null;\n        foreach (string s in strings) {\n\
    \            if (s.Length > longestLength) {\n                longest = s;\n \
    \               longestLength = s.Length;\n            }\n        }\n        return\
    \ longest;", "        if (strings == null || strings.Count == 0) {\n         \
    \   return null;\n        }\n        var longest = strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();\n        if (longest == null) {\n           \
    \ return null;\n        }\n        return longest;", "        if (strings == null\
    \ || strings.Count == 0) {\n            return null;\n        }\n        var longest\
    \ = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n        if (longest\
    \ != null) {\n            return longest;\n        }\n        var longest2 = strings.GroupBy(s\
    \ => s.Length).OrderByDescending(g => g.Key).FirstOrDefault();\n        if (longest2\
    \ != null) {\n            return longest2.Key;\n        }\n        return null;",
  "        if (strings == null || strings.Count == 0)\n            return null;\n\
    \        string longest = string.Empty;\n        foreach (string s in strings)\n\
    \            if (s.Length > longest.Length)\n                longest = s;\n  \
    \      return longest;", "        if (strings == null || strings.Count == 0) return\
    \ null;\n        string longest = strings.First();\n        foreach (string s\
    \ in strings) {\n            if (s.Length > longest.Length) {\n              \
    \  longest = s;\n            }\n        }\n        return longest;", "       \
    \ if (strings == null || strings.Count == 0) {\n            return null;\n   \
    \     }\n        string longest = null;\n        string longestLength = null;\n\
    \        foreach (string s in strings) {\n            if (s.Length > longestLength)\
    \ {\n                longest = s;\n                longestLength = s.Length;\n\
    \            }\n        }\n        return longest;", "        if (strings == null\
    \ || strings.Count == 0) {\n            return null;\n        }\n        string\
    \ longest = strings.First();\n        foreach (string s in strings) {\n      \
    \      if (s.Length > longest.Length) {\n                longest = s;\n      \
    \      }\n        }\n        return longest;", "        if (strings == null ||\
    \ strings.Count == 0)\n            return null;\n        string longest = string.Empty;\n\
    \        foreach (string s in strings) {\n            if (s.Length > longest.Length)\n\
    \                longest = s;\n        }\n        return longest;", "        if\
    \ (strings == null || strings.Count == 0)\n            return null;\n        string\
    \ longest = strings.Max(s => s.Length);\n        if (longest == 0)\n         \
    \   return null;\n        List<string> longestStrings = new List<string>();\n\
    \        foreach (string s in strings) {\n            if (s.Length == longest)\n\
    \                longestStrings.Add(s);\n        }\n        if (longestStrings.Count\
    \ == 1)\n            return longestStrings[0];\n        return longestStrings.Max(s\
    \ => s.Length);", "        if (strings == null || strings.Count == 0) {\n    \
    \        return null;\n        }\n        var longest = strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();\n        if (longest == null) {\n           \
    \ return null;\n        }\n        return longest;", "        if (strings == null\
    \ || strings.Count == 0) {\n            return null;\n        }\n        string\
    \ longest = null;\n        string longestLength = 0;\n        foreach (string\
    \ s in strings) {\n            int length = s.Length;\n            if (length\
    \ > longestLength) {\n                longest = s;\n                longestLength\
    \ = length;\n            }\n        }\n        return longest;", "        if (strings\
    \ == null || strings.Count == 0) {\n            return null;\n        }\n    \
    \    var longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest == null) {\n            return null;\n        }\n       \
    \ return longest;", "        if (strings == null || strings.Count == 0)\n    \
    \        return null;\n        var longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest != null)\n            return longest;\n        return strings.OrderByDescending(s\
    \ => s.Length).FirstOrDefault();", "        if (strings == null || strings.Count\
    \ == 0) {\n            return null;\n        }\n        string longest = null;\n\
    \        foreach (string s in strings) {\n            if (longest == null || s.Length\
    \ > longest.Length) {\n                longest = s;\n            }\n        }\n\
    \        return longest;", "        if (strings == null || strings.Count == 0)\n\
    \            return null;\n        var longest = strings.OrderByDescending(s =>\
    \ s.Length).FirstOrDefault();\n        if (longest != null)\n            return\
    \ longest;\n        return strings.OrderByDescending(s => s.Length).FirstOrDefault();",
  "        if (strings == null || strings.Count == 0) {\n            return null;\n\
    \        }\n        var longest = strings.OrderByDescending(s => s.Length).FirstOrDefault();\n\
    \        if (longest != null) {\n            return longest;\n        }\n    \
    \    return strings.OrderByDescending(s => s.Length).FirstOrDefault();", "   \
    \     if (strings == null || strings.Count == 0)\n            return null;\n \
    \       string longest = null;\n        foreach (string s in strings) {\n    \
    \        if (longest == null || longest.Length > s.Length)\n                longest\
    \ = s;\n        }\n        return longest;", "        if (strings == null || strings.Count\
    \ == 0) {\n            return null;\n        }\n        string longest = null;\n\
    \        string longestLength = null;\n        foreach (string s in strings) {\n\
    \            int length = s.Length;\n            if (longestLength == null ||\
    \ length > longestLength) {\n                longest = s;\n                longestLength\
    \ = length;\n            }\n        }\n        return longest;"]
stop_tokens:
- "\n    }\n"
