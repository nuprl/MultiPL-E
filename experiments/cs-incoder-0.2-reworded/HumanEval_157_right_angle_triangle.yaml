name: HumanEval_157_right_angle_triangle
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Given the lengths of the three sides of a triangle. Return true\
  \ if the three\n    // sides form a right-angled triangle, false otherwise.\n  \
  \  // A right-angled triangle is a triangle in which one angle is right angle or\
  \ \n    // 90 degree.\n    // Example:\n    // >>> RightAngleTriangle((3L), (4L),\
  \ (5L))\n    // (true)\n    // >>> RightAngleTriangle((1L), (2L), (3L))\n    //\
  \ (false)\n    public static bool RightAngleTriangle(long a, long b, long c) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(RightAngleTriangle((3L),\
  \ (4L), (5L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (2L), (3L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((10L), (6L), (8L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((2L), (2L), (2L)) == (false));\n    Debug.Assert(RightAngleTriangle((7L),\
  \ (24L), (25L)) == (true));\n    Debug.Assert(RightAngleTriangle((10L), (5L), (7L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((5L), (12L), (13L)) == (true));\n\
  \    Debug.Assert(RightAngleTriangle((15L), (8L), (17L)) == (true));\n    Debug.Assert(RightAngleTriangle((48L),\
  \ (55L), (73L)) == (true));\n    Debug.Assert(RightAngleTriangle((1L), (1L), (1L))\
  \ == (false));\n    Debug.Assert(RightAngleTriangle((2L), (2L), (10L)) == (false));\n\
  \    }\n\n}\n"
completions: ["        long side1 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n\
    \        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side4 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(a, 2));\n        long side5 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a,\
    \ 2));\n        long side6 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n   \
    \     long side7 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b, 2));\n        long side8\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side9 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side10 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a,\
    \ 2));\n        long side11 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n  \
    \      long side12 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long side14 =\
    \ Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        long side15 = Math.Sqrt(Math.Pow(a,\
    \ 2) + Math.Pow(b, 2));\n        long side16 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(a,\
    \ 2));\n        long side17 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n  \
    \      long side18 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long\
    \ side19 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side20 =\
    \ Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side21 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side22 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side23 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n  \
    \      long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long\
    \ side25 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side26 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side27 = Math.Sqrt(Math.Pow(b,\
    \ 2) + Math.Pow(c, 2));\n        long side28 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side29 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side30 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n        ", " \
    \       long d = b * b - 4 * a * c;\n        if (d < 0)\n            return false;\n\
    \        long root = (long)Math.Sqrt(d);\n        long t1 = (-b + root) / (2 *\
    \ a);\n        long t2 = (-b - root) / (2 * a);\n        if (t1 == t2)\n     \
    \       return true;\n        return false;", "        long ab = a - b;\n    \
    \    long ac = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n\
    \        long abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc\
    \ = abb * bc;\n        long abcbc = abcb * bc;\n        long abcbcb = abcbcb *\
    \ bc;\n        long abcbcbc = abcbcbc * bc;\n        long abcbcbcb = abcbcbcb\
    \ * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n        long abcbcbcbcb = abcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbc = abcbcbcbcbc * bc;\n        long abcbcbcbcbcb\
    \ = abcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc = abcbcbcbcbcbc * bc;\n   \
    \     long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc", "        long side1 = Math.Sqrt(Math.Pow(a, 2) +\
    \ Math.Pow(b, 2));\n        long side2 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c,\
    \ 2));\n        long side3 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n   \
    \     long side4 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side5\
    \ = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(a, 2));\n        long side6 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(b, 2));\n        long side7 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b,\
    \ 2));\n        long side8 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n   \
    \     long side9 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side10\
    \ = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side11 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side12 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side13 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side14 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side15 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side16 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side17 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side18 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side19 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side20 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side21 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side22 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side23 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side24 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        long side25 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(b, 2));\n  \
    \      long side26 = Math.Sqrt(Math.Pow(a, 2) + Math.Pow(c, 2));\n        long\
    \ side27 = Math.Sqrt(Math.Pow(b, 2) + Math.Pow(c, 2));\n        long side28 =\
    \ Math.Sqrt(Math.Pow(b, 2) + Math.Pow(a, 2));\n        long side29 = Math.Sqrt(Math.Pow(c,\
    \ 2) + Math.Pow(a, 2));\n        long side30 = Math.Sqrt(Math.Pow(c, 2) + Math.Pow(b,\
    \ 2));\n        ", "        long ab = a - b;\n        long ac = a - c;\n     \
    \   long bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n\
    \        long abbc = ab * bc;\n        long abac = ab * ac;\n        long abcab\
    \ = ab * cab;\n        long abcabc = ab * cab * bc;\n        long abcabbc = ab\
    \ * cab * bc * bc;\n        long abcabac = ab * cab * ac * ac;\n        long abcabcab\
    \ = ab * cab * cab * ac;\n        long abcabcabc = ab * cab * cab * ac * ac;\n\
    \        long abcabcabbc = ab * cab * cab * ac * ac * bc;\n        long abcabcabac\
    \ = ab * cab * cab * ac * ac * ac;\n        long abcabcabcab = ab * cab * cab\
    \ * ac * ac * ac * ac;\n        long abcabcabcabc = ab * cab * cab * ac * ac *\
    \ ac * ac;\n        long abcabcabcabbc = ab * cab * cab * ac * ac * ac * ac *\
    \ bc;\n        long abcabcabcabac = ab * cab * cab * ac * ac * ac * ac * ac;\n\
    \        long abcabcabcabcab = ab * cab * cab * ac * ac * ac * ac * ac * ac;\n\
    \        long abcabcabcabcabc = ab * cab * cab * ac * ac * ac * ac * ac * ac;\n\
    \        long abcabcabcabcabbc = ab * cab * cab * ac * ac * ac * ac * ac * ac\
    \ * bc;\n        long abcabcabcabcabac = ab * cab * cab * ac * ac * ac * ac *\
    \ ac * ac * ac;\n        long abcabcabcabcabcab = ab * cab * cab * ac * ac * ac\
    \ * ac * ac * ac * ac * ac;\n        long abcabcabcabcabcabc = ab * cab * cab\
    \ * ac * ac * ac * ac * ac * ac * ac * ac;\n        long abcabcabcabcabcabbc =\
    \ ab * cab * cab * ac * ac * ac * ac * ac * ac * ac * ac * bc;\n        long abcabcabcabcabcabac\
    \ = ab * cab * cab * ac * ac * ac", "        long ab = a - b;\n        long ac\
    \ = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n        long\
    \ abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc = abb * bc;\n\
    \        long acbbc = acbb * bc;\n        long abbbc = abbb * bc;\n        long\
    \ acbbbc = acbbbc * bc;\n        long abbbbc = abbbbc * bc;\n        long acbbbbc\
    \ = acbbbbc * bc;\n        long abbbbbc = abbbbbc * bc;\n        long acbbbbc\
    \ = acbbbbc * bc;\n        long abbbbbbc = abbbbbbc * bc;\n        long acbbbbbc\
    \ = acbbbbbc * bc;\n        long abbbbbbbc = abbbbbbbc * bc;\n        long acbbbbbbc\
    \ = acbbbbbbc * bc;\n        long abbbbbbbbc = abbbbbbbbc * bc;\n        long\
    \ acbbbbbbbc = acbbbbbbbc * bc;\n        long abbbbbbbbbc = abbbbbbbbbc * bc;\n\
    \        long acbbbbbbbbc = acbbbbbbbbc * bc;\n        long abbbbbbbbbbc = abbbbbbbbbbc\
    \ * bc;\n        long acbbbbbbbbbc = acbbbbbbbbbc * bc;\n        long abbbbbbbbbbbc\
    \ = abbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbc = acbbbbbbbbbbc * bc;\n  \
    \      long abbbbbbbbbbbbc = abbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbc\
    \ = acbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbc = abbbbbbbbbbbbbc * bc;\n\
    \        long acbbbbbbbbbbbbc = acbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbc = acbbbbbbbbbbbbbc *\
    \ bc;\n        long abbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbc * bc;\n        long\
    \ acbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbc * bc;\n        long abbbbbbbbbbbbbbbbc\
    \ = abbbbbbbbbbbbbbbbc * bc;\n        long acbbbbbbbbbbbbbbbc = acbbbbbbbbbbbbbbbc\
    \ * bc;\n        long abbbbbbbbbbbbbbbbbc = abbbbbbbbbbbbbbbbbc * bc", "     \
    \   long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n   \
    \     long abc = ab + bc;\n        long acb = ac + bc;\n        long abbc = ab\
    \ + bc;\n        long acab = ac + ab;\n        long abcab = ab + ac;\n       \
    \ long acabc = ac + ab;\n        long abcabc = ab + ac;\n        long acabbc =\
    \ ac + ab;\n        long abcabbc = ab + ac;\n        long acabcab = ac + ab;\n\
    \        long abcabcab = ab + ac;\n        long acabcabc = ac + ab;\n        long\
    \ abcabcabc = ab + ac;\n        long acabcabbc = ac + ab;\n        long abcabcabbc\
    \ = ab + ac;\n        long acabcabcab = ac + ab;\n        long abcabcabcab = ab\
    \ + ac;\n        long acabcabcabc = ac + ab;\n        long abcabcabcabc = ab +\
    \ ac;\n        long acabcabcabbc = ac + ab;\n        long abcabcabcabbc = ab +\
    \ ac;\n        long acabcabcabcab = ac + ab;\n        long abcabcabcabcab = ab\
    \ + ac;\n        long acabcabcabcabc = ac + ab;\n        long abcabcabcabcabc\
    \ = ab + ac;\n        long acabcabcabcabbc = ac + ab;\n        long abcabcabcabcabbc\
    \ = ab + ac;\n        long acabcabcabcabcab = ac + ab;\n        long abcabcabcabcabcab\
    \ = ab + ac;\n        long acabcabcabcabcabc = ac + ab;\n        long abcabcabcabcabcabc\
    \ = ab + ac;\n        long acabcabcabcabcabbc = ac + ab;\n        long abcabcabcabcabcabbc\
    \ = ab + ac;\n        long acabcabcabcabcabcab = ac + ab;\n        long abcabcabcabcabcabcab\
    \ = ab + ac;\n        long acabcabcabcabcabcabbc = ac + ab;\n        long abcabcabcabcabcabcabbc\
    \ = ab + ac;\n        long acabcabcabcabcabcabcab = ac + ab;\n        long abcabcabcabcabcabcabcab\
    \ = ab + ac", "        long ab = a - b;\n        long ac = a - c;\n        long\
    \ bc = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n    \
    \    long abbc = ab * bc;\n        long acbc = ac * bc;\n        long abbcc =\
    \ ab * bc * bc;\n        long acbcc = ac * bc * bc;\n        long abbccc = ab\
    \ * bc * bc * bc;\n        long acbccc = ac * bc * bc * bc;\n        long abbcccb\
    \ = ab * bc * bc * bc * bc;\n        long acbcccb = ac * bc * bc * bc * bc;\n\
    \        long abbcccbc = ab * bc * bc * bc * bc * bc;\n        long acbcccbc =\
    \ ac * bc * bc * bc * bc * bc;\n        long abbcccbcb = ab * bc * bc * bc * bc\
    \ * bc * bc;\n        long acbcccbcb = ac * bc * bc * bc * bc * bc * bc;\n   \
    \     long abbcccbcbc = ab * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbc\
    \ = ac * bc * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcb = ab * bc\
    \ * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbcb = ac * bc * bc\
    \ * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcbc = ab * bc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbcbc = ac * bc * bc * bc\
    \ * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcbcb = ab * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccbcbcbcb = ac * bc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abbcccbcbcbcbc\
    \ = ab * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long acbcccb",
  "        long ab = a - b;\n        long ac = c - a;\n        long bc = b - c;\n\
    \        long acb = ac * bc;\n        long abc = ab * bc;\n        long acbc =\
    \ acb * bc;\n        long abcac = abc * ac;\n        long abcabc = abcabc * abc;\n\
    \        long acbcabc = acbcabc * acb;\n        long acbcabcb = acbcabcb * acb;\n\
    \        long acbcabcbc = acbcabcbc * acb;\n        long acbcabcbcd = acbcabcbcd\
    \ * acb;\n        long acbcabcbcde = acbcabcbcde * acb;\n        long acbcabcbcdef\
    \ = acbcabcbcdef * acb;\n        long acbcabcbcdefg = acbcabcbcdefg * acb;\n \
    \       long acbcabcbcdefgh = acbcabcbcdefgh * acb;\n        long acbcabcbcdefghi\
    \ = acbcabcbcdefghi * acb;\n        long acbcabcbcdefghij = acbcabcbcdefghij *\
    \ acb;\n        long acbcabcbcdefghijk = acbcabcbcdefghijk * acb;\n        long\
    \ acbcabcbcdefghijkl = acbcabcbcdefghijkl * acb;\n        long acbcabcbcdefghijkll\
    \ = acbcabcbcdefghijkll * acb;\n        long acbcabcbcdefghijklm = acbcabcbcdefghijklm\
    \ * acb;\n        long acbcabcbcdefghijklmn = acbcabcbcdefghijkln * acb;\n   \
    \     long acbcabcbcdefghijklno = acbcabcbcdefghijklno * acb;\n        long acbcabcbcdefghijklnop\
    \ = acbcabcbcdefghijklnop * acb;\n        long acbcabcbcdefghijklnopq = acbcabcbcdefghijklnopq\
    \ * acb;\n        long acbcabcbcdefghijklnopr = acbcabcbcdefghijklnopr * acb;\n\
    \        long acbcabcbcdefghijklno", "        long ab = a - b;\n        long ac\
    \ = c - a;\n        long bc = b - c;\n        long acb = ac * bc;\n        long\
    \ abc = ab * bc;\n        long acab = ac * abc;\n        long abcab = ab * abc;\n\
    \        long acabc = ac * abc;\n        long abcabc = ab * abc;\n        long\
    \ acabcb = ac * abc;\n        long abcabcb = ab * abc;\n        long acabcbc =\
    \ ac * abc;\n        long abcabcbc = ab * abc;\n        long acabcbcb = ac * abc;\n\
    \        long abcabcbcb = ab * abc;\n        long acabcbcbc = ac * abc;\n    \
    \    long abcabcbcbc = ab * abc;\n        long acabcbcbcb = ac * abc;\n      \
    \  long abcabcbcbcb = ab * abc;\n        long acabcbcbcbc = ac * abc;\n      \
    \  long abcabcbcbcbc = ab * abc;\n        long acabcbcbcbcb = ac * abc;\n    \
    \    long abcabcbcbcbcb = ab * abc;\n        long acabcbcbcbcbc = ac * abc;\n\
    \        long abcabcbcbcbcbc = ab * abc;\n        long acabcbcbcbcbcb = ac * abc;\n\
    \        long abcabcbcbcbcbcb = ab * abc;\n        long acabcbcbcbcbcbc = ac *\
    \ abc;\n        long abcabcbcbcbcbcbc = ab * abc;\n        long acabcbcbcbcbcbcb\
    \ = ac * abc;\n        long abcabcbcbcbcbcbcb = ab * abc;\n        long acabcbcbcbcbcbcbc\
    \ = ac * abc;\n        long abcabcbcbcbcbcbcbc = ab * abc;\n        long acabcbcbcbcbcbcbcb\
    \ = ac * abc;\n        long abcabcbcbcbcbcbcbcb = ab * abc;\n        long acabcbcbcbcbcbcbcbc\
    \ = ac * abc;\n        long abcabcbcbcbcbcbcbcbc = ab * abc;\n        long acabcbcbcbcbcbcbcbcb\
    \ = ac * abc;\n        long abcabcbcbcbcbcbcbcbcb = ab * abc;\n        long acabcb",
  "        long ab = a - b;\n        long ac = a - c;\n        long bc = b - c;\n\
    \        long abc = ab * bc;\n        long acb = ac * bc;\n        long abcb =\
    \ abc * bc;\n        long acbc = acb * bc;\n        long acbcabc = acbc * abc;\n\
    \        long acbcabcb = acbcabc * bc;\n        long acbcabcbc = acbcabcb * bc;\n\
    \        long acbcabcbcb = acbcabcbc * bc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * bc;\n        long acbcabcbcbcb = acbcabcbcbc * bc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * bc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * bc;\n  \
    \      long acbcabcbcbcbcbc = acbcabcbcbcbcb * bc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcb = acbcabcbcbcbcbcb *\
    \ bc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcb * bc;\n        long acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n      \
    \  long acbcabcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * bc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcbcb * bc;\n  \
    \      long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbcb * bc;\n        long\
    \ acbcabcbcbcbcbcbcbcbc = acbcab", "        long ab = a - b;\n        long ac\
    \ = a - c;\n        long bc = b - c;\n        long acb = ac * bc;\n        long\
    \ abc = ab * bc;\n        long acbc = acb * bc;\n        long abbc = abb * bc;\n\
    \        long acbbc = acbb * bc;\n        long abbbc = abbb * bc;\n        long\
    \ acbbbc = acbbbc * bc;\n        long abbbbc = abbbbc * bc;\n        long acbbbbc\
    \ = acbbb * bc;\n        long abbbbc = abbbbc * bc;\n        long acbbbcc = acbbb\
    \ * bc * bc;\n        long abbbbcc = abbbb * bc * bc;\n        long acbbbcbc =\
    \ acbbb * bc * bc * bc;\n        long abbbbcbc = abbbb * bc * bc * bc;\n     \
    \   long acbbbcbcb = acbbb * bc * bc * bc * bc;\n        long abbbbcbcb = abbbb\
    \ * bc * bc * bc * bc;\n        long acbbbcbcbc = acbbb * bc * bc * bc * bc *\
    \ bc;\n        long abbbbcbcbc = abbbb * bc * bc * bc * bc * bc;\n        long\
    \ acbbbcbcbcb = acbbb * bc * bc * bc * bc * bc * bc;\n        long abbbbcbcbcb\
    \ = abbbb * bc * bc * bc * bc * bc * bc;\n        long acbbbcbcbcbc = acbbb *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long abbbbcbcbcbc = abbbb * bc *\
    \ bc * bc * bc * bc * bc * bc;\n        long acbbbcbcbcbcb = acbbb * bc * bc *\
    \ bc * bc * bc * bc * bc * bc;\n        long abbbbcbcbcbcb = abbbb * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long acbbbcbcbcbcbc = acbbb * bc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abbbbcbcbcbcbc = abbbb\
    \ * bc", "        long ab = a - b;\n        long ac = a - c;\n        long bc\
    \ = b - c;\n        long acb = ac * bc;\n        long abc = ab * bc;\n       \
    \ long abbc = ab * bc;\n        long abcab = ab * abc;\n        long abcabc =\
    \ ab * abc * bc;\n        long abcabcb = ab * abc * bc * bc;\n        long abcabcbb\
    \ = ab * abc * bc * bc * bc;\n        long abcabcbbc = ab * abc * bc * bc * bc\
    \ * bc;\n        long abcabcbbcd = ab * abc * bc * bc * bc * bc * bc;\n      \
    \  long abcabcbbcde = ab * abc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdef\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefg =\
    \ ab * abc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefgh\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefghi\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long\
    \ abcabcbbcdefghij = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc\
    \ * bc;\n        long abcabcbbcdefghijk = ab * abc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefghijkl = ab * abc\
    \ * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n        long abcabcbbcdefghijkll\
    \ = ab * abc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc * bc;\n\
    \        long abcabcbbcdefghijkllm = ab * abc * bc * bc * bc * bc * bc * bc *\
    \ bc * bc * bc * bc * bc * bc * bc;\n        long abcabc", "        long ab =\
    \ a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb\
    \ = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n   \
    \     long abbc = abb * bc;\n        long abbbc = abbb * bc;\n        long abbbcd\
    \ = abbbc * bc;\n        long abbbcde = abbbcd * bc;\n        long abbbcdef =\
    \ abbbcde * bc;\n        long abbbcdefg = abbbcdef * bc;\n        long abbbcdefgh\
    \ = abbbcdefg * bc;\n        long abbbcdefghi = abbbcdefgh * bc;\n        long\
    \ abbbcdefghij = abbbcdefghi * bc;\n        long abbbcdefghijk = abbbcdefghij\
    \ * bc;\n        long abbbcdefghijkl = abbbcdefghijk * bc;\n        long abbbcdefghijklmn\
    \ = abbbcdefghijklm * bc;\n        long abbbcdefghijklmn1 = abbbcdefghijklmn *\
    \ bc;\n        long abbbcdefghijklmno = abbbcdefghijklmn1 * bc;\n        long\
    \ abbbcdefghijklmnop = abbbcdefghijklmno * bc;\n        long abbbcdefghijklmnopq\
    \ = abbbcdefghijklmnop * bc;\n        long abbbcdefghijklmnopr = abbbcdefghijklmnopq\
    \ * bc;\n        long abbbcdefghijklmnoprs = abbbcdefghijklmnopr * bc;\n     \
    \   long abbbcdefghijklmnoprst = abbbcdefghijklmnoprs * bc;\n        long abbbcdefghijklmnoprstu\
    \ = abbbcdefghijklmnoprst * bc;\n        long abbbcdefghijklmnoprstv = abbbcdefghijklmnoprstu\
    \ * bc;\n        long abbbcdefghijklmnoprstuv = abbbcdefghijklmnoprstv * bc;\n",
  "        long ab = a - b;\n        long ac = c - a;\n        long bc = b - c;\n\
    \        long acb = ac * bc;\n        long abc = ab * bc;\n        long acbc =\
    \ acb * bc;\n        long abbc = abb * bc;\n        long abcbc = abcb * bc;\n\
    \        long abcbcb = abcbcb * bc;\n        long abcbcbc = abcbcbc * bc;\n  \
    \      long abcbcbcb = abcbcbcb * bc;\n        long abcbcbcbc = abcbcbcbc * bc;\n\
    \        long abcbcbcbcb = abcbcbcbcb * bc;\n        long abcbcbcbcbc = abcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcb = abcbcbcbcbcb * bc;\n        long abcbcbcbcbcbc\
    \ = abcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcb = abcbcbcbcbcbcb * bc;\n\
    \        long abcbcbcbcbcbcbc = abcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcb = abcbcbcbcbcbcbcb *\
    \ bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long\
    \ abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc\
    \ = abcbcbcbcbcbcbcbc * bc;\n        long abcbcbcbcbcbcbcbc = abcbcbcbcbcbcbcbc\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long\
    \ abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb\
    \ = abcbcbcbcbcbcbcbcb * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb\
    \ * bc;\n        long abcbcbcbcbcbcbcbcb = abcbcbcbcbcbcbcbcb * ", "        long\
    \ ab = a - b;\n        long ac = c - a;\n        long bc = b - c;\n        long\
    \ acb = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n\
    \        long acbcab = acbc * abc;\n        long acbcabc = acbcab * abc;\n   \
    \     long acbcabcb = acbcabc * abc;\n        long acbcabcbc = acbcabcb * abc;\n\
    \        long acbcabcbcb = acbcabcbc * abc;\n        long acbcabcbcbc = acbcabcbcb\
    \ * abc;\n        long acbcabcbcbcb = acbcabcbcbc * abc;\n        long acbcabcbcbcbc\
    \ = acbcabcbcbcb * abc;\n        long acbcabcbcbcbcb = acbcabcbcbcbc * abc;\n\
    \        long acbcabcbcbcbcbc = acbcabcbcbcbcb * abc;\n        long acbcabcbcbcbcbcb\
    \ = acbcabcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbc = acbcabcbcbcbcbcbc * abc;\n        long\
    \ acbcabcbcbcbcbcbcb = acbcabcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbc\
    \ = acbcabcbcbcbcbcbcbc * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n  \
    \      long acbcabcbcbcbcbcbcbcb = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcb\
    \ = acbcabcbcbcbcbcbcbcb * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc\
    \ * abc;\n        long acbcabcbcbcbcbcbcbcbc = acbcabcbcbcbcbcbcbcbc * abc;\n\
    \        long acbcabcbcb", "        long ab = a - b;\n        long ac = a - c;\n\
    \        long bc = b - c;\n        long abc = ab * bc;\n        long acb = ac\
    \ * bc;\n        long abbc = ab * bc;\n        long acab = ac * ab;\n        long\
    \ acbc = ac * bc;\n        long abcab = ab * ac;\n        long abcbc = ab * bc;\n\
    \        long acbca = ac * bc;\n        long accab = ac * ab;\n        long acbcab\
    \ = ac * bc * ab;\n        long abcabc = ab * ac * bc;\n        long abcbca =\
    \ ab * bc * ac;\n        long abcabca = ab * ac * bc * ab;\n        long abcbcabc\
    \ = ab * bc * ac * bc;\n        long abcabcbc = ab * ac * bc * ab * bc;\n    \
    \    long abcabcabc = ab * ac * bc * ab * ac * bc;\n        long abcabcbca = ab\
    \ * bc * ac * ab * bc * ac;\n        long abcabcabca = ab * ac * bc * ab * ac\
    \ * bc * ab;\n        long abcabcbcabc = ab * bc * ac * ab * bc * ac * bc;\n \
    \       long abcabcabcbca = ab * ac * bc * ab * ac * bc * ab * bc;\n        long\
    \ abcabcabcabc = ab * ac * bc * ab * ac * bc * ab * ac * bc;\n        long abcabcabcbcabc\
    \ = ab * bc * ac * ab * ac * bc * ab * ac * bc * bc;\n        long abcabcabcabcbc\
    \ = ab * ac * bc * ab * ac * bc * ab * ac * bc * ab * bc * bc;\n        long abcabcabcabcabc\
    \ = ab * ac * bc * ab * ac * bc * ab * ac * bc * ab * ac * bc * ab * bc * ac *\
    \ bc;\n        long abcabcabcabcabcbc = ab * ac * bc * ab * ac * bc * ab * ac\
    \ * bc * ab * ac * bc * ab * ac * bc * ab * bc * ac * bc;\n        long abcabcabcabcabcabc\
    \ = ab * ac * bc * ab * ac * bc * ab * ac * bc * ab * ac * ", "        long ab\
    \ = a - b;\n        long ac = a - c;\n        long bc = b - c;\n        long acb\
    \ = ac * bc;\n        long abc = ab * bc;\n        long acbc = acb * bc;\n   \
    \     long abbc = abb * bc;\n        long acbbc = acbb * bc;\n        long abbbc\
    \ = abbb * bc;\n        long acbbbc = acbbbc * bc;\n        long abbbbc = abbbbc\
    \ * bc;\n        long acbbbbc = acbbbbc * bc;\n        long abbbbbc = abbbbbc\
    \ * bc;\n        long acbbbcbc = acbbbcb * bc;\n        long abbbbcbc = abbbbcb\
    \ * bc;\n        long acbbbcbcb = acbbbcbc * bc;\n        long abbbbcbcb = abbbbcbc\
    \ * bc;\n        long acbbbcbcbb = acbbbcbcb * bc;\n        long abbbbcbcbb =\
    \ abbbbcbcb * bc;\n        long acbbbcbcbcb = acbbbcbcbc * bc;\n        long abbbbcbcbcb\
    \ = abbbbcbcbc * bc;\n        long acbbbcbcbcbb = acbbbcbcbcb * bc;\n        long\
    \ abbbbcbcbcbb = abbbbcbcbcb * bc;\n        long acbbbcbcbcbb = acbbbcbcbcb *\
    \ bc;\n        long abbbbcbcbcbb = abbbbcbcbcb * bc;\n        long acbbbcbcbcbcb\
    \ = acbbbcbcbcb * bc;\n        long abbbbcbcbcbcb = abbbbcbcbcb * bc;\n      \
    \  long acbbbcbcbcbcbb = acbbbcbcbcbcb * bc;\n        long abbbbcbcbcbcbb = abbbbcbcbcbcb\
    \ * bc;\n        long acbbbcbcbcbcbcb = acbbbcbcbcbcb * bc;\n        long abbbbcbcbcbcbcb\
    \ = abbbbcbcbcbcb * bc;\n        long acbbbcbcbcbcbcbb = acbbbcbcbcbcbcb * bc;\n\
    \        long abbbbcbcbcbcbcbb = ", "        long d = b * b - 4 * a * c;\n   \
    \     if (d < 0)\n            return false;\n        long root = (long)Math.Sqrt(d);\n\
    \        long t1 = (-b + root) / (2 * a);\n        long t2 = (-b - root) / (2\
    \ * a);\n        return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;", "        long\
    \ d = b * b - 4 * a * c;\n        if (d > 0) {\n            long e = Math.Sqrt(d);\n\
    \            long f = (b + e) / (2 * a);\n            long g = (c + e) / (2 *\
    \ a);\n            if (f > 0 && g > 0) {\n                return true;\n     \
    \       }\n        }\n        return false;"]
stop_tokens:
- "\n    }\n"
