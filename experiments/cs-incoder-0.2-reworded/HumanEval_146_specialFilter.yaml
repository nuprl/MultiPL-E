name: HumanEval_146_specialFilter
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Write a function that takes a list of numbers as input and returns\
  \ \n    // the number of elements in the list that are greater than 10 and both\
  \ \n    // first and last digits of a number are odd (1, 3, 5, 7, 9).\n    // For\
  \ example:\n    // >>> Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L})))\n    // (1L)\n    // >>> Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L})))\n\
  \    // (2L)\n    public static long Specialfilter(List<long> nums) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)5L, (long)-2L, (long)1L, (long)-5L}))) == (0L));\n\
  \    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)15L, (long)-73L,\
  \ (long)14L, (long)-15L}))) == (1L));\n    Debug.Assert(Specialfilter((new List<long>(new\
  \ long[]{(long)33L, (long)-2L, (long)-3L, (long)45L, (long)21L, (long)109L}))) ==\
  \ (2L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)43L, (long)-12L,\
  \ (long)93L, (long)125L, (long)121L, (long)109L}))) == (4L));\n    Debug.Assert(Specialfilter((new\
  \ List<long>(new long[]{(long)71L, (long)-2L, (long)-33L, (long)75L, (long)21L,\
  \ (long)19L}))) == (3L));\n    Debug.Assert(Specialfilter((new List<long>(new long[]{(long)1L})))\
  \ == (0L));\n    Debug.Assert(Specialfilter((new List<long>())) == (0L));\n    }\n\
  \n}\n"
completions: ["        long count = 0;\n        foreach (long n in nums) {\n     \
    \       if (n > 10 && n % 2 == 1 && n % 2 == 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (long n in nums) {\n            if (n > 10L) {\n            \
    \    if (n % 2 == 1L && n % 10 == 1L) {\n                    count++;\n      \
    \          }\n            }\n        }\n        return count;", "        long\
    \ count = 0;\n        foreach (long num in nums) {\n            if (num > 10)\
    \ {\n                if (num % 2 == 0) {\n                    if (num % 2 == 1)\
    \ {\n                        if (num % 2 == 0) {\n                           \
    \ if (num % 2 == 1) {\n                                if (num % 2 == 0) {\n \
    \                                   if (num % 2 == 1) {\n                    \
    \                    count++;\n                                    }\n       \
    \                         }\n                            }\n                 \
    \       }\n                    }\n                }\n            }\n        }\n\
    \        return count;", "        long count = 0;\n        foreach (long n in\
    \ nums) {\n            if (n > 10L) {\n                if (n % 2 == 1L && n %\
    \ 10 == 1L) {\n                    count++;\n                }\n            }\n\
    \        }\n        return count;", "        long result = 0;\n        foreach\
    \ (var num in nums) {\n            if (num > 10) {\n                if (num %\
    \ 2 == 0) {\n                    if (num % 2 == 1) {\n                       \
    \ result += num;\n                    }\n                }\n            }\n  \
    \      }\n        return result;", "        long count = 0;\n        foreach (long\
    \ num in nums) {\n            if (num > 10 && num % 2 == 1 && num % 2 == 0) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       long count = 0;\n        foreach (long n in nums) {\n            if (n\
    \ > 10 && n % 2 == 1 && n % 2 == 0) {\n                count++;\n            }\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10 && num % 2 == 1 && num % 2 ==\
    \ 0) {\n                count++;\n            }\n        }\n        return count;",
  "        long count = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10 && num % 2 == 1 && num % 2 == 0) {\n                count++;\n        \
    \    }\n        }\n        return count;", "        long count = 0;\n        foreach\
    \ (long n in nums) {\n            if (n > 10L) {\n                long first =\
    \ n % 10;\n                long last = n / 10;\n                if (first % 2\
    \ == 1 && last % 2 == 1) {\n                    count++;\n                }\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (long n in nums) {\n            if (n > 10) {\n             \
    \   if (n % 2 == 0) {\n                    if (n % 10 == 1) {\n              \
    \          if (n % 100 == 1) {\n                            count++;\n       \
    \                 }\n                    }\n                }\n            }\n\
    \        }\n        return count;", "        long count = 0;\n        foreach\
    \ (long num in nums) {\n            if (num > 10) {\n                long firstDigit\
    \ = num % 10;\n                long lastDigit = num / 10;\n                if\
    \ (firstDigit % 2 == 1 && lastDigit % 2 == 1) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  long result = 0;\n        foreach (var num in nums) {\n            if (num\
    \ > 10) {\n                if (num % 2 == 0) {\n                    if (num %\
    \ 2 == 1) {\n                        if (num % 2 == 1) {\n                   \
    \         if (num % 2 == 1) {\n                                if (num % 2 ==\
    \ 1) {\n                                    if (num % 2 == 1) {\n            \
    \                            result += 1;\n                                  \
    \  }\n                                }\n                            }\n     \
    \                   }\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        long count = 0;\n        foreach\
    \ (long n in nums) {\n            if (n > 10 && n % 2 == 1 && n % 10 == 1) {\n\
    \                count++;\n            }\n        }\n        return count;", " \
    \       long count = 0;\n        foreach (long num in nums) {\n            if\
    \ (num > 10) {\n                if (num % 2 == 0 && num % 2 != 1) {\n        \
    \            count++;\n                }\n            }\n        }\n        return\
    \ count;", "        long count = 0;\n        foreach (long n in nums) {\n    \
    \        if (n > 10 && n % 2 == 1 && n % 2 == 0) {\n                count++;\n\
    \            }\n        }\n        return count;", "        long count = 0;\n\
    \        foreach (long num in nums) {\n            if (num > 10 && num % 2 ==\
    \ 1 && num % 2 == 0) {\n                count++;\n            }\n        }\n \
    \       return count;", "        long sum = 0;\n        foreach (long n in nums)\
    \ {\n            if (n > 10 && n % 2 == 1 && n % 2 == 0) {\n                sum\
    \ += n;\n            }\n        }\n        return sum;", "        long count =\
    \ 0;\n        foreach (long n in nums) {\n            if (n > 10L) {\n       \
    \         if (n % 2 == 1L && nums.Last() % 2 == 1L) {\n                    count++;\n\
    \                }\n            }\n        }\n        return count;", "      \
    \  long count = 0;\n        foreach (long num in nums) {\n            if (num\
    \ > 10) {\n                if (num % 2 == 1) {\n                    if (num %\
    \ 2 == 1) {\n                        count++;\n                    }\n       \
    \         }\n            }\n        }\n        return count;"]
stop_tokens:
- "\n    }\n"
