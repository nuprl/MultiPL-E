language: cs
name: HumanEval_120_maximum
results:
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = 0;\n        long minValue =\
    \ 0;\n        long maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxValue2\
    \ = 0;\n        long minValue2 = 0;\n        long maxIndex3 = 0;\n        long\
    \ minIndex3 = 0;\n        long maxValue3 = 0;\n        long minValue3 = 0;\n \
    \       long maxIndex4 = 0;\n        long minIndex4 = 0;\n        long maxValue4\
    \ = 0;\n        long minValue4 = 0;\n        long maxIndex5 = 0;\n        long\
    \ minIndex5 = 0;\n        long maxValue5 = 0;\n        long minValue5 = 0;\n \
    \       long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long maxValue6\
    \ = 0;\n        long minValue6 = 0;\n        long maxIndex7 = 0;\n        long\
    \ minIndex7 = 0;\n        long maxValue7 = 0;\n        long minValue7 = 0;\n \
    \       long maxIndex8 = 0;\n        long minIndex8 = 0;\n        long maxValue8\
    \ = 0;\n        long minValue8 = 0;\n        long maxIndex9 = 0;\n        long\
    \ minIndex9 = 0;\n        long maxValue9 = 0;\n        long minValue9 = 0;\n \
    \       long maxIndex10 = 0;\n        long minIndex10 = 0;\n        long maxValue10\
    \ = 0;\n        long minValue10 = 0;\n        long maxIndex11 = 0;\n        long\
    \ minIndex11 = 0;\n        long maxValue11 = 0;\n        long minValue11 = 0;\n\
    \        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long maxValue12\
    \ = 0;\n        long minValue12 = 0;\n        long maxIndex13 = 0;\n        long\
    \ minIndex13 = 0;\n        long maxValue13 = 0;\n        long minValue13 = 0;\n\
    \        long maxIndex14 = 0;\n        long minIndex14 = 0;\n        long maxValue14\
    \ = 0;\n        long minValue14 = 0;\n        long maxIndex15 = 0;\n        long\
    \ minIndex15 = 0;\n        long maxValue15 = 0;\n        long minValue15 = 0;\n\
    \        long maxIndex16 = 0;\n        long minIndex16 = 0;\n        long maxValue16\
    \ = 0;\n        long minValue16 = 0;\n        long maxIndex17 = 0;\n        long\
    \ minIndex17 = 0;\n        long maxValue17 = 0;\n        long minValue17 = 0;\n\
    \        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long maxValue18\
    \ = 0;\n        long minValue18 = 0;\n        long maxIndex19 = 0;\n        \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplyq2n05a.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmplyq2n05a.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmplyq2n05a.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(30,14): warning CS0219: The variable ''maxValue'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(31,14): warning CS0219: The variable ''minValue'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(34,14): warning CS0219: The variable ''maxValue2'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(35,14): warning CS0219: The variable ''minValue2'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(38,14): warning CS0219: The variable ''maxValue3'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(39,14): warning CS0219: The variable ''minValue3'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(42,14): warning CS0219: The variable ''maxValue4'' is assigned
    but its value is never used

    /tmp/tmplyq2n05a.cs(43,14): warning CS0219: The variable ''minValue4'' is assigned
    but'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ip9smhs.cs(112,13): error CS1001: Identifier expected

    /tmp/tmp3ip9smhs.cs(112,13): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (arr.Count < 1 || k < 1 || k >\
    \ arr.Count) return new List<long>();\n        long max = 0;\n        List<long>\
    \ res = new List<long>();\n        long cur = arr[0];\n        long maxCur = cur;\n\
    \        foreach (long n in arr) {\n            if (n > maxCur) {\n          \
    \      maxCur = n;\n                max = maxCur;\n            }\n           \
    \ if (n == cur) {\n                res.Add(maxCur);\n                maxCur =\
    \ n;\n            }\n        }\n        if (maxCur > max) {\n            max =\
    \ maxCur;\n        }\n        if (max > k) {\n            max = k;\n        }\n\
    \        return res.Take(max).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8t_dgfzn.cs(46,25): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n          \
    \  throw new ArgumentException(\"The length of the list must be in the range of\
    \ [1, 1000]\");\n        }\n        if (k > arr.Count) {\n            throw new\
    \ ArgumentException(\"The length of the list must be in the range of [1, 1000]\"\
    );\n        }\n        List<long> result = new List<long>();\n        long maxValue\
    \ = arr.Max();\n        long minValue = arr.Min();\n        long maxIndex = arr.FindIndex(x\
    \ => x > maxValue);\n        long minIndex = arr.FindIndex(x => x < minValue);\n\
    \        long maxCount = 0;\n        long minCount = 0;\n        long maxCountIndex\
    \ = 0;\n        long minCountIndex = 0;\n        long maxCountValue = 0;\n   \
    \     long minCountValue = 0;\n        long maxCountValueIndex = 0;\n        long\
    \ minCountValueIndex = 0;\n        long maxCountValueValue = 0;\n        long\
    \ minCountValueValue = 0;\n        long maxCountValueValueIndex = 0;\n       \
    \ long minCountValueValueIndex = 0;\n        long maxCountValueValueValue = 0;\n\
    \        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue = 0;\n        long maxCountValueValueIndex\
    \ = 0;\n        long minCountValueValueValue\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfxex9lxa.cs(83,37): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \      count++;\n        }\n        if (count > k) {\n            k = count;\n\
    \        }\n        if (k == 1) {\n            res.Add(arr[0]);\n            return\
    \ res;\n        }\n        long mid = max / 2;\n        long mid2 = min / 2;\n\
    \        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8hha3heq.cs(89,26): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = arr[0];\n \
    \       long maxIndex = 0;\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n                maxIndex = i;\n     \
    \       }\n        }\n        long maxValue = max;\n        long maxIndex = maxIndex;\n\
    \        long maxIndex2 = maxIndex;\n        long maxIndex3 = maxIndex;\n    \
    \    long maxIndex4 = maxIndex;\n        long maxIndex5 = maxIndex;\n        long\
    \ maxIndex6 = maxIndex;\n        long maxIndex7 = maxIndex;\n        long maxIndex8\
    \ = maxIndex;\n        long maxIndex9 = maxIndex;\n        long maxIndex10 = maxIndex;\n\
    \        long maxIndex11 = maxIndex;\n        long maxIndex12 = maxIndex;\n  \
    \      long maxIndex13 = maxIndex;\n        long maxIndex14 = maxIndex;\n    \
    \    long maxIndex15 = maxIndex;\n        long maxIndex16 = maxIndex;\n      \
    \  long maxIndex17 = maxIndex;\n        long maxIndex18 = maxIndex;\n        long\
    \ maxIndex19 = maxIndex;\n        long maxIndex20 = maxIndex;\n        long maxIndex21\
    \ = maxIndex;\n        long maxIndex22 = maxIndex;\n        long maxIndex23 =\
    \ maxIndex;\n        long maxIndex24 = maxIndex;\n        long maxIndex25 = maxIndex;\n\
    \        long maxIndex26 = maxIndex;\n        long maxIndex27 = maxIndex;\n  \
    \      long maxIndex28 = maxIndex;\n        long maxIndex29 = maxIndex;\n    \
    \    long maxIndex30 = maxIndex;\n        long maxIndex31 = maxIndex;\n      \
    \  long maxIndex32 = maxIndex;\n        long maxIndex33 = maxIndex;\n        long\
    \ maxIndex34 = maxIndex;\n        long maxIndex35 = maxIndex;\n        long maxIndex36\
    \ = maxIndex;\n        long maxIndex37 = maxIndex;\n        long maxIndex38 =\
    \ maxIndex;\n        long maxIndex39 = maxIndex;\n        long maxIndex40 = maxIndex;\n\
    \        long maxIndex41 = maxIndex;\n        long maxIndex42 = maxIndex;\n  \
    \      long maxIndex43 = maxIndex;\n        long maxIndex44 = maxIndex;\n    \
    \    long maxIndex45 = maxIndex;\n        long maxIndex46 = maxIndex;\n      \
    \  long maxIndex47 = maxIndex;\n        long maxIndex48 = maxIndex;\n        long\
    \ maxIndex49 = maxIndex;\n        long maxIndex50 = maxIndex;\n        long maxIndex51\
    \ = maxIndex;\n        \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppytcuszy.cs(36,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmppytcuszy.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        long temp = 0;\n        long temp2 = 0;\n        long\
    \ temp3 = 0;\n        foreach (long i in arr) {\n            sum += i;\n     \
    \       if (sum > k) {\n                max = sum;\n                min = i;\n\
    \                count = 1;\n                sum = 0;\n            } else if (sum\
    \ < k) {\n                max = sum;\n                min = i;\n             \
    \   count = 1;\n                sum = 0;\n            } else {\n             \
    \   count++;\n                sum += i;\n            }\n        }\n        temp\
    \ = max - min;\n        sum = 0;\n        foreach (long i in arr) {\n        \
    \    sum += i;\n            if (sum > k) {\n                max = sum;\n     \
    \           min = i;\n                count = 1;\n                sum = 0;\n \
    \           } else if (sum < k) {\n                max = sum;\n              \
    \  min = i;\n                count = 1;\n                sum = 0;\n          \
    \  } else {\n                count++;\n                sum += i;\n           \
    \ }\n        }\n        temp = max - min;\n        sum = 0;\n        foreach (long\
    \ i in arr) {\n            sum += i;\n            if (sum > k) {\n           \
    \     max = sum;\n                min = i;\n                count = 1;\n     \
    \           sum = 0;\n            } else if (sum < k) {\n                max =\
    \ sum;\n                min = i;\n                count = 1;\n               \
    \ sum = 0;\n            } else {\n                count++;\n                sum\
    \ += i;\n            }\n        }\n        temp = max - min;\n        sum = 0;\n\
    \        foreach (long i in arr) {\n            sum += i;\n            if (sum\
    \ > k) {\n                max = sum;\n                min = i;\n             \
    \   count = 1;\n                sum = 0;\n            } else if (sum < k) {\n\
    \                max = sum;\n                min = i;\n                count =\
    \ 1;\n                sum = 0;\n            } else {\n                count++;\n\
    \                sum += i;\n            }\n        }\n        temp = max - min;\n\
    \        sum = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n                sum = 0;\n            } else\
    \ if (sum < k) {\n                max = sum;\n                min = i;\n     \
    \           count = 1;\n                sum = 0;\n            } else {\n     \
    \           count++;\n                sum += i;\n            }\n        }\n  \
    \      temp = max - min;\n        sum = 0;\n        foreach (long i in arr) {\n\
    \            sum += i;\n            if (sum > k) {\n                max = sum;\n\
    \                min = i;\n                count = 1;\n                sum = 0;\n\
    \            } else if (sum < k) {\n                max = sum;\n             \
    \   min = i;\n                count = 1;\n                sum = 0;\n         \
    \   } else {\n                count++;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7hq8kupi.cs(144,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp7hq8kupi.cs(158,2): error CS1513: } expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxVal = 0;\n        long minVal = 0;\n\
    \        long maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxVal2\
    \ = 0;\n        long minVal2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3\
    \ = 0;\n        long maxVal3 = 0;\n        long minVal3 = 0;\n        long maxIndex4\
    \ = 0;\n        long minIndex4 = 0;\n        long maxVal4 = 0;\n        long minVal4\
    \ = 0;\n        long maxIndex5 = 0;\n        long minIndex5 = 0;\n        long\
    \ maxVal5 = 0;\n        long minVal5 = 0;\n        long maxIndex6 = 0;\n     \
    \   long minIndex6 = 0;\n        long maxVal6 = 0;\n        long minVal6 = 0;\n\
    \        long maxIndex7 = 0;\n        long minIndex7 = 0;\n        long maxVal7\
    \ = 0;\n        long minVal7 = 0;\n        long maxIndex8 = 0;\n        long minIndex8\
    \ = 0;\n        long maxVal8 = 0;\n        long minVal8 = 0;\n        long maxIndex9\
    \ = 0;\n        long minIndex9 = 0;\n        long maxVal9 = 0;\n        long minVal9\
    \ = 0;\n        long maxIndex10 = 0;\n        long minIndex10 = 0;\n        long\
    \ maxVal10 = 0;\n        long minVal10 = 0;\n        long maxIndex11 = 0;\n  \
    \      long minIndex11 = 0;\n        long maxVal11 = 0;\n        long minVal11\
    \ = 0;\n        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long\
    \ maxVal12 = 0;\n        long minVal12 = 0;\n        long maxIndex13 = 0;\n  \
    \      long minIndex13 = 0;\n        long maxVal13 = 0;\n        long minVal13\
    \ = 0;\n        long maxIndex14 = 0;\n        long minIndex14 = 0;\n        long\
    \ maxVal14 = 0;\n        long minVal14 = 0;\n        long maxIndex15 = 0;\n  \
    \      long minIndex15 = 0;\n        long maxVal15 = 0;\n        long minVal15\
    \ = 0;\n        long maxIndex16 = 0;\n        long minIndex16 = 0;\n        long\
    \ maxVal16 = 0;\n        long minVal16 = 0;\n        long maxIndex17 = 0;\n  \
    \      long minIndex17 = 0;\n        long maxVal17 = 0;\n        long minVal17\
    \ = 0;\n        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long\
    \ maxVal18 = 0;\n        long minVal18 = 0;\n        long maxIndex19 = 0;\n  \
    \      \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_fq21xlc.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp_fq21xlc.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp_fq21xlc.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(30,14): warning CS0219: The variable ''maxVal'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(31,14): warning CS0219: The variable ''minVal'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(34,14): warning CS0219: The variable ''maxVal2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(35,14): warning CS0219: The variable ''minVal2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(38,14): warning CS0219: The variable ''maxVal3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(39,14): warning CS0219: The variable ''minVal3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(42,14): warning CS0219: The variable ''maxVal4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(43,14): warning CS0219: The variable ''minVal4'' is assigned
    but its value is ne'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        if (k == 0) return arr;\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxVal = arr[0];\n        long minVal\
    \ = arr[0];\n        long maxCount = 0;\n        long minCount = 0;\n        bool\
    \ isMax = true;\n        bool isMin = true;\n        bool isMaxOrMin = true;\n\
    \        bool isMaxOrMinOrMax = true;\n        bool isMaxOrMinOrMaxOrMin = true;\n\
    \        bool isMaxOrMinOrMaxOrMinOrMax = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMax = true;\n        bool\
    \ isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin = true;\n\
    \        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax = true;\n\
    \        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin = true;\n\
    \        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOr\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_0js0288.cs(55,41): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ maxIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n            if\
    \ (arr[i] > max) {\n                max = arr[i];\n                maxIndex =\
    \ i;\n            }\n        }\n        long maxValue = max;\n        long maxIndex\
    \ = maxIndex;\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ == maxValue) {\n                res.Add(arr[maxIndex]);\n                maxIndex++;\n\
    \            }\n        }\n        return res;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptziuy6mk.cs(36,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmptziuy6mk.cs(39,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = arr.Min();\n        long mid = min\
    \ + (max - min) / 2;\n        long mid2 = mid + (max - min) / 2;\n        long\
    \ mid3 = mid2 + (max - min) / 2;\n        long mid4 = mid3 + (max - min) / 2;\n\
    \        long mid5 = mid4 + (max - min) / 2;\n        long mid6 = mid5 + (max\
    \ - min) / 2;\n        long mid7 = mid6 + (max - min) / 2;\n        long mid8\
    \ = mid7 + (max - min) / 2;\n        long mid9 = mid8 + (max - min) / 2;\n   \
    \     long mid10 = mid9 + (max - min) / 2;\n        long mid11 = mid10 + (max\
    \ - min) / 2;\n        long mid12 = mid11 + (max - min) / 2;\n        long mid13\
    \ = mid12 + (max - min) / 2;\n        long mid14 = mid13 + (max - min) / 2;\n\
    \        long mid15 = mid14 + (max - min) / 2;\n        long mid16 = mid15 + (max\
    \ - min) / 2;\n        long mid17 = mid16 + (max - min) / 2;\n        long mid18\
    \ = mid17 + (max - min) / 2;\n        long mid19 = mid18 + (max - min) / 2;\n\
    \        long mid20 = mid19 + (max - min) / 2;\n        long mid21 = mid20 + (max\
    \ - min) / 2;\n        long mid22 = mid21 + (max - min) / 2;\n        long mid23\
    \ = mid22 + (max - min) / 2;\n        long mid24 = mid23 + (max - min) / 2;\n\
    \        long mid25 = mid24 + (max - min) / 2;\n        long mid26 = mid25 + (max\
    \ - min) / 2;\n        long mid27 = mid26 + (max - min) / 2;\n        long mid28\
    \ = mid27 + (max - min) / 2;\n        long mid29 = mid28 + (max - min) / 2;\n\
    \        long mid30 = mid29 + (max - min) / 2;\n        long mid31 = mid30 + (max\
    \ - min) / 2;\n        long mid32 = mid31 + (max - min) / 2;\n        long mid33\
    \ = mid32 + (max - min) / 2;\n        long mid34 = mid33 + (max - min) / 2;\n\
    \        long mid35 = mid34 + (max - min) / 2;\n        long mid36 = mid35 + (max\
    \ - min) / 2;\n        long mid37 = mid36 + (max - min) / 2;\n        long mid38\
    \ = mid37 + (max - min) / 2;\n        long mid39 = mid38 + (max - min\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp_ssmifr.cs(66,40): error CS1026: ) expected

    /tmp/tmpp_ssmifr.cs(66,40): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n        long\
    \ index = 0;\n        long value = arr[0];\n        long maxCount = 0;\n     \
    \   long minCount = 0;\n        long maxCountIndex = 0;\n        long minCountIndex\
    \ = 0;\n        long maxCountValue = arr[0];\n        long minCountValue = arr[0];\n\
    \        long maxCountIndexValue = 0;\n        long minCountIndexValue = 0;\n\
    \        long maxCountValueCount = 0;\n        long minCountValueCount = 0;\n\
    \        long maxCountIndexValueCount = 0;\n        long minCountIndexValueCount\
    \ = 0;\n        long maxCountValueCountCount = 0;\n        long minCountValueCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long minCountIndexValueCountCount\
    \ = 0;\n        long maxCountValueCountCountCount = 0;\n        long minCountValueCountCountCount\
    \ = 0;\n        long maxCountIndexValueCountCount = 0;\n        long min\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0w0ij_7u.cs(83,17): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        if (k == 0) return arr;\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long cur = arr[0];\n\
    \        long maxValue = cur;\n        for (int i = 1; i < arr.Count; i++) {\n\
    \            if (arr[i] > cur) {\n                max = Math.Max(max, cur);\n\
    \                maxIndex = i;\n            }\n            cur = arr[i];\n   \
    \     }\n        max = Math.Max(max, cur);\n        res.Add(max);\n        if\
    \ (maxIndex < arr.Count - 1) {\n            long nextMax = arr[maxIndex + 1];\n\
    \            if (nextMax > max) {\n                max = nextMax;\n          \
    \      maxIndex = maxIndex + 1;\n            }\n        }\n        res.Add(max);\n\
    \        return res;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdqnxp36l.cs(42,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (cur > max) {\n                max = cur;\n            }\n\
    \            cur = i;\n        }\n        long curMax = 0;\n        long curMaxIndex\
    \ = 0;\n        foreach (long i in arr) {\n            if (cur > curMax) {\n \
    \               curMax = cur;\n                curMaxIndex = i;\n            }\n\
    \            cur = i;\n        }\n        long curMaxIndex2 = curMaxIndex;\n \
    \       long curMaxIndex3 = curMaxIndex;\n        long curMaxIndex4 = curMaxIndex;\n\
    \        long curMaxIndex5 = curMaxIndex;\n        long curMaxIndex6 = curMaxIndex;\n\
    \        long curMaxIndex7 = curMaxIndex;\n        long curMaxIndex8 = curMaxIndex;\n\
    \        long curMaxIndex9 = curMaxIndex;\n        long curMaxIndex10 = curMaxIndex;\n\
    \        long curMaxIndex11 = curMaxIndex;\n        long curMaxIndex12 = curMaxIndex;\n\
    \        long curMaxIndex13 = curMaxIndex;\n        long curMaxIndex14 = curMaxIndex;\n\
    \        long curMaxIndex15 = curMaxIndex;\n        long curMaxIndex16 = curMaxIndex;\n\
    \        long curMaxIndex17 = curMaxIndex;\n        long curMaxIndex18 = curMaxIndex;\n\
    \        long curMaxIndex19 = curMaxIndex;\n        long curMaxIndex20 = curMaxIndex;\n\
    \        long curMaxIndex21 = curMaxIndex;\n        long curMaxIndex22 = curMaxIndex;\n\
    \        long curMaxIndex23 = curMaxIndex;\n        long curMaxIndex24 = curMaxIndex;\n\
    \        long curMaxIndex25 = curMaxIndex;\n        long curMaxIndex26 = curMaxIndex;\n\
    \        long curMaxIndex27 = curMaxIndex;\n        long curMaxIndex28 = curMaxIndex;\n\
    \        long curMaxIndex29 = curMaxIndex;\n        long curMaxIndex30 = curMaxIndex;\n\
    \        long curMaxIndex31 = curMaxIndex;\n        long curMaxIndex32 = curMaxIndex;\n\
    \        long curMaxIndex33 = curMaxIndex;\n        long curMaxIndex34 = curMaxIndex;\n\
    \        long curMaxIndex35 = curMaxIndex;\n        long curMaxIndex36 = curMaxIndex;\n\
    \        long curMaxIndex37 = curMaxIndex;\n        long curMaxIndex38 = curMaxIndex;\n\
    \        long curMaxIndex39 = curMaxIndex;\n        long curMaxIndex40 = curMaxIndex;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfom6trfz.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n        bool\
    \ isMaxIndex = true;\n        bool isMinIndex = true;\n        bool isMaxValue\
    \ = true;\n        bool isMinValue = true;\n        bool isMaxIndexValue = true;\n\
    \        bool isMinIndexValue = true;\n        bool isMaxIndexMin = true;\n  \
    \      bool isMinIndexMin = true;\n        bool isMaxIndexMax = true;\n      \
    \  bool isMinIndexMax = true;\n        bool isMaxIndexMinIndex = true;\n     \
    \   bool isMinIndexMinIndex = true;\n        bool isMaxIndexMaxIndex = true;\n\
    \        bool isMinIndexMaxIndex = true;\n        bool isMaxIndexMinIndexValue\
    \ = true;\n        bool isMinIndexMinIndexValue = true;\n        bool isMaxIndexMaxIndexValue\
    \ = true;\n        bool isMinIndexMaxIndexValue = true;\n        bool isMaxIndexMinIndexMin\
    \ = true;\n        bool isMinIndexMinIndexMin = true;\n        bool isMaxIndexMaxIndexMin\
    \ = true;\n        bool isMinIndexMaxIndexMin = true;\n        bool isMaxIndexMinIndexMax\
    \ = true;\n        bool isMinIndexMinIndexMax = true;\n        bool isMaxIndexMaxIndexMax\
    \ = true;\n        bool isMinIndexMinIndexMax = true;\n        bool isMaxIndexMinIndexMaxValue\
    \ = true;\n        bool isMinIndexMinIndexMaxValue = true;\n        bool isMaxIndexMaxIndexMaxValue\
    \ = true;\n        bool isMinIndexMaxIndexMaxValue = true;\n        bool isMaxIndexMinIndexMaxMin\
    \ = true;\n        bool isMinIndexMinIndexMaxMin = true;\n        bool isMaxIndexMaxIndexMaxMin\
    \ = true;\n        bool isMinIndexMaxIndexMaxMin = true;\n        bool isMaxIndexMinIndexMaxMin\
    \ = true;\n        bool isMaxIndexMaxIndexMaxMin = true;\n        bool isMinIndexMaxIndexMaxMin\
    \ = true;\n        bool isMaxIndexMinIndexMaxMin = true;\n        bool isMaxIndexMaxIndexMaxMin\
    \ = true;\n        bool isMinIndexMaxIndexMaxMin = true;\n        bool isMaxIndexMinIndexMaxMin\
    \ = true;\n        bool isMaxIndexMaxIndexMaxMin = true;\n        bool isMinIndexMaxIndexMaxMin\
    \ = true;\n        bool isMaxIndexMinIndexMaxMin = true;\n        bool isMaxIndexMaxIndexMaxMin\
    \ = true;\n        bool isMinIndexMaxIndexMaxMin = true;\n        bool \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy370r6vl.cs(80,13): error CS1001: Identifier expected

    /tmp/tmpy370r6vl.cs(80,13): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        foreach (long i in arr) {\n            if (max < i) {\n  \
    \              max = i;\n            }\n            if (min > i) {\n         \
    \       min = i;\n            }\n        }\n        long mid = min + (max - min)\
    \ / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid / 3;\n        long\
    \ mid4 = mid / 4;\n        long mid5 = mid / 5;\n        long mid6 = mid / 6;\n\
    \        long mid7 = mid / 7;\n        long mid8 = mid / 8;\n        long mid9\
    \ = mid / 9;\n        long mid10 = mid / 10;\n        long mid11 = mid / 11;\n\
    \        long mid12 = mid / 12;\n        long mid13 = mid / 13;\n        long\
    \ mid14 = mid / 14;\n        long mid15 = mid / 15;\n        long mid16 = mid\
    \ / 16;\n        long mid17 = mid / 17;\n        long mid18 = mid / 18;\n    \
    \    long mid19 = mid / 19;\n        long mid20 = mid / 20;\n        long mid21\
    \ = mid / 21;\n        long mid22 = mid / 22;\n        long mid23 = mid / 23;\n\
    \        long mid24 = mid / 24;\n        long mid25 = mid / 25;\n        long\
    \ mid26 = mid / 26;\n        long mid27 = mid / 27;\n        long mid28 = mid\
    \ / 28;\n        long mid29 = mid / 29;\n        long mid30 = mid / 30;\n    \
    \    long mid31 = mid / 31;\n        long mid32 = mid / 32;\n        long mid33\
    \ = mid / 33;\n        long mid34 = mid / 34;\n        long mid35 = mid / 35;\n\
    \        long mid36 = mid / 36;\n        long mid37 = mid / 37;\n        long\
    \ mid38 = mid / 38;\n        long mid39 = mid / 39;\n        long mid40 = mid\
    \ / 40;\n        long mid41 = mid / 41;\n        long mid42 = mid / 42;\n    \
    \    long mid43 = mid / 43;\n        long mid44 = mid / 44;\n        long mid45\
    \ = mid / 45;\n        long mid46 = mid / 46;\n        \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgv4n2sr1.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long maxSum = 0;\n        long minSum = 0;\n        long sumOfSquares = 0;\n\
    \        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n      \
    \  long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long\
    \ maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares\
    \ = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n\
    \        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n      \
    \  long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long\
    \ minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares\
    \ = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n\
    \        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n      \
    \  long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long\
    \ maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares\
    \ = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n\
    \        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n      \
    \  long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long\
    \ minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares\
    \ = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n\
    \        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n      \
    \  long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long\
    \ maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares\
    \ = 0;\n        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n\
    \        long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n      \
    \  long minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long\
    \ minSumOfSquares = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares\
    \ = 0;\n        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n\
    \        long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n      \
    \  long maxSumOfSquares = 0;\n        long minSumOfSquares = 0;\n        long\
    \ maxSum\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_568nyzu.cs(90,20): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        long maxValueIndex = -1;\n        foreach (long i in arr) {\n       \
    \     if (i > maxValue) {\n                maxValue = i;\n                maxValueIndex\
    \ = i;\n            }\n            if (i == maxValue) {\n                maxIndex++;\n\
    \            }\n        }\n        long mid = maxIndex / 2;\n        long midValue\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid];\n        long midValueIndex\
    \ = arr[mid];\n        long midValueIndex = arr[mid\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0tbde0e9.cs(87,37): error CS1003: Syntax error, '']'' expected

    /tmp/tmp0tbde0e9.cs(87,37): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        if (k == 0) return arr;\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long mid = 0;\n       \
    \ long maxIndex = 0;\n        long minIndex = 0;\n        bool isMax = true;\n\
    \        bool isMin = true;\n        long maxVal = 0;\n        long minVal = 0;\n\
    \        long midVal = 0;\n        long maxMidVal = 0;\n        long minMidVal\
    \ = 0;\n        long maxMidIndex = 0;\n        long minMidIndex = 0;\n       \
    \ long maxMidMax = 0;\n        long minMidMax = 0;\n        long maxMidMin = 0;\n\
    \        long minMidMin = 0;\n        long maxMidMid = 0;\n        long minMidMid\
    \ = 0;\n        long maxMidMaxIndex = 0;\n        long minMidMaxIndex = 0;\n \
    \       long maxMidMinIndex = 0;\n        long minMidMinIndex = 0;\n        long\
    \ maxMidMidIndex = 0;\n        long minMidMidIndex = 0;\n        long maxMidMaxVal\
    \ = 0;\n        long minMidMaxVal = 0;\n        long maxMidMinVal = 0;\n     \
    \   long minMidMinVal = 0;\n        long maxMidMidVal = 0;\n        long minMidMidVal\
    \ = 0;\n        long maxMidMaxIndex = 0;\n        long minMidMaxIndex = 0;\n \
    \       long maxMidMinIndex = 0;\n        long minMidMinIndex = 0;\n        long\
    \ maxMidMidIndex = 0;\n        long minMidMidIndex = 0;\n        long maxMidMaxVal\
    \ = 0;\n        long minMidMaxVal = 0;\n        long maxMidMinVal = 0;\n     \
    \   long minMidMinVal = 0;\n        long maxMidMidVal = 0;\n        long minMidMidVal\
    \ = 0;\n        long maxMidMaxIndex = 0;\n        long minMidMaxIndex = 0;\n \
    \       long maxMidMinIndex = 0;\n        long minMidMinIndex = 0;\n        long\
    \ maxMidMidIndex = 0;\n        long minMidMidIndex = 0;\n        long maxMidMaxVal\
    \ = 0;\n        long minMidMaxVal = 0;\n        long maxMidMinVal = 0;\n     \
    \   long minMidMinVal = 0;\n        long maxMidMidVal = 0;\n        long minMidMidVal\
    \ = 0;\n        long maxMidMaxIndex = 0;\n        long minMidMaxIndex = 0;\n \
    \       long maxMidMinIndex = 0;\n        long minMidMinIndex = 0;\n        long\
    \ maxMidMidIndex = 0;\n        long minMidMidIndex = 0;\n        long maxMidMaxVal\
    \ = 0;\n        long minMidMaxVal = 0;\n        long maxMid\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdaoljzw4.cs(92,20): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n        long\
    \ maxIndex = arr[0];\n        long minIndex = arr[0];\n        long maxValue =\
    \ arr[0];\n        long minValue = arr[0];\n        bool isMax = true;\n     \
    \   bool isMin = true;\n        long maxIndex = arr[0];\n        long minIndex\
    \ = arr[0];\n        long maxValue = arr[0];\n        long minValue = arr[0];\n\
    \        bool isMax = true;\n        bool isMin = true;\n        long maxIndex\
    \ = arr[0];\n        long minIndex = arr[0];\n        long maxValue = arr[0];\n\
    \        long minValue = arr[0];\n        bool isMax = true;\n        bool isMin\
    \ = true;\n        long maxIndex = arr[0];\n        long minIndex = arr[0];\n\
    \        long maxValue = arr[0];\n        long minValue = arr[0];\n        bool\
    \ isMax = true;\n        bool isMin = true;\n        long maxIndex = arr[0];\n\
    \        long minIndex = arr[0];\n        long maxValue = arr[0];\n        long\
    \ minValue = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n\
    \        long maxIndex = arr[0];\n        long minIndex = arr[0];\n        long\
    \ maxValue = arr[0];\n        long minValue = arr[0];\n        bool isMax = true;\n\
    \        bool isMin = true;\n        long maxIndex = arr[0];\n        long minIndex\
    \ = arr[0];\n        long maxValue = arr[0];\n        long minValue = arr[0];\n\
    \        bool isMax = true;\n        bool isMin = true;\n        long maxIndex\
    \ = arr[0];\n        long minIndex = arr[0];\n        long maxValue = arr[0];\n\
    \        long minValue = arr[0];\n        bool isMax = true;\n        bool isMin\
    \ = true;\n        long maxIndex = arr[0];\n        long minIndex = arr[0];\n\
    \        long maxValue = arr[0];\n        long minValue = arr[0];\n        bool\
    \ isMax = true;\n        bool isMin = true;\n        long maxIndex = arr[0];\n\
    \        long minIndex = arr[0];\n        long maxValue = arr[0];\n        long\
    \ minValue = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n\
    \        long maxIndex = arr[0];\n        long minIndex = arr[0];\n        long\
    \ maxValue = arr[0];\n        long minValue = arr[0];\n        bool isMax = true;\n\
    \        bool isMin = true;\n        long maxIndex = arr[0];\n        long minIndex\
    \ = arr[0];\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv3fuy0mh.cs(34,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(35,14): error CS0128: A local variable or function named ''minIndex''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(36,14): error CS0128: A local variable or function named ''maxValue''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(37,14): error CS0128: A local variable or function named ''minValue''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(38,14): error CS0128: A local variable or function named ''isMax''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(39,14): error CS0128: A local variable or function named ''isMin''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(40,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(41,14): error CS0128: A local variable or function named ''minIndex''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(42,14): error CS0128: A local variable or function named ''maxValue''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(43,14): error CS0128: A local variable or function named ''minValue''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(44,14): error CS0128: A local variable or function named ''isMax''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(45,14): error CS0128: A local variable or function named ''isMin''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(46,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(47,14): error CS0128: A local variable or function named ''minIndex''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(48,14): error CS0128: A local variable or function named ''maxValue''
    is already defined in this scope

    /tmp/tmpv3fuy0mh.cs(49,14): error CS0128: A local variable or function named ''minValue''
    is already defined in this sco'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long sum = 0;\n        long sumOfSquares = 0;\n        long square =\
    \ 0;\n        long squareOfSum = 0;\n        long squareOfSumOfSquares = 0;\n\
    \        long squareOfSquare = 0;\n        long squareOfSquareOfSum = 0;\n   \
    \     long squareOfSquareOfSumOfSquares = 0;\n        long squareOfSquareOfSquare\
    \ = 0;\n        long squareOfSquareOfSquareOfSum = 0;\n        long squareOfSquareOfSquareOfSumOfSquares\
    \ = 0;\n        long squareOfSquareOfSquareOfSquare = 0;\n        long squareOfSquareOfSquareOfSumOfSquares\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSum = 0;\n        long squareOfSquareOfSquareOfSquareOfSumOfSquares\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquare = 0;\n        long\
    \ squareOfSquareOfSquareOfSquareOfSumOfSquares = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n      \
    \  long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n   \
    \     long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSquare\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n      \
    \  long squareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n   \
    \     long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSquare\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n      \
    \  long squareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSquare = 0;\n   \
    \     long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSquare\
    \ = 0;\n        long squareOfSquareOfSquareOfSquareOfSquareOfSum = 0;\n      \
    \  long squareOfSquareOfSquareOfSquareOfSquareOf\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw2g8n799.cs(66,54): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        if\
    \ (k > max) {\n            k = max;\n        }\n        long temp = 0;\n     \
    \   long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n      \
    \  long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n       \
    \ long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n       \
    \ long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n     \
    \   long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n   \
    \     long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n \
    \       long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppeyomtam.cs(35,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(36,14): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(37,14): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(38,14): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(39,14): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(40,14): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(41,14): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(42,14): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(43,14): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(44,14): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(45,14): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(46,14): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(47,14): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(48,14): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(49,14): warning CS0219: The variable ''temp15'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(50,14): warning CS0219: The variable ''temp16'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(51,14): warning CS0219: The variable ''temp17'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(52,14): warning CS0219: The variable ''temp18'' is assigned
    but its value is never used

    /tmp/tmppeyomtam.cs(53,'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        long maxValueIndex = -1;\n        bool isMax = true;\n        for (int\
    \ i = 0; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n       \
    \         maxValue = arr[i];\n                maxValueIndex = i;\n           \
    \ }\n            if (arr[i] == maxValue) {\n                isMax = true;\n  \
    \          }\n            if (arr[i] < maxValue) {\n                isMax = false;\n\
    \            }\n            if (isMax) {\n                max = Math.Max(max,\
    \ arr[i]);\n                maxIndex = i;\n            }\n        }\n        if\
    \ (k == maxIndex) {\n            result.Add(maxValue);\n        }\n        else\
    \ {\n            for (int i = maxIndex; i < arr.Count; i++) {\n              \
    \  if (arr[i] > maxValue) {\n                    maxValue = arr[i];\n        \
    \            maxValueIndex = i;\n                }\n                if (arr[i]\
    \ == maxValue) {\n                    isMax = true;\n                }\n     \
    \           if (arr[i] < maxValue) {\n                    isMax = false;\n   \
    \             }\n                if (isMax) {\n                    max = Math.Max(max,\
    \ arr[i]);\n                    maxIndex = i;\n                }\n           \
    \ }\n            result.Add(maxValue);\n            for (int i = maxIndex + 1;\
    \ i < arr.Count; i++) {\n                if (arr[i] > maxValue) {\n          \
    \          maxValue = arr[i];\n                    maxValueIndex = i;\n      \
    \          }\n                if (arr[i] == maxValue) {\n                    isMax\
    \ = true;\n                }\n                if (arr[i] < maxValue) {\n     \
    \               isMax = false;\n                }\n                if (isMax)\
    \ {\n                    max = Math.Max(max, arr[i]);\n                    maxIndex\
    \ = i;\n                }\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprodxs3oj.cs(51,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprodxs3oj.cs(68,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        for\
    \ (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n       \
    \         max = arr[i];\n                maxIndex = i;\n            }\n      \
    \      if (arr[i] < min) {\n                min = arr[i];\n                minIndex\
    \ = i;\n            }\n        }\n        long mid = min + (max - min) / 2;\n\
    \        long midIndex = maxIndex;\n        long midMax = arr[maxIndex];\n   \
    \     long midMin = arr[minIndex];\n        long midMid = (max - min) / 2;\n \
    \       long midMidIndex = maxIndex;\n        long midMidMax = arr[maxIndex];\n\
    \        long midMidMin = arr[minIndex];\n        while (midIndex < arr.Count)\
    \ {\n            if (arr[midIndex] > midMax) {\n                midMax = arr[midIndex];\n\
    \                midMidMax = arr[midMidIndex];\n                midMidIndex =\
    \ midIndex;\n            }\n            if (arr[midIndex] < midMin) {\n      \
    \          midMin = arr[midIndex];\n                midMidMin = arr[midMidIndex];\n\
    \                midMidIndex = midIndex;\n            }\n            midIndex++;\n\
    \            midMidIndex++;\n        }\n        long midMidMid = (midMax - midMin)\
    \ / 2;\n        while (midMidIndex < arr.Count) {\n            if (arr[midMidIndex]\
    \ > midMidMax) {\n                midMidMax = arr[midMidIndex];\n            \
    \    midMidMidMax = arr[midMidMidIndex];\n                midMidIndex = midMidIndex;\n\
    \            }\n            if (arr[midMidIndex] < midMidMin) {\n            \
    \    midMidMin = arr[midMidIndex];\n                midMidMidMin = arr[midMidMidIndex];\n\
    \                midMidIndex = midMidIndex;\n            }\n            midMidIndex++;\n\
    \            midMidMid++;\n        }\n        long midMidMidMax = arr[midMidIndex];\n\
    \        long midMidMidMin = arr[midMidIndex];\n        long midMidMidMid = (midMidMax\
    \ - midMidMin) / 2;\n        while (midMidMidIndex < arr.Count) {\n          \
    \  if (arr[midMidMidIndex] > midMidMidMax) {\n                midMidMidMax = arr[midMidMidIndex];\n\
    \                midMidMidMidMax = arr[midMidMidMidIndex];\n                midMidMidIndex\
    \ = midMidMidIndex;\n            }\n            if (arr[midMidMidIndex] < midMidMidMin)\
    \ {\n                \n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzl8juv1w.cs(90,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpzl8juv1w.cs(104,2): error CS1513: } expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        foreach (long i in arr) {\n            if (max < i) {\n \
    \               max = i;\n                maxIndex = i;\n                maxValue\
    \ = i;\n            }\n            if (min > i) {\n                min = i;\n\
    \                minIndex = i;\n                minValue = i;\n            }\n\
    \            if (maxIndexValue < i) {\n                maxIndexValue = i;\n  \
    \              maxIndex = i;\n            }\n            if (minIndexValue > i)\
    \ {\n                minIndexValue = i;\n                minIndex = i;\n     \
    \       }\n        }\n        if (k == 1) {\n            result.Add(max);\n  \
    \          result.Add(min);\n            return result;\n        }\n        if\
    \ (k == 2) {\n            if (maxIndexValue == minIndexValue) {\n            \
    \    if (maxIndexValue == maxValue) {\n                    result.Add(maxIndex);\n\
    \                    result.Add(maxValue);\n                    return result;\n\
    \                }\n                if (maxIndexValue == minValue) {\n       \
    \             result.Add(maxIndex);\n                    result.Add(minValue);\n\
    \                    return result;\n                }\n            }\n      \
    \  }\n        if (k == 3) {\n            if (maxIndexValue == minIndexValue) {\n\
    \                if (maxIndexValue == maxValue) {\n                    result.Add(maxIndex);\n\
    \                    result.Add(maxValue);\n                    result.Add(minIndex);\n\
    \                    result.Add(minValue);\n                    return result;\n\
    \                }\n                if (maxIndexValue == minValue) {\n       \
    \             result.Add(maxIndex);\n                    result.Add(minValue);\n\
    \                    result.Add(maxIndex);\n                    result.Add(minValue);\n\
    \                    return result;\n                }\n            }\n      \
    \  }\n        if (k == 4) {\n            if (maxIndexValue == minIndexValue) {\n\
    \                if (maxIndexValue == maxValue) {\n                    result.Add(maxIndex);\n\
    \                    result.Add(maxValue);\n                    result.Add(minIndex);\n\
    \                    result.Add(minValue);\n                    result.Add(maxIndex);\n\
    \                    result.Add(maxValue);\n                    return result;\n\
    \                }\n                if (maxIndexValue == minValue) {\n       \
    \             result.Add(maxIndex);\n                    result.Add(minValue);\n\
    \                    result.Add(maxIndex);\n                    result.Add(minValue);\n\
    \                    result.Add(maxIndex);\n                    result.Add(maxValue);\n\
    \                    return result;\n                }\n            }\n      \
    \  }\n        if (k == 5) {\n            if (maxIndexValue == minIndexValue) {\n\
    \                if (maxIndexValue == maxValue) {\n                    result.Add(maxIndex);\n\
    \                    result.Add(maxValue);\n                    result.Add(minIndex);\n\
    \                    result.Add(minValue);\n                    result.Add(maxIndex);\n\
    \                    result.Add(maxValue);\n                    result.Add(minIndex);\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz05qgmau.cs(124,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpz05qgmau.cs(138,2): error CS1513: } expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long maxValueIndex = 0;\n        long maxValueIndex2 = 0;\n        long\
    \ maxValueIndex3 = 0;\n        long maxValueIndex4 = 0;\n        long maxValueIndex5\
    \ = 0;\n        long maxValueIndex6 = 0;\n        long maxValueIndex7 = 0;\n \
    \       long maxValueIndex8 = 0;\n        long maxValueIndex9 = 0;\n        long\
    \ maxValueIndex10 = 0;\n        long maxValueIndex11 = 0;\n        long maxValueIndex12\
    \ = 0;\n        long maxValueIndex13 = 0;\n        long maxValueIndex14 = 0;\n\
    \        long maxValueIndex15 = 0;\n        long maxValueIndex16 = 0;\n      \
    \  long maxValueIndex17 = 0;\n        long maxValueIndex18 = 0;\n        long\
    \ maxValueIndex19 = 0;\n        long maxValueIndex20 = 0;\n        long maxValueIndex21\
    \ = 0;\n        long maxValueIndex22 = 0;\n        long maxValueIndex23 = 0;\n\
    \        long maxValueIndex24 = 0;\n        long maxValueIndex25 = 0;\n      \
    \  long maxValueIndex26 = 0;\n        long maxValueIndex27 = 0;\n        long\
    \ maxValueIndex28 = 0;\n        long maxValueIndex29 = 0;\n        long maxValueIndex30\
    \ = 0;\n        long maxValueIndex31 = 0;\n        long maxValueIndex32 = 0;\n\
    \        long maxValueIndex33 = 0;\n        long maxValueIndex34 = 0;\n      \
    \  long maxValueIndex35 = 0;\n        long maxValueIndex36 = 0;\n        long\
    \ maxValueIndex37 = 0;\n        long maxValueIndex38 = 0;\n        long maxValueIndex39\
    \ = 0;\n        long maxValueIndex40 = 0;\n        long maxValueIndex41 = 0;\n\
    \        long maxValueIndex42 = 0;\n        long maxValueIndex43 = 0;\n      \
    \  long maxValueIndex44 = 0;\n        long maxValueIndex45 = 0;\n        long\
    \ maxValueIndex46 = 0;\n        long maxValueIndex47 = 0;\n        long maxValueIndex48\
    \ = 0;\n        long maxValueIndex49 = 0;\n        long maxValueIndex50 = 0;\n\
    \        long maxValueIndex51 = 0;\n        long maxValueIndex52 = 0;\n      \
    \  long maxValueIndex53 = 0;\n        long maxValueIndex54 = 0;\n        long\
    \ maxValueIndex55 = 0;\n        long maxValueIndex56 = 0;\n        long maxValueIndex57\
    \ = 0;\n        long maxValueIndex58 = 0;\n        long maxValueIndex59 = 0;\n\
    \        long maxValueIndex60 = 0;\n        long maxValueIndex61 = 0;\n      \
    \  long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe9e8x62q.cs(90,13): error CS1001: Identifier expected

    /tmp/tmpe9e8x62q.cs(90,13): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxCount = 0;\n        long minCount =\
    \ 0;\n        long maxCountIndex = 0;\n        long minCountIndex = 0;\n     \
    \   long maxCountCount = 0;\n        long minCountCount = 0;\n        long maxCountCountIndex\
    \ = 0;\n        long minCountCountIndex = 0;\n        long maxCountMinCount =\
    \ 0;\n        long minCountMinCount = 0;\n        long maxCountMinCountIndex =\
    \ 0;\n        long minCountMinCountIndex = 0;\n        long maxCountMaxCount =\
    \ 0;\n        long minCountMaxCount = 0;\n        long maxCountMaxCountIndex =\
    \ 0;\n        long minCountMaxCountIndex = 0;\n        long maxCountMinMinCount\
    \ = 0;\n        long minCountMinMinCount = 0;\n        long maxCountMinMinCountIndex\
    \ = 0;\n        long minCountMinMinCountIndex = 0;\n        long maxCountMaxMinCount\
    \ = 0;\n        long minCountMaxMinCount = 0;\n        long maxCountMaxMinCountIndex\
    \ = 0;\n        long minCountMaxMinCountIndex = 0;\n        long maxCountMaxMinMinCount\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMinMinCountIndex = 0;\n        long maxCountMaxMinMinCountIndex\
    \ = 0;\n        long minCountMaxMin\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp8q0604j.cs(79,28): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n    \
    \    long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n     \
    \   long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n      \
    \  long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n     \
    \   long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n   \
    \     long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n \
    \       long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5xa_6smf.cs(110,20): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \     }\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgipqa65a.cs(112,13): error CS1001: Identifier expected

    /tmp/tmpgipqa65a.cs(112,13): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n            } else if (sum == k) {\n       \
    \         max = sum;\n                min = i;\n                count = 1;\n \
    \           } else if (sum < k) {\n                max = sum;\n              \
    \  min = i;\n                count = 1;\n            }\n        }\n        if\
    \ (count > 1) {\n            List<long> temp = new List<long>();\n           \
    \ temp.Add(min);\n            temp.Add(max);\n            temp.Add(k);\n     \
    \       temp.Add(count);\n            temp.Add(sum);\n            foreach (long\
    \ i in arr) {\n                if (i < min)\n                    temp.Add(i);\n\
    \                else if (i > max)\n                    temp.Add(i);\n       \
    \         else if (i == min)\n                    temp.Add(i);\n             \
    \   else if (i == max)\n                    temp.Add(i);\n                else\
    \ if (i == k)\n                    temp.Add(i);\n                else if (i ==\
    \ sum)\n                    temp.Add(i);\n            }\n            result =\
    \ temp;\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e2181aec6ac4ca993653080a76be212>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e2181aec6ac4ca993653080a76be212>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = 0;\n        long minValue =\
    \ 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long maxCountValue\
    \ = 0;\n        long minCountValue = 0;\n        long maxCountIndex = 0;\n   \
    \     long minCountIndex = 0;\n        long maxCountValue2 = 0;\n        long\
    \ minCountValue2 = 0;\n        long maxCountIndex2 = 0;\n        long minCountIndex2\
    \ = 0;\n        long maxCountValue3 = 0;\n        long minCountValue3 = 0;\n \
    \       long maxCountIndex3 = 0;\n        long minCountIndex3 = 0;\n        long\
    \ maxCountValue4 = 0;\n        long minCountValue4 = 0;\n        long maxCountIndex4\
    \ = 0;\n        long minCountIndex4 = 0;\n        long maxCountValue5 = 0;\n \
    \       long minCountValue5 = 0;\n        long maxCountIndex5 = 0;\n        long\
    \ minCountIndex5 = 0;\n        long maxCountValue6 = 0;\n        long minCountValue6\
    \ = 0;\n        long maxCountIndex6 = 0;\n        long minCountIndex6 = 0;\n \
    \       long maxCountValue7 = 0;\n        long minCountValue7 = 0;\n        long\
    \ maxCountIndex7 = 0;\n        long minCountIndex7 = 0;\n        long maxCountValue8\
    \ = 0;\n        long minCountValue8 = 0;\n        long maxCountIndex8 = 0;\n \
    \       long minCountIndex8 = 0;\n        long maxCountValue9 = 0;\n        long\
    \ minCountValue9 = 0;\n        long maxCountIndex9 = 0;\n        long minCountIndex9\
    \ = 0;\n        long maxCountValue10 = 0;\n        long minCountValue10 = 0;\n\
    \        long maxCountIndex10 = 0;\n        long minCountIndex10 = 0;\n      \
    \  long maxCountValue11 = 0;\n        long minCountValue11 = 0;\n        long\
    \ maxCountIndex11 = 0;\n        long minCountIndex11 = 0;\n        long maxCountValue12\
    \ = 0;\n        long minCountValue12 = 0;\n        long maxCountIndex12 = 0;\n\
    \        long minCountIndex12 = 0;\n        long maxCountValue13 = 0;\n      \
    \  long minCountValue13 = 0;\n        long maxCountIndex13 = 0;\n        long\
    \ minCountIndex13 = 0;\n        long maxCountValue14 = 0;\n        long minCountValue14\
    \ = 0;\n        long maxCountIndex14 = 0;\n        long minCountIndex14 = 0;\n\
    \        long maxCountValue15 = 0;\n        long minCountValue15 = 0;\n      \
    \  long maxCountIndex15 = 0;\n        long minCount\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo8r3d34e.cs(93,22): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > maxValue)\
    \ {\n                maxValue = arr[i];\n                maxIndex = i;\n     \
    \       }\n        }\n        max = maxValue;\n        long maxIndex = maxIndex;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] == max)\
    \ {\n                result.Add(max);\n                maxIndex++;\n         \
    \   }\n        }\n        if (result.Count > k) {\n            result = result.Take(k).ToList();\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_rpah4w.cs(36,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmpf_rpah4w.cs(44,34): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n                cur\
    \ = i;\n            }\n        }\n        long curMax = cur;\n        long curMaxIndex\
    \ = 0;\n        long curMaxValue = max;\n        long curMaxIndexValue = cur;\n\
    \        long curMaxIndexValue2 = cur;\n        long curMaxIndexValue3 = cur;\n\
    \        long curMaxIndexValue4 = cur;\n        long curMaxIndexValue5 = cur;\n\
    \        long curMaxIndexValue6 = cur;\n        long curMaxIndexValue7 = cur;\n\
    \        long curMaxIndexValue8 = cur;\n        long curMaxIndexValue9 = cur;\n\
    \        long curMaxIndexValue10 = cur;\n        long curMaxIndexValue11 = cur;\n\
    \        long curMaxIndexValue12 = cur;\n        long curMaxIndexValue13 = cur;\n\
    \        long curMaxIndexValue14 = cur;\n        long curMaxIndexValue15 = cur;\n\
    \        long curMaxIndexValue16 = cur;\n        long curMaxIndexValue17 = cur;\n\
    \        long curMaxIndexValue18 = cur;\n        long curMaxIndexValue19 = cur;\n\
    \        long curMaxIndexValue20 = cur;\n        long curMaxIndexValue21 = cur;\n\
    \        long curMaxIndexValue22 = cur;\n        long curMaxIndexValue23 = cur;\n\
    \        long curMaxIndexValue24 = cur;\n        long curMaxIndexValue25 = cur;\n\
    \        long curMaxIndexValue26 = cur;\n        long curMaxIndexValue27 = cur;\n\
    \        long curMaxIndexValue28 = cur;\n        long curMaxIndexValue29 = cur;\n\
    \        long curMaxIndexValue30 = cur;\n        long curMaxIndexValue31 = cur;\n\
    \        long curMaxIndexValue32 = cur;\n        long curMaxIndexValue33 = cur;\n\
    \        long curMaxIndexValue34 = cur;\n        long curMaxIndexValue35 = cur;\n\
    \        long curMaxIndexValue36 = cur;\n        long curMaxIndexValue37 = cur;\n\
    \        long curMaxIndexValue38 = cur;\n        long curMaxIndexValue39 = cur;\n\
    \        long curMaxIndexValue40 = cur;\n        long curMaxIndexValue41 = cur;\n\
    \        long curMaxIndexValue\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8m_lpb9q.cs(78,30): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        long maxValueIndex = -1;\n        bool isMax = true;\n        foreach\
    \ (long i in arr) {\n            if (i == maxValue) {\n                maxValueIndex\
    \ = arr.IndexOf(i);\n                isMax = true;\n            }\n          \
    \  if (i == max) {\n                maxIndex = arr.IndexOf(i);\n             \
    \   isMax = false;\n            }\n            if (isMax) {\n                max\
    \ = i;\n            }\n        }\n        if (maxIndex == arr.Count - 1) {\n \
    \           result.Add(max);\n            return result;\n        }\n        long\
    \ mid = maxIndex + (arr.Count - 1);\n        long midValue = arr[mid];\n     \
    \   long midValueIndex = arr.IndexOf(midValue);\n        long midValueMax = arr[midValueIndex];\n\
    \        long midValueMaxIndex = arr.IndexOf(midValueMax);\n        long midValueMaxValue\
    \ = arr[midValueMaxIndex];\n        long midValueMaxValueIndex = arr.IndexOf(midValueMaxValue);\n\
    \        long midValueMaxValueMax = arr[midValueMaxValueIndex];\n        long\
    \ midValueMaxValueMaxIndex = arr.IndexOf(midValueMaxValueMax);\n        long midValueMaxValueMaxValue\
    \ = arr[midValueMaxValueMaxIndex];\n        long midValueMaxValueMaxValueIndex\
    \ = arr.IndexOf(midValueMaxValueMaxValue);\n        long midValueMaxValueMaxValueMax\
    \ = arr[midValueMaxValueMaxValueIndex];\n        long midValueMaxValueMaxValueMaxIndex\
    \ = arr.IndexOf(midValueMaxValueMaxValueMax);\n        long midValueMaxValueMaxValueMaxValue\
    \ = arr[midValueMaxValueMaxValueMaxIndex];\n        long midValueMaxValueMaxValueMaxValueIndex\
    \ = arr.IndexOf(midValueMaxValueMaxValueMaxValue);\n        long midValueMaxValueMaxValueMaxValueMax\
    \ = arr[midValueMaxValueMaxValueMaxValueIndex];\n        long midValueMaxValueMaxValueMaxValueMaxIndex\
    \ = arr.IndexOf(midValueMaxValueMaxValueMaxValueMax);\n        long midValueMaxValueMaxValueMaxValueMaxValue\
    \ = arr[midValueMaxValueMaxValueMaxValueMaxIndex];\n        long midValueMaxValueMaxValueMaxValueMaxValueIndex\
    \ = arr.IndexOf(midValueMaxValueMaxValueMaxValueMaxValue);\n        long midValueMaxValueMaxValueMaxValueMaxValueMax\
    \ = arr[midValueMaxValueMaxValueMaxValueMaxValueIndex];\n        long midValueMaxValueMaxValueMaxValueMaxValueMaxIndex\
    \ = arr.IndexOf(midValueMax\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpw9wc906k.cs(68,88): error CS1026: ) expected

    /tmp/tmpw9wc906k.cs(68,88): error CS1002: ; expected

    '
  timestamp: 1659793568
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n            } else if (sum == k) {\n       \
    \         max = sum;\n                min = i;\n                count = 1;\n \
    \           } else if (sum < k) {\n                max = sum;\n              \
    \  min = i;\n                count = 1;\n            }\n        }\n        if\
    \ (count > 1) {\n            while (count > 1) {\n                result.Add(max);\n\
    \                count--;\n                sum -= max;\n                max -=\
    \ min;\n                min += min;\n            }\n            result.Add(max);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e11fe115f91e41ec97c620351d56bbae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e11fe115f91e41ec97c620351d56bbae>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        long maxIndex = 0;\n  \
    \      long curIndex = 0;\n        long maxVal = 0;\n        long curVal = 0;\n\
    \        long maxIndexVal = 0;\n        long curIndexVal = 0;\n        long maxVal2\
    \ = 0;\n        long curVal2 = 0;\n        long maxIndexVal2 = 0;\n        long\
    \ curIndexVal2 = 0;\n        long maxVal3 = 0;\n        long curVal3 = 0;\n  \
    \      long maxIndexVal3 = 0;\n        long curIndexVal3 = 0;\n        long maxVal4\
    \ = 0;\n        long curVal4 = 0;\n        long maxIndexVal4 = 0;\n        long\
    \ curIndexVal4 = 0;\n        long maxVal5 = 0;\n        long curVal5 = 0;\n  \
    \      long maxIndexVal5 = 0;\n        long curIndexVal5 = 0;\n        long maxVal6\
    \ = 0;\n        long curVal6 = 0;\n        long maxIndexVal6 = 0;\n        long\
    \ curIndexVal6 = 0;\n        long maxVal7 = 0;\n        long curVal7 = 0;\n  \
    \      long maxIndexVal7 = 0;\n        long curIndexVal7 = 0;\n        long maxVal8\
    \ = 0;\n        long curVal8 = 0;\n        long maxIndexVal8 = 0;\n        long\
    \ curIndexVal8 = 0;\n        long maxVal9 = 0;\n        long curVal9 = 0;\n  \
    \      long maxIndexVal9 = 0;\n        long curIndexVal9 = 0;\n        long maxVal10\
    \ = 0;\n        long curVal10 = 0;\n        long maxIndexVal10 = 0;\n        long\
    \ curIndexVal10 = 0;\n        long maxVal11 = 0;\n        long curVal11 = 0;\n\
    \        long maxIndexVal11 = 0;\n        long curIndexVal11 = 0;\n        long\
    \ maxVal12 = 0;\n        long curVal12 = 0;\n        long maxIndexVal12 = 0;\n\
    \        long curIndexVal12 = 0;\n        long maxVal13 = 0;\n        long curVal13\
    \ = 0;\n        long maxIndexVal13 = 0;\n        long curIndexVal13 = 0;\n   \
    \     long maxVal14 = 0;\n        long curVal14 = 0;\n        long maxIndexVal14\
    \ = 0;\n        long curIndexVal14 = 0;\n        long maxVal15 = 0;\n        long\
    \ curVal15 = 0;\n        long maxIndexVal15 = 0;\n        long curIndexVal15 =\
    \ 0;\n        long maxVal16 = 0;\n        long curVal16 = 0;\n        long maxIndexVal16\
    \ = 0;\n        long curIndexVal16 = 0;\n        long maxVal17 = 0;\n        long\
    \ curVal17 = 0;\n        long maxIndexVal17\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphcg8df8r.cs(96,27): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \         if (min > i) {\n                min = i;\n            }\n        }\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph8p7_ndj.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        foreach (long i in\
    \ arr) {\n            if (i > max) {\n                max = i;\n             \
    \   maxIndex = i;\n            }\n        }\n        long maxValue = max;\n  \
    \      long maxIndex = maxIndex;\n        long maxIndex2 = maxIndex;\n       \
    \ long maxIndex3 = maxIndex;\n        long maxIndex4 = maxIndex;\n        long\
    \ maxIndex5 = maxIndex;\n        long maxIndex6 = maxIndex;\n        long maxIndex7\
    \ = maxIndex;\n        long maxIndex8 = maxIndex;\n        long maxIndex9 = maxIndex;\n\
    \        long maxIndex10 = maxIndex;\n        long maxIndex11 = maxIndex;\n  \
    \      long maxIndex12 = maxIndex;\n        long maxIndex13 = maxIndex;\n    \
    \    long maxIndex14 = maxIndex;\n        long maxIndex15 = maxIndex;\n      \
    \  long maxIndex16 = maxIndex;\n        long maxIndex17 = maxIndex;\n        long\
    \ maxIndex18 = maxIndex;\n        long maxIndex19 = maxIndex;\n        long maxIndex20\
    \ = maxIndex;\n        long maxIndex21 = maxIndex;\n        long maxIndex22 =\
    \ maxIndex;\n        long maxIndex23 = maxIndex;\n        long maxIndex24 = maxIndex;\n\
    \        long maxIndex25 = maxIndex;\n        long maxIndex26 = maxIndex;\n  \
    \      long maxIndex27 = maxIndex;\n        long maxIndex28 = maxIndex;\n    \
    \    long maxIndex29 = maxIndex;\n        long maxIndex30 = maxIndex;\n      \
    \  long maxIndex31 = maxIndex;\n        long maxIndex32 = maxIndex;\n        long\
    \ maxIndex33 = maxIndex;\n        long maxIndex34 = maxIndex;\n        long maxIndex35\
    \ = maxIndex;\n        long maxIndex36 = maxIndex;\n        long maxIndex37 =\
    \ maxIndex;\n        long maxIndex38 = maxIndex;\n        long maxIndex39 = maxIndex;\n\
    \        long maxIndex40 = maxIndex;\n        long maxIndex41 = maxIndex;\n  \
    \      long maxIndex42 = maxIndex;\n        long maxIndex43 = maxIndex;\n    \
    \    long maxIndex44 = maxIndex;\n        long maxIndex45 = maxIndex;\n      \
    \  long maxIndex46 = maxIndex;\n        long maxIndex47 = maxIndex;\n        long\
    \ maxIndex48 = maxIndex;\n        long maxIndex49 = maxIndex;\n        long maxIndex50\
    \ = maxIndex;\n        long maxIndex51 = maxIndex;\n        long maxIndex52 =\
    \ maxIndex;\n        long maxIndex\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcr4x3on2.cs(87,22): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n\
    \        long mid2 = 0;\n        long mid3 = 0;\n        long mid4 = 0;\n    \
    \    long mid5 = 0;\n        long mid6 = 0;\n        long mid7 = 0;\n        long\
    \ mid8 = 0;\n        long mid9 = 0;\n        long mid10 = 0;\n        long mid11\
    \ = 0;\n        long mid12 = 0;\n        long mid13 = 0;\n        long mid14 =\
    \ 0;\n        long mid15 = 0;\n        long mid16 = 0;\n        long mid17 = 0;\n\
    \        long mid18 = 0;\n        long mid19 = 0;\n        long mid20 = 0;\n \
    \       long mid21 = 0;\n        long mid22 = 0;\n        long mid23 = 0;\n  \
    \      long mid24 = 0;\n        long mid25 = 0;\n        long mid26 = 0;\n   \
    \     long mid27 = 0;\n        long mid28 = 0;\n        long mid29 = 0;\n    \
    \    long mid30 = 0;\n        long mid31 = 0;\n        long mid32 = 0;\n     \
    \   long mid33 = 0;\n        long mid34 = 0;\n        long mid35 = 0;\n      \
    \  long mid36 = 0;\n        long mid37 = 0;\n        long mid38 = 0;\n       \
    \ long mid39 = 0;\n        long mid40 = 0;\n        long mid41 = 0;\n        long\
    \ mid42 = 0;\n        long mid43 = 0;\n        long mid44 = 0;\n        long mid45\
    \ = 0;\n        long mid46 = 0;\n        long mid47 = 0;\n        long mid48 =\
    \ 0;\n        long mid49 = 0;\n        long mid50 = 0;\n        long mid51 = 0;\n\
    \        long mid52 = 0;\n        long mid53 = 0;\n        long mid54 = 0;\n \
    \       long mid55 = 0;\n        long mid56 = 0;\n        long mid57 = 0;\n  \
    \      long mid58 = 0;\n        long mid59 = 0;\n        long mid60 = 0;\n   \
    \     long mid61 = 0;\n        long mid62 = 0;\n        long mid63 = 0;\n    \
    \    long mid64 = 0;\n        long mid65 = 0;\n        long mid66 = 0;\n     \
    \   long mid67 = 0;\n        long mid68 = 0;\n        long mid69 = 0;\n      \
    \  long mid70 = 0;\n        long mid71 = 0;\n        long mid72 = 0;\n       \
    \ long mid73 = 0;\n        long mid74 = 0;\n        long mid75 = 0;\n        long\
    \ mid76 = 0;\n        long mid77 = 0;\n        long mid78 = 0;\n        long mid79\
    \ = 0;\n        long mid80 = 0;\n        long mid81 = 0;\n        long mid82 =\
    \ 0;\n        long mid\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbrrqb0ht.cs(110,17): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        if (k > max) {\n\
    \            k = max;\n        }\n        if (k < min) {\n            k = min;\n\
    \        }\n        long mid = min + (k - min) / 2;\n        long mid2 = mid +\
    \ (k - min) / 2;\n        long mid3 = mid2 + (k - min) / 2;\n        long mid4\
    \ = mid3 + (k - min) / 2;\n        long mid5 = mid4 + (k - min) / 2;\n       \
    \ long mid6 = mid5 + (k - min) / 2;\n        long mid7 = mid6 + (k - min) / 2;\n\
    \        long mid8 = mid7 + (k - min) / 2;\n        long mid9 = mid8 + (k - min)\
    \ / 2;\n        long mid10 = mid9 + (k - min) / 2;\n        long mid11 = mid10\
    \ + (k - min) / 2;\n        long mid12 = mid11 + (k - min) / 2;\n        long\
    \ mid13 = mid12 + (k - min) / 2;\n        long mid14 = mid13 + (k - min) / 2;\n\
    \        long mid15 = mid14 + (k - min) / 2;\n        long mid16 = mid15 + (k\
    \ - min) / 2;\n        long mid17 = mid16 + (k - min) / 2;\n        long mid18\
    \ = mid17 + (k - min) / 2;\n        long mid19 = mid18 + (k - min) / 2;\n    \
    \    long mid20 = mid19 + (k - min) / 2;\n        long mid21 = mid20 + (k - min)\
    \ / 2;\n        long mid22 = mid21 + (k - min) / 2;\n        long mid23 = mid22\
    \ + (k - min) / 2;\n        long mid24 = mid23 + (k - min) / 2;\n        long\
    \ mid25 = mid24 + (k - min) / 2;\n        long mid26 = mid25 + (k - min) / 2;\n\
    \        long mid27 = mid26 + (k - min) / 2;\n        long mid28 = mid27 + (k\
    \ - min) / 2;\n        long mid29 = mid28 + (k - min) / 2;\n        long mid30\
    \ = mid29 + (k - min) / 2;\n        long mid31 = mid30 + (k - min) / 2;\n    \
    \    long mid\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgwv_zs9p.cs(75,17): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        if (k == 0) return arr;\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        foreach (long i in arr) {\n            if (i > maxValue) {\n        \
    \        maxValue = i;\n                maxIndex = i;\n            }\n       \
    \     if (i == maxValue) {\n                result.Add(maxIndex);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc653a13210a4980a6ab354c569fbc7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc653a13210a4980a6ab354c569fbc7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            count++;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n            if (sum < min) {\n                min = sum;\n   \
    \         }\n        }\n        if (count > k) {\n            k = count;\n   \
    \     }\n        if (k > 0) {\n            k = k - 1;\n        }\n        long\
    \ start = 0;\n        long end = 0;\n        long mid = 0;\n        long sum =\
    \ 0;\n        long maxSum = 0;\n        long minSum = 0;\n        long maxSum2\
    \ = 0;\n        long minSum2 = 0;\n        long maxSum3 = 0;\n        long minSum3\
    \ = 0;\n        long maxSum4 = 0;\n        long minSum4 = 0;\n        long maxSum5\
    \ = 0;\n        long minSum5 = 0;\n        long maxSum6 = 0;\n        long minSum6\
    \ = 0;\n        long maxSum7 = 0;\n        long minSum7 = 0;\n        long maxSum8\
    \ = 0;\n        long minSum8 = 0;\n        long maxSum9 = 0;\n        long minSum9\
    \ = 0;\n        long maxSum10 = 0;\n        long minSum10 = 0;\n        long maxSum11\
    \ = 0;\n        long minSum11 = 0;\n        long maxSum12 = 0;\n        long minSum12\
    \ = 0;\n        long maxSum13 = 0;\n        long minSum13 = 0;\n        long maxSum14\
    \ = 0;\n        long minSum14 = 0;\n        long maxSum15 = 0;\n        long minSum15\
    \ = 0;\n        long maxSum16 = 0;\n        long minSum16 = 0;\n        long maxSum17\
    \ = 0;\n        long minSum17 = 0;\n        long maxSum18 = 0;\n        long minSum18\
    \ = 0;\n        long maxSum19 = 0;\n        long minSum19 = 0;\n        long maxSum20\
    \ = 0;\n        long minSum20 = 0;\n        long maxSum21 = 0;\n        long minSum21\
    \ = 0;\n        long maxSum22 = 0;\n        long minSum22 = 0;\n        long maxSum23\
    \ = 0;\n        long minSum23 = 0;\n        long maxSum24 = 0;\n        long minSum24\
    \ = 0;\n        long maxSum25 = 0;\n        long minSum25 = 0;\n        long maxSum26\
    \ = 0;\n        long minSum26 = 0;\n        long maxSum27 = 0;\n        long minSum27\
    \ = 0;\n        long maxSum28 = 0;\n        long minSum28 = 0;\n        long maxSum29\
    \ = 0;\n        long minSum29 = 0;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi1kuct29.cs(49,14): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    /tmp/tmpi1kuct29.cs(46,14): warning CS0219: The variable ''start'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(47,14): warning CS0219: The variable ''end'' is assigned but
    its value is never used

    /tmp/tmpi1kuct29.cs(48,14): warning CS0219: The variable ''mid'' is assigned but
    its value is never used

    /tmp/tmpi1kuct29.cs(49,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmpi1kuct29.cs(50,14): warning CS0219: The variable ''maxSum'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(51,14): warning CS0219: The variable ''minSum'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(52,14): warning CS0219: The variable ''maxSum2'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(53,14): warning CS0219: The variable ''minSum2'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(54,14): warning CS0219: The variable ''maxSum3'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(55,14): warning CS0219: The variable ''minSum3'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(56,14): warning CS0219: The variable ''maxSum4'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(57,14): warning CS0219: The variable ''minSum4'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(58,14): warning CS0219: The variable ''maxSum5'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(59,14): warning CS0219: The variable ''minSum5'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(60,14): warning CS0219: The variable ''maxSum6'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(61,14): warning CS0219: The variable ''minSum6'' is assigned
    but its value is never used

    /tmp/tmpi1kuct29.cs(62,14): warning CS0219: The variable ''maxSum7'' is assigned
    but its value is never used

    /t'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndex = arr[0];\n        long minIndex = arr[0];\n\
    \        foreach (long i in arr) {\n            if (i > maxValue) {\n        \
    \        maxValue = i;\n                maxIndex = i;\n            }\n       \
    \     if (i < minValue) {\n                minValue = i;\n                minIndex\
    \ = i;\n            }\n            if (i > max) {\n                max = i;\n\
    \                maxIndex = i;\n            }\n            if (i < min) {\n  \
    \              min = i;\n                minIndex = i;\n            }\n      \
    \  }\n        if (k > maxIndex - minIndex + 1) {\n            k = maxIndex - minIndex\
    \ + 1;\n        }\n        if (k > maxIndex - minIndex + 1) {\n            k =\
    \ maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex - minIndex + 1)\
    \ {\n            k = maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex\
    \ - minIndex + 1) {\n            k = maxIndex - minIndex + 1;\n        }\n   \
    \     if (k > maxIndex - minIndex + 1) {\n            k = maxIndex - minIndex\
    \ + 1;\n        }\n        if (k > maxIndex - minIndex + 1) {\n            k =\
    \ maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex - minIndex + 1)\
    \ {\n            k = maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex\
    \ - minIndex + 1) {\n            k = maxIndex - minIndex + 1;\n        }\n   \
    \     if (k > maxIndex - minIndex + 1) {\n            k = maxIndex - minIndex\
    \ + 1;\n        }\n        if (k > maxIndex - minIndex + 1) {\n            k =\
    \ maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex - minIndex + 1)\
    \ {\n            k = maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex\
    \ - minIndex + 1) {\n            k = maxIndex - minIndex + 1;\n        }\n   \
    \     if (k > maxIndex - minIndex + 1) {\n            k = maxIndex - minIndex\
    \ + 1;\n        }\n        if (k > maxIndex - minIndex + 1) {\n            k =\
    \ maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex - minIndex + 1)\
    \ {\n            k = maxIndex - minIndex + 1;\n        }\n        if (k > maxIndex\
    \ - minIndex + 1) {\n            k = maxIndex - minIndex + 1;\n        }\n   \
    \     if (k > maxIndex - minIndex + 1) {\n            k = maxIndex - minIndex\
    \ + 1;\n        }\n        if (k > \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpodgcil__.cs(103,16): error CS1525: Invalid expression term ''}''

    /tmp/tmpodgcil__.cs(103,16): error CS1026: ) expected

    /tmp/tmpodgcil__.cs(103,16): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n                maxIndex = i;\n          \
    \  }\n        }\n        if (maxIndex + k > arr.Count) {\n            k = arr.Count\
    \ - maxIndex;\n        }\n        for (int i = 0; i < k; i++) {\n            result.Add(arr[maxIndex\
    \ + i]);\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplr65zov5.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmplr65zov5.cs(39,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n\
    \        bool isMax = true;\n        long maxIndex = 0;\n        long minIndex\
    \ = 0;\n        foreach (long i in arr) {\n            if (isMax) {\n        \
    \        if (i > max) {\n                    max = i;\n                    maxIndex\
    \ = i;\n                }\n                if (i == max) {\n                 \
    \   isMax = false;\n                }\n            } else {\n                if\
    \ (i < min) {\n                    min = i;\n                    minIndex = i;\n\
    \                }\n                if (i == min) {\n                    isMax\
    \ = true;\n                }\n            }\n        }\n        mid = min + (max\
    \ - min) / 2;\n        if (k == maxIndex) {\n            result.Add(max);\n  \
    \      } else if (k == minIndex) {\n            result.Add(min);\n        } else\
    \ {\n            while (k >= maxIndex) {\n                result.Add(arr[mid]);\n\
    \                k--;\n                mid++;\n            }\n            while\
    \ (k >= minIndex) {\n                result.Add(arr[mid]);\n                k--;\n\
    \                mid++;\n            }\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi7fp4do_.cs(58,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpi7fp4do_.cs(63,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = int.MaxValue;\n        foreach (long i in arr) {\n            if (i <\
    \ min) min = i;\n            if (i > max) max = i;\n        }\n        long mid\
    \ = max - (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 =\
    \ mid - mid2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid3 - mid4;\n\
    \        long mid6 = mid5 / 2;\n        long mid7 = mid5 - mid6;\n        long\
    \ mid8 = mid7 / 2;\n        long mid9 = mid7 - mid8;\n        long mid10 = mid9\
    \ / 2;\n        long mid11 = mid9 - mid10;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid11 - mid12;\n        long mid14 = mid13 / 2;\n      \
    \  long mid15 = mid13 - mid14;\n        long mid16 = mid15 / 2;\n        long\
    \ mid17 = mid15 - mid16;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid17 - mid18;\n        long mid20 = mid19 / 2;\n        long mid21 = mid19\
    \ - mid20;\n        long mid22 = mid21 / 2;\n        long mid23 = mid21 - mid22;\n\
    \        long mid24 = mid23 / 2;\n        long mid25 = mid23 - mid24;\n      \
    \  long mid26 = mid25 / 2;\n        long mid27 = mid25 - mid26;\n        long\
    \ mid28 = mid27 / 2;\n        long mid29 = mid27 - mid28;\n        long mid30\
    \ = mid29 / 2;\n        long mid31 = mid29 - mid30;\n        long mid32 = mid31\
    \ / 2;\n        long mid33 = mid31 - mid32;\n        long mid34 = mid33 / 2;\n\
    \        long mid35 = mid33 - mid34;\n        long mid36 = mid35 / 2;\n      \
    \  long mid37 = mid35 - mid36;\n        long mid38 = mid37 / 2;\n        long\
    \ mid39 = mid37 - mid38;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid39 - mid40;\n        long mid42 = mid41 / 2;\n        long mid43 = mid41\
    \ - mid42;\n        long mid44\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg1r5ijz3.cs(76,19): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > k) {\n\
    \                max = sum - k;\n                min = sum;\n            }\n \
    \           if (sum < k) {\n                max = sum + k;\n                min\
    \ = sum;\n            }\n            if (sum == k) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d30d275fc2045f193cf5ee00356ff7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d30d275fc2045f193cf5ee00356ff7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxCount = 0;\n        long minCount = 0;\n        long\
    \ maxCountIndex = 0;\n        long minCountIndex = 0;\n        bool isMax = true;\n\
    \        bool isMin = true;\n        bool isMaxIndex = true;\n        bool isMinIndex\
    \ = true;\n        bool isMaxValue = true;\n        bool isMinValue = true;\n\
    \        bool isMaxCount = true;\n        bool isMinCount = true;\n        bool\
    \ isMaxCountIndex = true;\n        bool isMinCountIndex = true;\n        bool\
    \ isMaxIndexValue = true;\n        bool isMinIndexValue = true;\n        bool\
    \ isMaxIndexCount = true;\n        bool isMinIndexCount = true;\n        bool\
    \ isMaxValueCount = true;\n        bool isMinValueCount = true;\n        bool\
    \ isMaxCountIndexValue = true;\n        bool isMinCountIndexValue = true;\n  \
    \      bool isMaxIndexCountValue = true;\n        bool isMinCountIndexCountValue\
    \ = true;\n        bool isMaxIndexValueCount = true;\n        bool isMinIndexValueCount\
    \ = true;\n        bool isMaxIndexCountValue = true;\n        bool isMinIndexCountValue\
    \ = true;\n        bool isMaxValueCountValue = true;\n        bool isMinValueCountValue\
    \ = true;\n        bool isMaxCountIndexValueCount = true;\n        bool isMinCountIndexValueCount\
    \ = true;\n        bool isMaxIndexValueCountValue = true;\n        bool isMinIndexValueCountValue\
    \ = true;\n        bool isMaxIndexCountValueCount = true;\n        bool isMinIndexCountValueCount\
    \ = true;\n        bool isMaxValueCountValueCount = true;\n        bool isMinValueCountValueCount\
    \ = true;\n        bool isMaxCountIndexValueCountValue = true;\n        bool isMinCountIndexValueCountValue\
    \ = true;\n        bool isMaxIndexValueCountValueCount = true;\n        bool isMinIndexValueCountValueCount\
    \ = true;\n        bool isMaxIndexCountValueCountValue = true;\n        bool isMinIndexCountValueCountValue\
    \ = true;\n        bool isMaxValueCountValueCountValue = true;\n        bool isMinValueCountValueCountValue\
    \ = true;\n        bool isMaxCountIndexValueCountValueCount = true;\n        bool\
    \ isMinCountIndexValueCountValueCount = true;\n        bool isMaxIndexValueCountValueCountValue\
    \ = true;\n        bool isMinIndexValueCountValueCountValue = true;\n        bool\
    \ isMaxIndexCountValueCountValueCount = true;\n        bool is\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfkxz671o.cs(83,14): error CS1001: Identifier expected

    /tmp/tmpfkxz671o.cs(83,14): error CS1002: ; expected

    /tmp/tmpfkxz671o.cs(83,14): error CS1525: Invalid expression term ''is''

    /tmp/tmpfkxz671o.cs(83,16): error CS1031: Type expected

    /tmp/tmpfkxz671o.cs(83,16): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = 0;\n        long minValue =\
    \ 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long maxCount2\
    \ = 0;\n        long minCount2 = 0;\n        long maxCount3 = 0;\n        long\
    \ minCount3 = 0;\n        long maxCount4 = 0;\n        long minCount4 = 0;\n \
    \       long maxCount5 = 0;\n        long minCount5 = 0;\n        long maxCount6\
    \ = 0;\n        long minCount6 = 0;\n        long maxCount7 = 0;\n        long\
    \ minCount7 = 0;\n        long maxCount8 = 0;\n        long minCount8 = 0;\n \
    \       long maxCount9 = 0;\n        long minCount9 = 0;\n        long maxCount10\
    \ = 0;\n        long minCount10 = 0;\n        long maxCount11 = 0;\n        long\
    \ minCount11 = 0;\n        long maxCount12 = 0;\n        long minCount12 = 0;\n\
    \        long maxCount13 = 0;\n        long minCount13 = 0;\n        long maxCount14\
    \ = 0;\n        long minCount14 = 0;\n        long maxCount15 = 0;\n        long\
    \ minCount15 = 0;\n        long maxCount16 = 0;\n        long minCount16 = 0;\n\
    \        long maxCount17 = 0;\n        long minCount17 = 0;\n        long maxCount18\
    \ = 0;\n        long minCount18 = 0;\n        long maxCount19 = 0;\n        long\
    \ minCount19 = 0;\n        long maxCount20 = 0;\n        long minCount20 = 0;\n\
    \        long maxCount21 = 0;\n        long minCount21 = 0;\n        long maxCount22\
    \ = 0;\n        long minCount22 = 0;\n        long maxCount23 = 0;\n        long\
    \ minCount23 = 0;\n        long maxCount24 = 0;\n        long minCount24 = 0;\n\
    \        long maxCount25 = 0;\n        long minCount25 = 0;\n        long maxCount26\
    \ = 0;\n        long minCount26 = 0;\n        long maxCount27 = 0;\n        long\
    \ minCount27 = 0;\n        long maxCount28 = 0;\n        long minCount28 = 0;\n\
    \        long maxCount29 = 0;\n        long minCount29 = 0;\n        long maxCount30\
    \ = 0;\n        long minCount30 = 0;\n        long maxCount31 = 0;\n        long\
    \ minCount31 = 0;\n        long maxCount32 = 0;\n        long minCount32 = 0;\n\
    \        long maxCount33 = 0;\n        long minCount33 = 0;\n        long maxCount34\
    \ = 0;\n        long minCount34 = 0;\n        long \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfyutdnxp.cs(100,13): error CS1001: Identifier expected

    /tmp/tmpfyutdnxp.cs(100,13): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long temp = 0;\n \
    \       long temp2 = 0;\n        long temp3 = 0;\n        long temp4 = 0;\n  \
    \      long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n   \
    \     long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n   \
    \     long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n \
    \       long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n\
    \        long temp80 = 0;\n        long temp81 = 0;\n        long temp82 = 0;\n\
    \        long temp83\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcjx3zj_t.cs(110,20): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxVal = 0;\n        long minVal = 0;\n\
    \        long maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxVal2\
    \ = 0;\n        long minVal2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3\
    \ = 0;\n        long maxVal3 = 0;\n        long minVal3 = 0;\n        long maxIndex4\
    \ = 0;\n        long minIndex4 = 0;\n        long maxVal4 = 0;\n        long minVal4\
    \ = 0;\n        long maxIndex5 = 0;\n        long minIndex5 = 0;\n        long\
    \ maxVal5 = 0;\n        long minVal5 = 0;\n        long maxIndex6 = 0;\n     \
    \   long minIndex6 = 0;\n        long maxVal6 = 0;\n        long minVal6 = 0;\n\
    \        long maxIndex7 = 0;\n        long minIndex7 = 0;\n        long maxVal7\
    \ = 0;\n        long minVal7 = 0;\n        long maxIndex8 = 0;\n        long minIndex8\
    \ = 0;\n        long maxVal8 = 0;\n        long minVal8 = 0;\n        long maxIndex9\
    \ = 0;\n        long minIndex9 = 0;\n        long maxVal9 = 0;\n        long minVal9\
    \ = 0;\n        long maxIndex10 = 0;\n        long minIndex10 = 0;\n        long\
    \ maxVal10 = 0;\n        long minVal10 = 0;\n        long maxIndex11 = 0;\n  \
    \      long minIndex11 = 0;\n        long maxVal11 = 0;\n        long minVal11\
    \ = 0;\n        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long\
    \ maxVal12 = 0;\n        long minVal12 = 0;\n        long maxIndex13 = 0;\n  \
    \      long minIndex13 = 0;\n        long maxVal13 = 0;\n        long minVal13\
    \ = 0;\n        long maxIndex14 = 0;\n        long minIndex14 = 0;\n        long\
    \ maxVal14 = 0;\n        long minVal14 = 0;\n        long maxIndex15 = 0;\n  \
    \      long minIndex15 = 0;\n        long maxVal15 = 0;\n        long minVal15\
    \ = 0;\n        long maxIndex16 = 0;\n        long minIndex16 = 0;\n        long\
    \ maxVal16 = 0;\n        long minVal16 = 0;\n        long maxIndex17 = 0;\n  \
    \      long minIndex17 = 0;\n        long maxVal17 = 0;\n        long minVal17\
    \ = 0;\n        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long\
    \ maxVal18 = 0;\n        long minVal18 = 0;\n        long maxIndex19 = 0;\n  \
    \      \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_fq21xlc.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp_fq21xlc.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp_fq21xlc.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(30,14): warning CS0219: The variable ''maxVal'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(31,14): warning CS0219: The variable ''minVal'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(34,14): warning CS0219: The variable ''maxVal2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(35,14): warning CS0219: The variable ''minVal2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(38,14): warning CS0219: The variable ''maxVal3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(39,14): warning CS0219: The variable ''minVal3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(42,14): warning CS0219: The variable ''maxVal4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(43,14): warning CS0219: The variable ''minVal4'' is assigned
    but its value is ne'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 1000;\n        long sum = 0;\n    \
    \    long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \      count++;\n        }\n        if (count > k) {\n            k = count;\n\
    \        }\n        long mid = min + (k - 1);\n        long mid2 = mid / 2;\n\
    \        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpetihd06d.cs(86,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpetihd06d.cs(86,29): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n            } else if (sum == k) {\n       \
    \         if (count < k) {\n                    max = sum;\n                 \
    \   min = i;\n                    count++;\n                }\n            }\n\
    \        }\n        result.Add(max);\n        result.Add(min);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a14d71540eb4279adc47819d0240c99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a14d71540eb4279adc47819d0240c99>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long maxIndex2 = 0;\n        long maxValue2 = 0;\n        long maxIndex3\
    \ = 0;\n        long maxValue3 = 0;\n        long maxIndex4 = 0;\n        long\
    \ maxValue4 = 0;\n        long maxIndex5 = 0;\n        long maxValue5 = 0;\n \
    \       long maxIndex6 = 0;\n        long maxValue6 = 0;\n        long maxIndex7\
    \ = 0;\n        long maxValue7 = 0;\n        long maxIndex8 = 0;\n        long\
    \ maxValue8 = 0;\n        long maxIndex9 = 0;\n        long maxValue9 = 0;\n \
    \       long maxIndex10 = 0;\n        long maxValue10 = 0;\n        long maxIndex11\
    \ = 0;\n        long maxValue11 = 0;\n        long maxIndex12 = 0;\n        long\
    \ maxValue12 = 0;\n        long maxIndex13 = 0;\n        long maxValue13 = 0;\n\
    \        long maxIndex14 = 0;\n        long maxValue14 = 0;\n        long maxIndex15\
    \ = 0;\n        long maxValue15 = 0;\n        long maxIndex16 = 0;\n        long\
    \ maxValue16 = 0;\n        long maxIndex17 = 0;\n        long maxValue17 = 0;\n\
    \        long maxIndex18 = 0;\n        long maxValue18 = 0;\n        long maxIndex19\
    \ = 0;\n        long maxValue19 = 0;\n        long maxIndex20 = 0;\n        long\
    \ maxValue20 = 0;\n        long maxIndex21 = 0;\n        long maxValue21 = 0;\n\
    \        long maxIndex22 = 0;\n        long maxValue22 = 0;\n        long maxIndex23\
    \ = 0;\n        long maxValue23 = 0;\n        long maxIndex24 = 0;\n        long\
    \ maxValue24 = 0;\n        long maxIndex25 = 0;\n        long maxValue25 = 0;\n\
    \        long maxIndex26 = 0;\n        long maxValue26 = 0;\n        long maxIndex27\
    \ = 0;\n        long maxValue27 = 0;\n        long maxIndex28 = 0;\n        long\
    \ maxValue28 = 0;\n        long maxIndex29 = 0;\n        long maxValue29 = 0;\n\
    \        long maxIndex30 = 0;\n        long maxValue30 = 0;\n        long maxIndex31\
    \ = 0;\n        long maxValue31 = 0;\n        long maxIndex32 = 0;\n        long\
    \ maxValue32 = 0;\n        long maxIndex33 = 0;\n        long maxValue33 = 0;\n\
    \        long maxIndex34 = 0;\n        long maxValue34 = 0;\n        long maxIndex35\
    \ = 0;\n        long maxValue35 = 0;\n        long maxIndex36 = 0;\n        long\
    \ maxValue36 = 0;\n        long max\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpndoqunj5.cs(99,17): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > k) {\n\
    \                max = sum - k;\n                min = sum;\n            }\n \
    \           if (sum < k) {\n                max = sum + k;\n                min\
    \ = sum;\n            }\n            if (sum == k) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d30d275fc2045f193cf5ee00356ff7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d30d275fc2045f193cf5ee00356ff7c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxVal = 0;\n\
    \        foreach (long i in arr) {\n            if (i > maxVal) {\n          \
    \      maxVal = i;\n                maxIndex = i;\n            }\n           \
    \ if (i == maxVal) {\n                result.Add(maxIndex);\n            }\n \
    \       }\n        if (result.Count > k) {\n            List<long> newResult =\
    \ new List<long>();\n            foreach (long i in result) {\n              \
    \  if (i < result.Count - k) {\n                    newResult.Add(i);\n      \
    \          }\n            }\n            result = newResult;\n        }\n    \
    \    return result;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a533fe557eda4d8c8ddc0ee448809d16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a533fe557eda4d8c8ddc0ee448809d16>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        long sum = 0;\n        foreach (long i in arr) {\n       \
    \     sum += i;\n            if (sum > max) {\n                max = sum;\n  \
    \          }\n            if (sum < min) {\n                min = sum;\n     \
    \       }\n        }\n        long mid = min + (max - min) / 2;\n        long\
    \ mid2 = mid / 2;\n        long mid3 = mid - mid2;\n        long mid4 = mid3 /\
    \ 2;\n        long mid5 = mid3 - mid4;\n        long mid6 = mid5 / 2;\n      \
    \  long mid7 = mid5 - mid6;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid7 - mid8;\n        long mid10 = mid9 / 2;\n        long mid11 = mid9 -\
    \ mid10;\n        long mid12 = mid11 / 2;\n        long mid13 = mid11 - mid12;\n\
    \        long mid14 = mid13 / 2;\n        long mid15 = mid13 - mid14;\n      \
    \  long mid16 = mid15 / 2;\n        long mid17 = mid15 - mid16;\n        long\
    \ mid18 = mid17 / 2;\n        long mid19 = mid17 - mid18;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid19 - mid20;\n        long mid22 = mid21\
    \ / 2;\n        long mid23 = mid21 - mid22;\n        long mid24 = mid23 / 2;\n\
    \        long mid25 = mid23 - mid24;\n        long mid26 = mid25 / 2;\n      \
    \  long mid27 = mid25 - mid26;\n        long mid28 = mid27 / 2;\n        long\
    \ mid29 = mid27 - mid28;\n        long mid30 = mid29 / 2;\n        long mid31\
    \ = mid29 - mid30;\n        long mid32 = mid31 / 2;\n        long mid33 = mid31\
    \ - mid32;\n        long mid34 = mid33 / 2;\n        long mid35 = mid33 - mid34;\n\
    \        long mid36 = mid35 / 2;\n        long mid37 = mid35 - mid36;\n      \
    \  long mid38 = mid37 / 2;\n        long mid39 = mid37 - mid38;\n        long\
    \ mid40 = mid39 / 2;\n        long mid41 = mid39 - mid40;\n        long mid42\
    \ = mid4\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkma46hz5.cs(80,26): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        foreach (long i in arr) {\n            if (i > maxValue) {\n        \
    \        maxValue = i;\n                maxIndex = i;\n            }\n       \
    \     if (i == maxValue) {\n                maxIndex++;\n            }\n     \
    \   }\n        if (maxIndex < k) {\n            max = maxValue;\n            k\
    \ = maxIndex;\n        }\n        long temp = 0;\n        long tempIndex = 0;\n\
    \        long tempValue = 0;\n        foreach (long i in arr) {\n            if\
    \ (i > maxValue) {\n                tempValue = i;\n                tempIndex\
    \ = i;\n            }\n            if (i == maxValue) {\n                tempIndex++;\n\
    \            }\n            if (tempIndex == k) {\n                result.Add(tempValue);\n\
    \                tempIndex = 0;\n                tempValue = 0;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de75fd71b8684bb299c7a5c1711fcd28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de75fd71b8684bb299c7a5c1711fcd28>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n        foreach\
    \ (long i in arr) {\n            if (isMax) {\n                if (i > maxValue)\
    \ {\n                    maxValue = i;\n                    maxIndex = i;\n  \
    \              }\n                if (i == maxValue) {\n                    isMax\
    \ = false;\n                }\n            }\n            if (isMin) {\n     \
    \           if (i < minValue) {\n                    minValue = i;\n         \
    \           minIndex = i;\n                }\n                if (i == minValue)\
    \ {\n                    isMin = false;\n                }\n            }\n  \
    \      }\n        max = maxValue;\n        min = minValue;\n        if (maxIndex\
    \ == minIndex) {\n            result.Add(max);\n            return result;\n \
    \       }\n        long mid = maxIndex + minIndex;\n        long midValue = arr[mid];\n\
    \        if (midValue == max) {\n            isMax = true;\n            isMin\
    \ = false;\n            mid = maxIndex + 1;\n            midValue = arr[mid];\n\
    \        }\n        if (midValue == min) {\n            isMax = false;\n     \
    \       isMin = true;\n            mid = minIndex + 1;\n            midValue =\
    \ arr[mid];\n        }\n        if (midValue == max) {\n            isMax = true;\n\
    \            isMin = true;\n            mid = maxIndex - 1;\n            midValue\
    \ = arr[mid];\n        }\n        if (midValue == min) {\n            isMax =\
    \ false;\n            isMin = true;\n            mid = minIndex - 1;\n       \
    \     midValue = arr[mid];\n        }\n        if (midValue == max) {\n      \
    \      isMax = true;\n            isMin = true;\n            mid = maxIndex +\
    \ 1;\n            midValue = arr[mid];\n        }\n        if (midValue == min)\
    \ {\n            isMax = false;\n            isMin = true;\n            mid =\
    \ minIndex + 1;\n            midValue = arr[mid];\n        }\n        if (midValue\
    \ == max) {\n            isMax = true;\n            isMin = true;\n          \
    \  mid = maxIndex - 1;\n            midValue = arr[mid];\n        }\n        if\
    \ (midValue == min) {\n            isMax = false;\n            isMin = true;\n\
    \            mid = minIndex - 1;\n            midValue = arr[mid];\n        }\n\
    \        if (midValue == max) {\n            isMax = true;\n            isMin\
    \ = true;\n            mid = maxIndex + 1;\n            midValue = arr[mid];\n\
    \        }\n        if (midValue == min) {\n            isMax = false;\n     \
    \       isMin = true;\n            mid = minIndex + 1;\n            midValue =\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyw5_3h0m.cs(120,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpyw5_3h0m.cs(120,23): error CS1002: ; expected

    /tmp/tmpyw5_3h0m.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyw5_3h0m.cs(136,2): error CS1513: } expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long current = 0;\n        long currentIndex = 0;\n        long currentValue\
    \ = 0;\n        long temp = 0;\n        long tempIndex = 0;\n        long tempValue\
    \ = 0;\n        long tempValue2 = 0;\n        long tempValue3 = 0;\n        long\
    \ tempValue4 = 0;\n        long tempValue5 = 0;\n        long tempValue6 = 0;\n\
    \        long tempValue7 = 0;\n        long tempValue8 = 0;\n        long tempValue9\
    \ = 0;\n        long tempValue10 = 0;\n        long tempValue11 = 0;\n       \
    \ long tempValue12 = 0;\n        long tempValue13 = 0;\n        long tempValue14\
    \ = 0;\n        long tempValue15 = 0;\n        long tempValue16 = 0;\n       \
    \ long tempValue17 = 0;\n        long tempValue18 = 0;\n        long tempValue19\
    \ = 0;\n        long tempValue20 = 0;\n        long tempValue21 = 0;\n       \
    \ long tempValue22 = 0;\n        long tempValue23 = 0;\n        long tempValue24\
    \ = 0;\n        long tempValue25 = 0;\n        long tempValue26 = 0;\n       \
    \ long tempValue27 = 0;\n        long tempValue28 = 0;\n        long tempValue29\
    \ = 0;\n        long tempValue30 = 0;\n        long tempValue31 = 0;\n       \
    \ long tempValue32 = 0;\n        long tempValue33 = 0;\n        long tempValue34\
    \ = 0;\n        long tempValue35 = 0;\n        long tempValue36 = 0;\n       \
    \ long tempValue37 = 0;\n        long tempValue38 = 0;\n        long tempValue39\
    \ = 0;\n        long tempValue40 = 0;\n        long tempValue41 = 0;\n       \
    \ long tempValue42 = 0;\n        long tempValue43 = 0;\n        long tempValue44\
    \ = 0;\n        long tempValue45 = 0;\n        long tempValue46 = 0;\n       \
    \ long tempValue47 = 0;\n        long tempValue48 = 0;\n        long tempValue49\
    \ = 0;\n        long tempValue50 = 0;\n        long tempValue51 = 0;\n       \
    \ long tempValue52 = 0;\n        long tempValue53 = 0;\n        long tempValue54\
    \ = 0;\n        long tempValue55 = 0;\n        long tempValue56 = 0;\n       \
    \ long tempValue57 = 0;\n        long tempValue58 = 0;\n        long tempValue59\
    \ = 0;\n        long tempValue60 = 0;\n        long tempValue61 = 0;\n       \
    \ long tempValue62 = 0;\n        long tempValue63 = 0;\n        long tempValue64\
    \ = 0;\n        long tempValue65 = 0;\n        long tempValue66 = 0;\n\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdsnhxn_i.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpdsnhxn_i.cs(27,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(28,14): warning CS0219: The variable ''maxValue'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(29,14): warning CS0219: The variable ''current'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(30,14): warning CS0219: The variable ''currentIndex'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(31,14): warning CS0219: The variable ''currentValue'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(32,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(33,14): warning CS0219: The variable ''tempIndex'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(34,14): warning CS0219: The variable ''tempValue'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(35,14): warning CS0219: The variable ''tempValue2'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(36,14): warning CS0219: The variable ''tempValue3'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(37,14): warning CS0219: The variable ''tempValue4'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(38,14): warning CS0219: The variable ''tempValue5'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(39,14): warning CS0219: The variable ''tempValue6'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(40,14): warning CS0219: The variable ''tempValue7'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(41,14): warning CS0219: The variable ''tempValue8'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(42,14): warning CS0219: The variable ''tempValue9'' is assigned
    but its value is never used

    /tmp/tmpdsnhxn_i.cs(43,14): warning CS0219: The variable ''tempValue10'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        if (k == 0) return arr;\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxVal = 0;\n        long minVal = 0;\n\
    \        long maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxVal2\
    \ = 0;\n        long minVal2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3\
    \ = 0;\n        long maxVal3 = 0;\n        long minVal3 = 0;\n        long maxIndex4\
    \ = 0;\n        long minIndex4 = 0;\n        long maxVal4 = 0;\n        long minVal4\
    \ = 0;\n        long maxIndex5 = 0;\n        long minIndex5 = 0;\n        long\
    \ maxVal5 = 0;\n        long minVal5 = 0;\n        long maxIndex6 = 0;\n     \
    \   long minIndex6 = 0;\n        long maxVal6 = 0;\n        long minVal6 = 0;\n\
    \        long maxIndex7 = 0;\n        long minIndex7 = 0;\n        long maxVal7\
    \ = 0;\n        long minVal7 = 0;\n        long maxIndex8 = 0;\n        long minIndex8\
    \ = 0;\n        long maxVal8 = 0;\n        long minVal8 = 0;\n        long maxIndex9\
    \ = 0;\n        long minIndex9 = 0;\n        long maxVal9 = 0;\n        long minVal9\
    \ = 0;\n        long maxIndex10 = 0;\n        long minIndex10 = 0;\n        long\
    \ maxVal10 = 0;\n        long minVal10 = 0;\n        long maxIndex11 = 0;\n  \
    \      long minIndex11 = 0;\n        long maxVal11 = 0;\n        long minVal11\
    \ = 0;\n        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long\
    \ maxVal12 = 0;\n        long minVal12 = 0;\n        long maxIndex13 = 0;\n  \
    \      long minIndex13 = 0;\n        long maxVal13 = 0;\n        long minVal13\
    \ = 0;\n        long maxIndex14 = 0;\n        long minIndex14 = 0;\n        long\
    \ maxVal14 = 0;\n        long minVal14 = 0;\n        long maxIndex15 = 0;\n  \
    \      long minIndex15 = 0;\n        long maxVal15 = 0;\n        long minVal15\
    \ = 0;\n        long maxIndex16 = 0;\n        long minIndex16 = 0;\n        long\
    \ maxVal16 = 0;\n        long minVal16 = 0;\n        long maxIndex17 = 0;\n  \
    \      long minIndex17 = 0;\n        long maxVal17 = 0;\n        long minVal17\
    \ = 0;\n        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long\
    \ max\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpixoun557.cs(100,17): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \         if (cur < i) {\n                cur = i;\n            }\n        }\n\
    \        if (k > max) {\n            k = max;\n        }\n        if (k == max)\
    \ {\n            result.Add(max);\n        }\n        if (k > 0) {\n         \
    \   while (k > 0) {\n                result.Add(max);\n                k--;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2b7c319fe434e89a87fb00f6a0af3e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2b7c319fe434e89a87fb00f6a0af3e0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            cur = i;\n            if (max < cur) {\n                max =\
    \ cur;\n            }\n        }\n        long curMax = max;\n        long curMaxIndex\
    \ = 0;\n        long curMaxIndex2 = 0;\n        long curMaxIndex3 = 0;\n     \
    \   long curMaxIndex4 = 0;\n        long curMaxIndex5 = 0;\n        long curMaxIndex6\
    \ = 0;\n        long curMaxIndex7 = 0;\n        long curMaxIndex8 = 0;\n     \
    \   long curMaxIndex9 = 0;\n        long curMaxIndex10 = 0;\n        long curMaxIndex11\
    \ = 0;\n        long curMaxIndex12 = 0;\n        long curMaxIndex13 = 0;\n   \
    \     long curMaxIndex14 = 0;\n        long curMaxIndex15 = 0;\n        long curMaxIndex16\
    \ = 0;\n        long curMaxIndex17 = 0;\n        long curMaxIndex18 = 0;\n   \
    \     long curMaxIndex19 = 0;\n        long curMaxIndex20 = 0;\n        long curMaxIndex21\
    \ = 0;\n        long curMaxIndex22 = 0;\n        long curMaxIndex23 = 0;\n   \
    \     long curMaxIndex24 = 0;\n        long curMaxIndex25 = 0;\n        long curMaxIndex26\
    \ = 0;\n        long curMaxIndex27 = 0;\n        long curMaxIndex28 = 0;\n   \
    \     long curMaxIndex29 = 0;\n        long curMaxIndex30 = 0;\n        long curMaxIndex31\
    \ = 0;\n        long curMaxIndex32 = 0;\n        long curMaxIndex33 = 0;\n   \
    \     long curMaxIndex34 = 0;\n        long curMaxIndex35 = 0;\n        long curMaxIndex36\
    \ = 0;\n        long curMaxIndex37 = 0;\n        long curMaxIndex38 = 0;\n   \
    \     long curMaxIndex39 = 0;\n        long curMaxIndex40 = 0;\n        long curMaxIndex41\
    \ = 0;\n        long curMaxIndex42 = 0;\n        long curMaxIndex43 = 0;\n   \
    \     long curMaxIndex44 = 0;\n        long curMaxIndex45 = 0;\n        long curMaxIndex46\
    \ = 0;\n        long curMaxIndex47 = 0;\n        long curMaxIndex48 = 0;\n   \
    \     long curMaxIndex49 = 0;\n        long curMaxIndex50 = 0;\n        long curMaxIndex51\
    \ = 0;\n        long curMaxIndex52 = 0;\n        long curMaxIndex53 = 0;\n   \
    \     long curMaxIndex54 = 0;\n        long curMaxIndex55 = 0;\n        long curMaxIndex56\
    \ = 0;\n        long curMaxIndex57 = 0;\n        long curMaxIndex58 = 0;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2opjrvp_.cs(35,14): warning CS0219: The variable ''curMaxIndex'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(36,14): warning CS0219: The variable ''curMaxIndex2'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(37,14): warning CS0219: The variable ''curMaxIndex3'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(38,14): warning CS0219: The variable ''curMaxIndex4'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(39,14): warning CS0219: The variable ''curMaxIndex5'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(40,14): warning CS0219: The variable ''curMaxIndex6'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(41,14): warning CS0219: The variable ''curMaxIndex7'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(42,14): warning CS0219: The variable ''curMaxIndex8'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(43,14): warning CS0219: The variable ''curMaxIndex9'' is assigned
    but its value is never used

    /tmp/tmp2opjrvp_.cs(44,14): warning CS0219: The variable ''curMaxIndex10'' is
    assigned but its value is never used

    /tmp/tmp2opjrvp_.cs(45,14): warning CS0219: The variable ''curMaxIndex11'' is
    assigned but its value is never used

    /tmp/tmp2opjrvp_.cs(46,14): warning CS0219: The variable ''curMaxIndex12'' is
    assigned but its value is never used

    /tmp/tmp2opjrvp_.cs(47,14): warning CS0219: The variable ''curMaxIndex13'' is
    assigned but its value is never used

    /tmp/tmp2opjrvp_.cs(48,14): warning CS0219: The variable ''curMaxIndex14'' is
    assigned but its value is never used

    /tmp/tmp2opjrvp_.cs(49,14): warning CS0219: The variable ''curMaxIndex15'' is
    assigned but its value is never used

    /tmp/tmp2opjrvp_.cs(50,14): warning CS0219: The variable ''curMaxIndex16'' is
    assigned but its value is never used

    /tmp/tmp2opjrvp_.cs(51,14): warning CS0219: The variable ''curMaxIndex17'' is
    assigned but its value is never used

    /tmp/tmp2o'
  timestamp: 1659793570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = arr[0];\n        List<long>\
    \ result = new List<long>();\n        long cur = arr[0];\n        long maxCount\
    \ = 0;\n        long curCount = 0;\n        for (int i = 1; i < arr.Count; i++)\
    \ {\n            if (arr[i] > max) {\n                max = arr[i];\n        \
    \        maxCount = 1;\n            } else if (arr[i] == max) {\n            \
    \    maxCount++;\n            }\n            if (maxCount > k) {\n           \
    \     break;\n            }\n        }\n        for (int i = 0; i < arr.Count;\
    \ i++) {\n            if (arr[i] == max) {\n                result.Add(cur);\n\
    \                curCount++;\n            }\n            if (curCount >= k) {\n\
    \                break;\n            }\n            cur = arr[i];\n          \
    \  curCount = 0;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db77c715f5d84cd8b610febe76d35f10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <db77c715f5d84cd8b610febe76d35f10>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n          \
    \  throw new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long maxIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n                maxIndex = i;\n          \
    \  }\n        }\n        result.Add(max);\n        if (maxIndex + 1 == arr.Count)\
    \ {\n            return result;\n        }\n        List<long> left = new List<long>();\n\
    \        List<long> right = new List<long>();\n        long leftMax = max;\n \
    \       long rightMax = max;\n        for (int i = maxIndex + 1; i < arr.Count;\
    \ i++) {\n            if (arr[i] > leftMax) {\n                leftMax = arr[i];\n\
    \            }\n            if (arr[i] > rightMax) {\n                rightMax\
    \ = arr[i];\n            }\n        }\n        left.Add(leftMax);\n        right.Add(rightMax);\n\
    \        if (leftMax < rightMax) {\n            return Maximum(left, k);\n   \
    \     } else {\n            return Maximum(right, k);\n        }\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvkitzbv9.cs(45,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        foreach (long i in arr) {\n            if (i > maxValue) {\n        \
    \        maxValue = i;\n                maxIndex = i;\n            }\n       \
    \     if (i == maxValue) {\n                maxIndex++;\n            }\n     \
    \   }\n        long maxCount = 0;\n        long maxCountIndex = 0;\n        long\
    \ maxCountValue = arr[0];\n        foreach (long i in arr) {\n            if (i\
    \ == maxValue) {\n                maxCount++;\n            }\n            if (i\
    \ == maxCountValue) {\n                maxCountIndex++;\n            }\n     \
    \   }\n        if (maxCount > maxCountValue) {\n            maxCount = maxCountValue;\n\
    \            maxCountIndex = maxCountValue;\n        }\n        if (maxCount >\
    \ k) {\n            k = maxCount;\n        }\n        if (maxIndex > k) {\n  \
    \          k = maxIndex;\n        }\n        long maxCountValue2 = 0;\n      \
    \  long maxCountIndex2 = 0;\n        long maxCountValue3 = 0;\n        long maxCountIndex3\
    \ = 0;\n        long maxCountValue4 = 0;\n        long maxCountIndex4 = 0;\n \
    \       long maxCountValue5 = 0;\n        long maxCountIndex5 = 0;\n        long\
    \ maxCountValue6 = 0;\n        long maxCountIndex6 = 0;\n        long maxCountValue7\
    \ = 0;\n        long maxCountIndex7 = 0;\n        long maxCountValue8 = 0;\n \
    \       long maxCountIndex8 = 0;\n        long maxCountValue9 = 0;\n        long\
    \ maxCountIndex9 = 0;\n        long maxCountValue10 = 0;\n        long maxCountIndex10\
    \ = 0;\n        long maxCountValue11 = 0;\n        long maxCountIndex11 = 0;\n\
    \        long maxCountValue12 = 0;\n        long maxCountIndex12 = 0;\n      \
    \  long maxCountValue13 = 0;\n        long maxCountIndex13 = 0;\n        long\
    \ maxCountValue14 = 0;\n        long maxCountIndex14 = 0;\n        long maxCountValue15\
    \ = 0;\n        long maxCountIndex15 = 0;\n        long maxCountValue16 = 0;\n\
    \        long maxCountIndex16 = 0;\n        long maxCountValue17 = 0;\n      \
    \  long maxCountIndex17 = 0;\n        long maxCountValue18 = 0;\n        long\
    \ maxCountIndex18 = 0;\n        long maxCountValue19 = 0;\n        long maxCountIndex19\
    \ = 0;\n        long maxCountValue20 = 0;\n        long maxCountIndex20 = 0;\n\
    \        long maxCountValue21 = 0;\n        long maxCountIndex21 = 0;\n      \
    \  long maxCountValue22 = 0;\n        long maxCountIndex22 = 0;\n        long\
    \ maxCountValue23 = 0;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3muf1vcg.cs(102,13): error CS1001: Identifier expected

    /tmp/tmp3muf1vcg.cs(102,13): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = arr.Max();\n        List<long>\
    \ result = new List<long>();\n        long cur = max;\n        long curMax = max;\n\
    \        foreach (long i in arr) {\n            if (i > cur) {\n             \
    \   result.Add(cur);\n                cur = i;\n                curMax = max;\n\
    \            } else if (i < cur) {\n                cur = i;\n               \
    \ curMax = max;\n            }\n            if (curMax < k) {\n              \
    \  result.Add(cur);\n                curMax = max;\n            }\n        }\n\
    \        if (curMax < k) {\n            result.Add(cur);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b38496ea9bae490f90a1e7d435493719>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b38496ea9bae490f90a1e7d435493719>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        long sum = 0;\n        foreach (long i in arr) {\n       \
    \     sum += i;\n            if (sum > max) {\n                max = sum;\n  \
    \          }\n            if (sum < min) {\n                min = sum;\n     \
    \       }\n        }\n        long mid = min + (max - min) / 2;\n        long\
    \ mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n\
    \        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n     \
    \   long mid45 = mid44\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp94tjuml2.cs(83,27): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n          \
    \  k = arr.Count;\n        }\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        for (int i = 0; i < k; i++) {\n            if (arr[i] > maxValue) {\n\
    \                maxValue = arr[i];\n                maxIndex = i;\n         \
    \   }\n        }\n        result.Add(arr[maxIndex]);\n        for (int i = k;\
    \ i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n              \
    \  maxValue = arr[i];\n                maxIndex = i;\n            }\n        }\n\
    \        result.Add(arr[maxIndex]);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkqp0n0b6.cs(38,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpkqp0n0b6.cs(39,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpkqp0n0b6.cs(45,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpkqp0n0b6.cs(29,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n          \
    \  throw new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long min = int.MaxValue;\n\
    \        foreach (long i in arr) {\n            if (i > max) {\n             \
    \   max = i;\n            }\n            if (i < min) {\n                min =\
    \ i;\n            }\n        }\n        long mid = min + (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5a_ftob2.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long maxIndex = 0;\n        long current = 0;\n        long currentIndex =\
    \ 0;\n        long sum = 0;\n        long sumIndex = 0;\n        foreach (long\
    \ i in arr) {\n            sum += i;\n            if (sum > max) {\n         \
    \       max = sum;\n                maxIndex = currentIndex;\n            }\n\
    \            currentIndex++;\n            sumIndex++;\n        }\n        current\
    \ = sum;\n        currentIndex = sumIndex;\n        sum = 0;\n        sumIndex\
    \ = 0;\n        foreach (long i in arr) {\n            sum += i;\n           \
    \ if (sum > current) {\n                current = sum;\n                sumIndex\
    \ = currentIndex;\n            }\n            currentIndex++;\n            sumIndex++;\n\
    \        }\n        result.Add(arr[maxIndex]);\n        current = sum;\n     \
    \   currentIndex = sumIndex;\n        sum = 0;\n        sumIndex = 0;\n      \
    \  foreach (long i in arr) {\n            sum += i;\n            if (sum > current)\
    \ {\n                current = sum;\n                sumIndex = currentIndex;\n\
    \            }\n            currentIndex++;\n            sumIndex++;\n       \
    \ }\n        result.Add(arr[maxIndex]);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5m88n_38.cs(55,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp5m88n_38.cs(69,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n                cur\
    \ = i;\n            }\n            if (cur > k) {\n                break;\n  \
    \          }\n        }\n        result.Add(max);\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a4ccb2ba6c04774a272d58e4c9a7e43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a4ccb2ba6c04774a272d58e4c9a7e43>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        foreach (long i in arr) {\n            if (i > maxValue)\
    \ {\n                maxValue = i;\n                maxIndex = i;\n          \
    \      maxIndexValue = i;\n            }\n            if (i < minValue) {\n  \
    \              minValue = i;\n                minIndex = i;\n                minIndexValue\
    \ = i;\n            }\n        }\n        long mid = (maxIndex + minIndex) / 2;\n\
    \        long midValue = arr[mid];\n        long midIndexValue = arr[mid];\n \
    \       long midMaxValue = arr[mid];\n        long midMaxIndex = arr[mid];\n \
    \       long midMinValue = arr[mid];\n        long midMinIndex = arr[mid];\n \
    \       long midMaxIndexValue = arr[mid];\n        long midMinIndexValue = arr[mid];\n\
    \        long midMidValue = arr[mid];\n        long midMidIndexValue = arr[mid];\n\
    \        long midMidMaxValue = arr[mid];\n        long midMidMaxIndex = arr[mid];\n\
    \        long midMidMinValue = arr[mid];\n        long midMidMinIndex = arr[mid];\n\
    \        long midMidMaxIndexValue = arr[mid];\n        long midMidMinIndexValue\
    \ = arr[mid];\n        long midMidMidValue = arr[mid];\n        long midMidMidIndexValue\
    \ = arr[mid];\n        long midMidMidMaxValue = arr[mid];\n        long midMidMidMaxIndex\
    \ = arr[mid];\n        long midMidMidMinValue = arr[mid];\n        long midMidMidMinIndex\
    \ = arr[mid];\n        long midMidMidMaxIndexValue = arr[mid];\n        long midMidMidMinIndexValue\
    \ = arr[mid];\n        long midMidMidMidValue = arr[mid];\n        long midMidMidIndexValue\
    \ = arr[mid];\n        long midMidMidMaxValue = arr[mid];\n        long midMidMidMaxIndex\
    \ = arr[mid];\n        long midMidMidMinValue = arr[mid];\n        long midMidMidMinIndex\
    \ = arr[mid];\n        long midMidMidMaxIndexValue = arr[mid];\n        long midMidMidMinIndexValue\
    \ = arr[mid];\n        long midMidMidMidValue = arr[mid];\n        long midMidMidIndexValue\
    \ = arr[mid];\n        long midMidMidMaxValue = arr[mid];\n        long midMidMidMaxIndex\
    \ = arr[mid];\n        long midMidMidMin\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpg5zq5zjy.cs(83,26): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = 0;\n        long minValue =\
    \ 0;\n        long maxCount = 0;\n        long minCount = 0;\n        long maxCountIndex\
    \ = 0;\n        long minCountIndex = 0;\n        long maxCountValue = 0;\n   \
    \     long minCountValue = 0;\n        long maxCountCount = 0;\n        long minCountCount\
    \ = 0;\n        long maxCountValueIndex = 0;\n        long minCountValueIndex\
    \ = 0;\n        long maxCountCountValue = 0;\n        long minCountCountValue\
    \ = 0;\n        long maxCountCountCount = 0;\n        long minCountCountCount\
    \ = 0;\n        long maxCountValueIndexValue = 0;\n        long minCountValueIndexValue\
    \ = 0;\n        long maxCountCountValueValue = 0;\n        long minCountCountValueValue\
    \ = 0;\n        long maxCountCountCountValue = 0;\n        long minCountCountCountValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long minCountValueIndexValue\
    \ = 0;\n        long maxCountCountValueValue = 0;\n        long minCountCountValueValue\
    \ = 0;\n        long maxCountCountCountValue = 0;\n        long minCountCountCountValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long minCountValueIndexValue\
    \ = 0;\n        long maxCountCountValueValue = 0;\n        long minCountCountValueValue\
    \ = 0;\n        long maxCountCountCountValue = 0;\n        long minCountCountCountValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long minCountValueIndexValue\
    \ = 0;\n        long maxCountCountValueValue = 0;\n        long minCountCountValueValue\
    \ = 0;\n        long maxCountCountCountValue = 0;\n        long minCountCountCountValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long minCountValueIndexValue\
    \ = 0;\n        long maxCountCountValueValue = 0;\n        long minCountCountValueValue\
    \ = 0;\n        long maxCountCountCountValue = 0;\n        long minCountCountCountValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long minCountValueIndexValue\
    \ = 0;\n        long maxCountCountValueValue = 0;\n        long minCountCountValueValue\
    \ = 0;\n        long maxCountCountCountValue = 0;\n        long minCountCountCountValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long minCountValueIndexValue\
    \ = 0;\n        long maxCountCountValueValue = 0;\n        long minCountCountValueValue\
    \ = 0;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsgs00qcf.cs(53,14): error CS0128: A local variable or function named ''minCountValueIndexValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(54,14): error CS0128: A local variable or function named ''maxCountCountValueValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(55,14): error CS0128: A local variable or function named ''minCountCountValueValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(56,14): error CS0128: A local variable or function named ''maxCountCountCountValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(57,14): error CS0128: A local variable or function named ''minCountCountCountValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(58,14): error CS0128: A local variable or function named ''maxCountValueIndexValueValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(59,14): error CS0128: A local variable or function named ''minCountValueIndexValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(60,14): error CS0128: A local variable or function named ''maxCountCountValueValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(61,14): error CS0128: A local variable or function named ''minCountCountValueValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(62,14): error CS0128: A local variable or function named ''maxCountCountCountValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(63,14): error CS0128: A local variable or function named ''minCountCountCountValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(64,14): error CS0128: A local variable or function named ''maxCountValueIndexValueValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(65,14): error CS0128: A local variable or function named ''minCountValueIndexValue''
    is already defined in this scope

    /tmp/tmpsgs00qcf.cs(66,14): error CS0128: A local variable or function named ''maxCountCountValueValue''
    is already defined in this scope

    /tmp/tm'
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \      count++;\n        }\n        if (count > k) {\n            k = count;\n\
    \        }\n        long mid = sum / k;\n        long mid2 = sum % k;\n      \
    \  long mid3 = sum / k;\n        long mid4 = sum % k;\n        long mid5 = sum\
    \ / k;\n        long mid6 = sum % k;\n        long mid7 = sum / k;\n        long\
    \ mid8 = sum % k;\n        long mid9 = sum / k;\n        long mid10 = sum % k;\n\
    \        long mid11 = sum / k;\n        long mid12 = sum % k;\n        long mid13\
    \ = sum / k;\n        long mid14 = sum % k;\n        long mid15 = sum / k;\n \
    \       long mid16 = sum % k;\n        long mid17 = sum / k;\n        long mid18\
    \ = sum % k;\n        long mid19 = sum / k;\n        long mid20 = sum % k;\n \
    \       long mid21 = sum / k;\n        long mid22 = sum % k;\n        long mid23\
    \ = sum / k;\n        long mid24 = sum % k;\n        long mid25 = sum / k;\n \
    \       long mid26 = sum % k;\n        long mid27 = sum / k;\n        long mid28\
    \ = sum % k;\n        long mid29 = sum / k;\n        long mid30 = sum % k;\n \
    \       long mid31 = sum / k;\n        long mid32 = sum % k;\n        long mid33\
    \ = sum / k;\n        long mid34 = sum % k;\n        long mid35 = sum / k;\n \
    \       long mid36 = sum % k;\n        long mid37 = sum / k;\n        long mid38\
    \ = sum % k;\n        long mid39 = sum / k;\n        long mid40 = sum % k;\n \
    \       long mid41 = sum / k;\n        long mid42 = sum % k;\n        long mid43\
    \ = sum / k;\n        long mid44 = sum % k;\n        long mid45 = sum / k;\n \
    \       long mid46 = sum % k;\n        long mid47 = sum / k;\n        long mid48\
    \ = sum % k;\n        long mid49 = sum / k;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6ty8xwbv.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long maxValue = arr.Max();\n\
    \        long minValue = arr.Min();\n        long range = (maxValue - minValue)\
    \ + 1;\n        long range2 = range / 2;\n        long range3 = range / 3;\n \
    \       long range4 = range / 4;\n        long range5 = range / 5;\n        long\
    \ range6 = range / 6;\n        long range7 = range / 7;\n        long range8 =\
    \ range / 8;\n        long range9 = range / 9;\n        long range10 = range /\
    \ 10;\n        long range11 = range / 11;\n        long range12 = range / 12;\n\
    \        long range13 = range / 13;\n        long range14 = range / 14;\n    \
    \    long range15 = range / 15;\n        long range16 = range / 16;\n        long\
    \ range17 = range / 17;\n        long range18 = range / 18;\n        long range19\
    \ = range / 19;\n        long range20 = range / 20;\n        long range21 = range\
    \ / 21;\n        long range22 = range / 22;\n        long range23 = range / 23;\n\
    \        long range24 = range / 24;\n        long range25 = range / 25;\n    \
    \    long range26 = range / 26;\n        long range27 = range / 27;\n        long\
    \ range28 = range / 28;\n        long range29 = range / 29;\n        long range30\
    \ = range / 30;\n        long range31 = range / 31;\n        long range32 = range\
    \ / 32;\n        long range33 = range / 33;\n        long range34 = range / 34;\n\
    \        long range35 = range / 35;\n        long range36 = range / 36;\n    \
    \    long range37 = range / 37;\n        long range38 = range / 38;\n        long\
    \ range39 = range / 39;\n        long range40 = range / 40;\n        long range41\
    \ = range / 41;\n        long range42 = range / 42;\n        long range43 = range\
    \ / 43;\n        long range44 = range / 44;\n        long range45 = range / 45;\n\
    \        long range46 = range / 46;\n        long range47 = range / 47;\n    \
    \    long range48 = range / 48;\n        long range49 = range / 49;\n        long\
    \ range50 = range / 50;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpehsmb4cq.cs(79,13): error CS1001: Identifier expected

    /tmp/tmpehsmb4cq.cs(79,13): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        long maxValueIndex = -1;\n        long maxValueIndex = -1;\n        foreach\
    \ (long i in arr) {\n            if (i > maxValue) {\n                maxValue\
    \ = i;\n                maxValueIndex = i;\n            }\n            if (i ==\
    \ maxValue) {\n                maxIndex++;\n            }\n        }\n       \
    \ max = maxValue;\n        maxIndex = maxIndex;\n        long temp = 0;\n    \
    \    long tempIndex = 0;\n        long tempValue = 0;\n        long tempValueIndex\
    \ = -1;\n        long tempValueIndex = -1;\n        foreach (long i in arr) {\n\
    \            if (i == maxValue) {\n                tempIndex++;\n            \
    \    tempValue = i;\n                tempValueIndex = i;\n            }\n    \
    \        if (tempValue > maxValue) {\n                maxValue = tempValue;\n\
    \                maxValueIndex = tempValueIndex;\n            }\n            if\
    \ (tempValue == maxValue) {\n                tempIndex++;\n                tempValue\
    \ = i;\n                tempValueIndex = i;\n            }\n        }\n      \
    \  max = maxValue;\n        maxIndex = maxIndex;\n        long temp2 = 0;\n  \
    \      long temp2Index = 0;\n        long temp2Value = 0;\n        long temp2ValueIndex\
    \ = -1;\n        long temp2ValueIndex = -1;\n        foreach (long i in arr) {\n\
    \            if (i == maxValue) {\n                temp2Index++;\n           \
    \     temp2Value = i;\n                temp2ValueIndex = i;\n            }\n \
    \           if (temp2Value > maxValue) {\n                maxValue = temp2Value;\n\
    \                maxValueIndex = temp2ValueIndex;\n            }\n           \
    \ if (temp2Value == maxValue) {\n                temp2Index++;\n             \
    \   temp2Value = i;\n                temp2ValueIndex = i;\n            }\n   \
    \     }\n        max = maxValue;\n        maxIndex = maxIndex;\n        long temp3\
    \ = 0;\n        long temp3Index = 0;\n        long temp3Value = 0;\n        long\
    \ temp3ValueIndex = -1;\n        long temp3ValueIndex = -1;\n        foreach (long\
    \ i in arr) {\n            if (i == maxValue) {\n                temp3Index++;\n\
    \                temp3Value = i;\n                temp3ValueIndex = i;\n     \
    \       }\n            if (temp3Value > maxValue) {\n                maxValue\
    \ = temp3Value;\n                maxValueIndex = temp3ValueIndex;\n          \
    \  }\n            if (temp3Value == maxValue) {\n                temp3Index++;\n\
    \                temp3Value = i;\n                temp3ValueIndex = i;\n     \
    \       }\n        }\n        max = maxValue;\n        maxIndex = maxIndex;\n\
    \        long temp4 = 0;\n        long temp4Index = 0;\n        long temp4Value\
    \ = 0;\n        long temp4ValueIndex = -1;\n        long temp\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9pl4886p.cs(115,18): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ res = new List<long>();\n        foreach (long i in arr) {\n            if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        long cur\
    \ = 0;\n        long max2 = 0;\n        foreach (long i in arr) {\n          \
    \  if (i == max) {\n                res.Add(max);\n                cur = max;\n\
    \            }\n            else if (i > max) {\n                res.Add(max);\n\
    \                cur = max;\n            }\n            else if (i == max2) {\n\
    \                res.Add(max2);\n                cur = max2;\n            }\n\
    \            else if (i > max2) {\n                res.Add(max2);\n          \
    \      cur = max2;\n            }\n            else {\n                res.Add(i);\n\
    \            }\n        }\n        if (res.Count > k) {\n            return res.Take(k).ToList();\n\
    \        }\n        return res;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_230icb4.cs(56,29): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ res = new List<long>();\n        foreach (long i in arr) {\n            if (max\
    \ < i) {\n                max = i;\n            }\n        }\n        long mid\
    \ = max / k;\n        long left = max % k;\n        long right = 0;\n        long\
    \ mid2 = 1;\n        long mid3 = 1;\n        long mid4 = 0;\n        long mid5\
    \ = 0;\n        long mid6 = 0;\n        long mid7 = 0;\n        long mid8 = 0;\n\
    \        long mid9 = 0;\n        long mid10 = 0;\n        long mid11 = 0;\n  \
    \      long mid12 = 0;\n        long mid13 = 0;\n        long mid14 = 0;\n   \
    \     long mid15 = 0;\n        long mid16 = 0;\n        long mid17 = 0;\n    \
    \    long mid18 = 0;\n        long mid19 = 0;\n        long mid20 = 0;\n     \
    \   long mid21 = 0;\n        long mid22 = 0;\n        long mid23 = 0;\n      \
    \  long mid24 = 0;\n        long mid25 = 0;\n        long mid26 = 0;\n       \
    \ long mid27 = 0;\n        long mid28 = 0;\n        long mid29 = 0;\n        long\
    \ mid30 = 0;\n        long mid31 = 0;\n        long mid32 = 0;\n        long mid33\
    \ = 0;\n        long mid34 = 0;\n        long mid35 = 0;\n        long mid36 =\
    \ 0;\n        long mid37 = 0;\n        long mid38 = 0;\n        long mid39 = 0;\n\
    \        long mid40 = 0;\n        long mid41 = 0;\n        long mid42 = 0;\n \
    \       long mid43 = 0;\n        long mid44 = 0;\n        long mid45 = 0;\n  \
    \      long mid46 = 0;\n        long mid47 = 0;\n        long mid48 = 0;\n   \
    \     long mid49 = 0;\n        long mid50 = 0;\n        long mid51 = 0;\n    \
    \    long mid52 = 0;\n        long mid53 = 0;\n        long mid54 = 0;\n     \
    \   long mid55 = 0;\n        long mid56 = 0;\n        long mid57 = 0;\n      \
    \  long mid58 = 0;\n        long mid59 = 0;\n        long mid60 = 0;\n       \
    \ long mid61 = 0;\n        long mid62 = 0;\n        long mid63 = 0;\n        long\
    \ mid64 = 0;\n        long mid65 = 0;\n        long mid66 = 0;\n        long mid67\
    \ = 0;\n        long mid68 = 0;\n        long mid69 = 0;\n        long mid70 =\
    \ 0;\n        long mid71 = 0;\n        long mid72 = 0;\n        long mid73 = 0;\n\
    \        long mid74 = 0;\n        long mid75 = 0;\n        long mid76 = 0;\n \
    \       long mid77 = 0;\n        long mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc8l98qzq.cs(111,17): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long min = 0;\n        long minIndex = 0;\n        long minValue = 0;\n\
    \        long sum = 0;\n        long sumIndex = 0;\n        long sumValue = 0;\n\
    \        long count = 0;\n        long countIndex = 0;\n        long countValue\
    \ = 0;\n        long sumCount = 0;\n        long sumCountIndex = 0;\n        long\
    \ sumCountValue = 0;\n        long maxCount = 0;\n        long maxCountIndex =\
    \ 0;\n        long maxCountValue = 0;\n        long minCount = 0;\n        long\
    \ minCountIndex = 0;\n        long minCountValue = 0;\n        long maxSum = 0;\n\
    \        long maxSumIndex = 0;\n        long maxSumValue = 0;\n        long minSum\
    \ = 0;\n        long minSumIndex = 0;\n        long minSumValue = 0;\n       \
    \ long maxSumCount = 0;\n        long maxSumCountIndex = 0;\n        long maxSumCountValue\
    \ = 0;\n        long minSumCount = 0;\n        long minSumCountIndex = 0;\n  \
    \      long minSumCountValue = 0;\n        long maxCountSum = 0;\n        long\
    \ maxCountSumIndex = 0;\n        long maxCountSumValue = 0;\n        long minCountSum\
    \ = 0;\n        long minCountSumIndex = 0;\n        long minCountSumValue = 0;\n\
    \        long maxSumSum = 0;\n        long maxSumSumIndex = 0;\n        long maxSumSumValue\
    \ = 0;\n        long minSumSum = 0;\n        long minSumSumIndex = 0;\n      \
    \  long minSumSumValue = 0;\n        long maxCountSumCount = 0;\n        long\
    \ maxCountSumCountIndex = 0;\n        long maxCountSumCountValue = 0;\n      \
    \  long minCountSumCount = 0;\n        long minCountSumCountIndex = 0;\n     \
    \   long minCountSumCountValue = 0;\n        long maxSumSumCount = 0;\n      \
    \  long maxSumSumCountIndex = 0;\n        long maxSumSumCountValue = 0;\n    \
    \    long minSumSumCount = 0;\n        long minSumSumCountIndex = 0;\n       \
    \ long minSumSumCountValue = 0;\n        long maxCountSumSum = 0;\n        long\
    \ maxCountSumSumIndex = 0;\n        long maxCountSumSumValue = 0;\n        long\
    \ minCountSumSum = 0;\n        long minCountSumSumIndex = 0;\n        long minCountSumSumValue\
    \ = 0;\n        long maxSumSumSum = 0;\n        long maxSumSumSumIndex = 0;\n\
    \        long maxSumSumSumValue = 0;\n        long minSumSumSum = 0;\n       \
    \ long minSumSumSumIndex\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc2ddi982.cs(93,31): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \         if (cur < i) {\n                cur = i;\n            }\n        }\n\
    \        long temp = max;\n        max = cur;\n        cur = temp;\n        long\
    \ temp2 = max;\n        max = cur;\n        cur = temp2;\n        long temp3 =\
    \ max;\n        max = cur;\n        cur = temp3;\n        long temp4 = max;\n\
    \        max = cur;\n        cur = temp4;\n        long temp5 = max;\n       \
    \ max = cur;\n        cur = temp5;\n        long temp6 = max;\n        max = cur;\n\
    \        cur = temp6;\n        long temp7 = max;\n        max = cur;\n       \
    \ cur = temp7;\n        long temp8 = max;\n        max = cur;\n        cur = temp8;\n\
    \        long temp9 = max;\n        max = cur;\n        cur = temp9;\n       \
    \ long temp10 = max;\n        max = cur;\n        cur = temp10;\n        long\
    \ temp11 = max;\n        max = cur;\n        cur = temp11;\n        long temp12\
    \ = max;\n        max = cur;\n        cur = temp12;\n        long temp13 = max;\n\
    \        max = cur;\n        cur = temp13;\n        long temp14 = max;\n     \
    \   max = cur;\n        cur = temp14;\n        long temp15 = max;\n        max\
    \ = cur;\n        cur = temp15;\n        long temp16 = max;\n        max = cur;\n\
    \        cur = temp16;\n        long temp17 = max;\n        max = cur;\n     \
    \   cur = temp17;\n        long temp18 = max;\n        max = cur;\n        cur\
    \ = temp18;\n        long temp19 = max;\n        max = cur;\n        cur = temp19;\n\
    \        long temp20 = max;\n        max = cur;\n        cur = temp20;\n     \
    \   long temp21 = max;\n        max = cur;\n        cur = temp21;\n        long\
    \ temp22 = max;\n        max = cur;\n        cur = temp22;\n        long temp23\
    \ = max;\n        max = cur;\n        cur = temp23;\n        long temp24 = max;\n\
    \        max = cur;\n        cur = temp24;\n        long temp25 = max;\n     \
    \   max = cur;\n        cur = temp25;\n        long temp26 = max;\n        max\
    \ = cur;\n        cur = \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkas37ajq.cs(113,14): error CS1525: Invalid expression term ''}''

    /tmp/tmpkas37ajq.cs(113,14): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long min = 0;\n        long sum = 0;\n        long count = 0;\n        foreach\
    \ (long i in arr) {\n            sum += i;\n            if (sum > max) {\n   \
    \             max = sum;\n            }\n            if (sum < min) {\n      \
    \          min = sum;\n            }\n            count++;\n        }\n      \
    \  long mid = sum / count;\n        long mid2 = sum / count;\n        long mid3\
    \ = sum / count;\n        long mid4 = sum / count;\n        long mid5 = sum /\
    \ count;\n        long mid6 = sum / count;\n        long mid7 = sum / count;\n\
    \        long mid8 = sum / count;\n        long mid9 = sum / count;\n        long\
    \ mid10 = sum / count;\n        long mid11 = sum / count;\n        long mid12\
    \ = sum / count;\n        long mid13 = sum / count;\n        long mid14 = sum\
    \ / count;\n        long mid15 = sum / count;\n        long mid16 = sum / count;\n\
    \        long mid17 = sum / count;\n        long mid18 = sum / count;\n      \
    \  long mid19 = sum / count;\n        long mid20 = sum / count;\n        long\
    \ mid21 = sum / count;\n        long mid22 = sum / count;\n        long mid23\
    \ = sum / count;\n        long mid24 = sum / count;\n        long mid25 = sum\
    \ / count;\n        long mid26 = sum / count;\n        long mid27 = sum / count;\n\
    \        long mid28 = sum / count;\n        long mid29 = sum / count;\n      \
    \  long mid30 = sum / count;\n        long mid31 = sum / count;\n        long\
    \ mid32 = sum / count;\n        long mid33 = sum / count;\n        long mid34\
    \ = sum / count;\n        long mid35 = sum / count;\n        long mid36 = sum\
    \ / count;\n        long mid37 = sum / count;\n        long mid38 = sum / count;\n\
    \        long mid39 = sum / count;\n        long mid40 = sum / count;\n      \
    \  long mid41 = sum / count;\n        long mid42 = sum / count;\n        long\
    \ mid43 = sum / count;\n        long mid44 = sum / count;\n        long mid45\
    \ = sum / count;\n        long mid46 = sum / count;\n        long mid47 = sum\
    \ / count;\n        long mid48 = sum / count;\n        long mid49 = sum / count;\n\
    \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppw438x0g.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793570
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        foreach (long i in arr) {\n            if (i > maxValue) {\n        \
    \        maxValue = i;\n                maxIndex = i;\n            }\n       \
    \     if (i == maxValue) {\n                maxIndex++;\n            }\n     \
    \   }\n        long temp = 0;\n        long tempIndex = 0;\n        long tempValue\
    \ = arr[0];\n        foreach (long i in arr) {\n            if (i > maxValue)\
    \ {\n                temp = maxValue;\n                tempValue = maxIndex;\n\
    \                tempIndex = maxIndex;\n                maxValue = i;\n      \
    \          maxIndex = i;\n            }\n            if (i == tempValue) {\n \
    \               tempIndex++;\n            }\n        }\n        long tempMax =\
    \ 0;\n        long tempMaxIndex = 0;\n        long tempMaxValue = arr[0];\n  \
    \      foreach (long i in arr) {\n            if (i > tempMaxValue) {\n      \
    \          tempMax = tempMaxValue;\n                tempMaxValue = tempMaxIndex;\n\
    \                tempMaxIndex = tempMaxIndex;\n            }\n            if (i\
    \ == tempMaxValue) {\n                tempMaxIndex++;\n            }\n       \
    \ }\n        if (tempMaxIndex == k) {\n            result.Add(tempMaxValue);\n\
    \        }\n        if (tempMaxIndex < k) {\n            while (tempMaxIndex <\
    \ k) {\n                result.Add(tempMaxValue);\n                tempMaxIndex++;\n\
    \                tempMaxValue = arr[0];\n                foreach (long i in arr)\
    \ {\n                    if (i > tempMaxValue) {\n                        tempMaxValue\
    \ = i;\n                        tempMaxIndex = i;\n                    }\n   \
    \                 if (i == tempMaxValue) {\n                        tempMaxIndex++;\n\
    \                    }\n                }\n            }\n        }\n        if\
    \ (tempMaxIndex > k) {\n            while (tempMaxIndex > k) {\n             \
    \   result.Add(tempMaxValue);\n                tempMaxIndex--;\n             \
    \   tempMaxValue = arr[0];\n                foreach (long i in arr) {\n      \
    \              if (i > tempMaxValue) {\n                        tempMaxValue =\
    \ i;\n                        tempMaxIndex = i;\n                    }\n     \
    \               if (i == tempMaxValue) {\n                        tempMaxIndex--;\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659793575
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        foreach (long i in arr) {\n            if (max < i) {\n             \
    \   max = i;\n                maxIndex = i;\n                maxValue = i;\n \
    \           }\n            if (maxIndex == k) {\n                result.Add(maxValue);\n\
    \                maxIndex = 0;\n                maxValue = 0;\n            }\n\
    \            if (maxIndex < k) {\n                maxIndex++;\n              \
    \  maxValue = i;\n            }\n        }\n        return result;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c788fca877bf4d91a9e6d79c3d02d431>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c788fca877bf4d91a9e6d79c3d02d431>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n  \
    \      long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n   \
    \     long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n    \
    \    long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n  \
    \      long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n\
    \        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n\
    \        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n\
    \        long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n\
    \        long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n\
    \        long temp76 = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n\
    \        long temp79 = 0;\n        long temp80 = 0;\n        long temp81 = 0;\n\
    \        long temp82\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6jty_bv_.cs(110,20): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ res = new List<long>();\n        foreach (long i in arr) {\n            if (max\
    \ < i) {\n                max = i;\n            }\n        }\n        if (k >\
    \ max) {\n            k = max;\n        }\n        long maxIndex = 0;\n      \
    \  long maxValue = k;\n        foreach (long i in arr) {\n            if (i <\
    \ maxValue) {\n                maxValue = i;\n                maxIndex = i;\n\
    \            }\n        }\n        while (maxIndex < arr.Count - 1) {\n      \
    \      long temp = arr[maxIndex];\n            arr[maxIndex] = arr[maxIndex +\
    \ 1];\n            arr[maxIndex + 1] = temp;\n            maxIndex++;\n      \
    \  }\n        while (maxIndex >= 0) {\n            res.Add(arr[maxIndex]);\n \
    \           maxIndex--;\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm42qh6he.cs(44,29): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm42qh6he.cs(45,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm42qh6he.cs(45,33): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm42qh6he.cs(46,17): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpm42qh6he.cs(50,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n            } else if (sum < k) {\n        \
    \        max = sum;\n                min = i;\n                count = 1;\n  \
    \          } else {\n                count++;\n            }\n        }\n    \
    \    if (count > k) {\n            max = sum;\n            min = arr.Max();\n\
    \            count = 1;\n        }\n        long cur = min;\n        long next\
    \ = 0;\n        while (count < k) {\n            next = cur;\n            cur\
    \ = cur + next;\n            result.Add(cur);\n            count++;\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4897b4331ce8408fad848227547bae70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4897b4331ce8408fad848227547bae70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ res = new List<long>();\n        foreach (long i in arr) {\n            if (i\
    \ > max) {\n                max = i;\n            }\n        }\n        long temp\
    \ = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4 =\
    \ 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 = 0;\n\
    \        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 = 0;\n\
    \        long temp11 = 0;\n        long temp12 = 0;\n        long temp13 = 0;\n\
    \        long temp14 = 0;\n        long temp15 = 0;\n        long temp16 = 0;\n\
    \        long temp17 = 0;\n        long temp18 = 0;\n        long temp19 = 0;\n\
    \        long temp20 = 0;\n        long temp21 = 0;\n        long temp22 = 0;\n\
    \        long temp23 = 0;\n        long temp24 = 0;\n        long temp25 = 0;\n\
    \        long temp26 = 0;\n        long temp27 = 0;\n        long temp28 = 0;\n\
    \        long temp29 = 0;\n        long temp30 = 0;\n        long temp31 = 0;\n\
    \        long temp32 = 0;\n        long temp33 = 0;\n        long temp34 = 0;\n\
    \        long temp35 = 0;\n        long temp36 = 0;\n        long temp37 = 0;\n\
    \        long temp38 = 0;\n        long temp39 = 0;\n        long temp40 = 0;\n\
    \        long temp41 = 0;\n        long temp42 = 0;\n        long temp43 = 0;\n\
    \        long temp44 = 0;\n        long temp45 = 0;\n        long temp46 = 0;\n\
    \        long temp47 = 0;\n        long temp48 = 0;\n        long temp49 = 0;\n\
    \        long temp50 = 0;\n        long temp51 = 0;\n        long temp52 = 0;\n\
    \        long temp53 = 0;\n        long temp54 = 0;\n        long temp55 = 0;\n\
    \        long temp56 = 0;\n        long temp57 = 0;\n        long temp58 = 0;\n\
    \        long temp59 = 0;\n        long temp60 = 0;\n        long temp61 = 0;\n\
    \        long temp62 = 0;\n        long temp63 = 0;\n        long temp64 = 0;\n\
    \        long temp65 = 0;\n        long temp66 = 0;\n        long temp67 = 0;\n\
    \        long temp68 = 0;\n        long temp69 = 0;\n        long temp70 = 0;\n\
    \        long temp71 = 0;\n        long temp72 = 0;\n        long temp73 = 0;\n\
    \        long temp74 = 0;\n        long temp75 = 0;\n        long temp76 = 0;\n\
    \        long temp77 = 0;\n        long temp78 = 0;\n        long temp79 = 0;\n\
    \        long temp80 = 0;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm9c6zwfp.cs(112,13): error CS1001: Identifier expected

    /tmp/tmpm9c6zwfp.cs(112,13): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        if (k > arr.Count) {\n            k = arr.Count;\n\
    \        }\n        if (k == 1) {\n            result.Add(arr[0]);\n         \
    \   return result;\n        }\n        long max = 0;\n        long maxIndex =\
    \ 0;\n        for (int i = 0; i < k; i++) {\n            if (arr[i] > max) {\n\
    \                max = arr[i];\n                maxIndex = i;\n            }\n\
    \        }\n        result.Add(arr[maxIndex]);\n        for (int i = maxIndex\
    \ + 1; i < arr.Count; i++) {\n            if (arr[i] > max) {\n              \
    \  max = arr[i];\n                maxIndex = i;\n            }\n        }\n  \
    \      result.Add(arr[maxIndex]);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp846iu9d7.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp846iu9d7.cs(42,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp846iu9d7.cs(43,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp846iu9d7.cs(49,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = arr[0];\n        long maxCount = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == max) {\n                maxCount++;\n    \
    \        } else {\n                if (maxCount > k) {\n                    result.Add(max);\n\
    \                    maxCount = 1;\n                }\n                max = i;\n\
    \                maxCount = 1;\n            }\n        }\n        result.Add(max);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f6e63652719438f912f53eed593c5e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f6e63652719438f912f53eed593c5e3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        long max2 = 0;\n      \
    \  long cur2 = 0;\n        foreach (long i in arr) {\n            cur = i;\n \
    \           max = i;\n            foreach (long j in arr) {\n                cur2\
    \ = j;\n                max2 = j;\n                if (cur > cur2) {\n       \
    \             max = cur;\n                }\n                if (max > max2) {\n\
    \                    max2 = max;\n                }\n            }\n         \
    \   result.Add(max2);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <343c87cafc094899811ab632bdfcffb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <343c87cafc094899811ab632bdfcffb9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxCount = 0;\n        long minCount =\
    \ 0;\n        long maxCountIndex = 0;\n        long minCountIndex = 0;\n     \
    \   long maxCountCount = 0;\n        long minCountCount = 0;\n        long maxCountIndex2\
    \ = 0;\n        long minCountIndex2 = 0;\n        long maxCountCount2 = 0;\n \
    \       long minCountCount2 = 0;\n        long maxCountIndex3 = 0;\n        long\
    \ minCountIndex3 = 0;\n        long maxCountCount3 = 0;\n        long minCountCount3\
    \ = 0;\n        long maxCountIndex4 = 0;\n        long minCountIndex4 = 0;\n \
    \       long maxCountCount4 = 0;\n        long minCountCount4 = 0;\n        long\
    \ maxCountIndex5 = 0;\n        long minCountIndex5 = 0;\n        long maxCountCount5\
    \ = 0;\n        long minCountCount5 = 0;\n        long maxCountIndex6 = 0;\n \
    \       long minCountIndex6 = 0;\n        long maxCountCount6 = 0;\n        long\
    \ minCountCount6 = 0;\n        long maxCountIndex7 = 0;\n        long minCountIndex7\
    \ = 0;\n        long maxCountCount7 = 0;\n        long minCountCount7 = 0;\n \
    \       long maxCountIndex8 = 0;\n        long minCountIndex8 = 0;\n        long\
    \ maxCountCount8 = 0;\n        long minCountCount8 = 0;\n        long maxCountIndex9\
    \ = 0;\n        long minCountIndex9 = 0;\n        long maxCountCount9 = 0;\n \
    \       long minCountCount9 = 0;\n        long maxCountIndex10 = 0;\n        long\
    \ minCountIndex10 = 0;\n        long maxCountCount10 = 0;\n        long minCountCount10\
    \ = 0;\n        long maxCountIndex11 = 0;\n        long minCountIndex11 = 0;\n\
    \        long maxCountCount11 = 0;\n        long minCountCount11 = 0;\n      \
    \  long maxCountIndex12 = 0;\n        long minCountIndex12 = 0;\n        long\
    \ maxCountCount12 = 0;\n        long minCountCount12 = 0;\n        long maxCountIndex13\
    \ = 0;\n        long minCountIndex13 = 0;\n        long maxCountCount13 = 0;\n\
    \        long minCountCount13 = 0;\n        long maxCountIndex14 = 0;\n      \
    \  long minCountIndex14 = 0;\n        long maxCountCount14 = 0;\n        long\
    \ minCountCount14 = 0;\n        long maxCountIndex15 = 0;\n        long minCountIndex15\
    \ = 0;\n        long maxCountCount15 = 0;\n        long minCountCount15 = 0;\n\
    \        long maxCountIndex16 = 0;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp469lfba6.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp469lfba6.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp469lfba6.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp469lfba6.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp469lfba6.cs(30,14): warning CS0219: The variable ''maxCount'' is assigned
    but its value is never used

    /tmp/tmp469lfba6.cs(31,14): warning CS0219: The variable ''minCount'' is assigned
    but its value is never used

    /tmp/tmp469lfba6.cs(32,14): warning CS0219: The variable ''maxCountIndex'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(33,14): warning CS0219: The variable ''minCountIndex'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(34,14): warning CS0219: The variable ''maxCountCount'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(35,14): warning CS0219: The variable ''minCountCount'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(36,14): warning CS0219: The variable ''maxCountIndex2'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(37,14): warning CS0219: The variable ''minCountIndex2'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(38,14): warning CS0219: The variable ''maxCountCount2'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(39,14): warning CS0219: The variable ''minCountCount2'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(40,14): warning CS0219: The variable ''maxCountIndex3'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(41,14): warning CS0219: The variable ''minCountIndex3'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(42,14): warning CS0219: The variable ''maxCountCount3'' is
    assigned but its value is never used

    /tmp/tmp469lfba6.cs(43,14): warni'
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = arr[0];\n \
    \       long maxIndex = 0;\n        long currentMax = max;\n        for (int i\
    \ = 0; i < arr.Count; i++) {\n            if (arr[i] > max) {\n              \
    \  max = arr[i];\n                maxIndex = i;\n            }\n        }\n  \
    \      result.Add(max);\n        while (maxIndex < arr.Count - 1) {\n        \
    \    currentMax = max;\n            for (int i = maxIndex + 1; i < arr.Count;\
    \ i++) {\n                if (arr[i] > currentMax) {\n                    currentMax\
    \ = arr[i];\n                }\n            }\n            result.Add(currentMax);\n\
    \            maxIndex++;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpez9fj0a6.cs(39,26): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        if\
    \ (max <= k) {\n            result.Add(max);\n            return result;\n   \
    \     }\n        long max2 = 0;\n        List<long> result2 = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (max2 < i) {\n            \
    \    max2 = i;\n            }\n        }\n        if (max2 <= k) {\n         \
    \   result2.Add(max2);\n            return result2;\n        }\n        long max3\
    \ = 0;\n        List<long> result3 = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (max3 < i) {\n                max3 = i;\n      \
    \      }\n        }\n        if (max3 <= k) {\n            result3.Add(max3);\n\
    \            return result3;\n        }\n        long max4 = 0;\n        List<long>\
    \ result4 = new List<long>();\n        foreach (long i in arr) {\n           \
    \ if (max4 < i) {\n                max4 = i;\n            }\n        }\n     \
    \   if (max4 <= k) {\n            result4.Add(max4);\n            return result4;\n\
    \        }\n        long max5 = 0;\n        List<long> result5 = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (max5 < i) {\n            \
    \    max5 = i;\n            }\n        }\n        if (max5 <= k) {\n         \
    \   result5.Add(max5);\n            return result5;\n        }\n        long max6\
    \ = 0;\n        List<long> result6 = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (max6 < i) {\n                max6 = i;\n      \
    \      }\n        }\n        if (max6 <= k) {\n            result6.Add(max6);\n\
    \            return result6;\n        }\n        long max7 = 0;\n        List<long>\
    \ result7 = new List<long>();\n        foreach (long i in arr) {\n           \
    \ if (max7 < i) {\n                max7 = i;\n            }\n        }\n     \
    \   if (max7 <= k) {\n            result7.Add(max7);\n            return result7;\n\
    \        }\n        long max8 = 0;\n        List<long> result8 = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (max8 < i) {\n            \
    \    max8 = i;\n            }\n        }\n        if (max8 <= k) {\n         \
    \   result8.Add(max8);\n            return result8;\n        }\n        long max9\
    \ = 0;\n        List<long> result9 = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (max9 < i) {\n                max9 = i;\n      \
    \      }\n        }\n        if (max9 <= k) {\n            result9.Add(max9);\n\
    \            return result9;\n        }\n        long max\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpibhhncd1.cs(124,17): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxCount = 0;\n        long minCount =\
    \ 0;\n        long maxCountIndex = 0;\n        long minCountIndex = 0;\n     \
    \   long maxCountIndex2 = 0;\n        long minCountIndex2 = 0;\n        long maxCountIndex3\
    \ = 0;\n        long minCountIndex3 = 0;\n        long maxCountIndex4 = 0;\n \
    \       long minCountIndex4 = 0;\n        long maxCountIndex5 = 0;\n        long\
    \ minCountIndex5 = 0;\n        long maxCountIndex6 = 0;\n        long minCountIndex6\
    \ = 0;\n        long maxCountIndex7 = 0;\n        long minCountIndex7 = 0;\n \
    \       long maxCountIndex8 = 0;\n        long minCountIndex8 = 0;\n        long\
    \ maxCountIndex9 = 0;\n        long minCountIndex9 = 0;\n        long maxCountIndex10\
    \ = 0;\n        long minCountIndex10 = 0;\n        long maxCountIndex11 = 0;\n\
    \        long minCountIndex11 = 0;\n        long maxCountIndex12 = 0;\n      \
    \  long minCountIndex12 = 0;\n        long maxCountIndex13 = 0;\n        long\
    \ minCountIndex13 = 0;\n        long maxCountIndex14 = 0;\n        long minCountIndex14\
    \ = 0;\n        long maxCountIndex15 = 0;\n        long minCountIndex15 = 0;\n\
    \        long maxCountIndex16 = 0;\n        long minCountIndex16 = 0;\n      \
    \  long maxCountIndex17 = 0;\n        long minCountIndex17 = 0;\n        long\
    \ maxCountIndex18 = 0;\n        long minCountIndex18 = 0;\n        long maxCountIndex19\
    \ = 0;\n        long minCountIndex19 = 0;\n        long maxCountIndex20 = 0;\n\
    \        long minCountIndex20 = 0;\n        long maxCountIndex21 = 0;\n      \
    \  long minCountIndex21 = 0;\n        long maxCountIndex22 = 0;\n        long\
    \ minCountIndex22 = 0;\n        long maxCountIndex23 = 0;\n        long minCountIndex23\
    \ = 0;\n        long maxCountIndex24 = 0;\n        long minCountIndex24 = 0;\n\
    \        long maxCountIndex25 = 0;\n        long minCountIndex25 = 0;\n      \
    \  long maxCountIndex26 = 0;\n        long minCountIndex26 = 0;\n        long\
    \ maxCountIndex27 = 0;\n        long minCountIndex27 = 0;\n        long maxCountIndex28\
    \ = 0;\n        long minCountIndex28 = 0;\n        long maxCountIndex29 = 0;\n\
    \        long minCountIndex29 = 0;\n        long maxCountIndex30 = 0;\n      \
    \  long minCountIndex30\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr1d_c6tp.cs(91,29): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        if\
    \ (k > max) {\n            k = max;\n        }\n        long cur = max;\n    \
    \    long next = 1;\n        long max2 = max;\n        while (next <= k) {\n \
    \           if (cur == max2) {\n                result.Add(max2);\n          \
    \      max2 = next;\n            }\n            next = next * 2;\n           \
    \ cur = cur * 2;\n        }\n        result.Add(max2);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7faf8a6aa2464c9c74362f2d399907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd7faf8a6aa2464c9c74362f2d399907>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        long temp2 = 0;\n    \
    \    long temp3 = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n     \
    \   long temp6 = 0;\n        long temp7 = 0;\n        long temp8 = 0;\n      \
    \  long temp9 = 0;\n        long temp10 = 0;\n        long temp11 = 0;\n     \
    \   long temp12 = 0;\n        long temp13 = 0;\n        long temp14 = 0;\n   \
    \     long temp15 = 0;\n        long temp16 = 0;\n        long temp17 = 0;\n \
    \       long temp18 = 0;\n        long temp19 = 0;\n        long temp20 = 0;\n\
    \        long temp21 = 0;\n        long temp22 = 0;\n        long temp23 = 0;\n\
    \        long temp24 = 0;\n        long temp25 = 0;\n        long temp26 = 0;\n\
    \        long temp27 = 0;\n        long temp28 = 0;\n        long temp29 = 0;\n\
    \        long temp30 = 0;\n        long temp31 = 0;\n        long temp32 = 0;\n\
    \        long temp33 = 0;\n        long temp34 = 0;\n        long temp35 = 0;\n\
    \        long temp36 = 0;\n        long temp37 = 0;\n        long temp38 = 0;\n\
    \        long temp39 = 0;\n        long temp40 = 0;\n        long temp41 = 0;\n\
    \        long temp42 = 0;\n        long temp43 = 0;\n        long temp44 = 0;\n\
    \        long temp45 = 0;\n        long temp46 = 0;\n        long temp47 = 0;\n\
    \        long temp48 = 0;\n        long temp49 = 0;\n        long temp50 = 0;\n\
    \        long temp51 = 0;\n        long temp52 = 0;\n        long temp53 = 0;\n\
    \        long temp54 = 0;\n        long temp55 = 0;\n        long temp56 = 0;\n\
    \        long temp57 = 0;\n        long temp58 = 0;\n        long temp59 = 0;\n\
    \        long temp60 = 0;\n        long temp61 = 0;\n        long temp62 = 0;\n\
    \        long temp63 = 0;\n        long temp64 = 0;\n        long temp65 = 0;\n\
    \        long temp66 = 0;\n        long temp67 = 0;\n        long temp68 = 0;\n\
    \        long temp69 = 0;\n        long temp70 = 0;\n        long temp71 = 0;\n\
    \        long temp72 = 0;\n        long temp73 = 0;\n        long temp74 = 0;\n\
    \        long temp75 = 0;\n        long temp76 = 0;\n        long temp77 = 0;\n\
    \        long temp78 = 0;\n        long temp79 = 0;\n        long temp80 = 0;\n\
    \        long temp81 = 0;\n        long temp82 = 0;\n        long temp83 = 0;\n\
    \        long temp84\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5xa_6smf.cs(110,20): error CS1002: ; expected

    '
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = arr.Min();\n        long mid = arr.Count / 2;\n        long midMax = arr.Count\
    \ / 2;\n        long midMin = arr.Count / 2;\n        long midMid = 0;\n     \
    \   long midMidMax = 0;\n        long midMidMin = 0;\n        long midMidMid =\
    \ 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n       \
    \ long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplbdwgth4.cs(39,14): error CS0128: A local variable or function named ''midMidMidMax''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(40,14): error CS0128: A local variable or function named ''midMidMidMin''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(41,14): error CS0128: A local variable or function named ''midMidMidMid''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(42,14): error CS0128: A local variable or function named ''midMidMidMax''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(43,14): error CS0128: A local variable or function named ''midMidMidMin''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(44,14): error CS0128: A local variable or function named ''midMidMidMid''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(45,14): error CS0128: A local variable or function named ''midMidMidMax''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(46,14): error CS0128: A local variable or function named ''midMidMidMin''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(47,14): error CS0128: A local variable or function named ''midMidMidMid''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(48,14): error CS0128: A local variable or function named ''midMidMidMax''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(49,14): error CS0128: A local variable or function named ''midMidMidMin''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(50,14): error CS0128: A local variable or function named ''midMidMidMid''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(51,14): error CS0128: A local variable or function named ''midMidMidMax''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(52,14): error CS0128: A local variable or function named ''midMidMidMin''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(53,14): error CS0128: A local variable or function named ''midMidMidMid''
    is already defined in this scope

    /tmp/tmplbdwgth4.cs(54,14): error CS0128: A lo'
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \      if (sum == max) {\n                res.Add(i);\n                count++;\n\
    \            }\n        }\n        if (count > k) {\n            k = count;\n\
    \        }\n        if (k > 0) {\n            long mid = max / 2;\n          \
    \  while (k != 0) {\n                res.Add(mid);\n                k--;\n   \
    \             mid = max / 2;\n            }\n        }\n        if (k == 0) {\n\
    \            long mid = max / 2;\n            while (k != 0) {\n             \
    \   res.Add(mid);\n                k--;\n                mid = max / 2;\n    \
    \        }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d45e7cb644d469692db6b5263349de2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3d45e7cb644d469692db6b5263349de2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        foreach (var item in arr)\
    \ {\n            if (item > max) {\n                max = item;\n            }\n\
    \        }\n        long start = 0;\n        long end = 0;\n        long mid =\
    \ 0;\n        long maxCount = 0;\n        long count = 0;\n        long maxCount2\
    \ = 0;\n        long count2 = 0;\n        long maxCount3 = 0;\n        long count3\
    \ = 0;\n        long maxCount4 = 0;\n        long count4 = 0;\n        long maxCount5\
    \ = 0;\n        long count5 = 0;\n        long maxCount6 = 0;\n        long count6\
    \ = 0;\n        long maxCount7 = 0;\n        long count7 = 0;\n        long maxCount8\
    \ = 0;\n        long count8 = 0;\n        long maxCount9 = 0;\n        long count9\
    \ = 0;\n        long maxCount10 = 0;\n        long count10 = 0;\n        long\
    \ maxCount11 = 0;\n        long count11 = 0;\n        long maxCount12 = 0;\n \
    \       long count12 = 0;\n        long maxCount13 = 0;\n        long count13\
    \ = 0;\n        long maxCount14 = 0;\n        long count14 = 0;\n        long\
    \ maxCount15 = 0;\n        long count15 = 0;\n        long maxCount16 = 0;\n \
    \       long count16 = 0;\n        long maxCount17 = 0;\n        long count17\
    \ = 0;\n        long maxCount18 = 0;\n        long count18 = 0;\n        long\
    \ maxCount19 = 0;\n        long count19 = 0;\n        long maxCount20 = 0;\n \
    \       long count20 = 0;\n        long maxCount21 = 0;\n        long count21\
    \ = 0;\n        long maxCount22 = 0;\n        long count22 = 0;\n        long\
    \ maxCount23 = 0;\n        long count23 = 0;\n        long maxCount24 = 0;\n \
    \       long count24 = 0;\n        long maxCount25 = 0;\n        long count25\
    \ = 0;\n        long maxCount26 = 0;\n        long count26 = 0;\n        long\
    \ maxCount27 = 0;\n        long count27 = 0;\n        long maxCount28 = 0;\n \
    \       long count28 = 0;\n        long maxCount29 = 0;\n        long count29\
    \ = 0;\n        long maxCount30 = 0;\n        long count30 = 0;\n        long\
    \ maxCount31 = 0;\n        long count31 = 0;\n        long maxCount32 = 0;\n \
    \       long count32 = 0;\n        long maxCount33 = 0;\n        long count33\
    \ = 0;\n        long maxCount34 = 0;\n        long count34 = 0;\n        long\
    \ maxCount35 = 0;\n        long count35 = 0;\n        long maxCount36 = 0;\n \
    \       long count36\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzk5yc1jn.cs(107,21): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n                cur\
    \ = i;\n            }\n            else if (max > i) {\n                max =\
    \ i;\n                cur = i;\n            }\n        }\n        if (k > max)\
    \ {\n            k = max;\n        }\n        if (k == max) {\n            res.Add(max);\n\
    \        }\n        else {\n            while (k > 0) {\n                res.Add(cur);\n\
    \                k--;\n            }\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd67d08c5db54561a571e7757013a902>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cd67d08c5db54561a571e7757013a902>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long maxValue = arr.Max();\n\
    \        long minValue = arr.Min();\n        long maxCount = 0;\n        long\
    \ minCount = 0;\n        long maxCount2 = 0;\n        long minCount2 = 0;\n  \
    \      long maxCount3 = 0;\n        long minCount3 = 0;\n        long maxCount4\
    \ = 0;\n        long minCount4 = 0;\n        long maxCount5 = 0;\n        long\
    \ minCount5 = 0;\n        long maxCount6 = 0;\n        long minCount6 = 0;\n \
    \       long maxCount7 = 0;\n        long minCount7 = 0;\n        long maxCount8\
    \ = 0;\n        long minCount8 = 0;\n        long maxCount9 = 0;\n        long\
    \ minCount9 = 0;\n        long maxCount10 = 0;\n        long minCount10 = 0;\n\
    \        long maxCount11 = 0;\n        long minCount11 = 0;\n        long maxCount12\
    \ = 0;\n        long minCount12 = 0;\n        long maxCount13 = 0;\n        long\
    \ minCount13 = 0;\n        long maxCount14 = 0;\n        long minCount14 = 0;\n\
    \        long maxCount15 = 0;\n        long minCount15 = 0;\n        long maxCount16\
    \ = 0;\n        long minCount16 = 0;\n        long maxCount17 = 0;\n        long\
    \ minCount17 = 0;\n        long maxCount18 = 0;\n        long minCount18 = 0;\n\
    \        long maxCount19 = 0;\n        long minCount19 = 0;\n        long maxCount20\
    \ = 0;\n        long minCount20 = 0;\n        long maxCount21 = 0;\n        long\
    \ minCount21 = 0;\n        long maxCount22 = 0;\n        long minCount22 = 0;\n\
    \        long maxCount23 = 0;\n        long minCount23 = 0;\n        long maxCount24\
    \ = 0;\n        long minCount24 = 0;\n        long maxCount25 = 0;\n        long\
    \ minCount25 = 0;\n        long maxCount26 = 0;\n        long minCount26 = 0;\n\
    \        long maxCount27 = 0;\n        long minCount27 = 0;\n        long maxCount28\
    \ = 0;\n        long minCount28 = 0;\n        long maxCount29 = 0;\n        long\
    \ minCount29 = 0;\n        long maxCount30 = 0;\n        long minCount30 = 0;\n\
    \        long maxCount31 = 0;\n        long minCount31 = 0;\n        long maxCount32\
    \ = 0;\n        long minCount32 = 0;\n        long maxCount33 = 0;\n        long\
    \ minCount33 = 0;\n        long maxCount34 = 0;\n        long minCount34 = 0;\n\
    \        long maxCount35 = 0;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpad9mhmih.cs(98,13): error CS1001: Identifier expected

    /tmp/tmpad9mhmih.cs(98,13): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        long\
    \ maxVal = arr[0];\n        long minVal = arr[0];\n        foreach (long i in\
    \ arr) {\n            if (i > maxVal) {\n                maxVal = i;\n       \
    \         maxIndex = i;\n            }\n            if (i < minVal) {\n      \
    \          minVal = i;\n                minIndex = i;\n            }\n       \
    \     if (maxVal < minVal) {\n                max = maxVal;\n                maxIndex\
    \ = maxIndex;\n                min = minVal;\n                minIndex = minIndex;\n\
    \            }\n            if (maxIndex < minIndex) {\n                max =\
    \ maxIndex;\n                maxIndex = maxVal;\n                min = minIndex;\n\
    \                minIndex = minVal;\n            }\n            if (maxIndex >\
    \ minIndex) {\n                res.Add(maxIndex);\n                maxVal = maxIndex;\n\
    \                maxIndex = maxVal;\n                min = minIndex;\n       \
    \         minIndex = minVal;\n            }\n        }\n        if (res.Count\
    \ > k) {\n            List<long> newRes = new List<long>();\n            while\
    \ (maxIndex < minIndex) {\n                newRes.Add(maxIndex);\n           \
    \     maxIndex++;\n            }\n            newRes.Add(minIndex);\n        \
    \    return newRes;\n        }\n        return res;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f5c65d36ada462c96d2b59122f442a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f5c65d36ada462c96d2b59122f442a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        long maxValueIndex = -1;\n        bool isMax = true;\n        foreach\
    \ (long i in arr) {\n            if (i == maxValue) {\n                maxIndex++;\n\
    \                if (maxIndex == k) {\n                    result.Add(maxValue);\n\
    \                    isMax = true;\n                }\n            }\n       \
    \     else {\n                isMax = false;\n            }\n            if (isMax)\
    \ {\n                maxValue = i;\n                maxValueIndex = maxIndex;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4748b9260ef64f5db92a3f0d1f2eb910>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4748b9260ef64f5db92a3f0d1f2eb910>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \     }\n        temp = max;\n        max = k;\n        while (max > 0) {\n  \
    \          result.Add(temp);\n            temp--;\n            max--;\n      \
    \  }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccdb1e3baafb4d079dd91c94449c9fb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ccdb1e3baafb4d079dd91c94449c9fb0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxCount = 0;\n        long minCount = 0;\n        long\
    \ maxCountIndex = 0;\n        long minCountIndex = 0;\n        bool isMax = true;\n\
    \        bool isMin = true;\n        bool isMaxIndex = true;\n        bool isMinIndex\
    \ = true;\n        bool isMaxValue = true;\n        bool isMinValue = true;\n\
    \        bool isMaxCount = true;\n        bool isMinCount = true;\n        bool\
    \ isMaxCountIndex = true;\n        bool isMinCountIndex = true;\n        foreach\
    \ (long i in arr) {\n            if (isMax) {\n                if (i > max) {\n\
    \                    max = i;\n                    maxIndex = i;\n           \
    \         maxValue = i;\n                    maxCount = 1;\n                 \
    \   maxCountIndex = i;\n                    isMax = true;\n                  \
    \  isMaxIndex = true;\n                    isMaxValue = true;\n              \
    \      isMaxCount = true;\n                    isMaxCountIndex = true;\n     \
    \           }\n                else if (i == max) {\n                    maxCount++;\n\
    \                    maxCountIndex = i;\n                }\n                else\
    \ {\n                    if (maxCount > maxCountIndex) {\n                   \
    \     maxCount = maxCountIndex;\n                        maxCountIndex = i;\n\
    \                    }\n                }\n            }\n            else if\
    \ (isMin) {\n                if (i < min) {\n                    min = i;\n  \
    \                  minIndex = i;\n                    minValue = i;\n        \
    \            minCount = 1;\n                    minCountIndex = i;\n         \
    \           isMin = true;\n                    isMinIndex = true;\n          \
    \          isMinValue = true;\n                    isMinCount = true;\n      \
    \              isMinCountIndex = true;\n                }\n                else\
    \ if (i == min) {\n                    minCount++;\n                    minCountIndex\
    \ = i;\n                }\n                else {\n                    if (minCount\
    \ < minCountIndex) {\n                        minCount = minCountIndex;\n    \
    \                    minCountIndex = i;\n                    }\n             \
    \   }\n            }\n            else if (isMaxIndex) {\n                if (i\
    \ > maxIndex) {\n                    maxIndex = i;\n                    isMaxIndex\
    \ = true;\n                }\n            }\n            else if (isMinIndex)\
    \ {\n                if (i < minIndex) {\n                    minIndex = i;\n\
    \                    isMinIndex = true;\n                }\n            }\n  \
    \          else if (isMaxValue) {\n                if (i > maxValue) {\n     \
    \               maxValue = i;\n                    isMaxValue = true;\n      \
    \          }\n            }\n            else if (isMinValue) {\n            \
    \    if (i < minValue) {\n                    minValue = i;\n                \
    \    isMinValue = true;\n                }\n            }\n            else if\
    \ (isMaxCount) {\n                if (maxCount > maxCountIndex) {\n          \
    \          maxCount = maxCountIndex;\n                    isMaxCount = \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp94h36b8i.cs(122,33): error CS1525: Invalid expression term ''}''

    /tmp/tmp94h36b8i.cs(122,33): error CS1002: ; expected

    /tmp/tmp94h36b8i.cs(124,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp94h36b8i.cs(138,2): error CS1513: } expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long maxIndex = 0;\n        long maxValue = arr[0];\n        foreach (long\
    \ i in arr) {\n            if (i > maxValue) {\n                maxValue = i;\n\
    \                maxIndex = i;\n            }\n            if (i == maxValue)\
    \ {\n                maxIndex++;\n            }\n        }\n        long maxCount\
    \ = maxIndex - k;\n        if (maxCount > 0) result.Add(maxValue);\n        long\
    \ maxCount2 = k - maxIndex;\n        if (maxCount2 > 0) result.Add(arr[maxIndex]);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6lol_8cg.cs(42,43): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6lol_8cg.cs(27,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ res = new List<long>();\n        foreach (long i in arr) {\n            if (max\
    \ < i) {\n                max = i;\n            }\n        }\n        long start\
    \ = 0;\n        long end = arr.Count - 1;\n        while (start <= end) {\n  \
    \          long mid = (start + end) / 2;\n            if (arr[mid] > max) {\n\
    \                end = mid - 1;\n            } else {\n                start =\
    \ mid + 1;\n            }\n        }\n        while (start <= end) {\n       \
    \     long mid = (start + end) / 2;\n            if (arr[mid] > max) {\n     \
    \           max = arr[mid];\n                res.Add(max);\n                start\
    \ = mid + 1;\n            } else {\n                end = mid - 1;\n         \
    \   }\n        }\n        return res;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpczd8o31z.cs(36,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpczd8o31z.cs(44,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpczd8o31z.cs(45,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n        long\
    \ maxVal = 0;\n        long minVal = 0;\n        long maxIndex2 = 0;\n       \
    \ long minIndex2 = 0;\n        long maxVal2 = 0;\n        long minVal2 = 0;\n\
    \        long maxIndex3 = 0;\n        long minIndex3 = 0;\n        long maxVal3\
    \ = 0;\n        long minVal3 = 0;\n        long maxIndex4 = 0;\n        long minIndex4\
    \ = 0;\n        long maxVal4 = 0;\n        long minVal4 = 0;\n        long maxIndex5\
    \ = 0;\n        long minIndex5 = 0;\n        long maxVal5 = 0;\n        long minVal5\
    \ = 0;\n        long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long\
    \ maxVal6 = 0;\n        long minVal6 = 0;\n        long maxIndex7 = 0;\n     \
    \   long minIndex7 = 0;\n        long maxVal7 = 0;\n        long minVal7 = 0;\n\
    \        long maxIndex8 = 0;\n        long minIndex8 = 0;\n        long maxVal8\
    \ = 0;\n        long minVal8 = 0;\n        long maxIndex9 = 0;\n        long minIndex9\
    \ = 0;\n        long maxVal9 = 0;\n        long minVal9 = 0;\n        long maxIndex10\
    \ = 0;\n        long minIndex10 = 0;\n        long maxVal10 = 0;\n        long\
    \ minVal10 = 0;\n        long maxIndex11 = 0;\n        long minIndex11 = 0;\n\
    \        long maxVal11 = 0;\n        long minVal11 = 0;\n        long maxIndex12\
    \ = 0;\n        long minIndex12 = 0;\n        long maxVal12 = 0;\n        long\
    \ minVal12 = 0;\n        long maxIndex13 = 0;\n        long minIndex13 = 0;\n\
    \        long maxVal13 = 0;\n        long minVal13 = 0;\n        long maxIndex14\
    \ = 0;\n        long minIndex14 = 0;\n        long maxVal14 = 0;\n        long\
    \ minVal14 = 0;\n        long maxIndex15 = 0;\n        long minIndex15 = 0;\n\
    \        long maxVal15 = 0;\n        long minVal15 = 0;\n        long maxIndex16\
    \ = 0;\n        long minIndex16 = 0;\n        long maxVal16 = 0;\n        long\
    \ minVal16 = 0;\n        long maxIndex17 = 0;\n        long minIndex17 = 0;\n\
    \        long maxVal17 = 0;\n        long minVal17 = 0;\n        long maxIndex18\
    \ = 0;\n        long minIndex18 = 0;\n        long maxVal18 = 0;\n        long\
    \ minVal\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe865svoh.cs(100,20): error CS1002: ; expected

    '
  timestamp: 1659793570
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \      if (sum == max) {\n                result.Add(i);\n                count++;\n\
    \            }\n        }\n        if (count > k) {\n            k = count;\n\
    \        }\n        long temp = 0;\n        foreach (long i in arr) {\n      \
    \      if (temp < i) {\n                temp = i;\n            }\n        }\n\
    \        temp = temp - min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp / k;\n        temp = temp * k;\n\
    \        temp = temp + min;\n        temp = temp\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj61lzdjt.cs(113,20): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        long\
    \ cur = 0;\n        long curMax = 0;\n        foreach (long i in arr) {\n    \
    \        if (curMax < i) {\n                curMax = i;\n            }\n     \
    \       if (cur > k) {\n                break;\n            }\n            if\
    \ (curMax < i) {\n                result.Add(i);\n            }\n            cur++;\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4198310cc13b42349c9195fb5ffca6bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4198310cc13b42349c9195fb5ffca6bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        long\
    \ count = 0;\n        foreach (long i in arr) {\n            if (i == max) {\n\
    \                count++;\n            }\n        }\n        if (count > k) {\n\
    \            max = -max;\n        }\n        long temp = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == max) {\n                temp = i;\n      \
    \      }\n        }\n        result.Add(temp);\n        foreach (long i in arr)\
    \ {\n            if (i != temp) {\n                result.Add(i);\n          \
    \  }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68dbdc3cd00a40afb9729e039d0309e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <68dbdc3cd00a40afb9729e039d0309e1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = arr[0];\n \
    \       long maxIndex = 0;\n        for (int i = 0; i < arr.Count; i++) {\n  \
    \          if (arr[i] > max) {\n                max = arr[i];\n              \
    \  maxIndex = i;\n            }\n        }\n        result.Add(max);\n       \
    \ if (maxIndex < k - 1) {\n            List<long> rest = Maximum(arr.Skip(maxIndex\
    \ + 1).ToList(), k - 1);\n            foreach (long r in rest) {\n           \
    \     result.Add(r);\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8p74y56k.cs(37,48): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpep6_8f.cs(112,13): error CS1001: Identifier expected

    /tmp/tmpbpep6_8f.cs(112,13): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long current = 0;\n\
    \        long currentIndex = 0;\n        long currentMax = 0;\n        long currentMaxIndex\
    \ = 0;\n        bool isMax = false;\n        bool isMaxIndex = false;\n      \
    \  bool isCurrentMax = false;\n        bool isCurrentMaxIndex = false;\n     \
    \   bool isMaxIndexIsCurrentMax = false;\n        bool isMaxIndexIsCurrentMaxIndex\
    \ = false;\n        bool isMaxIsCurrentMaxIndex = false;\n        bool isMaxIsCurrentMax\
    \ = false;\n        bool isMaxIsCurrentMaxIndex = false;\n        bool isMaxIsCurrentMaxIndexIsMax\
    \ = false;\n        bool isMaxIsCurrentMaxIndexIsMaxIndex = false;\n        bool\
    \ isMaxIsCurrentMaxIndexIsMax = false;\n        bool isMaxIsCurrentMaxIndexIsMax\
    \ = false;\n        bool isMaxIsCurrentMax = false;\n        bool isMaxIsCurrentMaxIndex\
    \ = false;\n        bool isMaxIsCurrentMaxIndexIsMax = false;\n        bool isMaxIsCurrentMaxIndexIsMax\
    \ = false;\n        bool isMaxIsCurrentMax = false;\n        bool isMaxIsCurrentMaxIndex\
    \ = false;\n        bool isMaxIsCurrentMaxIndexIsMax = false;\n        bool isMaxIsCurrentMax\
    \ = false;\n        bool isMaxIsCurrentMaxIndex = false;\n        bool isMaxIsCurrentMaxIndexIsMax\
    \ = false;\n        bool isMaxIsCurrentMax = false;\n        bool isMaxIsCurrentMaxIndex\
    \ = false;\n        bool isMaxIsCurrentMaxIndexIsMax = false;\n        bool isMaxIsCurrentMax\
    \ = false;\n        bool isMaxIsCurrentMaxIndex = false;\n        bool isMaxIsCurrentMaxIndexIsMax\
    \ = false;\n        bool isMaxIsCurrentMax = false;\n        bool isMaxIsCurrentMaxIndex\
    \ = false;\n        bool isMaxIsCurrentMaxIndexIsMax = false;\n        bool isMaxIsCurrentMax\
    \ = false;\n        bool isMaxIsCurrentMaxIndex = false;\n        bool isMaxIsCurrentMaxIndexIsMax\
    \ = false;\n        bool isMaxIsCurrentMax = false;\n        bool isMaxIsCurrentMaxIndex\
    \ = false;\n        bool isMaxIsCurrentMaxIndexIsMax = false;\n        bool isMaxIsCurrentMax\
    \ = false;\n        bool isMaxIsCurrentMaxIndex = false;\n        bool isMaxIsCurrentMaxIndexIsMax\
    \ = false;\n        bool isMaxIsCurrentMax = false;\n        bool isMaxIsCurrentMaxIndex\
    \ = false;\n        bool isMaxIsCurrentMaxIndexIsMax = false;\n        bool isMaxIsCurrentMax\
    \ = false;\n        bool isMaxIsCurrentMaxIndex = false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpijx8iji_.cs(40,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndex''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(43,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndexIsMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(44,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndexIsMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(45,14): error CS0128: A local variable or function named ''isMaxIsCurrentMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(46,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndex''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(47,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndexIsMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(48,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndexIsMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(49,14): error CS0128: A local variable or function named ''isMaxIsCurrentMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(50,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndex''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(51,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndexIsMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(52,14): error CS0128: A local variable or function named ''isMaxIsCurrentMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(53,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndex''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(54,14): error CS0128: A local variable or function named ''isMaxIsCurrentMaxIndexIsMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(55,14): error CS0128: A local variable or function named ''isMaxIsCurrentMax''
    is already defined in this scope

    /tmp/tmpijx8iji_.cs(5'
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        long temp = 0;\n        long temp2 = 0;\n        long temp3\
    \ = 0;\n        long temp4 = 0;\n        long temp5 = 0;\n        long temp6 =\
    \ 0;\n        long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n\
    \        long temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n\
    \        long temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n\
    \        long temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n\
    \        long temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n\
    \        long temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n\
    \        long temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n\
    \        long temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n\
    \        long temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n\
    \        long temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n\
    \        long temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n\
    \        long temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n\
    \        long temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n\
    \        long temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n\
    \        long temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n\
    \        long temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n\
    \        long temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n\
    \        long temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n\
    \        long temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n\
    \        long temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n\
    \        long temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n\
    \        long temp70 = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n\
    \        long temp73 = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n\
    \        long temp76 = 0;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpeahuz00d.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmpeahuz00d.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmpeahuz00d.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(34,14): warning CS0219: The variable ''temp'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(35,14): warning CS0219: The variable ''temp2'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(36,14): warning CS0219: The variable ''temp3'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(37,14): warning CS0219: The variable ''temp4'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(38,14): warning CS0219: The variable ''temp5'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(39,14): warning CS0219: The variable ''temp6'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(40,14): warning CS0219: The variable ''temp7'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(41,14): warning CS0219: The variable ''temp8'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(42,14): warning CS0219: The variable ''temp9'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(43,14): warning CS0219: The variable ''temp10'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(44,14): warning CS0219: The variable ''temp11'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(45,14): warning CS0219: The variable ''temp12'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(46,14): warning CS0219: The variable ''temp13'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(47,14): warning CS0219: The variable ''temp14'' is assigned
    but its value is never used

    /tmp/tmpeahuz00d.cs(48,14'
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n          \
    \  throw new ArgumentException(\"k is out of range\");\n        }\n        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long cur = 0;\n \
    \       foreach (long i in arr) {\n            if (max < i) {\n              \
    \  max = i;\n                cur = i;\n            }\n            if (cur > k)\
    \ {\n                result.Add(max);\n                max = cur;\n          \
    \      cur = i;\n            }\n        }\n        result.Add(max);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb4d770e8cab48a0aaa85079d088ed26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bb4d770e8cab48a0aaa85079d088ed26>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        bool isMax = true;\n        bool isMin = true;\n\
    \        bool isMaxIndex = true;\n        bool isMinIndex = true;\n        bool\
    \ isMaxIndexMin = true;\n        bool isMinIndexMax = true;\n        long maxIndexMin\
    \ = 0;\n        long minIndexMax = 0;\n        long maxIndexMax = 0;\n       \
    \ long maxIndexMinMax = 0;\n        long minIndexMaxMax = 0;\n        long maxIndexMinMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\
    \ = 0;\n        long maxIndexMinMaxMaxMaxMax = 0;\n        long maxIndexMinMaxMaxMaxMax\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpicnw_7pd.cs(77,37): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) {\n          \
    \  throw new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long cur = 0;\n \
    \       foreach (long i in arr) {\n            cur = i;\n            if (max <\
    \ cur) {\n                max = cur;\n            }\n            if (k > 0) {\n\
    \                k--;\n            }\n            result.Add(cur);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cf3b7691256428c927530a696494f2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cf3b7691256428c927530a696494f2c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long cur = arr[0];\n        long maxIndex = 0;\n        for (int i = 1; i <\
    \ arr.Count; i++) {\n            if (arr[i] > cur) {\n                max = Math.Max(max,\
    \ cur);\n                maxIndex = i;\n            }\n            cur = arr[i];\n\
    \        }\n        result.Add(max);\n        result.Add(arr[maxIndex]);\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppbmdzw3x.cs(38,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n        bool\
    \ isMaxIndex = true;\n        bool isMinIndex = true;\n        bool isMaxValue\
    \ = true;\n        bool isMinValue = true;\n        bool isMaxIndexValue = true;\n\
    \        bool isMinIndexValue = true;\n        bool isMaxValueIndex = true;\n\
    \        bool isMinValueIndex = true;\n        bool isMaxIndexIndex = true;\n\
    \        bool isMinIndexIndex = true;\n        bool isMaxIndexValueIndex = true;\n\
    \        bool isMinIndexValueIndex = true;\n        bool isMaxValueIndexIndex\
    \ = true;\n        bool isMinValueIndexIndex = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinIndexIndexValue = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinIndexIndexValue = true;\n        bool isMaxIndexIndexIndex\
    \ = true;\n        bool isMinIndexIndexIndex = true;\n        bool isMaxIndexValueIndex\
    \ = true;\n        bool isMinIndexValueIndex = true;\n        bool isMaxValueIndexIndex\
    \ = true;\n        bool isMinValueIndexIndex = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinIndexIndexValue = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinIndexIndexValue = true;\n        bool isMaxIndexIndexIndex\
    \ = true;\n        bool isMinIndexIndexIndex = true;\n        bool isMaxIndexValueIndex\
    \ = true;\n        bool isMinIndexValueIndex = true;\n        bool isMaxValueIndexIndex\
    \ = true;\n        bool isMinValueIndexIndex = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinIndexIndexValue = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinIndexIndexValue = true;\n        bool isMaxIndexIndexIndex\
    \ = true;\n        bool isMinIndexIndexIndex = true;\n        bool isMaxIndexValueIndex\
    \ = true;\n        bool isMinIndexValueIndex = true;\n        bool isMaxValueIndexIndex\
    \ = true;\n        bool isMinValueIndexIndex = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinValueIndexIndex = true;\n        bool isMaxIndexIndexValue\
    \ = true;\n        bool isMinValueIndexIndex = true;\n        bool isMaxIndexIndexIndex\
    \ = true;\n        bool isMinIndexIndexIndex = true;\n        bool isMaxIndexValueIndex\
    \ = true;\n        bool isMinIndexValueIndex = true;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzoz4m8rt.cs(50,14): error CS0128: A local variable or function named ''isMaxIndexIndexValue''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(51,14): error CS0128: A local variable or function named ''isMinIndexIndexValue''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(54,14): error CS0128: A local variable or function named ''isMaxIndexValueIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(55,14): error CS0128: A local variable or function named ''isMinIndexValueIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(56,14): error CS0128: A local variable or function named ''isMaxValueIndexIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(57,14): error CS0128: A local variable or function named ''isMinValueIndexIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(58,14): error CS0128: A local variable or function named ''isMaxIndexIndexValue''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(59,14): error CS0128: A local variable or function named ''isMinIndexIndexValue''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(60,14): error CS0128: A local variable or function named ''isMaxIndexIndexValue''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(61,14): error CS0128: A local variable or function named ''isMinIndexIndexValue''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(62,14): error CS0128: A local variable or function named ''isMaxIndexIndexIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(63,14): error CS0128: A local variable or function named ''isMinIndexIndexIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(64,14): error CS0128: A local variable or function named ''isMaxIndexValueIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(65,14): error CS0128: A local variable or function named ''isMinIndexValueIndex''
    is already defined in this scope

    /tmp/tmpzoz4m8rt.cs(66,14): error CS0128: A local variable '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n\
    \        long midMax = 0;\n        long midMin = 0;\n        bool isMax = true;\n\
    \        bool isMin = true;\n        bool isMidMax = true;\n        bool isMidMin\
    \ = true;\n        bool isMaxMin = true;\n        bool isMaxMid = true;\n    \
    \    bool isMinMid = true;\n        bool isMaxMax = true;\n        bool isMinMax\
    \ = true;\n        bool isMidMaxMin = true;\n        bool isMidMinMax = true;\n\
    \        bool isMaxMinMid = true;\n        bool isMaxMidMin = true;\n        bool\
    \ isMinMaxMid = true;\n        bool isMaxMidMax = true;\n        bool isMinMidMax\
    \ = true;\n        bool isMaxMinMax = true;\n        bool isMinMidMaxMin = true;\n\
    \        bool isMaxMidMinMax = true;\n        bool isMaxMinMidMax = true;\n  \
    \      bool isMinMaxMidMax = true;\n        bool isMaxMinMaxMid = true;\n    \
    \    bool isMinMidMaxMin = true;\n        bool isMaxMidMinMax = true;\n      \
    \  bool isMaxMinMaxMid = true;\n        bool isMinMidMaxMin = true;\n        bool\
    \ isMaxMidMinMax = true;\n        bool isMaxMinMaxMid = true;\n        bool isMinMidMaxMin\
    \ = true;\n        bool isMaxMidMinMax = true;\n        bool isMaxMinMaxMid =\
    \ true;\n        bool isMinMidMaxMin = true;\n        bool isMaxMidMinMax = true;\n\
    \        bool isMaxMinMaxMid = true;\n        bool isMinMidMaxMin = true;\n  \
    \      bool isMaxMidMinMax = true;\n        bool isMaxMinMaxMid = true;\n    \
    \    bool isMinMidMaxMin = true;\n        bool isMaxMidMinMax = true;\n      \
    \  bool isMaxMinMaxMid = true;\n        bool isMinMidMaxMin = true;\n        bool\
    \ isMaxMidMinMax = true;\n        bool isMaxMinMaxMid = true;\n        bool isMinMidMaxMin\
    \ = true;\n        bool isMaxMidMinMax = true;\n        bool isMaxMinMaxMid =\
    \ true;\n        bool isMinMidMaxMin = true;\n        bool isMaxMidMinMax = true;\n\
    \        bool isMaxMinMaxMid = true;\n        bool isMinMidMaxMin = true;\n  \
    \      bool isMaxMidMinMax = true;\n        bool isMaxMinMaxMid = true;\n    \
    \    bool isMinMidMaxMin = true;\n        bool isMaxMidMinMax = true;\n      \
    \  bool isMaxMinMaxMid = true;\n        bool isMinMidMax\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7o5thqzh.cs(86,25): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long maxValue = arr[0];\n\
    \        long maxIndex = -1;\n        for (int i = 0; i < arr.Count; i++) {\n\
    \            if (arr[i] > maxValue) {\n                maxValue = arr[i];\n  \
    \              maxIndex = i;\n            }\n        }\n        result.Add(maxValue);\n\
    \        if (maxIndex + 1 < arr.Count) {\n            result.AddRange(Maximum(arr.Skip(maxIndex\
    \ + 1).ToList(), k - 1));\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmcxvj_lo.cs(37,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n            } else if (sum == k) {\n       \
    \         max = sum;\n                min = i;\n                count = 1;\n \
    \           } else if (sum < k) {\n                max = sum;\n              \
    \  min = i;\n                count = 1;\n            }\n        }\n        if\
    \ (count > 1) {\n            while (count > 1) {\n                result.Add(min);\n\
    \                count--;\n            }\n            result.Add(max);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dae6ce65977a4f8e832b6f91a153df67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dae6ce65977a4f8e832b6f91a153df67>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        foreach (long i in arr) {\n            if (i > maxValue)\
    \ {\n                maxValue = i;\n                maxIndex = i;\n          \
    \      maxIndexValue = i;\n            }\n            if (i < minValue) {\n  \
    \              minValue = i;\n                minIndex = i;\n                minIndexValue\
    \ = i;\n            }\n        }\n        if (maxIndexValue > minIndexValue) {\n\
    \            max = maxValue;\n            minIndex = maxIndex;\n            minIndexValue\
    \ = maxIndexValue;\n            minValue = minValue;\n            minIndexValue\
    \ = minIndexValue;\n        }\n        if (k == 1) {\n            result.Add(maxValue);\n\
    \            return result;\n        }\n        if (k == 2) {\n            if\
    \ (maxIndexValue > minIndexValue) {\n                result.Add(maxValue);\n \
    \               result.Add(minValue);\n                return result;\n      \
    \      }\n        }\n        if (k == 3) {\n            if (maxIndexValue > minIndexValue)\
    \ {\n                result.Add(maxValue);\n                result.Add(minValue);\n\
    \                result.Add(minIndex);\n                return result;\n     \
    \       }\n        }\n        if (k == 4) {\n            if (maxIndexValue > minIndexValue)\
    \ {\n                result.Add(maxValue);\n                result.Add(minValue);\n\
    \                result.Add(minIndex);\n                result.Add(maxIndex);\n\
    \                return result;\n            }\n        }\n        if (k == 5)\
    \ {\n            if (maxIndexValue > minIndexValue) {\n                result.Add(maxValue);\n\
    \                result.Add(minValue);\n                result.Add(minIndex);\n\
    \                result.Add(maxIndex);\n                result.Add(minIndexValue);\n\
    \                return result;\n            }\n        }\n        if (k == 6)\
    \ {\n            if (maxIndexValue > minIndexValue) {\n                result.Add(maxValue);\n\
    \                result.Add(minValue);\n                result.Add(minIndex);\n\
    \                result.Add(maxIndex);\n                result.Add(minIndexValue);\n\
    \                result.Add(maxIndexValue);\n                return result;\n\
    \            }\n        }\n        if (k == 7) {\n            if (maxIndexValue\
    \ > minIndexValue) {\n                result.Add(maxValue);\n                result.Add(minValue);\n\
    \                result.Add(minIndex);\n                result.Add(maxIndex);\n\
    \                result.Add(minIndexValue);\n                result.Add(maxIndexValue);\n\
    \                result.Add(minIndexValue);\n                return result;\n\
    \            }\n        }\n        if (k == 8) {\n            if (maxIndexValue\
    \ > minIndexValue) {\n                result.Add(maxValue);\n                result.Add(minValue);\n\
    \                result.Add(minIndex);\n                result.Add(maxIndex);\n\
    \                result.Add(min\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfgt5218a.cs(120,31): error CS1026: ) expected

    /tmp/tmpfgt5218a.cs(120,31): error CS1002: ; expected

    /tmp/tmpfgt5218a.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpfgt5218a.cs(136,2): error CS1513: } expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        long\
    \ curMax = max;\n        long curMaxIndex = 0;\n        long curMaxValue = max;\n\
    \        long curMaxIndexValue = max;\n        long curMaxIndexValue2 = max;\n\
    \        long curMaxIndexValue3 = max;\n        long curMaxIndexValue4 = max;\n\
    \        long curMaxIndexValue5 = max;\n        long curMaxIndexValue6 = max;\n\
    \        long curMaxIndexValue7 = max;\n        long curMaxIndexValue8 = max;\n\
    \        long curMaxIndexValue9 = max;\n        long curMaxIndexValue10 = max;\n\
    \        long curMaxIndexValue11 = max;\n        long curMaxIndexValue12 = max;\n\
    \        long curMaxIndexValue13 = max;\n        long curMaxIndexValue14 = max;\n\
    \        long curMaxIndexValue15 = max;\n        long curMaxIndexValue16 = max;\n\
    \        long curMaxIndexValue17 = max;\n        long curMaxIndexValue18 = max;\n\
    \        long curMaxIndexValue19 = max;\n        long curMaxIndexValue20 = max;\n\
    \        long curMaxIndexValue21 = max;\n        long curMaxIndexValue22 = max;\n\
    \        long curMaxIndexValue23 = max;\n        long curMaxIndexValue24 = max;\n\
    \        long curMaxIndexValue25 = max;\n        long curMaxIndexValue26 = max;\n\
    \        long curMaxIndexValue27 = max;\n        long curMaxIndexValue28 = max;\n\
    \        long curMaxIndexValue29 = max;\n        long curMaxIndexValue30 = max;\n\
    \        long curMaxIndexValue31 = max;\n        long curMaxIndexValue32 = max;\n\
    \        long curMaxIndexValue33 = max;\n        long curMaxIndexValue34 = max;\n\
    \        long curMaxIndexValue35 = max;\n        long curMaxIndexValue36 = max;\n\
    \        long curMaxIndexValue37 = max;\n        long curMaxIndexValue38 = max;\n\
    \        long curMaxIndexValue39 = max;\n        long curMaxIndexValue40 = max;\n\
    \        long curMaxIndexValue41 = max;\n        long curMaxIndexValue42 = max;\n\
    \        long curMaxIndex\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu8dbhcle.cs(77,25): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long max2 = 0;\n      \
    \  long min2 = 0;\n        long max3 = 0;\n        long min3 = 0;\n        long\
    \ max4 = 0;\n        long min4 = 0;\n        long max5 = 0;\n        long min5\
    \ = 0;\n        long max6 = 0;\n        long min6 = 0;\n        long max7 = 0;\n\
    \        long min7 = 0;\n        long max8 = 0;\n        long min8 = 0;\n    \
    \    long max9 = 0;\n        long min9 = 0;\n        long max10 = 0;\n       \
    \ long min10 = 0;\n        long max11 = 0;\n        long min11 = 0;\n        long\
    \ max12 = 0;\n        long min12 = 0;\n        long max13 = 0;\n        long min13\
    \ = 0;\n        long max14 = 0;\n        long min14 = 0;\n        long max15 =\
    \ 0;\n        long min15 = 0;\n        long max16 = 0;\n        long min16 = 0;\n\
    \        long max17 = 0;\n        long min17 = 0;\n        long max18 = 0;\n \
    \       long min18 = 0;\n        long max19 = 0;\n        long min19 = 0;\n  \
    \      long max20 = 0;\n        long min20 = 0;\n        long max21 = 0;\n   \
    \     long min21 = 0;\n        long max22 = 0;\n        long min22 = 0;\n    \
    \    long max23 = 0;\n        long min23 = 0;\n        long max24 = 0;\n     \
    \   long min24 = 0;\n        long max25 = 0;\n        long min25 = 0;\n      \
    \  long max26 = 0;\n        long min26 = 0;\n        long max27 = 0;\n       \
    \ long min27 = 0;\n        long max28 = 0;\n        long min28 = 0;\n        long\
    \ max29 = 0;\n        long min29 = 0;\n        long max30 = 0;\n        long min30\
    \ = 0;\n        long max31 = 0;\n        long min31 = 0;\n        long max32 =\
    \ 0;\n        long min32 = 0;\n        long max33 = 0;\n        long min33 = 0;\n\
    \        long max34 = 0;\n        long min34 = 0;\n        long max35 = 0;\n \
    \       long min35 = 0;\n        long max36 = 0;\n        long min36 = 0;\n  \
    \      long max37 = 0;\n        long min37 = 0;\n        long max38 = 0;\n   \
    \     long min38 = 0;\n        long max39 = 0;\n        long min39 = 0;\n    \
    \    long max40 = 0;\n        long min40 = 0;\n        long max41 = 0;\n     \
    \   long min41 = 0;\n        long max42 = 0;\n        long min42 = 0;\n      \
    \  long max43 = 0;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsrk_07x3.cs(111,13): error CS1001: Identifier expected

    /tmp/tmpsrk_07x3.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n                maxIndex = i;\n          \
    \  }\n        }\n        if (maxIndex == arr.Count - 1) {\n            result.Add(max);\n\
    \        } else {\n            result.Add(arr[maxIndex + 1]);\n        }\n   \
    \     if (result.Count > k) {\n            result.RemoveAt(result.Count - 1);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp56fm2kvt.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp56fm2kvt.cs(38,28): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        long mid = min\
    \ + (max - min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 /\
    \ 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long\
    \ mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 /\
    \ 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long\
    \ mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12\
    \ / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n   \
    \     long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqz7k3xtm.cs(83,29): error CS1525: Invalid expression term ''}''

    /tmp/tmpqz7k3xtm.cs(83,29): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        long max = 0;\n        for (int i = 0; i <\
    \ arr.Count; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n\
    \            }\n        }\n        if (max < k) {\n            max = k;\n    \
    \    }\n        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max) {\n                result.Add(arr[i]);\n            }\n        }\n  \
    \      return result;\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfiiovw1t.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxCount = 0;\n        long minCount =\
    \ 0;\n        long maxCountIndex = 0;\n        long minCountIndex = 0;\n     \
    \   long maxCountMinIndex = 0;\n        long minCountMinIndex = 0;\n        long\
    \ maxCountMaxIndex = 0;\n        long minCountMaxIndex = 0;\n        long maxCountMinMaxIndex\
    \ = 0;\n        long minCountMinMaxIndex = 0;\n        long maxCountMaxMinIndex\
    \ = 0;\n        long minCountMaxMinIndex = 0;\n        long maxCountMaxMaxIndex\
    \ = 0;\n        long minCountMaxMaxIndex = 0;\n        long maxCountMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMinMaxIndex = 0;\n        long maxCountMaxMaxMinMaxIndex\
    \ = 0;\n        long minCountMaxMaxMin\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppichii_m.cs(77,31): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n\
    \        long maxValue = 0;\n        long current = 0;\n        long currentIndex\
    \ = 0;\n        long currentValue = 0;\n        long currentMax = 0;\n       \
    \ long currentMaxIndex = 0;\n        long currentMaxValue = 0;\n        long currentMin\
    \ = 0;\n        long currentMinIndex = 0;\n        long currentMinValue = 0;\n\
    \        long currentMinMax = 0;\n        long currentMinMaxIndex = 0;\n     \
    \   long currentMinMaxValue = 0;\n        long currentMinMin = 0;\n        long\
    \ currentMinMinIndex = 0;\n        long currentMinMinValue = 0;\n        long\
    \ currentMinMinMax = 0;\n        long currentMinMinMaxIndex = 0;\n        long\
    \ currentMinMinMaxValue = 0;\n        long currentMinMinMin = 0;\n        long\
    \ currentMinMinMinIndex = 0;\n        long currentMinMinMinValue = 0;\n      \
    \  long currentMinMinMinMax = 0;\n        long currentMinMinMinMaxIndex = 0;\n\
    \        long currentMinMinMinMaxValue = 0;\n        long currentMinMinMinMin\
    \ = 0;\n        long currentMinMinMinMinIndex = 0;\n        long currentMinMinMinMinValue\
    \ = 0;\n        long currentMinMinMinMinMax = 0;\n        long currentMinMinMinMinMaxIndex\
    \ = 0;\n        long currentMinMinMinMinMaxValue = 0;\n        long currentMinMinMinMinMin\
    \ = 0;\n        long currentMinMinMinMinMinIndex = 0;\n        long currentMinMinMinMinMinValue\
    \ = 0;\n        long currentMinMinMinMinMinMax = 0;\n        long currentMinMinMinMinMinMaxIndex\
    \ = 0;\n        long currentMinMinMinMinMinMaxValue = 0;\n        long currentMinMinMinMinMinMin\
    \ = 0;\n        long currentMinMinMinMinMinIndex = 0;\n        long currentMinMinMinMinMinValue\
    \ = 0;\n        long currentMinMinMinMinMinMax = 0;\n        long currentMinMinMinMinMinMaxIndex\
    \ = 0;\n        long currentMinMinMinMinMinMaxValue = 0;\n        long currentMinMinMinMinMinMin\
    \ = 0;\n        long currentMinMinMinMinMinIndex = 0;\n        long currentMinMinMinMinMinValue\
    \ = 0;\n        long currentMinMinMinMinMinMax = 0;\n        long currentMinMinMinMinMinMaxIndex\
    \ = 0;\n        long currentMinMinMinMinMinMaxValue = 0;\n        long currentMinMinMinMinMinMin\
    \ = 0;\n        long currentMinMinMinMinMinIndex = 0;\n        long currentMinMinMinMinMin\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpefxz_3ld.cs(80,36): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = 0;\n        long sum = 0;\n        long count = 0;\n        foreach (long\
    \ i in arr) {\n            sum += i;\n            if (sum > k) {\n           \
    \     max = sum;\n                min = i;\n                count = 1;\n     \
    \       } else if (sum == k) {\n                if (i > k) {\n               \
    \     max = i;\n                    min = sum;\n                    count = 1;\n\
    \                } else {\n                    max = sum;\n                  \
    \  min = i;\n                    count = 1;\n                }\n            }\n\
    \        }\n        if (count > 1) {\n            while (count > 1) {\n      \
    \          res.Add(max);\n                res.Add(min);\n                count--;\n\
    \            }\n        } else {\n            res.Add(max);\n        }\n     \
    \   return res;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4c3ae552d7549e696f296a52dd44105>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a4c3ae552d7549e696f296a52dd44105>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n          \
    \  return arr;\n        }\n        List<long> result = new List<long>();\n   \
    \     long max = 0;\n        long min = 0;\n        long sum = 0;\n        long\
    \ temp = 0;\n        foreach (long i in arr) {\n            sum += i;\n      \
    \      if (sum > max) {\n                max = sum;\n            }\n         \
    \   if (sum < min) {\n                min = sum;\n            }\n        }\n \
    \       temp = max - min;\n        if (temp > k) {\n            k = temp;\n  \
    \      }\n        long count = 0;\n        long sum = 0;\n        foreach (long\
    \ i in arr) {\n            sum += i;\n            if (sum > k) {\n           \
    \     result.Add(i);\n                count++;\n            }\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsaoosct2.cs(47,14): error CS0128: A local variable or function named ''sum''
    is already defined in this scope

    /tmp/tmpsaoosct2.cs(47,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    '
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        bool isMax = true;\n        bool isMin = true;\n\
    \        long maxValue = arr[0];\n        long minValue = arr[0];\n        long\
    \ maxIndexValue = arr[0];\n        long minIndexValue = arr[0];\n        foreach\
    \ (long i in arr) {\n            if (i == maxValue) {\n                maxIndexValue\
    \ = i;\n                maxIndex = i;\n                isMax = true;\n       \
    \         isMin = true;\n            } else if (i == minValue) {\n           \
    \     minIndexValue = i;\n                minIndex = i;\n                isMax\
    \ = true;\n                isMin = true;\n            } else if (isMax) {\n  \
    \              if (i > maxValue) {\n                    maxValue = i;\n      \
    \              maxIndex = i;\n                    isMax = false;\n           \
    \     }\n            } else if (isMin) {\n                if (i < minValue) {\n\
    \                    minValue = i;\n                    minIndex = i;\n      \
    \              isMax = true;\n                }\n            }\n        }\n  \
    \      if (k == maxIndex) {\n            result.Add(maxValue);\n            result.Add(maxIndexValue);\n\
    \        } else if (k == minIndex) {\n            result.Add(minValue);\n    \
    \        result.Add(minIndexValue);\n        } else {\n            while (k >\
    \ 0) {\n                result.Add(maxValue);\n                result.Add(maxIndexValue);\n\
    \                k--;\n            }\n            while (k > 0) {\n          \
    \      result.Add(minValue);\n                result.Add(minIndexValue);\n   \
    \             k--;\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c68f092842524e20b95dde594db6e014>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c68f092842524e20b95dde594db6e014>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        long maxValueIndex = -1;\n        foreach (long i in arr) {\n       \
    \     if (i > maxValue) {\n                maxValue = i;\n                maxValueIndex\
    \ = i;\n            }\n            if (i == maxValue) {\n                maxIndex++;\n\
    \            }\n            if (maxIndex == k) {\n                result.Add(maxValue);\n\
    \                maxIndex = 0;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a07ee3f424c64f13b0efb1d5670669d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a07ee3f424c64f13b0efb1d5670669d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \         if (min > i) {\n                min = i;\n            }\n        }\n\
    \        long mid = (min + max) / 2;\n        long mid2 = mid / 2;\n        long\
    \ mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 /\
    \ 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long\
    \ mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 /\
    \ 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n     \
    \   long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15\
    \ = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 /\
    \ 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n     \
    \   long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   long \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpinx5qc2i.cs(83,13): error CS1001: Identifier expected

    /tmp/tmpinx5qc2i.cs(83,13): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long min = arr.Min();\n        long mid = 0;\n        long midMax = 0;\n  \
    \      long midMin = 0;\n        long midMid = 0;\n        long midMidMax = 0;\n\
    \        long midMidMin = 0;\n        long midMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2344b6r3.cs(90,17): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxVal = 0;\n        long minVal = 0;\n\
    \        long maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxVal2\
    \ = 0;\n        long minVal2 = 0;\n        long maxIndex3 = 0;\n        long minIndex3\
    \ = 0;\n        long maxVal3 = 0;\n        long minVal3 = 0;\n        long maxIndex4\
    \ = 0;\n        long minIndex4 = 0;\n        long maxVal4 = 0;\n        long minVal4\
    \ = 0;\n        long maxIndex5 = 0;\n        long minIndex5 = 0;\n        long\
    \ maxVal5 = 0;\n        long minVal5 = 0;\n        long maxIndex6 = 0;\n     \
    \   long minIndex6 = 0;\n        long maxVal6 = 0;\n        long minVal6 = 0;\n\
    \        long maxIndex7 = 0;\n        long minIndex7 = 0;\n        long maxVal7\
    \ = 0;\n        long minVal7 = 0;\n        long maxIndex8 = 0;\n        long minIndex8\
    \ = 0;\n        long maxVal8 = 0;\n        long minVal8 = 0;\n        long maxIndex9\
    \ = 0;\n        long minIndex9 = 0;\n        long maxVal9 = 0;\n        long minVal9\
    \ = 0;\n        long maxIndex10 = 0;\n        long minIndex10 = 0;\n        long\
    \ maxVal10 = 0;\n        long minVal10 = 0;\n        long maxIndex11 = 0;\n  \
    \      long minIndex11 = 0;\n        long maxVal11 = 0;\n        long minVal11\
    \ = 0;\n        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long\
    \ maxVal12 = 0;\n        long minVal12 = 0;\n        long maxIndex13 = 0;\n  \
    \      long minIndex13 = 0;\n        long maxVal13 = 0;\n        long minVal13\
    \ = 0;\n        long maxIndex14 = 0;\n        long minIndex14 = 0;\n        long\
    \ maxVal14 = 0;\n        long minVal14 = 0;\n        long maxIndex15 = 0;\n  \
    \      long minIndex15 = 0;\n        long maxVal15 = 0;\n        long minVal15\
    \ = 0;\n        long maxIndex16 = 0;\n        long minIndex16 = 0;\n        long\
    \ maxVal16 = 0;\n        long minVal16 = 0;\n        long maxIndex17 = 0;\n  \
    \      long minIndex17 = 0;\n        long maxVal17 = 0;\n        long minVal17\
    \ = 0;\n        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long\
    \ maxVal18 = 0;\n        long minVal18 = 0;\n        long maxIndex19 = 0;\n  \
    \      \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_fq21xlc.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp_fq21xlc.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp_fq21xlc.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(30,14): warning CS0219: The variable ''maxVal'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(31,14): warning CS0219: The variable ''minVal'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(34,14): warning CS0219: The variable ''maxVal2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(35,14): warning CS0219: The variable ''minVal2'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(38,14): warning CS0219: The variable ''maxVal3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(39,14): warning CS0219: The variable ''minVal3'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(42,14): warning CS0219: The variable ''maxVal4'' is assigned
    but its value is never used

    /tmp/tmp_fq21xlc.cs(43,14): warning CS0219: The variable ''minVal4'' is assigned
    but its value is ne'
  timestamp: 1659793569
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \     }\n        long count = 0;\n        foreach (long i in arr) {\n        \
    \    if (i == max) {\n                count++;\n            }\n        }\n   \
    \     long maxCount = 0;\n        long maxCountIndex = 0;\n        long maxCountValue\
    \ = 0;\n        long maxCountIndexValue = 0;\n        long maxCountValueIndex\
    \ = 0;\n        long maxCountValueIndexValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long maxCountValueIndexValueValue\
    \ = 0;\n        long maxCountValueIndexValueValue = 0;\n        long max\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqygnt894.cs(85,17): error CS1002: ; expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        long sum = 0;\n      \
    \  long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \     }\n        temp = max;\n        max = k;\n        sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += i;\n            if (sum > max) {\n   \
    \             max = sum;\n            }\n        }\n        temp = max;\n    \
    \    max = k;\n        sum = 0;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = max;\n        max = k;\n        sum = 0;\n\
    \        foreach (long i in arr) {\n            sum += i;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        temp\
    \ = max;\n        max = k;\n        sum = 0;\n        foreach (long i in arr)\
    \ {\n            sum += i;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        temp = max;\n        max = k;\n  \
    \      sum = 0;\n        foreach (long i in arr) {\n            sum += i;\n  \
    \          if (sum > max) {\n                max = sum;\n            }\n     \
    \   }\n        temp = max;\n        max = k;\n        sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += i;\n            if (sum > max) {\n   \
    \             max = sum;\n            }\n        }\n        temp = max;\n    \
    \    max = k;\n        sum = 0;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = max;\n        max = k;\n        sum = 0;\n\
    \        foreach (long i in arr) {\n            sum += i;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        temp\
    \ = max;\n        max = k;\n        sum = 0;\n        foreach (long i in arr)\
    \ {\n            sum += i;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        temp = max;\n        max = k;\n  \
    \      sum = 0;\n        foreach (long i in arr) {\n            sum += i;\n  \
    \          if (sum > max) {\n                max = sum;\n            }\n     \
    \   }\n        temp = max;\n        max = k;\n        sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += i;\n            if (sum > max) {\n   \
    \             max = sum;\n            }\n        }\n        temp = max;\n    \
    \    max = k;\n        sum = 0;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2vz23trc.cs(140,26): error CS1026: ) expected

    /tmp/tmp2vz23trc.cs(140,26): error CS1525: Invalid expression term ''}''

    /tmp/tmp2vz23trc.cs(140,26): error CS1002: ; expected

    /tmp/tmp2vz23trc.cs(142,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp2vz23trc.cs(156,2): error CS1513: } expected

    '
  timestamp: 1659793571
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        long mid = min\
    \ + (max - min) / 2;\n        long sum2 = 0;\n        foreach (long i in arr)\
    \ {\n            sum2 += i;\n            if (sum2 > mid) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08eb5e40533c4a38ba1e69c4ef9da75b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08eb5e40533c4a38ba1e69c4ef9da75b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long maxSum = 0;\n        long minSum = 0;\n        long sumOfDiff = 0;\n  \
    \      long maxSumOfDiff = 0;\n        long minSumOfDiff = 0;\n        long maxSumOfDiff2\
    \ = 0;\n        long minSumOfDiff2 = 0;\n        long maxSumOfDiff3 = 0;\n   \
    \     long minSumOfDiff3 = 0;\n        long maxSumOfDiff4 = 0;\n        long minSumOfDiff4\
    \ = 0;\n        long maxSumOfDiff5 = 0;\n        long minSumOfDiff5 = 0;\n   \
    \     long maxSumOfDiff6 = 0;\n        long minSumOfDiff6 = 0;\n        long maxSumOfDiff7\
    \ = 0;\n        long minSumOfDiff7 = 0;\n        long maxSumOfDiff8 = 0;\n   \
    \     long minSumOfDiff8 = 0;\n        long maxSumOfDiff9 = 0;\n        long minSumOfDiff9\
    \ = 0;\n        long maxSumOfDiff10 = 0;\n        long minSumOfDiff10 = 0;\n \
    \       long maxSumOfDiff11 = 0;\n        long minSumOfDiff11 = 0;\n        long\
    \ maxSumOfDiff12 = 0;\n        long minSumOfDiff12 = 0;\n        long maxSumOfDiff13\
    \ = 0;\n        long minSumOfDiff13 = 0;\n        long maxSumOfDiff14 = 0;\n \
    \       long minSumOfDiff14 = 0;\n        long maxSumOfDiff15 = 0;\n        long\
    \ minSumOfDiff15 = 0;\n        long maxSumOfDiff16 = 0;\n        long minSumOfDiff16\
    \ = 0;\n        long maxSumOfDiff17 = 0;\n        long minSumOfDiff17 = 0;\n \
    \       long maxSumOfDiff18 = 0;\n        long minSumOfDiff18 = 0;\n        long\
    \ maxSumOfDiff19 = 0;\n        long minSumOfDiff19 = 0;\n        long maxSumOfDiff20\
    \ = 0;\n        long minSumOfDiff20 = 0;\n        long maxSumOfDiff21 = 0;\n \
    \       long minSumOfDiff21 = 0;\n        long maxSumOfDiff22 = 0;\n        long\
    \ minSumOfDiff22 = 0;\n        long maxSumOfDiff23 = 0;\n        long minSumOfDiff23\
    \ = 0;\n        long maxSumOfDiff24 = 0;\n        long minSumOfDiff24 = 0;\n \
    \       long maxSumOfDiff25 = 0;\n        long minSumOfDiff25 = 0;\n        long\
    \ maxSumOfDiff26 = 0;\n        long minSumOfDiff26 = 0;\n        long maxSumOfDiff27\
    \ = 0;\n        \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9v4ob3n3.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp9v4ob3n3.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp9v4ob3n3.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp9v4ob3n3.cs(29,14): warning CS0219: The variable ''maxSum'' is assigned
    but its value is never used

    /tmp/tmp9v4ob3n3.cs(30,14): warning CS0219: The variable ''minSum'' is assigned
    but its value is never used

    /tmp/tmp9v4ob3n3.cs(31,14): warning CS0219: The variable ''sumOfDiff'' is assigned
    but its value is never used

    /tmp/tmp9v4ob3n3.cs(32,14): warning CS0219: The variable ''maxSumOfDiff'' is assigned
    but its value is never used

    /tmp/tmp9v4ob3n3.cs(33,14): warning CS0219: The variable ''minSumOfDiff'' is assigned
    but its value is never used

    /tmp/tmp9v4ob3n3.cs(34,14): warning CS0219: The variable ''maxSumOfDiff2'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(35,14): warning CS0219: The variable ''minSumOfDiff2'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(36,14): warning CS0219: The variable ''maxSumOfDiff3'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(37,14): warning CS0219: The variable ''minSumOfDiff3'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(38,14): warning CS0219: The variable ''maxSumOfDiff4'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(39,14): warning CS0219: The variable ''minSumOfDiff4'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(40,14): warning CS0219: The variable ''maxSumOfDiff5'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(41,14): warning CS0219: The variable ''minSumOfDiff5'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(42,14): warning CS0219: The variable ''maxSumOfDiff6'' is
    assigned but its value is never used

    /tmp/tmp9v4ob3n3.cs(43,14): warning CS0219: The va'
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n\
    \        for (int i = 0; i < arr.Count; i++) {\n            if (arr[i] > max)\
    \ {\n                max = arr[i];\n                maxIndex = i;\n          \
    \  }\n        }\n        result.Add(max);\n        result.Add(arr[maxIndex]);\n\
    \        for (int i = maxIndex + 1; i < arr.Count; i++) {\n            if (arr[i]\
    \ > max) {\n                max = arr[i];\n                maxIndex = i;\n   \
    \         }\n        }\n        result.Add(max);\n        result.Add(arr[maxIndex]);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpix4_n2z3.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpix4_n2z3.cs(36,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpix4_n2z3.cs(37,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpix4_n2z3.cs(44,24): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        if (k == max) {\n\
    \            return arr;\n        }\n        if (k == min) {\n            result.Add(min);\n\
    \            return result;\n        }\n        long mid = max / 2;\n        long\
    \ mid2 = min / 2;\n        long mid3 = mid / 2;\n        long mid4 = mid3 / 2;\n\
    \        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpel6l4952.cs(88,19): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \         if (min > i) {\n                min = i;\n            }\n        }\n\
    \        long mid = min + (max - min) / 2;\n        long mid2 = mid / 2;\n   \
    \     long mid3 = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5\
    \ = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n\
    \        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10\
    \ = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n\
    \        long mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long\
    \ mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16\
    \ / 2;\n        long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n   \
    \     long mid20 = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22\
    \ = mid21 / 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 /\
    \ 2;\n        long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n     \
    \   long mid27 = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29\
    \ = mid28 / 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 /\
    \ 2;\n        long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n     \
    \   long mid34 = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36\
    \ = mid35 / 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 /\
    \ 2;\n        long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n     \
    \   long mid41 = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43\
    \ = mid42 / 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 /\
    \ 2;\n        long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n     \
    \   \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp077s_g9h.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long min = 0;\n  \
    \      long minIndex = 0;\n        long sum = 0;\n        long sumIndex = 0;\n\
    \        long sumOfSquares = 0;\n        long sumOfSquaresIndex = 0;\n       \
    \ long maxOfSquares = 0;\n        long maxOfSquaresIndex = 0;\n        long maxOfSum\
    \ = 0;\n        long maxOfSumIndex = 0;\n        long maxOfSumOfSquares = 0;\n\
    \        long maxOfSumOfSquaresIndex = 0;\n        long maxOfMaxOfSquares = 0;\n\
    \        long maxOfMaxOfSquaresIndex = 0;\n        long maxOfMin = 0;\n      \
    \  long maxOfMinIndex = 0;\n        long minOfMax = 0;\n        long minOfMaxIndex\
    \ = 0;\n        long minOfMin = 0;\n        long minOfMinIndex = 0;\n        long\
    \ maxSum = 0;\n        long maxSumIndex = 0;\n        long maxSumOfSquares = 0;\n\
    \        long maxSumOfSquaresIndex = 0;\n        long maxSumOfMaxOfSquares = 0;\n\
    \        long maxSumOfMaxOfSquaresIndex = 0;\n        long maxSumOfMin = 0;\n\
    \        long maxSumOfMinIndex = 0;\n        long minSum = 0;\n        long minSumIndex\
    \ = 0;\n        long minSumOfSquares = 0;\n        long minSumOfSquaresIndex =\
    \ 0;\n        long minSumOfMin = 0;\n        long minSumOfMinIndex = 0;\n    \
    \    long maxSumOfMaxOfSquares = 0;\n        long maxSumOfMaxOfSquaresIndex =\
    \ 0;\n        long maxSumOfMaxSum = 0;\n        long maxSumOfMaxSumIndex = 0;\n\
    \        long maxSumOfMinSum = 0;\n        long maxSumOfMinSumIndex = 0;\n   \
    \     long minSumOfMaxSum = 0;\n        long minSumOfMaxSumIndex = 0;\n      \
    \  long minSumOfMinSum = 0;\n        long minSumOfMinSumIndex = 0;\n        long\
    \ maxSumOfMaxSumOfSquares = 0;\n        long maxSumOfMaxSumOfSquaresIndex = 0;\n\
    \        long maxSumOfMaxSumOfMaxOfSquares = 0;\n        long maxSumOfMaxSumOfMaxOfSquaresIndex\
    \ = 0;\n        long maxSumOfMaxSumOfMin = 0;\n        long maxSumOfMaxSumOfMinIndex\
    \ = 0;\n        long minSumOfMaxSumOfMaxOfSquares = 0;\n        long minSumOfMaxSumOfMaxOfSquaresIndex\
    \ = 0;\n        long minSumOfMaxSumOfMaxSum = 0;\n        long minSumOfMax\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1shqnurr.cs(81,25): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        if\
    \ (k > max) {\n            k = max;\n        }\n        long mid = max / 2;\n\
    \        List<long> left = new List<long>();\n        List<long> right = new List<long>();\n\
    \        foreach (long i in arr) {\n            if (i < mid) {\n             \
    \   left.Add(i);\n            } else {\n                right.Add(i);\n      \
    \      }\n        }\n        left = Maximum(left, k / 2);\n        right = Maximum(right,\
    \ k / 2);\n        List<long> result = new List<long>();\n        foreach (long\
    \ i in left) {\n            result.Add(i);\n        }\n        result.AddRange(right);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3prhylma.cs(47,20): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum - k;\n                min\
    \ = sum;\n                count = 1;\n            } else if (sum < k) {\n    \
    \            max = sum;\n                min = sum - k;\n                count\
    \ = 1;\n            } else {\n                max = sum;\n                min\
    \ = sum;\n                count = 1;\n            }\n            result.Add(max);\n\
    \            sum += max;\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a795bdabadc49ce9d7e0a3192e50959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2a795bdabadc49ce9d7e0a3192e50959>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long temp = 0;\n        long sum2 = 0;\n        long temp2 = 0;\n        long\
    \ sum3 = 0;\n        long temp3 = 0;\n        long sum4 = 0;\n        long temp4\
    \ = 0;\n        long sum5 = 0;\n        long temp5 = 0;\n        long sum6 = 0;\n\
    \        long temp6 = 0;\n        long sum7 = 0;\n        long temp7 = 0;\n  \
    \      long sum8 = 0;\n        long temp8 = 0;\n        long sum9 = 0;\n     \
    \   long temp9 = 0;\n        long sum10 = 0;\n        long temp10 = 0;\n     \
    \   long sum11 = 0;\n        long temp11 = 0;\n        long sum12 = 0;\n     \
    \   long temp12 = 0;\n        long sum13 = 0;\n        long temp13 = 0;\n    \
    \    long sum14 = 0;\n        long temp14 = 0;\n        long sum15 = 0;\n    \
    \    long temp15 = 0;\n        long sum16 = 0;\n        long temp16 = 0;\n   \
    \     long sum17 = 0;\n        long temp17 = 0;\n        long sum18 = 0;\n   \
    \     long temp18 = 0;\n        long sum19 = 0;\n        long temp19 = 0;\n  \
    \      long sum20 = 0;\n        long temp20 = 0;\n        long sum21 = 0;\n  \
    \      long temp21 = 0;\n        long sum22 = 0;\n        long temp22 = 0;\n \
    \       long sum23 = 0;\n        long temp23 = 0;\n        long sum24 = 0;\n \
    \       long temp24 = 0;\n        long sum25 = 0;\n        long temp25 = 0;\n\
    \        long sum26 = 0;\n        long temp26 = 0;\n        long sum27 = 0;\n\
    \        long temp27 = 0;\n        long sum28 = 0;\n        long temp28 = 0;\n\
    \        long sum29 = 0;\n        long temp29 = 0;\n        long sum30 = 0;\n\
    \        long temp30 = 0;\n        long sum31 = 0;\n        long temp31 = 0;\n\
    \        long sum32 = 0;\n        long temp32 = 0;\n        long sum33 = 0;\n\
    \        long temp33 = 0;\n        long sum34 = 0;\n        long temp34 = 0;\n\
    \        long sum35 = 0;\n        long temp35 = 0;\n        long sum36 = 0;\n\
    \        long temp36 = 0;\n        long sum37 = 0;\n        long temp37 = 0;\n\
    \        long sum38 = 0;\n        long temp38 = 0;\n        long sum39 = 0;\n\
    \        long temp39 = 0;\n        long sum40 = 0;\n        long temp40 = 0;\n\
    \        long sum41 = 0;\n        long temp41 = 0;\n        long sum42 = 0;\n\
    \        long temp42\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9b8y86oa.cs(111,20): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        long sum = 0;\n      \
    \  foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n                temp = i;\n            }\n  \
    \      }\n        List<long> list = new List<long>();\n        list.Add(temp);\n\
    \        list.Add(max);\n        list.Sort();\n        if (list.Count > k) {\n\
    \            list.RemoveAt(list.Count - 1);\n        }\n        foreach (long\
    \ i in list) {\n            result.Add(i);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f7c116f0b364c6eb9e142295c1a1f2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2f7c116f0b364c6eb9e142295c1a1f2d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum - k;\n                min\
    \ = sum;\n                count++;\n            }\n            if (sum < k) {\n\
    \                max = sum;\n                min = sum + k;\n                count++;\n\
    \            }\n        }\n        if (count > 0) {\n            result.Add(max);\n\
    \            result.Add(min);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ab5783a9c534ad1ae81d8ece370e05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ab5783a9c534ad1ae81d8ece370e05e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        long sum = 0;\n      \
    \  long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \     }\n        temp = max;\n        max = k;\n        sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += i;\n            if (sum > max) {\n   \
    \             max = sum;\n            }\n        }\n        temp = max;\n    \
    \    max = k;\n        sum = 0;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = max;\n        max = k;\n        sum = 0;\n\
    \        foreach (long i in arr) {\n            sum += i;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        temp\
    \ = max;\n        max = k;\n        sum = 0;\n        foreach (long i in arr)\
    \ {\n            sum += i;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        temp = max;\n        max = k;\n  \
    \      sum = 0;\n        foreach (long i in arr) {\n            sum += i;\n  \
    \          if (sum > max) {\n                max = sum;\n            }\n     \
    \   }\n        temp = max;\n        max = k;\n        sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += i;\n            if (sum > max) {\n   \
    \             max = sum;\n            }\n        }\n        temp = max;\n    \
    \    max = k;\n        sum = 0;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max) {\n                max = sum;\n    \
    \        }\n        }\n        temp = max;\n        max = k;\n        sum = 0;\n\
    \        foreach (long i in arr) {\n            sum += i;\n            if (sum\
    \ > max) {\n                max = sum;\n            }\n        }\n        temp\
    \ = max;\n        max = k;\n        sum = 0;\n        foreach (long i in arr)\
    \ {\n            sum += i;\n            if (sum > max) {\n                max\
    \ = sum;\n            }\n        }\n        temp = max;\n        max = k;\n  \
    \      sum = 0;\n        foreach (long i in arr) {\n            sum += i;\n  \
    \          if (sum > max) {\n                max = sum;\n            }\n     \
    \   }\n        temp = max;\n        max = k;\n        sum = 0;\n        foreach\
    \ (long i in arr) {\n            sum += i;\n            if (sum > max) {\n   \
    \             max = sum;\n            }\n        }\n        temp = max;\n    \
    \    max = k;\n        sum = 0;\n        foreach (long i in arr) {\n         \
    \   sum += i;\n            if (sum > max\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2vz23trc.cs(140,26): error CS1026: ) expected

    /tmp/tmp2vz23trc.cs(140,26): error CS1525: Invalid expression term ''}''

    /tmp/tmp2vz23trc.cs(140,26): error CS1002: ; expected

    /tmp/tmp2vz23trc.cs(142,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp2vz23trc.cs(156,2): error CS1513: } expected

    '
  timestamp: 1659793571
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        long sum2 = 0;\n        long sum3 = 0;\n        long\
    \ sum4 = 0;\n        long sum5 = 0;\n        long sum6 = 0;\n        long sum7\
    \ = 0;\n        long sum8 = 0;\n        long sum9 = 0;\n        long sum10 = 0;\n\
    \        long sum11 = 0;\n        long sum12 = 0;\n        long sum13 = 0;\n \
    \       long sum14 = 0;\n        long sum15 = 0;\n        long sum16 = 0;\n  \
    \      long sum17 = 0;\n        long sum18 = 0;\n        long sum19 = 0;\n   \
    \     long sum20 = 0;\n        long sum21 = 0;\n        long sum22 = 0;\n    \
    \    long sum23 = 0;\n        long sum24 = 0;\n        long sum25 = 0;\n     \
    \   long sum26 = 0;\n        long sum27 = 0;\n        long sum28 = 0;\n      \
    \  long sum29 = 0;\n        long sum30 = 0;\n        long sum31 = 0;\n       \
    \ long sum32 = 0;\n        long sum33 = 0;\n        long sum34 = 0;\n        long\
    \ sum35 = 0;\n        long sum36 = 0;\n        long sum37 = 0;\n        long sum38\
    \ = 0;\n        long sum39 = 0;\n        long sum40 = 0;\n        long sum41 =\
    \ 0;\n        long sum42 = 0;\n        long sum43 = 0;\n        long sum44 = 0;\n\
    \        long sum45 = 0;\n        long sum46 = 0;\n        long sum47 = 0;\n \
    \       long sum48 = 0;\n        long sum49 = 0;\n        long sum50 = 0;\n  \
    \      long sum51 = 0;\n        long sum52 = 0;\n        long sum53 = 0;\n   \
    \     long sum54 = 0;\n        long sum55 = 0;\n        long sum56 = 0;\n    \
    \    long sum57 = 0;\n        long sum58 = 0;\n        long sum59 = 0;\n     \
    \   long sum60 = 0;\n        long sum61 = 0;\n        long sum62 = 0;\n      \
    \  long sum63 = 0;\n        long sum64 = 0;\n        long sum65 = 0;\n       \
    \ long sum66 = 0;\n        long sum67 = 0;\n        long sum68 = 0;\n        long\
    \ sum69 = 0;\n        long sum70 = 0;\n        long sum71 = 0;\n        long sum72\
    \ = 0;\n        long sum73 = 0;\n        long sum74 = 0;\n        long sum75 =\
    \ 0;\n        long sum76 = 0;\n        long sum77 = 0;\n        long sum78 = 0;\n\
    \        long sum79 = 0;\n        long sum80 = 0;\n        long sum81 = 0;\n \
    \       long sum82 = 0;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5zf3oxnj.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp5zf3oxnj.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp5zf3oxnj.cs(28,14): warning CS0219: The variable ''sum'' is assigned but
    its value is never used

    /tmp/tmp5zf3oxnj.cs(29,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(30,14): warning CS0219: The variable ''sum2'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(31,14): warning CS0219: The variable ''sum3'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(32,14): warning CS0219: The variable ''sum4'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(33,14): warning CS0219: The variable ''sum5'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(34,14): warning CS0219: The variable ''sum6'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(35,14): warning CS0219: The variable ''sum7'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(36,14): warning CS0219: The variable ''sum8'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(37,14): warning CS0219: The variable ''sum9'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(38,14): warning CS0219: The variable ''sum10'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(39,14): warning CS0219: The variable ''sum11'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(40,14): warning CS0219: The variable ''sum12'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(41,14): warning CS0219: The variable ''sum13'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(42,14): warning CS0219: The variable ''sum14'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(43,14): warning CS0219: The variable ''sum15'' is assigned
    but its value is never used

    /tmp/tmp5zf3oxnj.cs(44,14): warning CS0219: T'
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > max) {\n                max = sum;\n            }\n   \
    \         if (sum < min) {\n                min = sum;\n            }\n      \
    \      if (sum == max) {\n                result.Add(i);\n                count++;\n\
    \            }\n        }\n        if (count > k) {\n            k = count;\n\
    \        }\n        if (k > result.Count) {\n            k = result.Count;\n \
    \       }\n        if (k == 0) {\n            return result;\n        }\n    \
    \    long mid = max / 2;\n        long mid2 = min / 2;\n        long mid3 = sum\
    \ / 2;\n        long mid4 = count / 2;\n        long mid5 = max / 3;\n       \
    \ long mid6 = min / 3;\n        long mid7 = sum / 3;\n        long mid8 = count\
    \ / 3;\n        long mid9 = max / 4;\n        long mid10 = min / 4;\n        long\
    \ mid11 = sum / 4;\n        long mid12 = count / 4;\n        long mid13 = max\
    \ / 5;\n        long mid14 = min / 5;\n        long mid15 = sum / 5;\n       \
    \ long mid16 = count / 5;\n        long mid17 = max / 6;\n        long mid18 =\
    \ min / 6;\n        long mid19 = sum / 6;\n        long mid20 = count / 6;\n \
    \       long mid21 = max / 7;\n        long mid22 = min / 7;\n        long mid23\
    \ = sum / 7;\n        long mid24 = count / 7;\n        long mid25 = max / 8;\n\
    \        long mid26 = min / 8;\n        long mid27 = sum / 8;\n        long mid28\
    \ = count / 8;\n        long mid29 = max / 9;\n        long mid30 = min / 9;\n\
    \        long mid31 = sum / 9;\n        long mid32 = count / 9;\n        long\
    \ mid33 = max / 10;\n        long mid34 = min / 10;\n        long mid35 = sum\
    \ / 10;\n        long mid36 = count / 10;\n        long mid37 = max / 11;\n  \
    \      long mid38 = min / 11;\n        long mid39 = sum / 11;\n        long mid40\
    \ = count / 11;\n        long mid41 = max / 12;\n        long mid42 = min / 12;\n\
    \        long mid43 = sum / 12;\n        long mid44 = count / 12;\n        long\
    \ mid45 = max / \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu8suwemn.cs(96,27): error CS1525: Invalid expression term ''}''

    /tmp/tmpu8suwemn.cs(96,27): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long mid\
    \ = max / 2;\n        long mid2 = min / 2;\n        long mid3 = mid / 2;\n   \
    \     long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6\
    \ = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n\
    \        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11\
    \ = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12 /\
    \ 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n     \
    \   long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid49 = mid48 / 2;\n        long mid50 = mid49 / 2;\n     \
    \   \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqck73w5p.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n            } else if (sum < k) {\n        \
    \        max = sum;\n                min = i;\n                count = 1;\n  \
    \          } else {\n                count++;\n            }\n        }\n    \
    \    long maxSum = sum;\n        long maxCount = count;\n        foreach (long\
    \ i in arr) {\n            sum += i;\n            if (sum > k) {\n           \
    \     maxSum = sum;\n                maxCount = count;\n            } else if\
    \ (sum < k) {\n                maxSum = sum;\n                maxCount = count;\n\
    \            }\n        }\n        if (maxCount == 1) {\n            res.Add(max);\n\
    \        } else {\n            while (maxCount > 1) {\n                res.Add(max);\n\
    \                maxCount -= 1;\n                maxSum -= max;\n            \
    \    max = maxSum;\n                maxCount = count;\n                sum = 0;\n\
    \                count = 0;\n                foreach (long i in arr) {\n     \
    \               sum += i;\n                    if (sum > k) {\n              \
    \          maxSum = sum;\n                        maxCount = count;\n        \
    \            } else if (sum < k) {\n                        maxSum = sum;\n  \
    \                      maxCount = count;\n                    }\n            \
    \    }\n            }\n            res.Add(max);\n        }\n        return res;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d45d5251d8954bff99c8599b8419c77c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d45d5251d8954bff99c8599b8419c77c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = arr.Max();\n        List<long>\
    \ result = new List<long>();\n        long cur = max;\n        long curMax = max;\n\
    \        long curMaxIndex = -1;\n        bool isMax = true;\n        long curMaxValue\
    \ = max;\n        long curMaxValueIndex = -1;\n        long curMaxValueValue =\
    \ max;\n        long curMaxValueValueIndex = -1;\n        foreach (long i in arr)\
    \ {\n            if (i == cur) {\n                result.Add(i);\n           \
    \     curMaxIndex = result.Count - 1;\n                curMaxValue = i;\n    \
    \            curMaxValueIndex = result.Count - 1;\n                curMaxValueValue\
    \ = i;\n                curMaxValueValueIndex = result.Count - 1;\n          \
    \      isMax = true;\n            } else if (i > cur) {\n                if (isMax)\
    \ {\n                    result.Add(curMaxValue);\n                    curMaxIndex\
    \ = result.Count - 1;\n                    curMaxValue = curMaxValueValue;\n \
    \                   curMaxValueIndex = result.Count - 1;\n                   \
    \ curMaxValueValue = curMaxValueValue;\n                    curMaxValueValueIndex\
    \ = result.Count - 1;\n                    isMax = false;\n                } else\
    \ {\n                    result.Add(curMaxValue);\n                    curMaxIndex\
    \ = result.Count - 1;\n                    curMaxValue = curMaxValueValue;\n \
    \                   curMaxValueIndex = result.Count - 1;\n                   \
    \ curMaxValueValue = curMaxValueValue;\n                    curMaxValueValueIndex\
    \ = result.Count - 1;\n                    isMax = true;\n                }\n\
    \            } else {\n                if (isMax) {\n                    result.Add(curMaxValue);\n\
    \                    curMaxIndex = result.Count - 1;\n                    curMaxValue\
    \ = curMaxValueValue;\n                    curMaxValueIndex = result.Count - 1;\n\
    \                    curMaxValueValue = curMaxValueValue;\n                  \
    \  curMaxValueValueIndex = result.Count - 1;\n                    isMax = false;\n\
    \                } else {\n                    result.Add(curMaxValue);\n    \
    \                curMaxIndex = result.Count - 1;\n                    curMaxValue\
    \ = curMaxValueValue;\n                    curMaxValueIndex = result.Count - 1;\n\
    \                    curMaxValueValue = curMaxValueValue;\n                  \
    \  curMaxValueValueIndex = result.Count - 1;\n                    isMax = true;\n\
    \                }\n            }\n            cur = i;\n        }\n        if\
    \ (result.Count > k) {\n            result.RemoveAt(result.Count - 1);\n     \
    \   }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <860f33ecc1ad4e08ac0f80e77388c3ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <860f33ecc1ad4e08ac0f80e77388c3ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long mid\
    \ = (max + min) / 2;\n        long mid2 = mid / 2;\n        long mid3 = mid2 /\
    \ 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long\
    \ mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8 = mid7 /\
    \ 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long\
    \ mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long mid13 = mid12\
    \ / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n   \
    \     long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n        long mid18\
    \ = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20 = mid19 /\
    \ 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 / 2;\n     \
    \   long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n        long mid25\
    \ = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27 = mid26 /\
    \ 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 / 2;\n     \
    \   long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n        long mid32\
    \ = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34 = mid33 /\
    \ 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 / 2;\n     \
    \   long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n        long mid39\
    \ = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41 = mid40 /\
    \ 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 / 2;\n     \
    \   long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n        long mid46\
    \ = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48 = mid47 /\
    \ 2;\n        long mid49 = mid48 / 2;\n        long mid50 = mid49 / 2;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoc6liuvf.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        long minValue = 1000;\n        long minIndex = 0;\n        bool isMax\
    \ = true;\n        bool isMin = true;\n        long currentMax = 0;\n        long\
    \ currentMin = 1000;\n        long currentMaxIndex = 0;\n        long currentMinIndex\
    \ = 0;\n        foreach (long i in arr) {\n            if (isMax) {\n        \
    \        if (i > maxValue) {\n                    maxValue = i;\n            \
    \        maxIndex = i;\n                }\n                if (i == maxValue)\
    \ {\n                    isMax = false;\n                }\n            }\n  \
    \          if (isMin) {\n                if (i < minValue) {\n               \
    \     minValue = i;\n                    minIndex = i;\n                }\n  \
    \              if (i == minValue) {\n                    isMin = false;\n    \
    \            }\n            }\n            if (isMax && isMin) {\n           \
    \     if (i == maxValue && i == minValue) {\n                    result.Add(i);\n\
    \                }\n            }\n            if (isMax) {\n                if\
    \ (i > currentMax) {\n                    currentMax = i;\n                  \
    \  currentMaxIndex = i;\n                }\n                if (i == currentMax)\
    \ {\n                    isMax = false;\n                }\n            }\n  \
    \          if (isMin) {\n                if (i < currentMin) {\n             \
    \       currentMin = i;\n                    currentMinIndex = i;\n          \
    \      }\n                if (i == currentMin) {\n                    isMin =\
    \ false;\n                }\n            }\n            if (isMax && isMin) {\n\
    \                if (i == currentMax && i == currentMin) {\n                 \
    \   result.Add(i);\n                }\n            }\n        }\n        if (result.Count\
    \ > k) {\n            k = result.Count;\n        }\n        if (result.Count <\
    \ k) {\n            k = result.Count;\n        }\n        if (result.Count < k)\
    \ {\n            k = result.Count;\n        }\n        if (result.Count < k) {\n\
    \            k = result.Count;\n        }\n        if (result.Count < k) {\n \
    \           k = result.Count;\n        }\n        if (result.Count < k) {\n  \
    \          k = result.Count;\n        }\n        if (result.Count < k) {\n   \
    \         k = result.Count;\n        }\n        if (result.Count < k) {\n    \
    \        k = result.Count;\n        }\n        if (result.Count < k) {\n     \
    \       k = result.Count;\n        }\n        if (result.Count < k) {\n      \
    \      k = result.Count;\n        }\n        if (result.Count < k) {\n       \
    \     k = result.Count;\n        }\n        if (result.Count < k) {\n        \
    \    k = result.Count;\n        }\n        if (result.Count < k) {\n         \
    \   k = result.Count;\n        }\n        if (result.Count < k) {\n          \
    \  k = result.Count;\n        }\n        if (result.Count < k) {\n           \
    \ k = \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpubqp8eh1.cs(128,16): error CS1525: Invalid expression term ''}''

    /tmp/tmpubqp8eh1.cs(128,16): error CS1002: ; expected

    /tmp/tmpubqp8eh1.cs(130,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpubqp8eh1.cs(144,2): error CS1513: } expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        if\
    \ (max <= k) {\n            result.Add(max);\n            return result;\n   \
    \     }\n        long max2 = max;\n        long max3 = max;\n        long max4\
    \ = max;\n        long max5 = max;\n        long max6 = max;\n        long max7\
    \ = max;\n        long max8 = max;\n        long max9 = max;\n        long max10\
    \ = max;\n        long max11 = max;\n        long max12 = max;\n        long max13\
    \ = max;\n        long max14 = max;\n        long max15 = max;\n        long max16\
    \ = max;\n        long max17 = max;\n        long max18 = max;\n        long max19\
    \ = max;\n        long max20 = max;\n        long max21 = max;\n        long max22\
    \ = max;\n        long max23 = max;\n        long max24 = max;\n        long max25\
    \ = max;\n        long max26 = max;\n        long max27 = max;\n        long max28\
    \ = max;\n        long max29 = max;\n        long max30 = max;\n        long max31\
    \ = max;\n        long max32 = max;\n        long max33 = max;\n        long max34\
    \ = max;\n        long max35 = max;\n        long max36 = max;\n        long max37\
    \ = max;\n        long max38 = max;\n        long max39 = max;\n        long max40\
    \ = max;\n        long max41 = max;\n        long max42 = max;\n        long max43\
    \ = max;\n        long max44 = max;\n        long max45 = max;\n        long max46\
    \ = max;\n        long max47 = max;\n        long max48 = max;\n        long max49\
    \ = max;\n        long max50 = max;\n        long max51 = max;\n        long max52\
    \ = max;\n        long max53 = max;\n        long max54 = max;\n        long max55\
    \ = max;\n        long max56 = max;\n        long max57 = max;\n        long max58\
    \ = max;\n        long max59 = max;\n        long max60 = max;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwerwimxq.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \         if (min > i) {\n                min = i;\n            }\n        }\n\
    \        if (k > max) {\n            k = max;\n        }\n        if (k < min)\
    \ {\n            k = min;\n        }\n        long mid = (max - min) / 2;\n  \
    \      long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0gzasmxc.cs(86,29): error CS1525: Invalid expression term ''}''

    /tmp/tmp0gzasmxc.cs(86,29): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n\
    \        long maxIndex = 0;\n        long minIndex = 0;\n        long midIndex\
    \ = 0;\n        bool isMax = true;\n        bool isMin = true;\n        bool isMid\
    \ = true;\n        bool isMaxIndex = true;\n        bool isMinIndex = true;\n\
    \        bool isMidIndex = true;\n        bool isMaxIndexAndMin = true;\n    \
    \    bool isMaxIndexAndMid = true;\n        bool isMaxIndexAndMinIndex = true;\n\
    \        bool isMaxIndexAndMidIndex = true;\n        bool isMaxIndexAndMaxIndexAndMin\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMid = true;\n        bool isMaxIndexAndMaxIndexAndMinIndex\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMidIndex = true;\n        bool\
    \ isMaxIndexAndMaxIndexAndMaxIndexAndMin = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMid\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMinIndex = true;\n\
    \        bool isMaxIndexAndMaxIndexAndMaxIndexAndMidIndex = true;\n        bool\
    \ isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMin = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMid\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMinIndex\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMidIndex\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMin\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMid\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMinIndex\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMidIndex\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMin\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMid\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMinIndex\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMaxIndexAndMidIndex\
    \ = true;\n        bool isMaxIndexAndMaxIndexAndMaxIndexAndMaxIndex\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkp6ol1k5.cs(62,57): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > cur) {\n                max = i;\n                cur\
    \ = i;\n            }\n            if (i == cur) {\n                cur++;\n \
    \           }\n            if (cur > max) {\n                max = cur;\n    \
    \        }\n            res.Add(max);\n        }\n        return res;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4f699f08b6d415ab4ef4b63d38e46d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e4f699f08b6d415ab4ef4b63d38e46d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n   \
    \     long maxValue = arr[0];\n        long minValue = arr[0];\n        long maxCount\
    \ = 0;\n        long minCount = 0;\n        bool isMax = true;\n        bool isMin\
    \ = true;\n        bool isMaxOrMin = true;\n        bool isMaxOrMinOrMax = true;\n\
    \        bool isMaxOrMinOrMaxOrMin = true;\n        bool isMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMin = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin = true;\n   \
    \     bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax = true;\n        bool\
    \ isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMax\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMin\
    \ = true;\n        bool isMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOrMaxOrMinOr\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpedkhhadv.cs(54,66): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        long mid = min\
    \ + (max - min) / 2;\n        long sum2 = 0;\n        long sum3 = 0;\n       \
    \ foreach (long i in arr) {\n            sum2 += i;\n            if (sum2 > mid)\
    \ {\n                sum3 = sum2;\n                sum2 = sum;\n             \
    \   sum = sum3;\n            }\n        }\n        long sum4 = 0;\n        long\
    \ sum5 = 0;\n        foreach (long i in arr) {\n            sum4 += i;\n     \
    \       if (sum4 > mid) {\n                sum5 = sum4;\n                sum4\
    \ = sum;\n                sum = sum5;\n            }\n        }\n        long\
    \ sum6 = 0;\n        long sum7 = 0;\n        foreach (long i in arr) {\n     \
    \       sum6 += i;\n            if (sum6 > mid) {\n                sum7 = sum6;\n\
    \                sum6 = sum;\n                sum = sum7;\n            }\n   \
    \     }\n        long sum8 = 0;\n        long sum9 = 0;\n        foreach (long\
    \ i in arr) {\n            sum8 += i;\n            if (sum8 > mid) {\n       \
    \         sum9 = sum8;\n                sum8 = sum;\n                sum = sum9;\n\
    \            }\n        }\n        long sum10 = 0;\n        long sum11 = 0;\n\
    \        foreach (long i in arr) {\n            sum10 += i;\n            if (sum10\
    \ > mid) {\n                sum11 = sum10;\n                sum10 = sum;\n   \
    \             sum = sum11;\n            }\n        }\n        long sum12 = 0;\n\
    \        long sum13 = 0;\n        foreach (long i in arr) {\n            sum12\
    \ += i;\n            if (sum12 > mid) {\n                sum13 = sum12;\n    \
    \            sum12 = sum;\n                sum = sum13;\n            }\n     \
    \   }\n        long sum14 = 0;\n        long sum15 = 0;\n        foreach (long\
    \ i in arr) {\n            sum14 += i;\n            if (sum14 > mid) {\n     \
    \           sum15 = sum14;\n                sum14 = sum;\n                sum\
    \ = sum15;\n            }\n        }\n        long sum16 = 0;\n        long sum17\
    \ = 0;\n        foreach (long i in arr) {\n            sum16 += i;\n         \
    \   if (sum16 > mid) {\n                sum17 = sum16;\n                sum16\
    \ = sum;\n                sum = sum17;\n            }\n        }\n        long\
    \ sum18 = 0;\n        long sum19 = 0;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl10cy7s0.cs(119,14): warning CS0219: The variable ''sum18'' is assigned
    but its value is never used

    /tmp/tmpl10cy7s0.cs(120,14): warning CS0219: The variable ''sum19'' is assigned
    but its value is never used

    /tmp/tmpl10cy7s0.cs(24,30): error CS0161: ''Problem.Maximum(List<long>, long)'':
    not all code paths return a value

    '
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        long temp = 0;\n        foreach (long i in arr) {\n\
    \            sum += i;\n            if (sum > k) {\n                max = sum\
    \ - k;\n                min = sum;\n                count = 1;\n            }\
    \ else if (sum < k) {\n                max = sum;\n                min = sum -\
    \ k;\n                count = 1;\n            } else {\n                max =\
    \ sum;\n                min = sum;\n                count = 1;\n            }\n\
    \            temp = max;\n            sum = max;\n            max = temp;\n  \
    \      }\n        List<long> temp2 = new List<long>();\n        foreach (long\
    \ i in arr) {\n            if (min == max) {\n                temp2.Add(i);\n\
    \            } else {\n                if (min > max) {\n                    temp2.Add(i);\n\
    \                } else {\n                    temp2.Add(min);\n             \
    \   }\n            }\n        }\n        result.AddRange(temp2);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c260e4d2a447f99c0202a302127234>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6c260e4d2a447f99c0202a302127234>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        long maxValueIndex = -1;\n        long maxValueIndex = arr.Count - 1;\n\
    \        long minValue = arr[0];\n        long minValueIndex = 0;\n        long\
    \ minValueIndex = arr.Count - 1;\n        long minValueIndex = arr.Count - 1;\n\
    \        long maxValueIndex = arr.Count - 1;\n        long minValueIndex = arr.Count\
    \ - 1;\n        long maxValueIndex = arr.Count - 1;\n        long minValueIndex\
    \ = arr.Count - 1;\n        long maxValueIndex = arr.Count - 1;\n        long\
    \ minValueIndex = arr.Count - 1;\n        long maxValueIndex = arr.Count - 1;\n\
    \        long minValueIndex = arr.Count - 1;\n        long maxValueIndex = arr.Count\
    \ - 1;\n        long minValueIndex = arr.Count - 1;\n        long maxValueIndex\
    \ = arr.Count - 1;\n        long minValueIndex = arr.Count - 1;\n        long\
    \ maxValueIndex = arr.Count - 1;\n        long minValueIndex = arr.Count - 1;\n\
    \        long maxValueIndex = arr.Count - 1;\n        long minValueIndex = arr.Count\
    \ - 1;\n        long maxValueIndex = arr.Count - 1;\n        long minValueIndex\
    \ = arr.Count - 1;\n        long maxValueIndex = arr.Count - 1;\n        long\
    \ minValueIndex = arr.Count - 1;\n        long maxValueIndex = arr.Count - 1;\n\
    \        long minValueIndex = arr.Count - 1;\n        long maxValueIndex = arr.Count\
    \ - 1;\n        long minValueIndex = arr.Count - 1;\n        long maxValueIndex\
    \ = arr.Count - 1;\n        long minValueIndex = arr.Count - 1;\n        long\
    \ maxValueIndex = arr.Count - 1;\n        long minValueIndex = arr.Count - 1;\n\
    \        long maxValueIndex = arr.Count - 1;\n        long minValueIndex = arr.Count\
    \ - 1;\n        long maxValueIndex = arr.Count - 1;\n        long minValueIndex\
    \ = arr.Count - 1;\n        long maxValueIndex = arr.Count - 1;\n        long\
    \ minValueIndex = arr.Count - 1;\n        long maxValueIndex = arr.Count - 1;\n\
    \        long minValueIndex = arr.Count - 1;\n        long maxValueIndex = arr.Count\
    \ - 1;\n        long minValueIndex = arr.Count - 1;\n        long maxValueIndex\
    \ = arr.Count - 1;\n        long minValueIndex = arr.Count - 1;\n        long\
    \ maxValueIndex = arr.Count - 1;\n        long minValueIndex = arr.Count - 1;\n\
    \        long maxValueIndex = arr.Count - 1;\n        long min\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplsvdg1cy.cs(78,17): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        foreach (long i in arr) {\n            if (i > maxValue)\
    \ {\n                maxValue = i;\n                maxIndex = i;\n          \
    \      maxIndexValue = i;\n            }\n            if (i < minValue) {\n  \
    \              minValue = i;\n                minIndex = i;\n                minIndexValue\
    \ = i;\n            }\n        }\n        max = maxValue;\n        min = minValue;\n\
    \        long temp;\n        long tempIndex;\n        long tempValue;\n      \
    \  long tempIndexValue;\n        long tempMax;\n        long tempMin;\n      \
    \  long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMinIndex;\n        long tempMaxValue;\n\
    \        long tempMinValue;\n        long tempMaxIndexValue;\n        long tempMinIndexValue;\n\
    \        long tempMaxIndex;\n        long tempMin\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkj5wvjdl.cs(109,21): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n        bool\
    \ isMaxIndex = true;\n        bool isMinIndex = true;\n        bool isMaxValue\
    \ = true;\n        bool isMinValue = true;\n        bool isMaxIndexValue = true;\n\
    \        bool isMinIndexValue = true;\n        bool isMaxIndexMin = true;\n  \
    \      bool isMinIndexMax = true;\n        bool isMaxIndexMinValue = true;\n \
    \       bool isMinIndexMaxValue = true;\n        bool isMaxIndexMinIndex = true;\n\
    \        bool isMinIndexMaxIndex = true;\n        bool isMaxIndexMinIndexValue\
    \ = true;\n        bool isMinIndexMaxIndexValue = true;\n        bool isMaxIndexMinIndexMin\
    \ = true;\n        bool isMinIndexMaxIndexMin = true;\n        bool isMaxIndexMinIndexMax\
    \ = true;\n        bool isMinIndexMaxIndexMax = true;\n        bool isMaxIndexMinIndexMaxValue\
    \ = true;\n        bool isMinIndexMaxIndexMaxValue = true;\n        bool isMaxIndexMinIndexMaxMin\
    \ = true;\n        bool isMinIndexMaxIndexMaxMin = true;\n        bool isMaxIndexMinIndexMaxMax\
    \ = true;\n        bool isMinIndexMaxIndexMaxMax = true;\n        bool isMaxIndexMinIndexMaxMaxValue\
    \ = true;\n        bool isMinIndexMaxIndexMaxMaxValue = true;\n        bool isMaxIndexMinIndexMaxMaxMin\
    \ = true;\n        bool isMinIndexMaxIndexMaxMaxMin = true;\n        bool isMaxIndexMinIndexMaxMaxMax\
    \ = true;\n        bool isMinIndexMaxIndexMaxMaxMax = true;\n        bool isMaxIndexMinIndexMaxMaxMaxValue\
    \ = true;\n        bool isMinIndexMaxIndexMaxMaxMaxValue = true;\n        bool\
    \ isMaxIndexMinIndexMaxMaxMaxMin = true;\n        bool isMinIndexMaxIndexMaxMaxMaxMin\
    \ = true;\n        bool isMaxIndexMinIndexMaxMaxMaxMax = true;\n        bool isMinIndexMaxIndexMaxMaxMaxMax\
    \ = true;\n        bool isMaxIndexMinIndexMaxMaxMaxMaxValue = true;\n        bool\
    \ isMinIndexMaxIndexMaxMaxMaxMaxValue = true;\n        bool isMaxIndexMinIndexMaxMaxMaxMaxMin\
    \ = true;\n        bool isMinIndexMaxIndexMaxMaxMaxMaxMin = true;\n        bool\
    \ isMaxIndexMinIndexMaxMaxMax\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9a0lxplf.cs(76,41): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n\
    \        long midMax = 0;\n        long midMin = 0;\n        long midMid = 0;\n\
    \        long midMidMax = 0;\n        long midMidMin = 0;\n        long midMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp14o6718.cs(41,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(42,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(43,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(44,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(45,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(46,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(47,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(48,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(49,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(50,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(51,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(52,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(53,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(54,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(55,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /'
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        long mid = min\
    \ + (max - min) / 2;\n        long sum2 = 0;\n        foreach (long i in arr)\
    \ {\n            sum2 += i;\n            if (sum2 > mid) {\n                result.Add(i);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08eb5e40533c4a38ba1e69c4ef9da75b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <08eb5e40533c4a38ba1e69c4ef9da75b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        long max2 = 0;\n      \
    \  long cur2 = 0;\n        long max3 = 0;\n        long cur3 = 0;\n        long\
    \ max4 = 0;\n        long cur4 = 0;\n        long max5 = 0;\n        long cur5\
    \ = 0;\n        long max6 = 0;\n        long cur6 = 0;\n        long max7 = 0;\n\
    \        long cur7 = 0;\n        long max8 = 0;\n        long cur8 = 0;\n    \
    \    long max9 = 0;\n        long cur9 = 0;\n        long max10 = 0;\n       \
    \ long cur10 = 0;\n        long max11 = 0;\n        long cur11 = 0;\n        long\
    \ max12 = 0;\n        long cur12 = 0;\n        long max13 = 0;\n        long cur13\
    \ = 0;\n        long max14 = 0;\n        long cur14 = 0;\n        long max15 =\
    \ 0;\n        long cur15 = 0;\n        long max16 = 0;\n        long cur16 = 0;\n\
    \        long max17 = 0;\n        long cur17 = 0;\n        long max18 = 0;\n \
    \       long cur18 = 0;\n        long max19 = 0;\n        long cur19 = 0;\n  \
    \      long max20 = 0;\n        long cur20 = 0;\n        long max21 = 0;\n   \
    \     long cur21 = 0;\n        long max22 = 0;\n        long cur22 = 0;\n    \
    \    long max23 = 0;\n        long cur23 = 0;\n        long max24 = 0;\n     \
    \   long cur24 = 0;\n        long max25 = 0;\n        long cur25 = 0;\n      \
    \  long max26 = 0;\n        long cur26 = 0;\n        long max27 = 0;\n       \
    \ long cur27 = 0;\n        long max28 = 0;\n        long cur28 = 0;\n        long\
    \ max29 = 0;\n        long cur29 = 0;\n        long max30 = 0;\n        long cur30\
    \ = 0;\n        long max31 = 0;\n        long cur31 = 0;\n        long max32 =\
    \ 0;\n        long cur32 = 0;\n        long max33 = 0;\n        long cur33 = 0;\n\
    \        long max34 = 0;\n        long cur34 = 0;\n        long max35 = 0;\n \
    \       long cur35 = 0;\n        long max36 = 0;\n        long cur36 = 0;\n  \
    \      long max37 = 0;\n        long cur37 = 0;\n        long max38 = 0;\n   \
    \     long cur38 = 0;\n        long max39 = 0;\n        long cur39 = 0;\n    \
    \    long max40 = 0;\n        long cur40 = 0;\n        long max41 = 0;\n     \
    \   long cur41 = 0;\n        long max42 = 0;\n        long cur42 = 0;\n      \
    \  long max43 = 0;\n        long \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8y_fe0eh.cs(111,13): error CS1001: Identifier expected

    /tmp/tmp8y_fe0eh.cs(111,13): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ cur = 0;\n        foreach (long i in arr) {\n            if (i > max) {\n  \
    \              max = i;\n                cur = i;\n            }\n           \
    \ if (i == cur) {\n                res.Add(cur);\n                cur++;\n   \
    \         }\n        }\n        if (k == res.Count) return res;\n        long\
    \ len = res.Count;\n        List<long> tmp = new List<long>(k);\n        for (int\
    \ i = 0; i < k; i++) {\n            tmp[i] = res[i];\n        }\n        tmp.AddRange(arr.GetRange(0,\
    \ k - len));\n        return tmp;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgv6p9uf2.cs(41,41): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpgv6p9uf2.cs(45,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            if (sum > k) {\n                max = sum;\n                min =\
    \ i;\n                count = 1;\n            } else if (sum < k) {\n        \
    \        max = sum;\n                min = i;\n                count = 1;\n  \
    \          } else {\n                count++;\n            }\n        }\n    \
    \    long temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n      \
    \  long temp4 = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n       \
    \ long temp7 = 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long\
    \ temp10 = 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long\
    \ temp13 = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long\
    \ temp16 = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long\
    \ temp19 = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long\
    \ temp22 = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long\
    \ temp25 = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long\
    \ temp28 = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long\
    \ temp31 = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long\
    \ temp34 = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long\
    \ temp37 = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long\
    \ temp40 = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long\
    \ temp43 = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long\
    \ temp46 = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long\
    \ temp49 = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long\
    \ temp52 = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long\
    \ temp55 = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long\
    \ temp58 = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long\
    \ temp61 = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long\
    \ temp64 = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long\
    \ temp67 = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long\
    \ temp70 = 0;\n        long temp71 = 0;\n        long temp\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ox7yxzb.cs(115,18): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long temp = 0;\n        foreach (long i in arr)\
    \ {\n            if (max < i) {\n                max = i;\n            }\n   \
    \     }\n        long max2 = max;\n        long temp2 = 0;\n        foreach (long\
    \ i in arr) {\n            if (temp2 < i) {\n                temp2 = i;\n    \
    \        }\n        }\n        long max3 = max2;\n        long temp3 = 0;\n  \
    \      foreach (long i in arr) {\n            if (temp3 < i) {\n             \
    \   temp3 = i;\n            }\n        }\n        long max4 = max3;\n        long\
    \ temp4 = 0;\n        foreach (long i in arr) {\n            if (temp4 < i) {\n\
    \                temp4 = i;\n            }\n        }\n        long max5 = max4;\n\
    \        long temp5 = 0;\n        foreach (long i in arr) {\n            if (temp5\
    \ < i) {\n                temp5 = i;\n            }\n        }\n        long max6\
    \ = max5;\n        long temp6 = 0;\n        foreach (long i in arr) {\n      \
    \      if (temp6 < i) {\n                temp6 = i;\n            }\n        }\n\
    \        long max7 = max6;\n        long temp7 = 0;\n        foreach (long i in\
    \ arr) {\n            if (temp7 < i) {\n                temp7 = i;\n         \
    \   }\n        }\n        long max8 = max7;\n        long temp8 = 0;\n       \
    \ foreach (long i in arr) {\n            if (temp8 < i) {\n                temp8\
    \ = i;\n            }\n        }\n        long max9 = max8;\n        long temp9\
    \ = 0;\n        foreach (long i in arr) {\n            if (temp9 < i) {\n    \
    \            temp9 = i;\n            }\n        }\n        long max10 = max9;\n\
    \        long temp10 = 0;\n        foreach (long i in arr) {\n            if (temp10\
    \ < i) {\n                temp10 = i;\n            }\n        }\n        long\
    \ max11 = max10;\n        long temp11 = 0;\n        foreach (long i in arr) {\n\
    \            if (temp11 < i) {\n                temp11 = i;\n            }\n \
    \       }\n        long max12 = max11;\n        long temp12 = 0;\n        foreach\
    \ (long i in arr) {\n            if (temp12 < i) {\n                temp12 = i;\n\
    \            }\n        }\n        long max13 = max12;\n        long temp13 =\
    \ 0;\n        foreach (long i in arr) {\n            if (temp13 < i) {\n     \
    \           temp13 = i;\n            }\n        }\n        long max14 = max13;\n\
    \        long temp14 = 0;\n        foreach (long i in arr) {\n            if (temp14\
    \ < i) {\n                temp14 = i;\n            }\n        }\n        long\
    \ max15 = max14;\n        long temp15 = 0;\n        foreach (long i in arr\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzryjkack.cs(126,31): error CS1026: ) expected

    /tmp/tmpzryjkack.cs(126,31): error CS1525: Invalid expression term ''}''

    /tmp/tmpzryjkack.cs(126,31): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ foreach (long i in arr) {\n            sum += i;\n            if (sum > max)\
    \ {\n                max = sum;\n            }\n            if (sum < min) {\n\
    \                min = sum;\n            }\n        }\n        if (k > max) {\n\
    \            k = max;\n        }\n        if (k < min) {\n            k = min;\n\
    \        }\n        long mid = min + (k - min) / 2;\n        long sum2 = 0;\n\
    \        foreach (long i in arr) {\n            sum2 += i;\n            if (sum2\
    \ > mid) {\n                result.Add(i);\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbfed7fcba4d43d79d490eec2de6887a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbfed7fcba4d43d79d490eec2de6887a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        Array.Sort(arr);\n        long max = 0;\n        long maxIndex = 0;\n\
    \        long maxValue = arr[0];\n        foreach (long i in arr) {\n        \
    \    if (i > maxValue) {\n                max = i;\n                maxIndex =\
    \ i;\n                maxValue = i;\n            }\n            if (i == maxValue)\
    \ {\n                maxIndex++;\n            }\n        }\n        result.Add(maxValue);\n\
    \        result.Add(maxIndex);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpod3rw0b3.cs(26,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long min = 0;\n        long maxIndex = 0;\n        long minIndex = 0;\n   \
    \     long maxValue = arr[0];\n        long minValue = arr[0];\n        long maxIndexValue\
    \ = arr[0];\n        long minIndexValue = arr[0];\n        bool isMax = true;\n\
    \        bool isMin = true;\n        long maxIndexValue2 = arr[0];\n        long\
    \ minIndexValue2 = arr[0];\n        long maxValue2 = arr[0];\n        long minValue2\
    \ = arr[0];\n        long maxIndexValue3 = arr[0];\n        long minIndexValue3\
    \ = arr[0];\n        long maxValue3 = arr[0];\n        long minValue3 = arr[0];\n\
    \        long maxIndexValue4 = arr[0];\n        long minIndexValue4 = arr[0];\n\
    \        long maxValue4 = arr[0];\n        long minValue4 = arr[0];\n        long\
    \ maxIndexValue5 = arr[0];\n        long minIndexValue5 = arr[0];\n        long\
    \ maxValue5 = arr[0];\n        long minValue5 = arr[0];\n        long maxIndexValue6\
    \ = arr[0];\n        long minIndexValue6 = arr[0];\n        long maxValue6 = arr[0];\n\
    \        long minValue6 = arr[0];\n        long maxIndexValue7 = arr[0];\n   \
    \     long minIndexValue7 = arr[0];\n        long maxValue7 = arr[0];\n      \
    \  long minValue7 = arr[0];\n        long maxIndexValue8 = arr[0];\n        long\
    \ minIndexValue8 = arr[0];\n        long maxValue8 = arr[0];\n        long minValue8\
    \ = arr[0];\n        long maxIndexValue9 = arr[0];\n        long minIndexValue9\
    \ = arr[0];\n        long maxValue9 = arr[0];\n        long minValue9 = arr[0];\n\
    \        long maxIndexValue10 = arr[0];\n        long minIndexValue10 = arr[0];\n\
    \        long maxValue10 = arr[0];\n        long minValue10 = arr[0];\n      \
    \  long maxIndexValue11 = arr[0];\n        long minIndexValue11 = arr[0];\n  \
    \      long maxValue11 = arr[0];\n        long minValue11 = arr[0];\n        long\
    \ maxIndexValue12 = arr[0];\n        long minIndexValue12 = arr[0];\n        long\
    \ maxValue12 = arr[0];\n        long minValue12 = arr[0];\n        long maxIndexValue13\
    \ = arr[0];\n        long minIndexValue13 = arr[0];\n        long maxValue13 =\
    \ arr[0];\n        long minValue13 = arr[0];\n        long maxIndexValue14 = arr[0];\n\
    \        long minIndexValue\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppe2hlobf.cs(86,27): error CS1002: ; expected

    '
  timestamp: 1659793572
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = arr[0];\n        long minValue\
    \ = arr[0];\n        long maxIndexValue = arr[0];\n        long minIndexValue\
    \ = arr[0];\n        bool isMax = true;\n        bool isMin = true;\n        bool\
    \ isMaxIndex = true;\n        bool isMinIndex = true;\n        bool isMaxValue\
    \ = true;\n        bool isMinValue = true;\n        bool isMaxIndexValue = true;\n\
    \        bool isMinIndexValue = true;\n        foreach (long i in arr) {\n   \
    \         if (i == maxValue) {\n                maxIndexValue = i;\n         \
    \       maxIndex = i;\n                isMaxIndex = true;\n            }\n   \
    \         if (i == minValue) {\n                minIndexValue = i;\n         \
    \       minIndex = i;\n                isMinIndex = true;\n            }\n   \
    \         if (i == maxIndexValue) {\n                maxValue = i;\n         \
    \       maxIndexValue = i;\n                isMaxValue = true;\n            }\n\
    \            if (i == minIndexValue) {\n                minValue = i;\n      \
    \          minIndexValue = i;\n                isMinValue = true;\n          \
    \  }\n            if (isMax) {\n                if (i == maxValue) {\n       \
    \             isMax = false;\n                }\n                if (i == maxIndexValue)\
    \ {\n                    isMaxIndex = false;\n                }\n            }\n\
    \            if (isMin) {\n                if (i == minValue) {\n            \
    \        isMin = false;\n                }\n                if (i == minIndexValue)\
    \ {\n                    isMinIndex = false;\n                }\n            }\n\
    \            if (isMaxIndex) {\n                if (i == maxIndex) {\n       \
    \             isMaxIndex = false;\n                }\n                if (i ==\
    \ maxIndexValue) {\n                    isMaxIndexValue = false;\n           \
    \     }\n            }\n            if (isMinIndex) {\n                if (i ==\
    \ minIndex) {\n                    isMinIndex = false;\n                }\n  \
    \              if (i == minIndexValue) {\n                    isMinIndexValue\
    \ = false;\n                }\n            }\n            if (isMaxValue) {\n\
    \                if (i == maxValue) {\n                    isMaxValue = false;\n\
    \                }\n                if (i == maxIndexValue) {\n              \
    \      isMaxIndexValue = false;\n                }\n            }\n          \
    \  if (isMinValue) {\n                if (i == minValue) {\n                 \
    \   isMinValue = false;\n                }\n                if (i == minIndexValue)\
    \ {\n                    isMinIndexValue = false;\n                }\n       \
    \     }\n        }\n        if (k == maxIndex) {\n            result.Add(maxValue);\n\
    \        }\n        if (k == minIndex) {\n            result.Add(minValue);\n\
    \        }\n        if (k == maxIndexValue) {\n            result.Add(maxIndexValue);\n\
    \        }\n        if (k == minIndexValue) {\n            result.Add(minIndexValue);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ed456fdd3be45bf9694d50bd4fc87d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1ed456fdd3be45bf9694d50bd4fc87d0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (i > max) {\n                max = i;\n                cur\
    \ = i;\n            }\n            if (i == cur) {\n                result.Add(i);\n\
    \            }\n        }\n        if (result.Count > k) {\n            List<long>\
    \ newResult = new List<long>(result.Count - k);\n            foreach (long i in\
    \ result) {\n                newResult.Add(i);\n            }\n            result\
    \ = newResult;\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvvmvgsqj.cs(38,51): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long maxIndex = 0;\n  \
    \      long minIndex = 0;\n        long maxValue = 0;\n        long minValue =\
    \ 0;\n        long maxIndex2 = 0;\n        long minIndex2 = 0;\n        long maxValue2\
    \ = 0;\n        long minValue2 = 0;\n        long maxIndex3 = 0;\n        long\
    \ minIndex3 = 0;\n        long maxValue3 = 0;\n        long minValue3 = 0;\n \
    \       long maxIndex4 = 0;\n        long minIndex4 = 0;\n        long maxValue4\
    \ = 0;\n        long minValue4 = 0;\n        long maxIndex5 = 0;\n        long\
    \ minIndex5 = 0;\n        long maxValue5 = 0;\n        long minValue5 = 0;\n \
    \       long maxIndex6 = 0;\n        long minIndex6 = 0;\n        long maxValue6\
    \ = 0;\n        long minValue6 = 0;\n        long maxIndex7 = 0;\n        long\
    \ minIndex7 = 0;\n        long maxValue7 = 0;\n        long minValue7 = 0;\n \
    \       long maxIndex8 = 0;\n        long minIndex8 = 0;\n        long maxValue8\
    \ = 0;\n        long minValue8 = 0;\n        long maxIndex9 = 0;\n        long\
    \ minIndex9 = 0;\n        long maxValue9 = 0;\n        long minValue9 = 0;\n \
    \       long maxIndex10 = 0;\n        long minIndex10 = 0;\n        long maxValue10\
    \ = 0;\n        long minValue10 = 0;\n        long maxIndex11 = 0;\n        long\
    \ minIndex11 = 0;\n        long maxValue11 = 0;\n        long minValue11 = 0;\n\
    \        long maxIndex12 = 0;\n        long minIndex12 = 0;\n        long maxValue12\
    \ = 0;\n        long minValue12 = 0;\n        long maxIndex13 = 0;\n        long\
    \ minIndex13 = 0;\n        long maxValue13 = 0;\n        long minValue13 = 0;\n\
    \        long maxIndex14 = 0;\n        long minIndex14 = 0;\n        long maxValue14\
    \ = 0;\n        long minValue14 = 0;\n        long maxIndex15 = 0;\n        long\
    \ minIndex15 = 0;\n        long maxValue15 = 0;\n        long minValue15 = 0;\n\
    \        long maxIndex16 = 0;\n        long minIndex16 = 0;\n        long maxValue16\
    \ = 0;\n        long minValue16 = 0;\n        long maxIndex17 = 0;\n        long\
    \ minIndex17 = 0;\n        long maxValue17 = 0;\n        long minValue17 = 0;\n\
    \        long maxIndex18 = 0;\n        long minIndex18 = 0;\n        long maxValue18\
    \ = 0;\n        long minValue18 = 0;\n        long maxIndex19 = 0;\n        \n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7b3k4ilw.cs(26,14): warning CS0219: The variable ''max'' is assigned but
    its value is never used

    /tmp/tmp7b3k4ilw.cs(27,14): warning CS0219: The variable ''min'' is assigned but
    its value is never used

    /tmp/tmp7b3k4ilw.cs(28,14): warning CS0219: The variable ''maxIndex'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(29,14): warning CS0219: The variable ''minIndex'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(30,14): warning CS0219: The variable ''maxValue'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(31,14): warning CS0219: The variable ''minValue'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(32,14): warning CS0219: The variable ''maxIndex2'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(33,14): warning CS0219: The variable ''minIndex2'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(34,14): warning CS0219: The variable ''maxValue2'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(35,14): warning CS0219: The variable ''minValue2'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(36,14): warning CS0219: The variable ''maxIndex3'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(37,14): warning CS0219: The variable ''minIndex3'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(38,14): warning CS0219: The variable ''maxValue3'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(39,14): warning CS0219: The variable ''minValue3'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(40,14): warning CS0219: The variable ''maxIndex4'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(41,14): warning CS0219: The variable ''minIndex4'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(42,14): warning CS0219: The variable ''maxValue4'' is assigned
    but its value is never used

    /tmp/tmp7b3k4ilw.cs(43,14): warning CS0219: The variable ''minValue4'' is assigned
    but'
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long min = arr.Min();\n        long mid = 0;\n\
    \        long midMax = 0;\n        long midMin = 0;\n        long midMid = 0;\n\
    \        long midMidMax = 0;\n        long midMidMin = 0;\n        long midMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n        long midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n\
    \        long midMidMidMidMin = 0;\n        long midMidMidMidMid = 0;\n      \
    \  long midMidMidMidMax = 0;\n        long midMidMidMidMin = 0;\n        long\
    \ midMidMidMidMid = 0;\n        long midMidMidMidMax = 0;\n        long midMidMidMidMin\
    \ = 0;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp14o6718.cs(41,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(42,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(43,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(44,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(45,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(46,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(47,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(48,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(49,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(50,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(51,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(52,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(53,14): error CS0128: A local variable or function named ''midMidMidMidMax''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(54,14): error CS0128: A local variable or function named ''midMidMidMidMin''
    is already defined in this scope

    /tmp/tmpp14o6718.cs(55,14): error CS0128: A local variable or function named ''midMidMidMidMid''
    is already defined in this scope

    /'
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> result = new List<long>();\n        long max = 0;\n      \
    \  long maxIndex = 0;\n        long currentMax = arr[0];\n        long currentMaxIndex\
    \ = 0;\n        bool isMax = true;\n        foreach (long i in arr) {\n      \
    \      if (i > max) {\n                max = i;\n                maxIndex = currentMaxIndex;\n\
    \            }\n            if (i == max) {\n                currentMax = i;\n\
    \                currentMaxIndex = i;\n            }\n            if (isMax) {\n\
    \                if (i > currentMax) {\n                    isMax = false;\n \
    \                   result.Add(max);\n                    result.Add(currentMax);\n\
    \                    result.Add(maxIndex);\n                    result.Add(currentMaxIndex);\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1bdda3164e224778afa67da5ad47cb41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1bdda3164e224778afa67da5ad47cb41>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (arr.Count < 1 || k < 1 || k >\
    \ arr.Count) {\n            throw new ArgumentOutOfRangeException();\n       \
    \ }\n        long max = 0;\n        List<long> result = new List<long>();\n  \
    \      long cur = 0;\n        foreach (long i in arr) {\n            if (cur <\
    \ i) {\n                max = i;\n                cur = i;\n            }\n  \
    \          if (cur > k) {\n                break;\n            }\n        }\n\
    \        result.Add(max);\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a843006ba934dd49a7fd8025fb709cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1a843006ba934dd49a7fd8025fb709cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        foreach (long i in\
    \ arr) {\n            if (max < i) {\n                max = i;\n             \
    \   maxIndex = i;\n            }\n        }\n        long maxValue = max;\n  \
    \      long maxIndex = maxIndex;\n        long maxIndex2 = maxIndex;\n       \
    \ long maxIndex3 = maxIndex;\n        long maxIndex4 = maxIndex;\n        long\
    \ maxIndex5 = maxIndex;\n        long maxIndex6 = maxIndex;\n        long maxIndex7\
    \ = maxIndex;\n        long maxIndex8 = maxIndex;\n        long maxIndex9 = maxIndex;\n\
    \        long maxIndex10 = maxIndex;\n        long maxIndex11 = maxIndex;\n  \
    \      long maxIndex12 = maxIndex;\n        long maxIndex13 = maxIndex;\n    \
    \    long maxIndex14 = maxIndex;\n        long maxIndex15 = maxIndex;\n      \
    \  long maxIndex16 = maxIndex;\n        long maxIndex17 = maxIndex;\n        long\
    \ maxIndex18 = maxIndex;\n        long maxIndex19 = maxIndex;\n        long maxIndex20\
    \ = maxIndex;\n        long maxIndex21 = maxIndex;\n        long maxIndex22 =\
    \ maxIndex;\n        long maxIndex23 = maxIndex;\n        long maxIndex24 = maxIndex;\n\
    \        long maxIndex25 = maxIndex;\n        long maxIndex26 = maxIndex;\n  \
    \      long maxIndex27 = maxIndex;\n        long maxIndex28 = maxIndex;\n    \
    \    long maxIndex29 = maxIndex;\n        long maxIndex30 = maxIndex;\n      \
    \  long maxIndex31 = maxIndex;\n        long maxIndex32 = maxIndex;\n        long\
    \ maxIndex33 = maxIndex;\n        long maxIndex34 = maxIndex;\n        long maxIndex35\
    \ = maxIndex;\n        long maxIndex36 = maxIndex;\n        long maxIndex37 =\
    \ maxIndex;\n        long maxIndex38 = maxIndex;\n        long maxIndex39 = maxIndex;\n\
    \        long maxIndex40 = maxIndex;\n        long maxIndex41 = maxIndex;\n  \
    \      long maxIndex42 = maxIndex;\n        long maxIndex43 = maxIndex;\n    \
    \    long maxIndex44 = maxIndex;\n        long maxIndex45 = maxIndex;\n      \
    \  long maxIndex46 = maxIndex;\n        long maxIndex47 = maxIndex;\n        long\
    \ maxIndex48 = maxIndex;\n        long maxIndex49 = maxIndex;\n        long maxIndex50\
    \ = maxIndex;\n        long maxIndex51 = maxIndex;\n        long maxIndex52 =\
    \ maxIndex;\n        long maxIndex\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqd0c7kgj.cs(87,22): error CS1002: ; expected

    '
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        if\
    \ (k > max) {\n            k = max;\n        }\n        long cur = 0;\n      \
    \  long curMax = 0;\n        long curMaxCount = 0;\n        foreach (long i in\
    \ arr) {\n            if (i == cur) {\n                curMaxCount++;\n      \
    \          if (curMaxCount > k) {\n                    break;\n              \
    \  }\n            } else {\n                curMaxCount = 0;\n               \
    \ curMax = i;\n                cur = i;\n            }\n        }\n        result.Add(curMax);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09f34f4e26a446a4b301b0b80043b4a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <09f34f4e26a446a4b301b0b80043b4a1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        foreach (long i in\
    \ arr) {\n            if (max < i) {\n                max = i;\n             \
    \   maxIndex = i;\n            }\n        }\n        if (k == maxIndex) {\n  \
    \          result.Add(max);\n            return result;\n        }\n        long\
    \ max1 = maxIndex;\n        long max2 = maxIndex;\n        long max3 = maxIndex;\n\
    \        long max4 = maxIndex;\n        long max5 = maxIndex;\n        long max6\
    \ = maxIndex;\n        long max7 = maxIndex;\n        long max8 = maxIndex;\n\
    \        long max9 = maxIndex;\n        long max10 = maxIndex;\n        long max11\
    \ = maxIndex;\n        long max12 = maxIndex;\n        long max13 = maxIndex;\n\
    \        long max14 = maxIndex;\n        long max15 = maxIndex;\n        long\
    \ max16 = maxIndex;\n        long max17 = maxIndex;\n        long max18 = maxIndex;\n\
    \        long max19 = maxIndex;\n        long max20 = maxIndex;\n        long\
    \ max21 = maxIndex;\n        long max22 = maxIndex;\n        long max23 = maxIndex;\n\
    \        long max24 = maxIndex;\n        long max25 = maxIndex;\n        long\
    \ max26 = maxIndex;\n        long max27 = maxIndex;\n        long max28 = maxIndex;\n\
    \        long max29 = maxIndex;\n        long max30 = maxIndex;\n        long\
    \ max31 = maxIndex;\n        long max32 = maxIndex;\n        long max33 = maxIndex;\n\
    \        long max34 = maxIndex;\n        long max35 = maxIndex;\n        long\
    \ max36 = maxIndex;\n        long max37 = maxIndex;\n        long max38 = maxIndex;\n\
    \        long max39 = maxIndex;\n        long max40 = maxIndex;\n        long\
    \ max41 = maxIndex;\n        long max42 = maxIndex;\n        long max43 = maxIndex;\n\
    \        long max44 = maxIndex;\n        long max45 = maxIndex;\n        long\
    \ max46 = maxIndex;\n        long max47 = maxIndex;\n        long max48 = maxIndex;\n\
    \        long max49 = maxIndex;\n        long max50 = maxIndex;\n        long\
    \ max51 = maxIndex;\n        long max52 = maxIndex;\n        long max53 = maxIndex;\n\
    \        long max54 = maxIndex;\n        long max55 = maxIndex;\n        long\
    \ max56 = maxIndex;\n        long max57 = maxIndex;\n        long max58 = max\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfst9q5_o.cs(95,25): error CS1002: ; expected

    '
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n          \
    \  throw new ArgumentOutOfRangeException(\"k\");\n        }\n        List<long>\
    \ result = new List<long>();\n        long max = 0;\n        long cur = 0;\n \
    \       foreach (long i in arr) {\n            if (max < i) {\n              \
    \  max = i;\n                cur = i;\n            }\n            if (cur > k)\
    \ {\n                break;\n            }\n            result.Add(cur);\n   \
    \         cur++;\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61608716e5e457fab61ea11a592e8f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a61608716e5e457fab61ea11a592e8f0>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = arr[0];\n\
    \        foreach (long i in arr) {\n            if (i > maxValue) {\n        \
    \        maxValue = i;\n                maxIndex = i;\n            }\n       \
    \     if (i == maxValue) {\n                maxIndex++;\n            }\n     \
    \   }\n        long maxCount = 0;\n        long maxCountIndex = 0;\n        long\
    \ maxCountValue = arr[0];\n        foreach (long i in arr) {\n            if (i\
    \ == maxValue) {\n                maxCount++;\n            }\n            if (i\
    \ == maxCountValue) {\n                maxCountIndex++;\n            }\n     \
    \   }\n        long maxCountIndex2 = maxCountIndex;\n        long maxCountValue2\
    \ = maxCountValue;\n        long maxCountIndex3 = maxCountIndex2;\n        long\
    \ maxCountValue3 = maxCountValue2;\n        long maxCountIndex4 = maxCountIndex3;\n\
    \        long maxCountValue4 = maxCountValue3;\n        long maxCountIndex5 =\
    \ maxCountIndex4;\n        long maxCountValue5 = maxCountValue4;\n        long\
    \ maxCountIndex6 = maxCountIndex5;\n        long maxCountValue6 = maxCountValue5;\n\
    \        long maxCountIndex7 = maxCountIndex6;\n        long maxCountValue7 =\
    \ maxCountValue6;\n        long maxCountIndex8 = maxCountIndex7;\n        long\
    \ maxCountValue8 = maxCountValue7;\n        long maxCountIndex9 = maxCountIndex8;\n\
    \        long maxCountValue9 = maxCountValue8;\n        long maxCountIndex10 =\
    \ maxCountIndex9;\n        long maxCountValue10 = maxCountValue9;\n        long\
    \ maxCountIndex11 = maxCountIndex10;\n        long maxCountValue11 = maxCountValue10;\n\
    \        long maxCountIndex12 = maxCountIndex11;\n        long maxCountValue12\
    \ = maxCountValue11;\n        long maxCountIndex13 = maxCountIndex12;\n      \
    \  long maxCountValue13 = maxCountValue12;\n        long maxCountIndex14 = maxCountIndex13;\n\
    \        long maxCountValue14 = maxCountValue13;\n        long maxCountIndex15\
    \ = maxCountIndex14;\n        long maxCountValue15 = maxCountValue14;\n      \
    \  long maxCountIndex16 = maxCountIndex15;\n        long maxCountValue16 = maxCountValue15;\n\
    \        long maxCountIndex17 = maxCountIndex16;\n        long maxCountValue17\
    \ = maxCountValue16;\n        long maxCountIndex18 = maxCountIndex17;\n      \
    \  long maxCountValue18 = maxCountValue17;\n        long maxCountIndex19\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoh8e45jg.cs(83,29): error CS1002: ; expected

    '
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (i > max) {\n                max = i;\n            }\n        }\n        if\
    \ (k > max) {\n            k = max;\n        }\n        long maxIndex = 0;\n \
    \       long maxValue = k;\n        long maxCount = 0;\n        foreach (long\
    \ i in arr) {\n            if (i == maxValue) {\n                maxCount++;\n\
    \            }\n            if (maxCount > k) {\n                break;\n    \
    \        }\n            if (i == max) {\n                maxIndex = i;\n     \
    \       }\n        }\n        result.Add(maxIndex);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f5bc07957744d4fac4627e149626fbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9f5bc07957744d4fac4627e149626fbd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = arr.Max();\n        long min = arr.Min();\n        long mid\
    \ = max / 2;\n        long mid2 = min / 2;\n        long mid3 = mid / 3;\n   \
    \     long mid4 = mid3 / 4;\n        long mid5 = mid4 / 5;\n        long mid6\
    \ = mid5 / 6;\n        long mid7 = mid6 / 7;\n        long mid8 = mid7 / 8;\n\
    \        long mid9 = mid8 / 9;\n        long mid10 = mid9 / 10;\n        long\
    \ mid11 = mid10 / 11;\n        long mid12 = mid11 / 12;\n        long mid13 =\
    \ mid12 / 13;\n        long mid14 = mid13 / 14;\n        long mid15 = mid14 /\
    \ 15;\n        long mid16 = mid15 / 16;\n        long mid17 = mid16 / 17;\n  \
    \      long mid18 = mid17 / 18;\n        long mid19 = mid18 / 19;\n        long\
    \ mid20 = mid19 / 20;\n        long mid21 = mid20 / 21;\n        long mid22 =\
    \ mid21 / 22;\n        long mid23 = mid22 / 23;\n        long mid24 = mid23 /\
    \ 24;\n        long mid25 = mid24 / 25;\n        long mid26 = mid25 / 26;\n  \
    \      long mid27 = mid26 / 27;\n        long mid28 = mid27 / 28;\n        long\
    \ mid29 = mid28 / 29;\n        long mid30 = mid29 / 30;\n        long mid31 =\
    \ mid30 / 31;\n        long mid32 = mid31 / 32;\n        long mid33 = mid32 /\
    \ 33;\n        long mid34 = mid33 / 34;\n        long mid35 = mid34 / 35;\n  \
    \      long mid36 = mid35 / 36;\n        long mid37 = mid36 / 37;\n        long\
    \ mid38 = mid37 / 38;\n        long mid39 = mid38 / 39;\n        long mid40 =\
    \ mid39 / 40;\n        long mid41 = mid40 / 41;\n        long mid42 = mid41 /\
    \ 42;\n        long mid43 = mid42 / 43;\n        long mid44 = mid43 / 44;\n  \
    \      long mid45 = mid44 / 45;\n        long mid46 = mid45 / 46;\n        long\
    \ mid47 = mid46 / 47;\n        long mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuj_m7f0w.cs(75,17): error CS1002: ; expected

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        long maxValue = 0;\n\
    \        foreach (long i in arr) {\n            if (i > max) {\n             \
    \   max = i;\n                maxIndex = i;\n                maxValue = i;\n \
    \           }\n            if (i == max) {\n                maxValue = Math.Max(maxValue,\
    \ i);\n            }\n        }\n        long maxIndex = maxIndex - max;\n   \
    \     if (maxIndex < 0) {\n            maxIndex = 0;\n        }\n        long\
    \ maxValue = maxValue - max;\n        if (maxValue < 0) {\n            maxValue\
    \ = 0;\n        }\n        long maxIndex2 = maxIndex + max;\n        if (maxIndex2\
    \ > arr.Count) {\n            maxIndex2 = arr.Count;\n        }\n        long\
    \ maxValue2 = maxValue + max;\n        if (maxValue2 > arr.Count) {\n        \
    \    maxValue2 = arr.Count;\n        }\n        result.Add(max);\n        result.Add(maxIndex);\n\
    \        result.Add(maxValue);\n        result.Add(maxIndex2);\n        result.Add(maxValue2);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplivvmnr0.cs(39,14): error CS0128: A local variable or function named ''maxIndex''
    is already defined in this scope

    /tmp/tmplivvmnr0.cs(43,14): error CS0128: A local variable or function named ''maxValue''
    is already defined in this scope

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        List<long> res = new List<long>();\n        long max = 0;\n        long\
    \ min = arr.Min();\n        long mid = 0;\n        long midMax = 0;\n        long\
    \ midMin = 0;\n        long midMid = 0;\n        long midMidMax = 0;\n       \
    \ long midMidMin = 0;\n        long midMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin\
    \ = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax = 0;\n     \
    \   long midMidMidMin = 0;\n        long midMidMidMid = 0;\n        long midMidMidMax\
    \ = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid = 0;\n     \
    \   long midMidMidMax = 0;\n        long midMidMidMin = 0;\n        long midMidMidMid\
    \ = 0;\n        long midMidMidMax = 0;\n        long midMidMidMin = 0;\n     \
    \   long midMidMidMid = 0;\n        long mid\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L, (long)5L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L, (long)-4L, (long)4L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L,\
    \ (long)1L})), (1L)).Equals((new List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L,\
    \ (long)2L, (long)-3L})), (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L,\
    \ (long)123L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L,\
    \ (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new\
    \ long[]{(long)0L, (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L,\
    \ (long)0L})), (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L,\
    \ (long)0L, (long)0L, (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp85nyzv0l.cs(90,17): error CS1002: ; expected

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (arr.Count < k) {\n          \
    \  return arr;\n        }\n        List<long> result = new List<long>();\n   \
    \     long maxValue = arr[0];\n        long maxIndex = -1;\n        for (int i\
    \ = 1; i < arr.Count; i++) {\n            if (arr[i] > maxValue) {\n         \
    \       maxValue = arr[i];\n                maxIndex = i;\n            }\n   \
    \     }\n        result.Add(maxValue);\n        if (maxIndex < k) {\n        \
    \    List<long> rest = Maximum(arr.Skip(maxIndex + 1).ToList(), k - maxIndex);\n\
    \            foreach (long num in rest) {\n                result.Add(num);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpl7k3ob6m.cs(39,48): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793573
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long cur = 0;\n        foreach (long i in arr)\
    \ {\n            if (i == cur) {\n                cur++;\n            } else {\n\
    \                if (cur > max) {\n                    max = cur;\n          \
    \      }\n                cur = i;\n            }\n        }\n        if (cur\
    \ > max) {\n            max = cur;\n        }\n        if (max > k) {\n      \
    \      max = k;\n        }\n        result.Add(max);\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dcf3f03bb2148e78fb1629490672f9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0dcf3f03bb2148e78fb1629490672f9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659793574
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        if (k > arr.Count) return new List<long>();\n\
    \        long max = 0;\n        List<long> result = new List<long>();\n      \
    \  foreach (long i in arr) {\n            if (i > max) {\n                max\
    \ = i;\n            }\n        }\n        long start = 0;\n        long end =\
    \ arr.Count - 1;\n        while (start <= end) {\n            long mid = (start\
    \ + end) / 2;\n            if (arr[mid] > max) {\n                end = mid -\
    \ 1;\n            } else {\n                start = mid + 1;\n            }\n\
    \        }\n        if (start <= k) {\n            while (start <= end) {\n  \
    \              result.Add(arr[start++]);\n            }\n        } else {\n  \
    \          while (start <= end) {\n                result.Add(arr[end--]);\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3n1uczpr.cs(37,21): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3n1uczpr.cs(45,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp3n1uczpr.cs(49,32): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> res = new List<long>();\n\
    \        long max = 0;\n        long min = 0;\n        long sum = 0;\n       \
    \ long count = 0;\n        foreach (long i in arr) {\n            sum += i;\n\
    \            count++;\n            if (sum > max) {\n                max = sum;\n\
    \            }\n            if (sum < min) {\n                min = sum;\n   \
    \         }\n        }\n        if (count > k) {\n            k = count;\n   \
    \     }\n        if (k == 1) {\n            res.Add(arr[0]);\n            return\
    \ res;\n        }\n        long mid = min + (k - 1) / (count - 1);\n        long\
    \ mid2 = mid + (k - 1) % (count - 1);\n        long mid3 = mid2 + (k - 1) % (count\
    \ - 1);\n        long mid4 = mid3 + (k - 1) % (count - 1);\n        long mid5\
    \ = mid4 + (k - 1) % (count - 1);\n        long mid6 = mid5 + (k - 1) % (count\
    \ - 1);\n        long mid7 = mid6 + (k - 1) % (count - 1);\n        long mid8\
    \ = mid7 + (k - 1) % (count - 1);\n        long mid9 = mid8 + (k - 1) % (count\
    \ - 1);\n        long mid10 = mid9 + (k - 1) % (count - 1);\n        long mid11\
    \ = mid10 + (k - 1) % (count - 1);\n        long mid12 = mid11 + (k - 1) % (count\
    \ - 1);\n        long mid13 = mid12 + (k - 1) % (count - 1);\n        long mid14\
    \ = mid13 + (k - 1) % (count - 1);\n        long mid15 = mid14 + (k - 1) % (count\
    \ - 1);\n        long mid16 = mid15 + (k - 1) % (count - 1);\n        long mid17\
    \ = mid16 + (k - 1) % (count - 1);\n        long mid18 = mid17 + (k - 1) % (count\
    \ - 1);\n        long mid19 = mid18 + (k - 1) % (count - 1);\n        long mid20\
    \ = mid19 + (k - 1) % (count - 1);\n        long mid21 = mid20 + (k - 1) % (count\
    \ - 1);\n        long mid22 = mid21 + (k - 1) % (count - 1);\n        long mid23\
    \ = mid22 + (k - 1) % (count - 1);\n        long mid24 = mid23 + (k - 1) % (count\
    \ - 1);\n        long mid25 = mid24 + (k - 1) % (count - 1);\n        long mid26\
    \ = mid25 + (k - 1) % (count - 1);\n        long mid27 = mid26 + (k - \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn1ipuj0i.cs(73,34): error CS1525: Invalid expression term ''}''

    /tmp/tmpn1ipuj0i.cs(73,34): error CS1026: ) expected

    /tmp/tmpn1ipuj0i.cs(73,34): error CS1002: ; expected

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        List<long> result = new List<long>();\n\
    \        long max = 0;\n        long maxIndex = 0;\n        foreach (long i in\
    \ arr) {\n            if (max < i) {\n                max = i;\n             \
    \   maxIndex = i;\n            }\n        }\n        if (maxIndex < k) {\n   \
    \         k = maxIndex;\n        }\n        long maxValue = max;\n        long\
    \ maxIndexValue = maxIndex;\n        long maxIndexValue2 = maxIndex;\n       \
    \ long maxIndexValue3 = maxIndex;\n        long maxIndexValue4 = maxIndex;\n \
    \       long maxIndexValue5 = maxIndex;\n        long maxIndexValue6 = maxIndex;\n\
    \        long maxIndexValue7 = maxIndex;\n        long maxIndexValue8 = maxIndex;\n\
    \        long maxIndexValue9 = maxIndex;\n        long maxIndexValue10 = maxIndex;\n\
    \        long maxIndexValue11 = maxIndex;\n        long maxIndexValue12 = maxIndex;\n\
    \        long maxIndexValue13 = maxIndex;\n        long maxIndexValue14 = maxIndex;\n\
    \        long maxIndexValue15 = maxIndex;\n        long maxIndexValue16 = maxIndex;\n\
    \        long maxIndexValue17 = maxIndex;\n        long maxIndexValue18 = maxIndex;\n\
    \        long maxIndexValue19 = maxIndex;\n        long maxIndexValue20 = maxIndex;\n\
    \        long maxIndexValue21 = maxIndex;\n        long maxIndexValue22 = maxIndex;\n\
    \        long maxIndexValue23 = maxIndex;\n        long maxIndexValue24 = maxIndex;\n\
    \        long maxIndexValue25 = maxIndex;\n        long maxIndexValue26 = maxIndex;\n\
    \        long maxIndexValue27 = maxIndex;\n        long maxIndexValue28 = maxIndex;\n\
    \        long maxIndexValue29 = maxIndex;\n        long maxIndexValue30 = maxIndex;\n\
    \        long maxIndexValue31 = maxIndex;\n        long maxIndexValue32 = maxIndex;\n\
    \        long maxIndexValue33 = maxIndex;\n        long maxIndexValue34 = maxIndex;\n\
    \        long maxIndexValue35 = maxIndex;\n        long maxIndexValue36 = maxIndex;\n\
    \        long maxIndexValue37 = maxIndex;\n        long maxIndexValue38 = maxIndex;\n\
    \        long maxIndexValue39 = maxIndex;\n        long maxIndexValue40 = maxIndex;\n\
    \        long maxIndexValue41 = maxIndex;\n        long maxIndexValue42 = maxIndex;\n\
    \        long maxIndexValue43 = maxIndex;\n        long maxIndexValue44 = maxIndex;\n\
    \        long maxIndexValue45 = maxIndex;\n        long maxIndexValue46 = max\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-3L, (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new\
    \ long[]{(long)-4L, (long)-3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)2L, (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)123L, (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})),\
    \ (3L)).Equals((new List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-123L, (long)20L, (long)0L,\
    \ (long)1L, (long)2L, (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L,\
    \ (long)1L, (long)2L, (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)5L, (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})),\
    \ (7L)).Equals((new List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L,\
    \ (long)3L, (long)5L, (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)-1L, (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new\
    \ List<long>(new long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new\
    \ List<long>(new long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)4L, (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L,\
    \ (long)4L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L,\
    \ (long)10L})), (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)-23L, (long)243L, (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpui7v6n14.cs(83,35): error CS1002: ; expected

    '
  timestamp: 1659793573
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a list arr of integers and a positive integer k,\
    \ return a sorted list \n    // of length k with the maximum k numbers in arr.\n\
    \    // Example 1:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)-4L,\
    \ (long)5L})), (3L))\n    // (new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))\n    // Example 2:\n    // >>> Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L))\n    // (new List<long>(new long[]{(long)4L, (long)4L}))\n\
    \    // Example 3:\n    // >>> Maximum((new List<long>(new long[]{(long)-3L, (long)2L,\
    \ (long)1L, (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L))\n    // (new List<long>(new\
    \ long[]{(long)2L}))\n    // Note:\n    // 1. The length of the list will be in\
    \ the range of [1, 1000].\n    // 2. The elements in the list will be in the range\
    \ of [-1000, 1000].\n    // 3. 0 <= k <= len(arr)\n    public static List<long>\
    \ Maximum(List<long> arr, long k) {\n        long max = 0;\n        List<long>\
    \ result = new List<long>();\n        foreach (long i in arr) {\n            if\
    \ (max < i) {\n                max = i;\n            }\n        }\n        long\
    \ temp = 0;\n        long temp2 = 0;\n        long temp3 = 0;\n        long temp4\
    \ = 0;\n        long temp5 = 0;\n        long temp6 = 0;\n        long temp7 =\
    \ 0;\n        long temp8 = 0;\n        long temp9 = 0;\n        long temp10 =\
    \ 0;\n        long temp11 = 0;\n        long temp12 = 0;\n        long temp13\
    \ = 0;\n        long temp14 = 0;\n        long temp15 = 0;\n        long temp16\
    \ = 0;\n        long temp17 = 0;\n        long temp18 = 0;\n        long temp19\
    \ = 0;\n        long temp20 = 0;\n        long temp21 = 0;\n        long temp22\
    \ = 0;\n        long temp23 = 0;\n        long temp24 = 0;\n        long temp25\
    \ = 0;\n        long temp26 = 0;\n        long temp27 = 0;\n        long temp28\
    \ = 0;\n        long temp29 = 0;\n        long temp30 = 0;\n        long temp31\
    \ = 0;\n        long temp32 = 0;\n        long temp33 = 0;\n        long temp34\
    \ = 0;\n        long temp35 = 0;\n        long temp36 = 0;\n        long temp37\
    \ = 0;\n        long temp38 = 0;\n        long temp39 = 0;\n        long temp40\
    \ = 0;\n        long temp41 = 0;\n        long temp42 = 0;\n        long temp43\
    \ = 0;\n        long temp44 = 0;\n        long temp45 = 0;\n        long temp46\
    \ = 0;\n        long temp47 = 0;\n        long temp48 = 0;\n        long temp49\
    \ = 0;\n        long temp50 = 0;\n        long temp51 = 0;\n        long temp52\
    \ = 0;\n        long temp53 = 0;\n        long temp54 = 0;\n        long temp55\
    \ = 0;\n        long temp56 = 0;\n        long temp57 = 0;\n        long temp58\
    \ = 0;\n        long temp59 = 0;\n        long temp60 = 0;\n        long temp61\
    \ = 0;\n        long temp62 = 0;\n        long temp63 = 0;\n        long temp64\
    \ = 0;\n        long temp65 = 0;\n        long temp66 = 0;\n        long temp67\
    \ = 0;\n        long temp68 = 0;\n        long temp69 = 0;\n        long temp70\
    \ = 0;\n        long temp71 = 0;\n        long temp72 = 0;\n        long temp73\
    \ = 0;\n        long temp74 = 0;\n        long temp75 = 0;\n        long temp76\
    \ = 0;\n        long temp77 = 0;\n        long temp78 = 0;\n        long temp79\
    \ = 0;\n        long temp80 = 0;\n        long \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L,\
    \ (long)-4L, (long)5L})), (3L)).Equals((new List<long>(new long[]{(long)-4L, (long)-3L,\
    \ (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L, (long)4L})), (2L)).Equals((new List<long>(new long[]{(long)4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-3L, (long)2L, (long)1L,\
    \ (long)2L, (long)-1L, (long)-2L, (long)1L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)2L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)123L,\
    \ (long)-123L, (long)20L, (long)0L, (long)1L, (long)2L, (long)-3L})), (3L)).Equals((new\
    \ List<long>(new long[]{(long)2L, (long)20L, (long)123L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)-123L, (long)20L, (long)0L, (long)1L, (long)2L,\
    \ (long)-3L})), (4L)).Equals((new List<long>(new long[]{(long)0L, (long)1L, (long)2L,\
    \ (long)20L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)5L,\
    \ (long)15L, (long)0L, (long)3L, (long)-13L, (long)-8L, (long)0L})), (7L)).Equals((new\
    \ List<long>(new long[]{(long)-13L, (long)-8L, (long)0L, (long)0L, (long)3L, (long)5L,\
    \ (long)15L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)-1L,\
    \ (long)0L, (long)2L, (long)5L, (long)3L, (long)-10L})), (2L)).Equals((new List<long>(new\
    \ long[]{(long)3L, (long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new\
    \ long[]{(long)1L, (long)0L, (long)5L, (long)-7L})), (1L)).Equals((new List<long>(new\
    \ long[]{(long)5L}))));\n    Debug.Assert(Maximum((new List<long>(new long[]{(long)4L,\
    \ (long)-4L})), (2L)).Equals((new List<long>(new long[]{(long)-4L, (long)4L}))));\n\
    \    Debug.Assert(Maximum((new List<long>(new long[]{(long)-10L, (long)10L})),\
    \ (2L)).Equals((new List<long>(new long[]{(long)-10L, (long)10L}))));\n    Debug.Assert(Maximum((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)-23L, (long)243L,\
    \ (long)-400L, (long)0L})), (0L)).Equals((new List<long>())));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbpep6_8f.cs(112,13): error CS1001: Identifier expected

    /tmp/tmpbpep6_8f.cs(112,13): error CS1002: ; expected

    '
  timestamp: 1659793571
