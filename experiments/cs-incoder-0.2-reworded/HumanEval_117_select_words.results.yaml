language: cs
name: HumanEval_117_select_words
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        long\
    \ count = 0;\n        foreach (string word in s.Split(' '))\n        {\n     \
    \       count += word.Length;\n            if (count >= n)\n            {\n  \
    \              result.Add(word);\n                count -= word.Length;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef3bfc25e0be45d7b944118f1029893d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ef3bfc25e0be45d7b944118f1029893d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string vowels = \"aeiou\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        string vowelsConsonants = vowels + consonants;\n        string vowelsConsonantsString\
    \ = vowelsConsonants.ToLower();\n        string vowelsConsonantsStringLength =\
    \ vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.Length;\n        string vowelsConsonantsStringLength\
    \ = vowelsConsonantsString.\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnvw1j4c3.cs(57,70): error CS1001: Identifier expected

    /tmp/tmpnvw1j4c3.cs(57,70): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = true;\n        long count = 0;\n      \
    \  foreach (char c in word) {\n            if (char.IsLetter(c)) {\n         \
    \       isConsonant = false;\n            }\n            if (isConsonant) {\n\
    \                count++;\n            }\n        }\n        if (count != n) {\n\
    \            return result;\n        }\n        foreach (char c in lastWord) {\n\
    \            if (char.IsLetter(c)) {\n                isConsonant = false;\n \
    \           }\n            if (isConsonant) {\n                count--;\n    \
    \        }\n        }\n        if (count != 0) {\n            return result;\n\
    \        }\n        result.Add(word);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9c177daa8494175babb393a781d438c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d9c177daa8494175babb393a781d438c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = \"\";\n        string lastWord = \"\";\n        bool isConsonant = false;\n\
    \        long count = 1;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                if (word.Length == n) {\n   \
    \                 result.Add(word);\n                    isConsonant = true;\n\
    \                    count = 1;\n                    word = \"\";\n          \
    \      } else {\n                    isConsonant = false;\n                  \
    \  count++;\n                }\n            } else {\n                if (isConsonant)\
    \ {\n                    lastWord = word;\n                    word = \"\";\n\
    \                    isConsonant = false;\n                    count = 1;\n  \
    \              }\n            }\n        }\n        if (lastWord.Length > 0) {\n\
    \            result.Add(lastWord);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd1f4ff8bf84ae69e0c3fdb2f031b39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fd1f4ff8bf84ae69e0c3fdb2f031b39>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        char[] chars\
    \ = s.ToCharArray();\n        HashSet<string> words = new HashSet<string>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                string word = s.Substring(0, s.IndexOf(c));\n           \
    \     words.Add(word);\n                s = s.Substring(s.IndexOf(c) + 1);\n \
    \           }\n        }\n        foreach (string word in words) {\n         \
    \   int count = 0;\n            foreach (char c in word) {\n                if\
    \ (char.IsLetterOrDigit(c)) {\n                    count++;\n                }\n\
    \            }\n            if (count == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c362b02cf7934ed39b5c1f54630aa091>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c362b02cf7934ed39b5c1f54630aa091>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        long count = 0;\n\
    \        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n      \
    \          count++;\n            }\n        }\n        if (count != n) {\n   \
    \         return result;\n        }\n        string word = \"\";\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n            }\n        }\n        List<string> words = SelectWords(word,\
    \ n - 1);\n        foreach (string word in words) {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp12lmoz3r.cs(46,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ long counter = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                counter++;\n            }\n        }\n        if (counter\
    \ == n) {\n            result.Add(s);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c03448a71a864eec89544083a5ad7e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c03448a71a864eec89544083a5ad7e04>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        bool isWord = false;\n      \
    \  foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n        \
    \        word += c;\n                isWord = true;\n                count++;\n\
    \            }\n            if (count == n) {\n                result.Add(word);\n\
    \                isWord = false;\n                count = 0;\n               \
    \ word = \"\";\n            }\n        }\n        if (isWord) {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62417769daed45d49d9e364bf7225ff6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <62417769daed45d49d9e364bf7225ff6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   bool isWord = false;\n        long count = 1;\n        foreach (char c in\
    \ s) {\n            if (char.IsLetter(c)) {\n                isWord = true;\n\
    \                word += c;\n            }\n            if (isWord) {\n      \
    \          count++;\n                if (count == n) {\n                    result.Add(word);\n\
    \                    isWord = false;\n                    word = string.Empty;\n\
    \                    count = 1;\n                }\n            }\n          \
    \  if (char.IsWhiteSpace(c)) {\n                isWord = false;\n            }\n\
    \        }\n        if (word != string.Empty) {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d82d00ef0bf47aba24e4ac2c71313ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5d82d00ef0bf47aba24e4ac2c71313ee>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n        }\n        if (count == n) {\n           \
    \ result.Add(word);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b8978d0f4b4485aa0b100d094da3a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b8978d0f4b4485aa0b100d094da3a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        long count = 0;\n        foreach (char c in s) {\n  \
    \          if (char.IsLetterOrDigit(c)) {\n                if (count == n)\n \
    \                   result.Add(word);\n                word = word + c;\n    \
    \            count++;\n            }\n        }\n        if (count == n)\n   \
    \         result.Add(word);\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6635edd6e02b4c5e92fee48928bda992>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6635edd6e02b4c5e92fee48928bda992>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        char[]\
    \ sortedChars = new char[chars.Length];\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            sortedChars[i] = chars[i];\n        }\n        Array.Sort(sortedChars);\n\
    \        List<string> words = new List<string>();\n        string word = \"\"\
    ;\n        bool isWord = false;\n        long count = 0;\n        for (int i =\
    \ 0; i < sortedChars.Length; i++) {\n            if (sortedChars[i] == 'a') {\n\
    \                isWord = true;\n                count++;\n            }\n   \
    \         if (isWord) {\n                word += sortedChars[i];\n           \
    \     if (count == n) {\n                    words.Add(word);\n              \
    \      isWord = false;\n                    count = 0;\n                    word\
    \ = \"\";\n                }\n            }\n        }\n        return words;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f31d30e5e666484287dbf880b142b7b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f31d30e5e666484287dbf880b142b7b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        Array.Sort(chars);\n        string word = \"\";\n\
    \        long count = 0;\n        foreach (char c in chars) {\n            if\
    \ (chars.Contains(c)) {\n                count++;\n                if (count ==\
    \ n) {\n                    result.Add(word);\n                    word = \"\"\
    ;\n                    count = 0;\n                }\n                word +=\
    \ c;\n            }\n        }\n        if (count > 0) {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77857aee8aed4f8fb80950cf3f8f799a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77857aee8aed4f8fb80950cf3f8f799a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        bool isConsonant = false;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                isConsonant\
    \ = true;\n                word += c;\n                count++;\n            }\n\
    \            if (count == n) {\n                if (isConsonant) {\n         \
    \           result.Add(word);\n                    isConsonant = false;\n    \
    \                word = string.Empty;\n                    count = 0;\n      \
    \          }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50e4cb52ad624b71941937995fa44d13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <50e4cb52ad624b71941937995fa44d13>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) return result;\n        string word = \"\";\n    \
    \    bool isWord = false;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word += c;\n                isWord = true;\n            }\n\
    \            if (isWord) {\n                if (word.Length == n) result.Add(word);\n\
    \                word = \"\";\n                isWord = false;\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <164ca92ea9dd4715b2cfad68942ecd17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <164ca92ea9dd4715b2cfad68942ecd17>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = \"\";\n    \
    \    string lastWord = \"\";\n        bool isLastWord = false;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n                if (word.Length == n) {\n                    result.Add(word);\n\
    \                    word = \"\";\n                    isLastWord = true;\n  \
    \              }\n            } else {\n                isLastWord = false;\n\
    \            }\n            if (isLastWord) {\n                lastWord = word;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a67406bec2e481195c8e2e529e0d829>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6a67406bec2e481195c8e2e529e0d829>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        int[] count = new int[26];\n      \
    \  for (int i = 0; i < chars.Length; i++) {\n            count[chars[i] - 'a']++;\n\
    \        }\n        Array.Sort(count);\n        long total = 0;\n        for (int\
    \ i = 0; i < count.Length; i++) {\n            total += count[i];\n          \
    \  if (total >= n) {\n                result.Add(new string(chars, i, 1));\n \
    \               total -= count[i];\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64\
    \ n) [0x00031] in <428eede6719b474c87e6a84a9e4a8519>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <428eede6719b474c87e6a84a9e4a8519>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00031]\
    \ in <428eede6719b474c87e6a84a9e4a8519>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <428eede6719b474c87e6a84a9e4a8519>:0 \n"
  stdout: ''
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        string word = s.Substring(0, s.Length -\
    \ 1);\n        string lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant\
    \ = false;\n        bool isLastConsonant = false;\n        bool isLastConsonantLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWord = false;\n        bool\
    \ isLastConsonantLastWordLastWordLastWord = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLast\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprre72iag.cs(53,41): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        string lastWord = string.Empty;\n        string lastWord2 = string.Empty;\n\
    \        string lastWord3 = string.Empty;\n        string lastWord4 = string.Empty;\n\
    \        string lastWord5 = string.Empty;\n        string lastWord6 = string.Empty;\n\
    \        string lastWord7 = string.Empty;\n        string lastWord8 = string.Empty;\n\
    \        string lastWord9 = string.Empty;\n        string lastWord10 = string.Empty;\n\
    \        string lastWord11 = string.Empty;\n        string lastWord12 = string.Empty;\n\
    \        string lastWord13 = string.Empty;\n        string lastWord14 = string.Empty;\n\
    \        string lastWord15 = string.Empty;\n        string lastWord16 = string.Empty;\n\
    \        string lastWord17 = string.Empty;\n        string lastWord18 = string.Empty;\n\
    \        string lastWord19 = string.Empty;\n        string lastWord20 = string.Empty;\n\
    \        string lastWord21 = string.Empty;\n        string lastWord22 = string.Empty;\n\
    \        string lastWord23 = string.Empty;\n        string lastWord24 = string.Empty;\n\
    \        string lastWord25 = string.Empty;\n        string lastWord26 = string.Empty;\n\
    \        string lastWord27 = string.Empty;\n        string lastWord28 = string.Empty;\n\
    \        string lastWord29 = string.Empty;\n        string lastWord30 = string.Empty;\n\
    \        string lastWord31 = string.Empty;\n        string lastWord32 = string.Empty;\n\
    \        string lastWord33 = string.Empty;\n        string lastWord34 = string.Empty;\n\
    \        string lastWord35 = string.Empty;\n        string lastWord36 = string.Empty;\n\
    \        string lastWord37 = string.Empty;\n        string lastWord38 = string.Empty;\n\
    \        string lastWord39 = string.Empty;\n        string lastWord40 = string.Empty;\n\
    \        string lastWord41 = string.Empty;\n        string lastWord42 = string.Empty;\n\
    \        string lastWord43 = string.Empty;\n        string lastWord44 = string.Empty;\n\
    \        string lastWord45 = string.Empty;\n        string lastWord46 = string.Empty;\n\
    \        string lastWord47 = string.Empty;\n        string lastWord48 = string.Empty;\n\
    \        string lastWord49 = string.Empty;\n        string lastWord50 = string.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjgwf_udt.cs(78,36): error CS1001: Identifier expected

    /tmp/tmpjgwf_udt.cs(78,36): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = \"\";\n    \
    \    foreach (char c in s) {\n            if (char.IsLetter(c)) {\n          \
    \      word += c;\n            }\n        }\n        string word2 = \"\";\n  \
    \      long count = 1;\n        foreach (char c in word) {\n            if (char.IsLetter(c))\
    \ {\n                word2 += c;\n                count++;\n            }\n  \
    \      }\n        if (count != n) return result;\n        if (n == 0) return result;\n\
    \        string word3 = \"\";\n        foreach (char c in word2) {\n         \
    \   if (char.IsLetter(c)) {\n                word3 += c;\n            }\n    \
    \    }\n        string word4 = \"\";\n        foreach (char c in word3) {\n  \
    \          if (char.IsLetter(c)) {\n                word4 += c;\n            }\n\
    \        }\n        string word5 = \"\";\n        foreach (char c in word4) {\n\
    \            if (char.IsLetter(c)) {\n                word5 += c;\n          \
    \  }\n        }\n        string word6 = \"\";\n        foreach (char c in word5)\
    \ {\n            if (char.IsLetter(c)) {\n                word6 += c;\n      \
    \      }\n        }\n        string word7 = \"\";\n        foreach (char c in\
    \ word6) {\n            if (char.IsLetter(c)) {\n                word7 += c;\n\
    \            }\n        }\n        string word8 = \"\";\n        foreach (char\
    \ c in word7) {\n            if (char.IsLetter(c)) {\n                word8 +=\
    \ c;\n            }\n        }\n        string word9 = \"\";\n        foreach\
    \ (char c in word8) {\n            if (char.IsLetter(c)) {\n                word9\
    \ += c;\n            }\n        }\n        string word10 = \"\";\n        foreach\
    \ (char c in word9) {\n            if (char.IsLetter(c)) {\n                word10\
    \ += c;\n            }\n        }\n        string word11 = \"\";\n        foreach\
    \ (char c in word10) {\n            if (char.IsLetter(c)) {\n                word11\
    \ += c;\n            }\n        }\n        string word12 = \"\";\n        foreach\
    \ (char c in word11) {\n            if (char.IsLetter(c)) {\n                word12\
    \ += c;\n            }\n        }\n        string word13 = \"\";\n        foreach\
    \ (char c in word12) {\n            if (char.IsLetter(c)) {\n                word13\
    \ += c;\n            }\n        }\n        string word14 = \"\";\n        foreach\
    \ (char c in word13) {\n            if (char.IsLetter(c)) {\n                word14\
    \ += c;\n            }\n        }\n        string word15 = \"\";\n        foreach\
    \ (char c in word14) {\n            if (char.IsLetter(c)) {\n                word15\
    \ += c;\n            }\n\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnl0yl10y.cs(123,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpnl0yl10y.cs(133,2): error CS1513: } expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        char[] consonants = new[] { 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] vowels = new[] { 'a', 'e', 'i', 'o', 'u' };\n\
    \        char[] vowelsAndConsonants = new[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z' };\n        char[] vowelsAndConsonantsAndSpace = new[] { 'a',\
    \ 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', ' '};\n        char[] vowelsAndConsonantsAndSpaceAndNumbers\
    \ = new[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9' };\n        char[] vowelsAndConsonantsAndSpaceAndNumbersAndSpace\
    \ = new[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', ' '};\n        char[] vowelsAndConsonantsAndSpaceAndNumbersAndSpaceAndNumbers\
    \ = new[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9'\
    \ };\n        char[] vowelsAndConsonantsAndSpaceAndNumbersAndSpaceAndNumbersAndSpace\
    \ = new[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l',\
    \ 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9', '0', '1', '2', '3', '4', '5', '6', '7', '8', '9',\
    \ ' '\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmu5jgzld.cs(39,6): error CS1002: ; expected

    /tmp/tmpmu5jgzld.cs(40,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpmu5jgzld.cs(50,2): error CS1513: } expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        char[]\
    \ charsCopy = chars.ToArray();\n        Array.Sort(charsCopy);\n        char[]\
    \ charsCopy2 = charsCopy.ToArray();\n        Array.Sort(charsCopy2);\n       \
    \ char[] charsCopy3 = charsCopy2.ToArray();\n        Array.Sort(charsCopy3);\n\
    \        char[] charsCopy4 = charsCopy3.ToArray();\n        Array.Sort(charsCopy4);\n\
    \        char[] charsCopy5 = charsCopy4.ToArray();\n        Array.Sort(charsCopy5);\n\
    \        char[] charsCopy6 = charsCopy5.ToArray();\n        Array.Sort(charsCopy6);\n\
    \        char[] charsCopy7 = charsCopy6.ToArray();\n        Array.Sort(charsCopy7);\n\
    \        char[] charsCopy8 = charsCopy7.ToArray();\n        Array.Sort(charsCopy8);\n\
    \        char[] charsCopy9 = charsCopy8.ToArray();\n        Array.Sort(charsCopy9);\n\
    \        char[] charsCopy10 = charsCopy9.ToArray();\n        Array.Sort(charsCopy10);\n\
    \        char[] charsCopy11 = charsCopy10.ToArray();\n        Array.Sort(charsCopy11);\n\
    \        char[] charsCopy12 = charsCopy11.ToArray();\n        Array.Sort(charsCopy12);\n\
    \        char[] charsCopy13 = charsCopy12.ToArray();\n        Array.Sort(charsCopy13);\n\
    \        char[] charsCopy14 = charsCopy13.ToArray();\n        Array.Sort(charsCopy14);\n\
    \        char[] charsCopy15 = charsCopy14.ToArray();\n        Array.Sort(charsCopy15);\n\
    \        char[] charsCopy16 = charsCopy15.ToArray();\n        Array.Sort(charsCopy16);\n\
    \        char[] charsCopy17 = charsCopy16.ToArray();\n        Array.Sort(charsCopy17);\n\
    \        char[] charsCopy18 = charsCopy17.ToArray();\n        Array.Sort(charsCopy18);\n\
    \        char[] charsCopy19 = charsCopy18.ToArray();\n        Array.Sort(charsCopy19);\n\
    \        char[] charsCopy20 = \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0wuveaik.cs(70,29): error CS1525: Invalid expression term ''}''

    /tmp/tmp0wuveaik.cs(70,29): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLower(c)) {\n   \
    \             consonants.Add(c);\n            }\n        }\n        long count\
    \ = 0;\n        foreach (char c in consonants) {\n            count += 1;\n  \
    \      }\n        if (count != n) {\n            return result;\n        }\n \
    \       StringBuilder sb = new StringBuilder();\n        foreach (char c in chars)\
    \ {\n            if (char.IsLower(c)) {\n                sb.Append(c);\n     \
    \       }\n        }\n        string word = sb.ToString();\n        result.Add(word);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4315c20cde3642ae907452c9e2631ac6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4315c20cde3642ae907452c9e2631ac6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        string word = s.Substring(0, s.Length -\
    \ 1);\n        string lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant\
    \ = true;\n        foreach (char c in word) {\n            if (char.IsLower(c))\
    \ {\n                isConsonant = false;\n                break;\n          \
    \  }\n        }\n        if (isConsonant) {\n            string lastWordConsonant\
    \ = lastWord;\n            foreach (char c in lastWord) {\n                if\
    \ (char.IsLower(c)) {\n                    lastWordConsonant += c;\n         \
    \       }\n            }\n            if (lastWordConsonant == lastWord) {\n \
    \               result.Add(word);\n            }\n        }\n        foreach (char\
    \ c in lastWord) {\n            if (char.IsLower(c)) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29a28a31b77d4755bc9f614cc7a32000>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29a28a31b77d4755bc9f614cc7a32000>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) return result;\n        char[] chars = s.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        long count =\
    \ 0;\n        foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n\
    \                word += c;\n                count++;\n            }\n       \
    \     if (count == n) result.Add(word);\n            word = \"\";\n          \
    \  count = 0;\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83e8a17acece4096ab62bc0f705e40c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <83e8a17acece4096ab62bc0f705e40c5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string temp = \"\";\n        long count = 0;\n       \
    \ bool isWord = false;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                isWord = true;\n                word += c;\n            }\n\
    \            if (isWord) {\n                count++;\n                if (count\
    \ == n) {\n                    result.Add(word);\n                    isWord =\
    \ false;\n                    word = \"\";\n                    count = 0;\n \
    \               }\n            }\n        }\n        if (word != \"\") {\n   \
    \         result.Add(word);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <892072908f914cc4bc8266c8572becfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <892072908f914cc4bc8266c8572becfe>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        long\
    \ max = 0;\n        foreach (string word in s.Split(' '))\n        {\n       \
    \     long count = 0;\n            foreach (char c in word)\n            {\n \
    \               if (char.IsLetterOrDigit(c))\n                {\n            \
    \        count++;\n                }\n            }\n            if (count ==\
    \ n)\n            {\n                result.Add(word);\n                max =\
    \ Math.Max(max, count);\n            }\n        }\n        if (max > 0)\n    \
    \    {\n            foreach (string word in result.OrderBy(x => x).Distinct())\n\
    \            {\n                if (word.Length == n)\n                {\n   \
    \                 result.Remove(word);\n                }\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <763b8dc48c6e4957ace815dfecb8f67c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <763b8dc48c6e4957ace815dfecb8f67c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string rest = s.Substring(s.Length -\
    \ 1, s.Length);\n        string lastWord = s.Substring(0, s.Length - 1);\n   \
    \     string lastRest = s.Substring(s.Length - 1, s.Length);\n        string lastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLastRest = s.Substring(s.Length\
    \ - 1, s.Length);\n        string lastLastLastWord = s.Substring(0, s.Length -\
    \ 1);\n        string lastLastLastRest = s.Substring(s.Length - 1, s.Length);\n\
    \        string lastLastLastLastWord = s.Substring(0, s.Length - 1);\n       \
    \ string lastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n       \
    \ string lastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n        string\
    \ lastLastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n        string\
    \ lastLastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n        string\
    \ lastLastLastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n      \
    \  string lastLastLastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n \
    \       string lastLastLastLastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n\
    \        string lastLastLastLastLastLastLastLastWord = s.Substring(0, s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest\
    \ = s.Substring(s.Length - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastRest\
    \ = s.Substring(s.Length - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLast\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3idypdh.cs(55,24): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.Length\
    \ - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnj8rqu9v.cs(63,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1026: ) expected

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        Array.Sort(chars);\n        string word = \"\";\n\
    \        long count = 0;\n        foreach (char c in chars) {\n            if\
    \ (chars.Contains(c)) {\n                count++;\n                if (count ==\
    \ n) {\n                    result.Add(word);\n                    word = \"\"\
    ;\n                    count = 0;\n                }\n                word +=\
    \ c;\n            }\n        }\n        if (count > 0) {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77857aee8aed4f8fb80950cf3f8f799a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <77857aee8aed4f8fb80950cf3f8f799a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ long count = new Regex(@\"[^aeiou]\").Matches(s).Count;\n        if (count >\
    \ n) {\n            return result;\n        }\n        long count2 = new Regex(@\"\
    [^aeiouAEIOU]\").Matches(s).Count;\n        if (count2 > n) {\n            return\
    \ result;\n        }\n        long count3 = new Regex(@\"[^aeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count3 > n) {\n            return result;\n \
    \       }\n        long count4 = new Regex(@\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count4 > n) {\n            return result;\n \
    \       }\n        long count5 = new Regex(@\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count5 > n) {\n            return result;\n \
    \       }\n        long count6 = new Regex(@\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count6 > n) {\n            return result;\n \
    \       }\n        long count7 = new Regex(@\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count7 > n) {\n            return result;\n \
    \       }\n        long count8 = new Regex(@\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count8 > n) {\n            return result;\n \
    \       }\n        long count9 = new Regex(@\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count9 > n) {\n            return result;\n \
    \       }\n        long count10 = new Regex(@\"[^aeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOUaeiouAEIOU]\"\
    ).Matches(s).Count;\n        if (count10 > \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjsp_0d87.cs(67,22): error CS1525: Invalid expression term ''}''

    /tmp/tmpjsp_0d87.cs(67,22): error CS1026: ) expected

    /tmp/tmpjsp_0d87.cs(67,22): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        char[]\
    \ sortedChars = new char[chars.Length];\n        Array.Sort(chars, 0, chars.Length);\n\
    \        bool isFirst = true;\n        long index = 0;\n        long count = 1;\n\
    \        long currentCount = 0;\n        long currentIndex = 0;\n        long\
    \ maxCount = 1;\n        long maxIndex = 0;\n        long maxIndexCount = 0;\n\
    \        long maxCountIndex = 0;\n        long maxCountIndexCount = 0;\n     \
    \   long maxCountIndexCountIndex = 0;\n        long maxCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndex = 0;\n        long maxCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndex = 0;\n      \
    \  long maxCountIndexCountIndexCountIndexCountIndexCount = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndex\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountIndexCountCount\
    \ = 0;\n        long maxCountIndexCountIndexCountIndex\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaiet2127.cs(66,47): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n      \
    \          word += c;\n            }\n        }\n        string key = word.ToLower();\n\
    \        string key2 = key.ToUpper();\n        string key3 = key.ToLower();\n\
    \        string key4 = key.ToUpper();\n        string key5 = key.ToLower();\n\
    \        string key6 = key.ToUpper();\n        string key7 = key.ToLower();\n\
    \        string key8 = key.ToUpper();\n        string key9 = key.ToLower();\n\
    \        string key10 = key.ToUpper();\n        string key11 = key.ToLower();\n\
    \        string key12 = key.ToUpper();\n        string key13 = key.ToLower();\n\
    \        string key14 = key.ToUpper();\n        string key15 = key.ToLower();\n\
    \        string key16 = key.ToUpper();\n        string key17 = key.ToLower();\n\
    \        string key18 = key.ToUpper();\n        string key19 = key.ToLower();\n\
    \        string key20 = key.ToUpper();\n        string key21 = key.ToLower();\n\
    \        string key22 = key.ToUpper();\n        string key23 = key.ToLower();\n\
    \        string key24 = key.ToUpper();\n        string key25 = key.ToLower();\n\
    \        string key26 = key.ToUpper();\n        string key27 = key.ToLower();\n\
    \        string key28 = key.ToUpper();\n        string key29 = key.ToLower();\n\
    \        string key30 = key.ToUpper();\n        string key31 = key.ToLower();\n\
    \        string key32 = key.ToUpper();\n        string key33 = key.ToLower();\n\
    \        string key34 = key.ToUpper();\n        string key35 = key.ToLower();\n\
    \        string key36 = key.ToUpper();\n        string key37 = key.ToLower();\n\
    \        string key38 = key.ToUpper();\n        string key39 = key.ToLower();\n\
    \        string key40 = key.ToUpper();\n        string key41 = key.ToLower();\n\
    \        string key42 = key.ToUpper();\n        string key43 = key.ToLower();\n\
    \        string key44 = key.ToUpper();\n        string key45 = key.ToLower();\n\
    \        string key46 = key.ToUpper();\n        string key47 = key.ToLower();\n\
    \        string key48 = \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpchgb94vb.cs(81,23): error CS1525: Invalid expression term ''}''

    /tmp/tmpchgb94vb.cs(81,23): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfqsyjzm.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(45,'
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isWord = false;\n        foreach (char c in s) {\n\
    \            if (char.IsLetter(c)) {\n                if (isWord) {\n        \
    \            result.Add(word);\n                    word = \"\";\n           \
    \         isWord = false;\n                }\n                word += c;\n   \
    \         } else {\n                if (word.Length == n) {\n                \
    \    result.Add(word);\n                    word = \"\";\n                   \
    \ isWord = true;\n                }\n            }\n        }\n        if (word.Length\
    \ > 0) {\n            result.Add(word);\n        }\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d63aaa8f50e34da689de35e2fef9e5c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d63aaa8f50e34da689de35e2fef9e5c3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        if (word != \"\") {\n            result.Add(word);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        string lastWord = \"\";\n        bool isFirst =\
    \ true;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n\
    \                if (isFirst) {\n                    isFirst = false;\n      \
    \              word += c;\n                } else {\n                    if (word.Length\
    \ == n) {\n                        result.Add(lastWord);\n                   \
    \     lastWord = \"\";\n                        isFirst = true;\n            \
    \        }\n                    lastWord += c;\n                }\n          \
    \  }\n        }\n        if (lastWord.Length > 0) {\n            result.Add(lastWord);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d63568363a5d4af8b84fe7db4c973a8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d63568363a5d4af8b84fe7db4c973a8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        long count = new HashSet<long>().Where(x\
    \ => x.ToString() == s.ToUpper()).Count();\n        if (count == 0) return result;\n\
    \        long maxCount = s.Length / n;\n        long minCount = s.Length / n *\
    \ 2;\n        long currentCount = 1;\n        long currentMinCount = 1;\n    \
    \    long currentMaxCount = 1;\n        string currentWord = \"\";\n        string\
    \ currentWordUpper = \"\";\n        string currentWordLower = \"\";\n        string\
    \ currentWordUpperLower = \"\";\n        string currentWordUpperLowerLower = \"\
    \";\n        string currentWordUpperLowerUpper = \"\";\n        string currentWordUpperLowerUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpper = \"\";\n        string\
    \ currentWordUpperLowerUpperUpperLower = \"\";\n        string currentWordUpperLowerUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperLower = \"\";\n\
    \        string currentWordUpperLowerUpperUpperUpperUpper = \"\";\n        string\
    \ currentWordUpperLowerUpperUpperUpperUpperLower = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperLower = \"\"\
    ;\n        string currentWordUpperLowerUpperUpperUpperUpperUpper = \"\";\n   \
    \     string currentWordUpperLowerUpperUpperUpperUpperLower = \"\";\n        string\
    \ currentWordUpperLowerUpperUpperUpperUpperUpper = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpperUpperLower\
    \ = \"\";\n        string currentWordUpperLowerUpperUpperUpperUpperUpperUpperUpperUpperUpper\
    \ = \"\";\n        string \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz6b7xgn_.cs(67,15): error CS1001: Identifier expected

    /tmp/tmpz6b7xgn_.cs(67,15): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   bool isConsonant = false;\n        bool isConsonantLast = false;\n       \
    \ bool isConsonantFirst = false;\n        bool isConsonantSecond = false;\n  \
    \      bool isConsonantThird = false;\n        bool isConsonantFourth = false;\n\
    \        bool isConsonantFifth = false;\n        bool isConsonantSixth = false;\n\
    \        bool isConsonantSeventh = false;\n        bool isConsonantEighth = false;\n\
    \        bool isConsonantNinth = false;\n        bool isConsonantTenth = false;\n\
    \        bool isConsonantEleventh = false;\n        bool isConsonantTwelfth =\
    \ false;\n        bool isConsonantThirteenth = false;\n        bool isConsonantFourteenth\
    \ = false;\n        bool isConsonantFifteenth = false;\n        bool isConsonantSixteenth\
    \ = false;\n        bool isConsonantSeventeenth = false;\n        bool isConsonantEighteenth\
    \ = false;\n        bool isConsonantNineteenth = false;\n        bool isConsonantTwentieth\
    \ = false;\n        bool isConsonantTwentyFirst = false;\n        bool isConsonantTwentySecond\
    \ = false;\n        bool isConsonantTwentyThird = false;\n        bool isConsonantTwentyFourth\
    \ = false;\n        bool isConsonantTwentyFifth = false;\n        bool isConsonantTwentySixth\
    \ = false;\n        bool isConsonantTwentySeventh = false;\n        bool isConsonantTwentyEighth\
    \ = false;\n        bool isConsonantTwentyNinth = false;\n        bool isConsonantThirtieth\
    \ = false;\n        bool isConsonantThirtyFirst = false;\n        bool isConsonantThirtySecond\
    \ = false;\n        bool isConsonantThirtyThird = false;\n        bool isConsonantThirtyFourth\
    \ = false;\n        bool isConsonantThirtyFifth = false;\n        bool isConsonantThirtySixth\
    \ = false;\n        bool isConsonantThirtySeventh = false;\n        bool isConsonantThirtyEighth\
    \ = false;\n        bool isConsonantThirtyN\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpi9ile_m_.cs(72,32): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        string wordWithNConsonants = \"\";\n        string\
    \ wordWithNConsonants2 = \"\";\n        string wordWithNConsonants3 = \"\";\n\
    \        string wordWithNConsonants4 = \"\";\n        string wordWithNConsonants5\
    \ = \"\";\n        string wordWithNConsonants6 = \"\";\n        string wordWithNConsonants7\
    \ = \"\";\n        string wordWithNConsonants8 = \"\";\n        string wordWithNConsonants9\
    \ = \"\";\n        string wordWithNConsonants10 = \"\";\n        string wordWithNConsonants11\
    \ = \"\";\n        string wordWithNConsonants12 = \"\";\n        string wordWithNConsonants13\
    \ = \"\";\n        string wordWithNConsonants14 = \"\";\n        string wordWithNConsonants15\
    \ = \"\";\n        string wordWithNConsonants16 = \"\";\n        string wordWithNConsonants17\
    \ = \"\";\n        string wordWithNConsonants18 = \"\";\n        string wordWithNConsonants19\
    \ = \"\";\n        string wordWithNConsonants20 = \"\";\n        string wordWithNConsonants21\
    \ = \"\";\n        string wordWithNConsonants22 = \"\";\n        string wordWithNConsonants23\
    \ = \"\";\n        string wordWithNConsonants24 = \"\";\n        string wordWithNConsonants25\
    \ = \"\";\n        string wordWithNConsonants26 = \"\";\n        string wordWithNConsonants27\
    \ = \"\";\n        string wordWithNConsonants28 = \"\";\n        string wordWithNConsonants29\
    \ = \"\";\n        string wordWithNConsonants30 = \"\";\n        string wordWithNConsonants31\
    \ = \"\";\n        string wordWithNConsonants32 = \"\";\n        string wordWithNConsonants33\
    \ = \"\";\n        string wordWithNConsonants34 = \"\";\n        string wordWithNConsonants35\
    \ = \"\";\n        string wordWithNConsonants36 = \"\";\n        string wordWithNConsonants37\
    \ = \"\";\n        string wordWithNConsonants38 = \"\";\n        string wordWithNConsonants39\
    \ = \"\";\n        string wordWithNConsonants40 = \"\";\n        string wordWithNConsonants41\
    \ = \"\";\n        string wordWithNConsonants42 = \"\";\n        string wordWithNConsonants43\
    \ = \"\";\n        string wordWithN\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa3y_og4r.cs(74,25): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isConsonant = false;\n        foreach (char c in\
    \ s) {\n            if (char.IsLetter(c)) {\n                word += c;\n    \
    \            if (char.IsUpper(c)) {\n                    isConsonant = true;\n\
    \                }\n            } else {\n                isConsonant = false;\n\
    \            }\n            if (isConsonant == true) {\n                if (word.Length\
    \ == n) {\n                    result.Add(word);\n                    word = \"\
    \";\n                    isConsonant = false;\n                }\n           \
    \ }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e32077e4825443e9ccd19417b0573a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6e32077e4825443e9ccd19417b0573a2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = string.Empty;\n        long count = 0;\n        bool flag = false;\n\
    \        foreach (char c in s) {\n            if (flag) {\n                count++;\n\
    \                if (count == n) {\n                    flag = false;\n      \
    \              result.Add(word);\n                }\n            }\n         \
    \   if (char.IsLetter(c)) {\n                flag = true;\n                word\
    \ = word + c;\n            }\n        }\n        if (word != string.Empty) {\n\
    \            result.Add(word);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary\
    \ had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c501e2ca1e4470abe5ac5392445e2c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2c501e2ca1e4470abe5ac5392445e2c1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                count++;\n            }\n   \
    \     }\n        if (count == n) result.Add(word);\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b83a102d1b541708928a88e0b9de602>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b83a102d1b541708928a88e0b9de602>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfqsyjzm.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(45,'
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfqsyjzm.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(45,'
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string temp = \"\";\n        long count = 0;\n       \
    \ bool isWord = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                isWord = true;\n            }\n\
    \            if (isWord) {\n                count++;\n                if (count\
    \ == n) {\n                    result.Add(word);\n                    word = \"\
    \";\n                    count = 0;\n                    isWord = false;\n   \
    \             }\n            }\n        }\n        if (word != \"\") {\n     \
    \       result.Add(word);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <879f4e138d7942faa8d1edca7063bb55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <879f4e138d7942faa8d1edca7063bb55>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        if (word != \"\") {\n            result.Add(word);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfqsyjzm.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(45,'
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        char[] chars\
    \ = s.ToCharArray();\n        Array.Sort(chars);\n        string word = \"\";\n\
    \        long index = 0;\n        long count = 0;\n        bool isConsonant =\
    \ false;\n        foreach (char c in chars) {\n            if (char.IsLetter(c))\
    \ {\n                if (isConsonant) {\n                    count++;\n      \
    \              if (count == n) {\n                        result.Add(word);\n\
    \                        count = 0;\n                        isConsonant = false;\n\
    \                        word = \"\";\n                    }\n               \
    \ }\n                isConsonant = true;\n                word += c;\n       \
    \     } else {\n                isConsonant = false;\n            }\n        }\n\
    \        if (count > 0) {\n            result.Add(word);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c603729509f744a88c4b3e9262cd9658>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c603729509f744a88c4b3e9262cd9658>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        char[] chars = s.ToCharArray();\n\
    \        char[] charsCopy = new char[chars.Length];\n        Array.Copy(chars,\
    \ charsCopy, chars.Length);\n        Array.Sort(charsCopy);\n        string word\
    \ = \"\";\n        long count = 0;\n        bool isWord = false;\n        foreach\
    \ (char c in charsCopy) {\n            if (char.IsLetter(c)) {\n             \
    \   isWord = true;\n                word += c;\n                count++;\n   \
    \             if (count == n) break;\n            }\n            if (isWord) {\n\
    \                result.Add(word);\n                isWord = false;\n        \
    \        word = \"\";\n                count = 0;\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30ea325a77e14a52bf474b44726363b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30ea325a77e14a52bf474b44726363b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        long\
    \ count = 0;\n        string word = \"\";\n        foreach (char c in s) {\n \
    \           if (char.IsLetter(c)) {\n                count++;\n              \
    \  if (count == n) {\n                    result.Add(word);\n                \
    \    word = \"\";\n                    count = 0;\n                }\n       \
    \         word += c;\n            }\n        }\n        if (word != \"\") {\n\
    \            result.Add(word);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary\
    \ had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2cadf541fb949bf825a339cbcd9abda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c2cadf541fb949bf825a339cbcd9abda>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isConsonant = false;\n        bool isSpace = false;\n\
    \        bool isLetter = false;\n        bool isWord = false;\n        bool isWordWithSpace\
    \ = false;\n        bool isWordWithConsonant = false;\n        bool isWordWithConsonantAndSpace\
    \ = false;\n        bool isWordWithConsonantAndLetter = false;\n        bool isWordWithConsonantAndLetterAndSpace\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWord = false;\n\
    \        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpace = false;\n\
    \        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWord = false;\n\
    \        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpace\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWord\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpace\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWord\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpace\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWord\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWord\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpace\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWord\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWord\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWordWithSpaceAndWord\
    \ = false;\n        bool isWordWithConsonantAndLetterAndSpaceAndWordWith\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjbuxg6ki.cs(51,61): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                consonants.Add(c);\n            }\n        }\n        string\
    \ word = \"\";\n        foreach (char c in consonants) {\n            word +=\
    \ c;\n        }\n        string word2 = word;\n        long count = 0;\n     \
    \   long length = 0;\n        bool isWord = false;\n        foreach (char c in\
    \ word2) {\n            if (char.IsLetterOrDigit(c)) {\n                isWord\
    \ = true;\n                count++;\n            }\n            else {\n     \
    \           isWord = false;\n            }\n            if (count == n) {\n  \
    \              result.Add(word);\n                length++;\n                count\
    \ = 0;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4fc86a3d18d446aa32f8a9ffbd66c57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b4fc86a3d18d446aa32f8a9ffbd66c57>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n                if (count == n) {\n                    result.Add(word);\n\
    \                    word = \"\";\n                    count = 0;\n          \
    \      }\n            }\n        }\n        if (word != \"\") {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f4da9e5b6824bbb8e93d53c47b63de1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f4da9e5b6824bbb8e93d53c47b63de1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        long count = 0;\n        foreach (char c in s)\
    \ {\n            if (char.IsLetterOrDigit(c)) {\n                word += c;\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.Add(word);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary\
    \ had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cda2e91130d44e09a1dbc848448082f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cda2e91130d44e09a1dbc848448082f6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLower(c)) {\n   \
    \             consonants.Add(c);\n            }\n        }\n        List<string>\
    \ words = new List<string>();\n        foreach (char c in consonants) {\n    \
    \        words.AddRange(SelectWords(s, n, c));\n        }\n        return words;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo00sfczk.cs(39,28): error CS1501: No overload for method ''SelectWords''
    takes 3 arguments

    '
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        string lastWord = \"\";\n        bool isFirst =\
    \ true;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n\
    \                if (isFirst) {\n                    isFirst = false;\n      \
    \              word += c;\n                } else {\n                    lastWord\
    \ = word;\n                    word += c;\n                }\n            } else\
    \ {\n                if (word.Length == n) {\n                    result.Add(lastWord);\n\
    \                    word = \"\";\n                }\n            }\n        }\n\
    \        if (word.Length != 0) {\n            result.Add(word);\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c39e3794ebd42f6a41a83ffa77ef52f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6c39e3794ebd42f6a41a83ffa77ef52f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long index = 0;\n        bool isConsonant = false;\n \
    \       bool isWord = false;\n        foreach (char c in chars) {\n          \
    \  if (char.IsLetter(c)) {\n                isConsonant = false;\n           \
    \     isWord = false;\n                word += c;\n                index++;\n\
    \                if (index == n) {\n                    isWord = true;\n     \
    \           }\n            } else {\n                if (isConsonant) {\n    \
    \                result.Add(word);\n                    isWord = false;\n    \
    \                isConsonant = false;\n                    word = \"\";\n    \
    \                index = 0;\n                }\n                if (isWord) {\n\
    \                    isConsonant = true;\n                }\n            }\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32464b5649334366b0bfe0f62569a5b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <32464b5649334366b0bfe0f62569a5b3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = \"\";\n        bool isConsonant = true;\n        bool isFirst = true;\n  \
    \      long count = 1;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (isFirst)\
    \ {\n                    isFirst = false;\n                } else {\n        \
    \            result.Add(word);\n                    word = \"\";\n           \
    \     }\n                isConsonant = false;\n            }\n            if (isConsonant\
    \ && count >= n) {\n                result.Add(word);\n                word =\
    \ \"\";\n                isConsonant = true;\n                count = 1;\n   \
    \         }\n            count++;\n        }\n        if (word.Length > 0) {\n\
    \            result.Add(word);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary\
    \ had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8512fff390904075b1b300b625bed98d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8512fff390904075b1b300b625bed98d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgfxbehzi.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpgfxbehzi.cs(45,'
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        Array.Sort(chars);\n        string word = \"\";\n\
    \        long count = 0;\n        bool isWord = false;\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetter(c)) {\n                isWord =\
    \ true;\n                word += c;\n                count++;\n            }\n\
    \            if (count == n) {\n                result.Add(word);\n          \
    \      isWord = false;\n                word = \"\";\n                count =\
    \ 0;\n            }\n        }\n        if (isWord) {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be368ab61e814321b916db1f86a820c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <be368ab61e814321b916db1f86a820c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        long maxIndex\
    \ = chars.Length - 1;\n        long minIndex = 0;\n        long count = 0;\n \
    \       long currentIndex = 0;\n        long currentCount = 0;\n        bool isFirst\
    \ = true;\n        bool isLast = true;\n        bool isMiddle = true;\n      \
    \  bool isLastMiddle = true;\n        bool isFirstMiddle = true;\n        bool\
    \ isLastFirst = true;\n        bool isFirstLast = true;\n        bool isMiddleMiddle\
    \ = true;\n        bool isLastMiddleFirst = true;\n        bool isMiddleLastFirst\
    \ = true;\n        bool isLastFirstMiddle = true;\n        bool isLastFirstLast\
    \ = true;\n        bool isMiddleMiddleLast = true;\n        bool isLastMiddleFirstLast\
    \ = true;\n        bool isLastFirstMiddleLast = true;\n        bool isLastFirstLastMiddle\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n        bool isMiddleMiddleLastFirst\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n        bool isMiddleLastFirstLast\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstLastMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLastLast = true;\n        bool isMiddleMiddleLastFirstLast\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstLastMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n        bool isMiddleMiddleLastFirstLast\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstLastMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n        bool isMiddleMiddleLastFirstLast\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstLastMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n        bool isMiddleMiddleLastFirstLast\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstLastMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n        bool isMiddleMiddleLastFirstLast\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstLastMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n        bool isMiddleMiddleLastFirstLast\
    \ = true;\n        bool isLastMiddleFirstLast = true;\n        bool isLastFirstLastMiddleLast\
    \ = true;\n        bool isLastFirstLastMiddleLast = true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztribks8.cs(55,14): error CS0128: A local variable or function named ''isLastMiddleFirstLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(56,14): error CS0128: A local variable or function named ''isLastFirstMiddleLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(57,14): error CS0128: A local variable or function named ''isLastFirstLastMiddleLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(59,14): error CS0128: A local variable or function named ''isLastMiddleFirstLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(60,14): error CS0128: A local variable or function named ''isLastFirstLastMiddleLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(63,14): error CS0128: A local variable or function named ''isLastMiddleFirstLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(64,14): error CS0128: A local variable or function named ''isLastFirstLastMiddleLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(65,14): error CS0128: A local variable or function named ''isLastFirstLastMiddleLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(66,14): error CS0128: A local variable or function named ''isMiddleMiddleLastFirstLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(67,14): error CS0128: A local variable or function named ''isLastMiddleFirstLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(68,14): error CS0128: A local variable or function named ''isLastFirstLastMiddleLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(69,14): error CS0128: A local variable or function named ''isLastFirstLastMiddleLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(70,14): error CS0128: A local variable or function named ''isMiddleMiddleLastFirstLast''
    is already defined in this scope

    /tmp/tmpztribks8.cs(71,14): error CS0128: A local variable or function named ''isLastMiddleFirstLast''
    is already defined in this scope

    /tmp/tmpz'
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        string lastWord = string.Empty;\n        bool isWord\
    \ = false;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                isWord = true;\n                word += c;\n            }\n\
    \            if (isWord) {\n                if (word.Length == n)\n          \
    \          result.Add(word);\n                isWord = false;\n              \
    \  word = string.Empty;\n            }\n            if (char.IsWhiteSpace(c))\
    \ {\n                if (word.Length == n)\n                    result.Add(word);\n\
    \                isWord = false;\n                word = string.Empty;\n     \
    \       }\n        }\n        if (word.Length == n)\n            result.Add(word);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d59cdff82e04e96b296487fd44a82a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2d59cdff82e04e96b296487fd44a82a9>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfqsyjzm.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(45,'
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                count++;\n            }\n   \
    \     }\n        if (count == n) result.Add(word);\n        return result;\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b83a102d1b541708928a88e0b9de602>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8b83a102d1b541708928a88e0b9de602>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n        }\n        if (word.Length\
    \ == n) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5d7ee8f16dd478ea814dac5de7eca0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e5d7ee8f16dd478ea814dac5de7eca0c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        bool isConsonant = true;\n  \
    \      foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c)) {\n\
    \                if (isConsonant) {\n                    word += c;\n        \
    \            count++;\n                } else {\n                    isConsonant\
    \ = false;\n                }\n            } else {\n                if (count\
    \ == n) {\n                    result.Add(word);\n                    word = \"\
    \";\n                    count = 0;\n                    isConsonant = true;\n\
    \                }\n            }\n        }\n        if (count > 0) {\n     \
    \       result.Add(word);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d651d20ad2124c78a6204da09444dc4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d651d20ad2124c78a6204da09444dc4c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = \"\";\n    \
    \    foreach (char c in s) {\n            if (char.IsLetter(c)) {\n          \
    \      word += c;\n            }\n        }\n        string word2 = \"\";\n  \
    \      foreach (char c in word) {\n            if (char.IsLetter(c)) {\n     \
    \           word2 += c;\n            }\n        }\n        string word3 = \"\"\
    ;\n        foreach (char c in word2) {\n            if (char.IsLetter(c)) {\n\
    \                word3 += c;\n            }\n        }\n        string word4 =\
    \ \"\";\n        foreach (char c in word3) {\n            if (char.IsLetter(c))\
    \ {\n                word4 += c;\n            }\n        }\n        string word5\
    \ = \"\";\n        foreach (char c in word4) {\n            if (char.IsLetter(c))\
    \ {\n                word5 += c;\n            }\n        }\n        string word6\
    \ = \"\";\n        foreach (char c in word5) {\n            if (char.IsLetter(c))\
    \ {\n                word6 += c;\n            }\n        }\n        string word7\
    \ = \"\";\n        foreach (char c in word6) {\n            if (char.IsLetter(c))\
    \ {\n                word7 += c;\n            }\n        }\n        string word8\
    \ = \"\";\n        foreach (char c in word7) {\n            if (char.IsLetter(c))\
    \ {\n                word8 += c;\n            }\n        }\n        string word9\
    \ = \"\";\n        foreach (char c in word8) {\n            if (char.IsLetter(c))\
    \ {\n                word9 += c;\n            }\n        }\n        string word10\
    \ = \"\";\n        foreach (char c in word9) {\n            if (char.IsLetter(c))\
    \ {\n                word10 += c;\n            }\n        }\n        string word11\
    \ = \"\";\n        foreach (char c in word10) {\n            if (char.IsLetter(c))\
    \ {\n                word11 += c;\n            }\n        }\n        string word12\
    \ = \"\";\n        foreach (char c in word11) {\n            if (char.IsLetter(c))\
    \ {\n                word12 += c;\n            }\n        }\n        string word13\
    \ = \"\";\n        foreach (char c in word12) {\n            if (char.IsLetter(c))\
    \ {\n                word13 += c;\n            }\n        }\n        string word14\
    \ = \"\";\n        foreach (char c in word13) {\n            if (char.IsLetter(c))\
    \ {\n                word14 += c;\n            }\n        }\n        string word15\
    \ = \"\";\n        foreach (char c in word14) {\n            if (char.IsLetter(c))\
    \ {\n                word15 += c;\n            }\n        }\n        string word16\
    \ = \"\";\n        foreach (char c in word15) {\n            if (char.IsLetter(c\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp74qqy18p.cs(120,32): error CS1026: ) expected

    /tmp/tmp74qqy18p.cs(120,32): error CS1525: Invalid expression term ''}''

    /tmp/tmp74qqy18p.cs(120,32): error CS1002: ; expected

    /tmp/tmp74qqy18p.cs(122,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp74qqy18p.cs(132,2): error CS1513: } expected

    '
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string rest = s.Substring(s.Length -\
    \ 1, s.Length);\n        string lastWord = s.Substring(0, s.Length - 1);\n   \
    \     string lastRest = s.Substring(s.Length - 1, s.Length);\n        string lastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLastRest = s.Substring(s.Length\
    \ - 1, s.Length);\n        string lastLastLastWord = s.Substring(0, s.Length -\
    \ 1);\n        string lastLastLastRest = s.Substring(s.Length - 1, s.Length);\n\
    \        string lastLastLastLastWord = s.Substring(0, s.Length - 1);\n       \
    \ string lastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n       \
    \ string lastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n        string\
    \ lastLastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n        string\
    \ lastLastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n        string\
    \ lastLastLastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n      \
    \  string lastLastLastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n \
    \       string lastLastLastLastLastLastLastRest = s.Substring(s.Length - 1, s.Length);\n\
    \        string lastLastLastLastLastLastLastLastWord = s.Substring(0, s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest\
    \ = s.Substring(s.Length - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastLastRest\
    \ = s.Substring(s.Length - 1, s.Length);\n        string lastLastLastLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLast\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpq3idypdh.cs(55,24): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        char[] chars\
    \ = s.ToCharArray();\n        List<char> consonants = new List<char>();\n    \
    \    foreach (char c in chars) {\n            if (char.IsLower(c)) {\n       \
    \         consonants.Add(c);\n            }\n        }\n        List<char> vowels\
    \ = new List<char>();\n        foreach (char c in chars) {\n            if (char.IsUpper(c))\
    \ {\n                vowels.Add(c);\n            }\n        }\n        List<char>\
    \ consonantsAndVowels = new List<char>();\n        foreach (char c in consonants)\
    \ {\n            consonantsAndVowels.Add(c);\n        }\n        foreach (char\
    \ c in vowels) {\n            consonantsAndVowels.Add(c);\n        }\n       \
    \ List<char> consonantsAndVowelsAndConsonants = new List<char>();\n        foreach\
    \ (char c in consonantsAndVowels) {\n            consonantsAndVowelsAndConsonants.Add(c);\n\
    \        }\n        List<char> consonantsAndVowelsAndConsonantsAndVowels = new\
    \ List<char>();\n        foreach (char c in consonantsAndVowelsAndConsonants)\
    \ {\n            consonantsAndVowelsAndConsonantsAndVowels.Add(c);\n        }\n\
    \        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonants = new\
    \ List<char>();\n        foreach (char c in consonantsAndVowelsAndConsonantsAndVowels)\
    \ {\n            consonantsAndVowelsAndConsonantsAndVowelsAndConsonants.Add(c);\n\
    \        }\n        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = new List<char>();\n        foreach (char c in consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels)\
    \ {\n            consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels.Add(c);\n\
    \        }\n        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\
    \ = new List<char>();\n        foreach (char c in consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonants\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0w9jh7ki.cs(67,104): error CS1026: ) expected

    /tmp/tmp0w9jh7ki.cs(67,104): error CS1525: Invalid expression term ''}''

    /tmp/tmp0w9jh7ki.cs(67,104): error CS1002: ; expected

    '
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s;\n        string lastWord = \"\";\n        long currentLength = 0;\n     \
    \   bool isLastWord = false;\n        bool isLastWordIsConsonant = false;\n  \
    \      bool isLastWordIsConsonantOrLastWord = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonant\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWord\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonant\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWordIsConsonantOrLastWord\
    \ = false;\n        bool isLastWordIsConsonantOrLastWordIsConsonantOrLast\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo1kwwjpc.cs(48,62): error CS1002: ; expected

    '
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        string lastWord = string.Empty;\n        bool isWord\
    \ = false;\n        long count = 0;\n        foreach (char c in s) {\n       \
    \     if (char.IsLetter(c)) {\n                isWord = true;\n              \
    \  word += c;\n                count++;\n            }\n            if (isWord)\
    \ {\n                if (count == n) {\n                    result.Add(word);\n\
    \                    isWord = false;\n                    count = 0;\n       \
    \             word = string.Empty;\n                }\n            }\n       \
    \     if (char.IsWhiteSpace(c)) {\n                isWord = false;\n         \
    \   }\n        }\n        if (count != 0) {\n            result.Add(word);\n \
    \       }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5b2d790e949479fa2b4b70a8332ff6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a5b2d790e949479fa2b4b70a8332ff6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        Array.Sort(chars);\n        string word = \"\";\n\
    \        long count = 0;\n        foreach (char c in chars) {\n            if\
    \ (chars.Contains(c)) {\n                word += c;\n                count++;\n\
    \            }\n        }\n        if (count == n) {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1930ab16527423b886475bc33231034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d1930ab16527423b886475bc33231034>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        Array.Sort(chars);\n        StringBuilder sb = new\
    \ StringBuilder();\n        bool isConsonant = true;\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                sb.Append(c);\n\
    \                isConsonant = false;\n            }\n            if (isConsonant)\
    \ {\n                if (sb.Length == n) {\n                    result.Add(sb.ToString());\n\
    \                    sb.Clear();\n                    isConsonant = true;\n  \
    \              }\n            }\n        }\n        if (sb.Length > 0) {\n   \
    \         result.Add(sb.ToString());\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c6422ea453f4bc19bb292aab05a258c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4c6422ea453f4bc19bb292aab05a258c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        bool isConsonant = false;\n \
    \       foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n   \
    \             word += c;\n                count++;\n            }\n          \
    \  if (char.IsUpper(c)) {\n                isConsonant = true;\n            }\n\
    \            if (char.IsLower(c)) {\n                isConsonant = false;\n  \
    \          }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <481941aa386e40ceb5015e6396501f09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <481941aa386e40ceb5015e6396501f09>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isConsonant = false;\n        bool isFirstLetter\
    \ = true;\n        bool isLastLetter = true;\n        bool isLastWord = true;\n\
    \        bool isFirstWord = true;\n        bool isLastWord = true;\n        bool\
    \ isFirstLetter = true;\n        bool isLastLetter = true;\n        bool isLastWord\
    \ = true;\n        bool isFirstWord = true;\n        bool isLastWord = true;\n\
    \        bool isFirstLetter = true;\n        bool isLastLetter = true;\n     \
    \   bool isLastWord = true;\n        bool isFirstLetter = true;\n        bool\
    \ isLastLetter = true;\n        bool isLastWord = true;\n        bool isFirstLetter\
    \ = true;\n        bool isLastLetter = true;\n        bool isLastWord = true;\n\
    \        bool isFirstLetter = true;\n        bool isLastLetter = true;\n     \
    \   bool isLastWord = true;\n        bool isFirstLetter = true;\n        bool\
    \ isLastLetter = true;\n        bool isLastWord = true;\n        bool isFirstLetter\
    \ = true;\n        bool isLastLetter = true;\n        bool isLastWord = true;\n\
    \        bool isFirstLetter = true;\n        bool isLastLetter = true;\n     \
    \   bool isLastWord = true;\n        bool isFirstLetter = true;\n        bool\
    \ isLastLetter = true;\n        bool isLastWord = true;\n        bool isFirstLetter\
    \ = true;\n        bool isLastLetter = true;\n        bool isLastWord = true;\n\
    \        bool isFirstLetter = true;\n        bool isLastLetter = true;\n     \
    \   bool isLastWord = true;\n        bool isFirstLetter = true;\n        bool\
    \ isLastLetter = true;\n        bool isLastWord = true;\n        bool isFirstLetter\
    \ = true;\n        bool isLastLetter = true;\n        bool isLastWord = true;\n\
    \        bool isFirstLetter = true;\n        bool isLastLetter = true;\n     \
    \   bool isLastWord = true;\n        bool isFirstLetter = true;\n        bool\
    \ isLastLetter = true;\n        bool isLastWord = true;\n        bool isFirstLetter\
    \ = true;\n        bool isLastLetter = true;\n        bool isLastWord = true;\n\
    \        bool isFirstLetter = true;\n        bool isLastLetter = true;\n     \
    \   bool isLastWord = true;\n        bool isFirstLetter = true;\n        bool\
    \ isLastLetter = true;\n        bool isLastWord = true;\n        bool isFirstLetter\
    \ = true;\n        bool isLastLetter = true;\n        bool isLastWord = true;\n\
    \        bool isFirstLetter = true;\n        bool isLastLetter = true;\n     \
    \   bool isLastWord = true;\n        bool isFirstLetter = true;\n        bool\
    \ isLastLetter = true;\n        bool isLastWord\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv9a1totc.cs(98,24): error CS1002: ; expected

    '
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        char[] chars = s.ToCharArray();\n\
    \        Array.Sort(chars);\n        long count = 0;\n        foreach (char c\
    \ in chars) {\n            if (char.IsLetter(c)) {\n                count++;\n\
    \                if (count == n) result.Add(s.Substring(0, s.IndexOf(c)));\n \
    \           }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33f20f08c3d04f83b0bf26488448d41c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <33f20f08c3d04f83b0bf26488448d41c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isWord = false;\n        bool isConsonant = false;\n\
    \        bool isSpace = false;\n        bool isLetter = false;\n        bool isSpaceOrLetter\
    \ = false;\n        bool isWordStarted = false;\n        bool isWordEnded = false;\n\
    \        bool isWordStarting = false;\n        bool isWordEnding = false;\n  \
    \      bool isWordLetter = false;\n        bool isWordLetterStarted = false;\n\
    \        bool isWordLetterEnded = false;\n        bool isWordLetterStarting =\
    \ false;\n        bool isWordLetterEnding = false;\n        bool isWordLetter\
    \ = false;\n        bool isWordLetterStarted = false;\n        bool isWordLetterEnded\
    \ = false;\n        bool isWordLetterStarting = false;\n        bool isWordLetterEnding\
    \ = false;\n        bool isWordLetter = false;\n        bool isWordLetterStarted\
    \ = false;\n        bool isWordLetterEnded = false;\n        bool isWordLetterStarting\
    \ = false;\n        bool isWordLetterEnding = false;\n        bool isWordLetter\
    \ = false;\n        bool isWordLetterStarted = false;\n        bool isWordLetterEnded\
    \ = false;\n        bool isWordLetterStarting = false;\n        bool isWordLetterEnding\
    \ = false;\n        bool isWordLetter = false;\n        bool isWordLetterStarted\
    \ = false;\n        bool isWordLetterEnded = false;\n        bool isWordLetterStarting\
    \ = false;\n        bool isWordLetterEnding = false;\n        bool isWordLetter\
    \ = false;\n        bool isWordLetterStarted = false;\n        bool isWordLetterEnded\
    \ = false;\n        bool isWordLetterStarting = false;\n        bool isWordLetterEnding\
    \ = false;\n        bool isWordLetter = false;\n        bool isWordLetterStarted\
    \ = false;\n        bool isWordLetterEnded = false;\n        bool isWordLetterStarting\
    \ = false;\n        bool isWordLetterEnding = false;\n        bool isWordLetter\
    \ = false;\n        bool isWordLetterStarted = false;\n        bool isWordLetterEnded\
    \ = false;\n        bool isWordLetterStarting = false;\n        bool isWordLetterEnding\
    \ = false;\n        bool isWordLetter = false;\n        bool isWordLetterStarted\
    \ = false;\n        bool isWordLetterEnded = false;\n        bool isWordLetterStarting\
    \ = false;\n        bool isWordLetterEnding = false;\n        bool isWordLetter\
    \ = false;\n        bool isWordLetterStarted = false;\n        bool isWordLetterEnded\
    \ = false;\n        bool isWordLetterStarting = false;\n        bool isWordLetterEnding\
    \ = false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxtplrt2g.cs(42,14): error CS0128: A local variable or function named ''isWordLetter''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(43,14): error CS0128: A local variable or function named ''isWordLetterStarted''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(44,14): error CS0128: A local variable or function named ''isWordLetterEnded''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(45,14): error CS0128: A local variable or function named ''isWordLetterStarting''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(46,14): error CS0128: A local variable or function named ''isWordLetterEnding''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(47,14): error CS0128: A local variable or function named ''isWordLetter''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(48,14): error CS0128: A local variable or function named ''isWordLetterStarted''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(49,14): error CS0128: A local variable or function named ''isWordLetterEnded''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(50,14): error CS0128: A local variable or function named ''isWordLetterStarting''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(51,14): error CS0128: A local variable or function named ''isWordLetterEnding''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(52,14): error CS0128: A local variable or function named ''isWordLetter''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(53,14): error CS0128: A local variable or function named ''isWordLetterStarted''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(54,14): error CS0128: A local variable or function named ''isWordLetterEnded''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(55,14): error CS0128: A local variable or function named ''isWordLetterStarting''
    is already defined in this scope

    /tmp/tmpxtplrt2g.cs(56,14): error CS0128: A local variable or function named ''isWordLetterEnding''
    i'
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n        }\n        if (count == n) {\n           \
    \ result.Add(word);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b8978d0f4b4485aa0b100d094da3a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9b8978d0f4b4485aa0b100d094da3a90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        long count = 0;\n        foreach (char c in s) {\n  \
    \          if (char.IsLetter(c))\n                word += c;\n            else\n\
    \                count++;\n            if (count == n)\n                result.Add(word);\n\
    \            word = string.Empty;\n            count = 0;\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91e7acfca8304d18899f08a0cd7603f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <91e7acfca8304d18899f08a0cd7603f7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        long count = 0;\n        foreach (char c in s) {\n  \
    \          if (char.IsLetter(c)) {\n                if (count == n)\n        \
    \            result.Add(word);\n                word = word + c;\n           \
    \     count++;\n            }\n        }\n        if (count != n)\n          \
    \  result.Add(word);\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3be7366860564e6aaa7595615d7ce8f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3be7366860564e6aaa7595615d7ce8f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        char[] chars = s.ToCharArray();\n\
    \        Array.Sort(chars);\n        string word = \"\";\n        long count =\
    \ 0;\n        long start = 0;\n        long end = 0;\n        long current = 0;\n\
    \        bool isWord = false;\n        bool isWordEnd = false;\n        bool isWordStart\
    \ = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n\
    \        bool isWordEnd = false;\n        bool isWordStart = false;\n        bool\
    \ isWordEnd = false;\n        bool isWordStart = false;\n        bool isWordEnd\
    \ = false;\n        bool isWordStart = false;\n        bool isWordEnd = false;\n\
    \        bool isWordStart = false;\n        bool isWordEnd = false;\n        bool\
    \ isWordStart = false;\n        bool isWordEnd = false;\n        bool isWordStart\
    \ = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n\
    \        bool isWordEnd = false;\n        bool isWordStart = false;\n        bool\
    \ isWordEnd = false;\n        bool isWordStart = false;\n        bool isWordEnd\
    \ = false;\n        bool isWordStart = false;\n        bool isWordEnd = false;\n\
    \        bool isWordStart = false;\n        bool isWordEnd = false;\n        bool\
    \ isWordStart = false;\n        bool isWordEnd = false;\n        bool isWordStart\
    \ = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n\
    \        bool isWordEnd = false;\n        bool isWordStart = false;\n        bool\
    \ isWordEnd = false;\n        bool isWordStart = false;\n        bool isWordEnd\
    \ = false;\n        bool isWordStart = false;\n        bool isWordEnd = false;\n\
    \        bool isWordStart = false;\n        bool isWordEnd = false;\n        bool\
    \ isWordStart = false;\n        bool isWordEnd = false;\n        bool isWordStart\
    \ = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n\
    \        bool isWordEnd = false;\n        bool isWordStart = false;\n        bool\
    \ isWordEnd = false;\n        bool isWordStart = false;\n        bool isWordEnd\
    \ = false;\n        bool isWordStart = false;\n        bool isWordEnd = false;\n\
    \        bool isWordStart = false;\n        bool isWordEnd = false;\n        bool\
    \ isWordStart = false;\n        bool isWordEnd = false;\n        bool isWordStart\
    \ = false;\n        bool isWordEnd = false;\n        bool isWordStart = false;\n\
    \        bool isWordEnd = false;\n        bool isWordStart = false;\n        bool\
    \ isWordEnd = false;\n        bool isWord\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbgx84y90.cs(99,20): error CS1002: ; expected

    '
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.Length\
    \ - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnj8rqu9v.cs(63,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1026: ) expected

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        long count = 0;\n        foreach (char c in s) {\n  \
    \          if (char.IsLetter(c)) {\n                word += c;\n             \
    \   count++;\n            }\n        }\n        if (count == n)\n            result.Add(word);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa700e6bc581471cbbb09e0ff5365319>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fa700e6bc581471cbbb09e0ff5365319>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<string> words = new List<string>();\n\
    \        foreach (char c in chars) {\n            if (IsConsonant(c)) {\n    \
    \            words.Add(c.ToString());\n            }\n        }\n        if (words.Count\
    \ < n) {\n            return result;\n        }\n        List<string> resultWords\
    \ = new List<string>();\n        foreach (string word in words) {\n          \
    \  int count = 0;\n            foreach (char c in word) {\n                if\
    \ (IsConsonant(c)) {\n                    count++;\n                }\n      \
    \      }\n            if (count == n) {\n                resultWords.Add(word);\n\
    \            }\n        }\n        if (resultWords.Count > 0) {\n            result.AddRange(resultWords);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz7vhfleb.cs(33,17): error CS0103: The name ''IsConsonant'' does not exist
    in the current context

    /tmp/tmpz7vhfleb.cs(44,21): error CS0103: The name ''IsConsonant'' does not exist
    in the current context

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                count++;\n            }\n   \
    \     }\n        if (count == n) return result.Add(word);\n        string firstWord\
    \ = word;\n        string secondWord = word;\n        string thirdWord = word;\n\
    \        string fourthWord = word;\n        string fifthWord = word;\n       \
    \ string sixthWord = word;\n        string seventhWord = word;\n        string\
    \ eighthWord = word;\n        string ninthWord = word;\n        string tenthWord\
    \ = word;\n        string eleventhWord = word;\n        string twelfthWord = word;\n\
    \        string thirteenthWord = word;\n        string fourteenthWord = word;\n\
    \        string fifteenthWord = word;\n        string sixteenthWord = word;\n\
    \        string seventeenthWord = word;\n        string eighteenthWord = word;\n\
    \        string nineteenthWord = word;\n        string twentiethWord = word;\n\
    \        string twentyFirstWord = word;\n        string twentySecondWord = word;\n\
    \        string twentyThirdWord = word;\n        string twentyFourthWord = word;\n\
    \        string twentyFifthWord = word;\n        string twentySixthWord = word;\n\
    \        string twentySeventhWord = word;\n        string twentyEighthWord = word;\n\
    \        string twentyNinthWord = word;\n        string thirtiethWord = word;\n\
    \        string thirtyFirstWord = word;\n        string thirtySecondWord = word;\n\
    \        string thirtyThirdWord = word;\n        string thirtyFourthWord = word;\n\
    \        string thirtyFifthWord = word;\n        string thirtySixthWord = word;\n\
    \        string thirtySeventhWord = word;\n        string thirtyEighthWord = word;\n\
    \        string thirtyNinthWord = word;\n        string fortiethWord = word;\n\
    \        string fortyFirstWord = word;\n        string fortySecondWord = \n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5nidjly7.cs(78,33): error CS1525: Invalid expression term ''}''

    /tmp/tmp5nidjly7.cs(78,33): error CS1002: ; expected

    '
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        int[] count = new int[26];\n        int[] count2 =\
    \ new int[26];\n        int[] count3 = new int[26];\n        int[] count4 = new\
    \ int[26];\n        int[] count5 = new int[26];\n        int[] count6 = new int[26];\n\
    \        int[] count7 = new int[26];\n        int[] count8 = new int[26];\n  \
    \      int[] count9 = new int[26];\n        int[] count10 = new int[26];\n   \
    \     int[] count11 = new int[26];\n        int[] count12 = new int[26];\n   \
    \     int[] count13 = new int[26];\n        int[] count14 = new int[26];\n   \
    \     int[] count15 = new int[26];\n        int[] count16 = new int[26];\n   \
    \     int[] count17 = new int[26];\n        int[] count18 = new int[26];\n   \
    \     int[] count19 = new int[26];\n        int[] count20 = new int[26];\n   \
    \     int[] count21 = new int[26];\n        int[] count22 = new int[26];\n   \
    \     int[] count23 = new int[26];\n        int[] count24 = new int[26];\n   \
    \     int[] count25 = new int[26];\n        int[] count26 = new int[26];\n   \
    \     int[] count27 = new int[26];\n        int[] count28 = new int[26];\n   \
    \     int[] count29 = new int[26];\n        int[] count30 = new int[26];\n   \
    \     int[] count31 = new int[26];\n        int[] count32 = new int[26];\n   \
    \     int[] count33 = new int[26];\n        int[] count34 = new int[26];\n   \
    \     int[] count35 = new int[26];\n        int[] count36 = new int[26];\n   \
    \     int[] count37 = new int[26];\n        int[] count38 = new int[26];\n   \
    \     int[] count39 = new int[26];\n        int[] count40 = new int[26];\n   \
    \     int[] count41 = new int[26];\n        int[] count42 = new int[26];\n   \
    \     int[] count43 = new int[26];\n        int[] count44\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbqd5ms9e.cs(74,22): error CS1002: ; expected

    '
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        bool isConsonant = false;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n\
    \                isConsonant = true;\n            }\n            if (isConsonant)\
    \ {\n                isConsonant = false;\n                if (word.Length ==\
    \ n) {\n                    result.Add(word);\n                    word = \"\"\
    ;\n                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4527885157e24f1cb30725d1fea196db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4527885157e24f1cb30725d1fea196db>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        long count\
    \ = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.Add(s);\n        }\n        long start = 0;\n        long\
    \ end = 0;\n        long current = 0;\n        long count = 0;\n        bool found\
    \ = false;\n        do {\n            current = s.IndexOf(' ', start);\n     \
    \       if (current == -1) {\n                current = s.Length;\n          \
    \  }\n            end = current;\n            do {\n                current =\
    \ s.IndexOf(' ', end);\n                if (current == -1) {\n               \
    \     current = s.Length;\n                }\n                if (count < n) {\n\
    \                    count++;\n                }\n                found = true;\n\
    \            } while (current != -1 && found == false);\n            if (current\
    \ == -1) {\n                break;\n            }\n            start = current\
    \ + 1;\n        } while (current != -1);\n        if (count == n) {\n        \
    \    result.Add(s.Substring(start, end - start));\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcw5bq1v4.cs(42,14): error CS0128: A local variable or function named ''count''
    is already defined in this scope

    /tmp/tmpcw5bq1v4.cs(45,38): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpcw5bq1v4.cs(51,42): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpcw5bq1v4.cs(66,36): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpcw5bq1v4.cs(66,43): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpcw5bq1v4.cs(42,14): warning CS0219: The variable ''count'' is assigned
    but its value is never used

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        string word = \"\";\n        string last\
    \ = \"\";\n        string current = \"\";\n        long count = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n                last = c;\n                current = \"\";\n           \
    \     count++;\n            } else {\n                if (count == n) {\n    \
    \                result.Add(word);\n                    word = \"\";\n       \
    \             count = 1;\n                }\n                current += c;\n \
    \           }\n        }\n        if (word != \"\") {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxywkrsaq.cs(35,24): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        bool isConsonant = true;\n  \
    \      foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n    \
    \            word += c;\n                count++;\n            } else {\n    \
    \            isConsonant = false;\n            }\n            if (count == n)\
    \ {\n                result.Add(word);\n                word = \"\";\n       \
    \         count = 0;\n            }\n            if (isConsonant) {\n        \
    \        isConsonant = true;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <436e1a3970c6418ca22b9e3a99b1107e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <436e1a3970c6418ca22b9e3a99b1107e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        long\
    \ count = 0;\n        foreach (string word in s.Split(' '))\n        {\n     \
    \       count = count + word.Length;\n            if (count >= n)\n          \
    \  {\n                result.Add(word);\n                count = 0;\n        \
    \    }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e489419a25a44cd94b249f6808f5520>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e489419a25a44cd94b249f6808f5520>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) return result;\n        char[] chars = s.ToCharArray();\n\
    \        Array.Sort(chars);\n        long count = 0;\n        long start = 0;\n\
    \        long end = 0;\n        long index = 0;\n        long sum = 0;\n     \
    \   bool isConsonant = false;\n        bool isConsonant2 = false;\n        bool\
    \ isConsonant3 = false;\n        bool isConsonant4 = false;\n        bool isConsonant5\
    \ = false;\n        bool isConsonant6 = false;\n        bool isConsonant7 = false;\n\
    \        bool isConsonant8 = false;\n        bool isConsonant9 = false;\n    \
    \    bool isConsonant10 = false;\n        bool isConsonant11 = false;\n      \
    \  bool isConsonant12 = false;\n        bool isConsonant13 = false;\n        bool\
    \ isConsonant14 = false;\n        bool isConsonant15 = false;\n        bool isConsonant16\
    \ = false;\n        bool isConsonant17 = false;\n        bool isConsonant18 =\
    \ false;\n        bool isConsonant19 = false;\n        bool isConsonant20 = false;\n\
    \        bool isConsonant21 = false;\n        bool isConsonant22 = false;\n  \
    \      bool isConsonant23 = false;\n        bool isConsonant24 = false;\n    \
    \    bool isConsonant25 = false;\n        bool isConsonant26 = false;\n      \
    \  bool isConsonant27 = false;\n        bool isConsonant28 = false;\n        bool\
    \ isConsonant29 = false;\n        bool isConsonant30 = false;\n        bool isConsonant31\
    \ = false;\n        bool isConsonant32 = false;\n        bool isConsonant33 =\
    \ false;\n        bool isConsonant34 = false;\n        bool isConsonant35 = false;\n\
    \        bool isConsonant36 = false;\n        bool isConsonant37 = false;\n  \
    \      bool isConsonant38 = false;\n        bool isConsonant39 = false;\n    \
    \    bool isConsonant40 = false;\n        bool isConsonant41 = false;\n      \
    \  bool isConsonant42 = false;\n        bool isConsonant43 = false;\n        bool\
    \ isConsonant44 = false;\n        bool isConsonant45 = false;\n        bool isConsonant46\
    \ = false;\n        bool isConsonant47 = false;\n        bool isConsonant48 =\
    \ false;\n        bool isConsonant49 = false;\n        bool isCon\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary\
    \ had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpc1tjn50p.cs(84,19): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7pwzjm0m.cs(62,43): error CS1001: Identifier expected

    /tmp/tmp7pwzjm0m.cs(62,43): error CS1026: ) expected

    /tmp/tmp7pwzjm0m.cs(62,43): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        long n = Convert.ToInt64(n);\n\
    \        string word = s.Substring(0, s.Length - 1);\n        long count = GetCount(word);\n\
    \        if (count == n) {\n            result.Add(word);\n        }\n       \
    \ string lastWord = s.Substring(s.Length - 1, 1);\n        count = GetCount(lastWord);\n\
    \        if (count == n) {\n            result.Add(lastWord);\n        }\n   \
    \     return result;\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new\
    \ string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\"\
    , (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjqoeve6o.cs(30,14): error CS0136: A local or parameter named ''n'' cannot
    be declared in this scope because that name is used in an enclosing local scope
    to define a local or parameter

    /tmp/tmpjqoeve6o.cs(32,22): error CS0103: The name ''GetCount'' does not exist
    in the current context

    /tmp/tmpjqoeve6o.cs(37,17): error CS0103: The name ''GetCount'' does not exist
    in the current context

    /tmp/tmpjqoeve6o.cs(30,34): error CS0165: Use of unassigned local variable ''n''

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        char[] consonants = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] vowelsAndConsonants = new char[] { vowels.Concat(chars).ToArray(),\
    \ consonants.Concat(chars).ToArray() };\n        char[] vowelsAndConsonantsAndSpaces\
    \ = new char[] { vowelsAndConsonants.Concat(chars.Where(c => c != ' ')).ToArray(),\
    \ ' ' };\n        char[] vowelsAndConsonantsAndSpacesAndNumbers = new char[] {\
    \ vowelsAndConsonantsAndSpaces.Concat(chars.Where(c => c != ' ')).ToArray(), '\
    \ ' };\n        char[] vowelsAndConsonantsAndSpacesAndNumbersAndLetters = new\
    \ char[] { vowelsAndConsonantsAndSpacesAndNumbers.Concat(chars.Where(c => c !=\
    \ ' ')).ToArray(), ' ' };\n        char[] vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbers\
    \ = new char[] { vowelsAndConsonantsAndSpacesAndNumbersAndLetters.Concat(chars.Where(c\
    \ => c != ' ')).ToArray(), ' ' };\n        char[] vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbersAndLetters\
    \ = new char[] { vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbers.Concat(chars.Where(c\
    \ => c != ' ')).ToArray(), ' ' };\n        char[] vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbersAndLettersAndNumbers\
    \ = new char[] { vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbersAndLetters.Concat(chars.Where(c\
    \ => c != ' ')).ToArray(), ' ' };\n        char[] vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLetters\
    \ = new char[] { vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbersAndLettersAndLetters.Concat(chars.Where(c\
    \ => c != ' ')).ToArray(), ' ' };\n        char[] vowelsAndConsonantsAndSpacesAndNumbersAndLettersAndNumbersAndLettersAndNumbersAndLettersAndNumber\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnwcoq85p.cs(41,113): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        char[] chars\
    \ = s.ToCharArray();\n        List<char> consonants = new List<char>();\n    \
    \    foreach (char c in chars) {\n            if (char.IsLower(c))\n         \
    \       consonants.Add(c);\n        }\n        List<char> vowels = new List<char>();\n\
    \        foreach (char c in chars) {\n            if (char.IsUpper(c))\n     \
    \           vowels.Add(c);\n        }\n        List<char> vowelsAndConsonants\
    \ = new List<char>();\n        vowelsAndConsonants.AddRange(vowels);\n       \
    \ vowelsAndConsonants.AddRange(consonants);\n        List<char> vowelsAndConsonants2\
    \ = new List<char>();\n        vowelsAndConsonants2.AddRange(vowels);\n      \
    \  vowelsAndConsonants2.AddRange(consonants);\n        List<char> vowelsAndConsonants3\
    \ = new List<char>();\n        vowelsAndConsonants3.AddRange(vowels);\n      \
    \  vowelsAndConsonants3.AddRange(consonants);\n        List<char> vowelsAndConsonants4\
    \ = new List<char>();\n        vowelsAndConsonants4.AddRange(vowels);\n      \
    \  vowelsAndConsonants4.AddRange(consonants);\n        List<char> vowelsAndConsonants5\
    \ = new List<char>();\n        vowelsAndConsonants5.AddRange(vowels);\n      \
    \  vowelsAndConsonants5.AddRange(consonants);\n        List<char> vowelsAndConsonants6\
    \ = new List<char>();\n        vowelsAndConsonants6.AddRange(vowels);\n      \
    \  vowelsAndConsonants6.AddRange(consonants);\n        List<char> vowelsAndConsonants7\
    \ = new List<char>();\n        vowelsAndConsonants7.AddRange(vowels);\n      \
    \  vowelsAndConsonants7.AddRange(consonants);\n        List<char> vowelsAndConsonants8\
    \ = new List<char>();\n        vowelsAndConsonants8.AddRange(vowels);\n      \
    \  vowelsAndConsonants8.AddRange(consonants);\n        List<char> vowelsAndConsonants9\
    \ = new List<char>();\n        vowelsAndConsonants9.AddRange(vowels);\n      \
    \  vowelsAndConsonants9.AddRange(consonants);\n        List<char> vowelsAndConsonants10\
    \ = new List<char>();\n        vowelsAndConsonants10.AddRange(vowels);\n     \
    \   vowelsAndConsonants10.AddRange(consonants);\n\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp29jo6plq.cs(25,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        if (word != \"\") {\n            result.Add(word);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        string lastWord = \"\";\n        bool isFirst =\
    \ true;\n        foreach (char c in s) {\n            if (isFirst) {\n       \
    \         isFirst = false;\n                word += c;\n            }\n      \
    \      else {\n                if (word.Length == n) {\n                    result.Add(lastWord);\n\
    \                    lastWord = \"\";\n                    isFirst = true;\n \
    \               }\n                else {\n                    lastWord += c;\n\
    \                }\n            }\n        }\n        if (lastWord.Length > 0)\
    \ {\n            result.Add(lastWord);\n        }\n        return result;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <591df757b8834907a713a14a480b3762>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <591df757b8834907a713a14a480b3762>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.Length\
    \ - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnj8rqu9v.cs(63,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1026: ) expected

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<string> words = new List<string>();\n\
    \        foreach (char c in chars) {\n            if (Char.IsLetter(c)) {\n  \
    \              string word = c.ToString();\n                if (words.Count >=\
    \ n) {\n                    words.RemoveAt(0);\n                }\n          \
    \      words.Add(word);\n            }\n        }\n        foreach (string word\
    \ in words) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fcf8a409f396438b88bd1d37e0fb9198>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fcf8a409f396438b88bd1d37e0fb9198>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.Length\
    \ - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnj8rqu9v.cs(63,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1026: ) expected

    /tmp/tmpnj8rqu9v.cs(63,51): error CS1002: ; expected

    '
  timestamp: 1659805313
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetterOrDigit(c)) {\n                word\
    \ += c;\n                count++;\n            }\n        }\n        if (count\
    \ == n) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f143b8331be446bace824b2ecb26211>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f143b8331be446bace824b2ecb26211>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ \"\";\n        string last = \"\";\n        long count = 0;\n        bool isFirst\
    \ = true;\n        foreach (char c in s) {\n            if (isFirst) {\n     \
    \           isFirst = false;\n                word += c;\n            } else {\n\
    \                word += c;\n                if (word.Length == n) {\n       \
    \             result.Add(word);\n                    word = \"\";\n          \
    \          count = 0;\n                }\n            }\n            if (word.Length\
    \ > 0) {\n                count++;\n            }\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bec1d171bee74562b2f6ec0c7eb550b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bec1d171bee74562b2f6ec0c7eb550b4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string firstWord = s.Substring(0, s.Length - 1);\n       \
    \ string lastFirstWord = s.Substring(s.Length - 1, 1);\n        string firstLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstWord = s.Substring(0,\
    \ s.Length - 1);\n        string firstLastFirstLastWord = s.Substring(0, s.Length\
    \ - 1);\n        string firstLastFirstLastLastWord = s.Substring(0, s.Length -\
    \ 1);\n        string firstLastFirstLastLastLastWord = s.Substring(0, s.Length\
    \ - 1);\n        string firstLastFirstLastLastLastLastWord = s.Substring(0, s.Length\
    \ - 1);\n        string firstLastFirstLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string firstLastFirstLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastWord =\
    \ s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLastLastLastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string firstLastFirstLastLastLastLast\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_2gjaecr.cs(54,46): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = string.Empty;\n        bool isConsonant = false;\n        bool isWord\
    \ = false;\n        string letter = string.Empty;\n        long count = 0;\n \
    \       foreach (char c in s) {\n            if (char.IsLetter(c)) {\n       \
    \         isWord = true;\n                count++;\n                if (count\
    \ == n) {\n                    isConsonant = true;\n                    isWord\
    \ = false;\n                }\n                letter = c;\n            } else\
    \ {\n                isWord = false;\n            }\n        }\n        if (isWord)\
    \ {\n            result.Add(word);\n        }\n        if (isConsonant) {\n  \
    \          string newWord = string.Empty;\n            foreach (char c in letter)\
    \ {\n                newWord += c;\n            }\n            result.Add(newWord);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5f9z1_v6.cs(40,26): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        bool isConsonant = false;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n            } else {\n                isConsonant = true;\n            }\n\
    \        }\n        if (isConsonant) {\n            result.Add(word);\n      \
    \  }\n        long count = 0;\n        foreach (char c in word) {\n          \
    \  if (char.IsLetter(c)) {\n                count++;\n            }\n        }\n\
    \        if (count == n) {\n            result.Add(word);\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0247cf7a493349ab8138544af0e130f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0247cf7a493349ab8138544af0e130f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        char[] charsCopy = chars.ToArray();\n\
    \        Array.Sort(charsCopy);\n        List<char> consonants = new List<char>();\n\
    \        foreach (char c in charsCopy) {\n            if (char.IsLower(c)) {\n\
    \                consonants.Add(c);\n            }\n        }\n        List<char>\
    \ vowels = new List<char>();\n        foreach (char c in charsCopy) {\n      \
    \      if (char.IsUpper(c)) {\n                vowels.Add(c);\n            }\n\
    \        }\n        List<char> vowelsAndConsonants = new List<char>();\n     \
    \   vowelsAndConsonants.AddRange(vowels);\n        vowelsAndConsonants.AddRange(consonants);\n\
    \        List<char> vowelsAndConsonantsCopy = new List<char>(vowelsAndConsonants);\n\
    \        vowelsAndConsonantsCopy.Sort();\n        List<char> vowelsAndConsonantsCopySorted\
    \ = new List<char>(vowelsAndConsonantsCopy);\n        vowelsAndConsonantsCopySorted.Sort();\n\
    \        List<char> vowelsAndConsonantsCopySortedCopy = new List<char>(vowelsAndConsonantsCopySorted);\n\
    \        vowelsAndConsonantsCopySortedCopy.Sort();\n        List<char> vowelsAndConsonantsCopySortedCopySorted\
    \ = new List<char>(vowelsAndConsonantsCopySortedCopy);\n        vowelsAndConsonantsCopySortedCopySorted.Sort();\n\
    \        List<char> vowelsAndConsonantsCopySortedCopySortedCopy = new List<char>(vowelsAndConsonantsCopySortedCopySorted);\n\
    \        vowelsAndConsonantsCopySortedCopySortedCopy.Sort();\n        List<char>\
    \ vowelsAndConsonantsCopySortedCopySortedCopySorted = new List<char>(vowelsAndConsonantsCopySortedCopySortedCopy);\n\
    \        vowelsAndConsonantsCopySortedCopySortedCopySorted.Sort();\n        List<char>\
    \ vowelsAndConsonantsCopySortedCopySortedCopySorted = new List<char>(vowelsAndConsonantsCopySortedCopySortedCopySorted);\n\
    \        vowelsAndConsonantsCopySortedCopySortedCopySorted.Sort();\n        List<char>\
    \ vowelsAndConsonantsCopySortedCopySortedCopySorted = new List<char>(vowelsAndConsonantsCopySortedCopySortedCopySorted);\n\
    \        vowelsAndConsonantsCopySortedCopySortedCopySorted.Sort();\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpshg8tugp.cs(60,20): error CS0128: A local variable or function named ''vowelsAndConsonantsCopySortedCopySortedCopySorted''
    is already defined in this scope

    /tmp/tmpshg8tugp.cs(62,20): error CS0128: A local variable or function named ''vowelsAndConsonantsCopySortedCopySortedCopySorted''
    is already defined in this scope

    /tmp/tmpshg8tugp.cs(25,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = \"\";\n    \
    \    long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n                count++;\n            }\n   \
    \         if (count == n) {\n                result.Add(word);\n             \
    \   word = \"\";\n                count = 0;\n            }\n        }\n     \
    \   return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bfb21747b3f4e3291a3d502b44f5146>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9bfb21747b3f4e3291a3d502b44f5146>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        bool isConsonant = false;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n\
    \            }\n            if (char.IsUpper(c)) {\n                isConsonant\
    \ = true;\n            }\n            if (char.IsLower(c)) {\n               \
    \ isConsonant = false;\n            }\n            if (isConsonant) {\n      \
    \          if (word.Length == n) {\n                    result.Add(word);\n  \
    \                  word = \"\";\n                }\n            }\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae353bea9fbf472f9778b3b61178f5f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae353bea9fbf472f9778b3b61178f5f2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = \"\";\n        long count = 0;\n        foreach (char c in s) {\n        \
    \    if (char.IsLetterOrDigit(c)) {\n                word += c;\n            \
    \    count++;\n            }\n        }\n        if (count == n) {\n         \
    \   result.Add(word);\n        }\n        string word2 = \"\";\n        long count2\
    \ = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word2 += c;\n                count2++;\n            }\n \
    \       }\n        if (count2 == n) {\n            result.Add(word2);\n      \
    \  }\n        string word3 = \"\";\n        long count3 = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetterOrDigit(c)) {\n              \
    \  word3 += c;\n                count3++;\n            }\n        }\n        if\
    \ (count3 == n) {\n            result.Add(word3);\n        }\n        string word4\
    \ = \"\";\n        long count4 = 0;\n        foreach (char c in s) {\n       \
    \     if (char.IsLetterOrDigit(c)) {\n                word4 += c;\n          \
    \      count4++;\n            }\n        }\n        if (count4 == n) {\n     \
    \       result.Add(word4);\n        }\n        string word5 = \"\";\n        long\
    \ count5 = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word5 += c;\n                count5++;\n            }\n \
    \       }\n        if (count5 == n) {\n            result.Add(word5);\n      \
    \  }\n        string word6 = \"\";\n        long count6 = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetterOrDigit(c)) {\n              \
    \  word6 += c;\n                count6++;\n            }\n        }\n        if\
    \ (count6 == n) {\n            result.Add(word6);\n        }\n        string word7\
    \ = \"\";\n        long count7 = 0;\n        foreach (char c in s) {\n       \
    \     if (char.IsLetterOrDigit(c)) {\n                word7 += c;\n          \
    \      count7++;\n            }\n        }\n        if (count7 == n) {\n     \
    \       result.Add(word7);\n        }\n        string word8 = \"\";\n        long\
    \ count8 = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word8 += c;\n                count8++;\n            }\n \
    \       }\n        if (count8 == n) {\n            result.Add(word8);\n      \
    \  }\n        string word9 = \"\";\n        long count9 = 0;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetterOrDigit(c)) {\n              \
    \  word9 += c;\n                count9++;\n            }\n        }\n        if\
    \ (count9 == n) {\n            result.Add(word9);\n        }\n        \n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuuqyr6wg.cs(25,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        string lastWord = string.Empty;\n        bool isLastWord\
    \ = false;\n        long count = 0;\n        foreach (char c in s) {\n       \
    \     if (char.IsLetter(c)) {\n                if (word == string.Empty) {\n \
    \                   word = c;\n                    isLastWord = true;\n      \
    \          }\n                else {\n                    if (isLastWord) {\n\
    \                        result.Add(lastWord);\n                        lastWord\
    \ = string.Empty;\n                        isLastWord = false;\n             \
    \       }\n                    else {\n                        lastWord += c;\n\
    \                    }\n                }\n                count++;\n        \
    \    }\n        }\n        if (count != n) {\n            result.Add(lastWord);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_1lp4wvu.cs(36,28): error CS0029: Cannot implicitly convert type ''char''
    to ''string''

    '
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        string lastWord = \"\";\n        long count = 0;\n\
    \        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c)) {\n\
    \                word += c;\n                count++;\n            } else {\n\
    \                if (count >= n) {\n                    result.Add(word);\n  \
    \                  lastWord = word;\n                    count = 0;\n        \
    \        }\n                word = \"\";\n            }\n        }\n        if\
    \ (count >= n) {\n            result.Add(lastWord);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a411b78cca5841c6ac87af67ae51d4ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a411b78cca5841c6ac87af67ae51d4ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isWord = false;\n        foreach (char c in s) {\n\
    \            if (char.IsLetter(c)) {\n                if (isWord) {\n        \
    \            result.Add(word);\n                    word = \"\";\n           \
    \         isWord = false;\n                }\n                word += c;\n   \
    \         } else {\n                if (isWord) {\n                    result.Add(word);\n\
    \                    word = \"\";\n                    isWord = false;\n     \
    \           }\n                isWord = true;\n            }\n        }\n    \
    \    if (word != \"\") {\n            result.Add(word);\n        }\n        return\
    \ result.Where(w => w.Count() == n).ToList();\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dc9ad2e113a4b10bd9410147725fc8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5dc9ad2e113a4b10bd9410147725fc8e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string wordWithCount = \"\";\n        long count = 0;\n\
    \        bool isWord = false;\n        foreach (char c in s) {\n            if\
    \ (char.IsLetter(c)) {\n                word += c;\n                isWord = true;\n\
    \            }\n            if (isWord) {\n                count++;\n        \
    \        if (count == n) {\n                    result.Add(word);\n          \
    \          word = \"\";\n                    isWord = false;\n               \
    \ }\n            }\n        }\n        if (word != \"\") {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e511df6918f0480ab99746edcecb78cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e511df6918f0480ab99746edcecb78cd>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string lastWord = \"\";\n        bool isConsonant = false;\n\
    \        bool isFirstWord = true;\n        foreach (char c in s) {\n         \
    \   if (char.IsLetter(c)) {\n                if (isFirstWord) {\n            \
    \        isFirstWord = false;\n                    isConsonant = true;\n     \
    \               word += c;\n                } else {\n                    if (isConsonant)\
    \ {\n                        word += c;\n                        isConsonant =\
    \ false;\n                    } else {\n                        result.Add(word);\n\
    \                        word = \"\";\n                        isConsonant = true;\n\
    \                    }\n                }\n            } else {\n            \
    \    isConsonant = false;\n            }\n        }\n        if (word != \"\"\
    ) {\n            result.Add(word);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <339d1fe0868547c7b065d04f7a0a6697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <339d1fe0868547c7b065d04f7a0a6697>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        char[] consonants = new char[] { 'b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z' };\n        char[] vowels = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u' };\n        char[] vowelsAndConsonants = new char[] { 'a', 'e', 'i', 'o',\
    \ 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] consonantsAndVowels = new char[]\
    \ { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] consonantsAndConsonants = new\
    \ char[] { 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r',\
    \ 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsAndVowels = new char[]\
    \ { 'a', 'e', 'i', 'o', 'u' };\n        char[] vowelsAndConsonantsAndVowels =\
    \ new char[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowelsAndConsonantsAndConsonants = new char[] { 'a', 'e', 'i', 'o', 'u',\
    \ 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't',\
    \ 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsAndConsonantsAndConsonantsAndVowels\
    \ = new char[] { 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n       \
    \ char[] vowelsAndConsonantsAndConsonantsAndVowelsAndConsonants = new char[] {\
    \ 'a', 'e', 'i', 'o', 'u', 'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z' };\n        char[] vowelsAndConsonantsAndConsonantsAndVowelsAndConsonantsAndV\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpci2o2z_e.cs(41,74): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s;\n        long count = 0;\n        long index = 0;\n        string lastWord\
    \ = \"\";\n        bool isLastWord = false;\n        bool isLastWordSpace = false;\n\
    \        bool isLastWordLetter = false;\n        bool isLastWordLetterSpace =\
    \ false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n        bool isLastWordLetterSpace\
    \ = false;\n        bool isLastWordLetterSpace = false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyclc53qn.cs(38,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(39,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(40,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(41,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(42,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(43,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(44,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(45,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(46,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(47,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(48,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(49,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(50,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(51,14): error CS0128: A local variable or function named ''isLastWordLetterSpace''
    is already defined in this scope

    /tmp/tmpyclc53qn.cs(52,14): error CS0128: A l'
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ long countConsonants = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                countConsonants++;\n            }\n        }\n        if\
    \ (countConsonants == n) {\n            result.Add(s);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afee6a7ef4594d53abda6e7c3450bc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <afee6a7ef4594d53abda6e7c3450bc2a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                consonants.Add(c);\n            }\n        }\n        List<char>\
    \ vowels = new List<char>();\n        foreach (char c in chars) {\n          \
    \  if (char.IsLetterOrDigit(c) && c != 'a' && c != 'e' && c != 'i' && c != 'o'\
    \ && c != 'u') {\n                vowels.Add(c);\n            }\n        }\n \
    \       List<char> consonantsAndVowels = new List<char>();\n        foreach (char\
    \ c in consonants) {\n            consonantsAndVowels.Add(c);\n        }\n   \
    \     foreach (char c in vowels) {\n            consonantsAndVowels.Add(c);\n\
    \        }\n        List<char> consonantsAndVowelsAndConsonantsAndVowels = new\
    \ List<char>();\n        foreach (char c in consonantsAndVowels) {\n         \
    \   consonantsAndVowelsAndConsonantsAndVowels.Add(c);\n        }\n        List<char>\
    \ consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels = new List<char>();\n\
    \        foreach (char c in consonantsAndVowelsAndConsonantsAndVowels) {\n   \
    \         consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels.Add(c);\n\
    \        }\n        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = new List<char>();\n        foreach (char c in consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels)\
    \ {\n            consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels.Add(c);\n\
    \        }\n        List<char> consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels\
    \ = new List<char>();\n    }\n    public static void Main(string[] args) {\n \
    \   Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new\
    \ string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\"\
    , (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0hmj66hu.cs(60,13): error CS0103: The name ''consonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowelsAndConsonantsAndVowels''
    does not exist in the current context

    /tmp/tmp0hmj66hu.cs(25,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   bool isConsonant = false;\n        bool isLastConsonant = false;\n       \
    \ bool isLastWord = false;\n        bool isLastLastWord = false;\n        bool\
    \ isLastLastLastWord = false;\n        bool isLastLastLastLastWord = false;\n\
    \        bool isLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastWord = false;\n        bool\
    \ isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n       \
    \ bool isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastWord = false;\n       \
    \ bool isLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastWord = false;\n   \
    \     bool isLastLastLastLastLastLastLastLastWord = false;\n        bool isLastLastLastLastLastLastLastLastWord\
    \ = false;\n        bool isLastLastLastLastLastLastLastLastLastWord = false;\n\
    \        bool isLastLastLastLastLastLastLastLastLast\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxrhg9ulq.cs(68,52): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isLastWordConsonant = lastWord.ToUpper().Contains(\"\
    A\") || lastWord.ToUpper().Contains(\"E\") || lastWord.ToUpper().Contains(\"I\"\
    ) || lastWord.ToUpper().Contains(\"O\") || lastWord.ToUpper().Contains(\"U\");\n\
    \        bool isLastWordVowel = lastWord.ToUpper().Contains(\"A\") || lastWord.ToUpper().Contains(\"\
    E\") || lastWord.ToUpper().Contains(\"I\") || lastWord.ToUpper().Contains(\"O\"\
    ) || lastWord.ToUpper().Contains(\"U\") || lastWord.ToUpper().Contains(\"Y\");\n\
    \        bool isLastWordConsonantOrVowel = isLastWordConsonant || isLastWordVowel;\n\
    \        bool isLastWordConsonantOrVowelOrLastWord = lastWord.ToUpper().Contains(\"\
    A\") || lastWord.ToUpper().Contains(\"E\") || lastWord.ToUpper().Contains(\"I\"\
    ) || lastWord.ToUpper().Contains(\"O\") || lastWord.ToUpper().Contains(\"U\")\
    \ || lastWord.ToUpper().Contains(\"Y\") || isLastWordConsonant || isLastWordVowel;\n\
    \        if (isLastWordConsonantOrVowelOrLastWord) {\n            string lastWordConsonant\
    \ = lastWord.Substring(0, 1);\n            string lastWordVowel = lastWord.Substring(1,\
    \ 1);\n            string lastWordConsonantOrVowel = lastWordConsonant + lastWordVowel;\n\
    \            string lastWordConsonantOrVowelOrLastWord = lastWordConsonantOrVowel\
    \ + lastWord;\n            bool isLastWordConsonantOrVowelOrLastWordConsonant\
    \ = lastWordConsonantOrVowelOrLastWord.ToUpper().Contains(\"A\") || lastWordConsonantOrVowelOrLastWord.ToUpper().Contains(\"\
    E\") || lastWordConsonantOrVowelOrLastWord.ToUpper().Contains(\"I\") || lastWordConsonantOrVowelOrLastWord.ToUpper().Contains(\"\
    O\") || lastWord\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkwjmgnjr.cs(41,322): error CS1002: ; expected

    /tmp/tmpkwjmgnjr.cs(43,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpkwjmgnjr.cs(53,2): error CS1513: } expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        char[] chars = s.ToCharArray();\n\
    \        HashSet<string> seen = new HashSet<string>();\n        foreach (char\
    \ c in chars) {\n            if (IsConsonant(c)) {\n                string word\
    \ = GetWord(c, n, seen);\n                if (word != null) result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbmb38a_w.cs(31,17): error CS0103: The name ''IsConsonant'' does not exist
    in the current context

    /tmp/tmpbmb38a_w.cs(32,31): error CS0103: The name ''GetWord'' does not exist
    in the current context

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        List<char> consonants = new List<char>();\n      \
    \  foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c)) {\n \
    \               consonants.Add(c);\n            }\n        }\n        List<string>\
    \ words = new List<string>();\n        foreach (char c in consonants) {\n    \
    \        string word = s.Substring(0, s.IndexOf(c));\n            words.Add(word);\n\
    \            s = s.Substring(word.Length);\n        }\n        List<string> wordsInOrder\
    \ = new List<string>();\n        foreach (string word in words) {\n          \
    \  bool found = false;\n            foreach (string wordInOrder in wordsInOrder)\
    \ {\n                if (wordInOrder.Contains(word)) {\n                    found\
    \ = true;\n                    break;\n                }\n            }\n    \
    \        if (!found) {\n                wordsInOrder.Add(word);\n            }\n\
    \        }\n        if (wordsInOrder.Count != n) {\n            return result;\n\
    \        }\n        return wordsInOrder;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <665dc04913d34357b3411fd2b6768297>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <665dc04913d34357b3411fd2b6768297>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string word2 = \"\";\n        string word3 = \"\";\n \
    \       string word4 = \"\";\n        string word5 = \"\";\n        string word6\
    \ = \"\";\n        string word7 = \"\";\n        string word8 = \"\";\n      \
    \  string word9 = \"\";\n        string word10 = \"\";\n        string word11\
    \ = \"\";\n        string word12 = \"\";\n        string word13 = \"\";\n    \
    \    string word14 = \"\";\n        string word15 = \"\";\n        string word16\
    \ = \"\";\n        string word17 = \"\";\n        string word18 = \"\";\n    \
    \    string word19 = \"\";\n        string word20 = \"\";\n        string word21\
    \ = \"\";\n        string word22 = \"\";\n        string word23 = \"\";\n    \
    \    string word24 = \"\";\n        string word25 = \"\";\n        string word26\
    \ = \"\";\n        string word27 = \"\";\n        string word28 = \"\";\n    \
    \    string word29 = \"\";\n        string word30 = \"\";\n        string word31\
    \ = \"\";\n        string word32 = \"\";\n        string word33 = \"\";\n    \
    \    string word34 = \"\";\n        string word35 = \"\";\n        string word36\
    \ = \"\";\n        string word37 = \"\";\n        string word38 = \"\";\n    \
    \    string word39 = \"\";\n        string word40 = \"\";\n        string word41\
    \ = \"\";\n        string word42 = \"\";\n        string word43 = \"\";\n    \
    \    string word44 = \"\";\n        string word45 = \"\";\n        string word46\
    \ = \"\";\n        string word47 = \"\";\n        string word48 = \"\";\n    \
    \    string word49 = \"\";\n        string word50 = \"\";\n        string word51\
    \ = \"\";\n        string word52 = \"\";\n        string word53 = \"\";\n    \
    \    string word54 = \"\";\n        string word55 = \"\";\n        string word56\
    \ = \"\";\n        string word57 = \"\";\n        string word58 = \"\";\n    \
    \    string word59 = \"\";\n        string word60 = \"\";\n        string word61\
    \ = \"\";\n        string word62 = \"\";\n        string word63 = \"\";\n    \
    \    string word64 = \"\";\n        string word65 = \"\";\n        string word66\
    \ = \"\";\n        string word67 = \"\";\n        string word68 = \"\";\n    \
    \    string word69 = \"\";\n        string word70 = \"\";\n        string word71\
    \ = \"\";\n        string word72 = \"\";\n        string word73 = \"\";\n    \
    \    string word74 = \"\";\n        string word75 = \"\";\n        string word76\
    \ = \"\";\n        string word77 = \"\";\n        string word78 = \"\";\n    \
    \    string word79 = \"\";\n        string word80 = \"\";\n        string word81\
    \ = \"\";\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkfqsyjzm.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(28,16): warning CS0219: The variable ''word2'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(29,16): warning CS0219: The variable ''word3'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(30,16): warning CS0219: The variable ''word4'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(31,16): warning CS0219: The variable ''word5'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(32,16): warning CS0219: The variable ''word6'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(33,16): warning CS0219: The variable ''word7'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(34,16): warning CS0219: The variable ''word8'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(35,16): warning CS0219: The variable ''word9'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(36,16): warning CS0219: The variable ''word10'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(37,16): warning CS0219: The variable ''word11'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(38,16): warning CS0219: The variable ''word12'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(39,16): warning CS0219: The variable ''word13'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(40,16): warning CS0219: The variable ''word14'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(41,16): warning CS0219: The variable ''word15'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(42,16): warning CS0219: The variable ''word16'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(43,16): warning CS0219: The variable ''word17'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(44,16): warning CS0219: The variable ''word18'' is assigned
    but its value is never used

    /tmp/tmpkfqsyjzm.cs(45,'
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isWord = false;\n        long index = 0;\n      \
    \  string temp = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                isWord = true;\n                word += c;\n            }\n\
    \            if (isWord) {\n                isWord = false;\n                result.Add(word);\n\
    \                index++;\n                word = \"\";\n            }\n     \
    \       if (index == n) {\n                result.Add(word);\n               \
    \ index = 0;\n                word = \"\";\n            }\n        }\n       \
    \ return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de83836a27bb42b9bdfa8c817b5ca43d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <de83836a27bb42b9bdfa8c817b5ca43d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.Length\
    \ - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnazzgicj.cs(63,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpnazzgicj.cs(63,51): error CS1026: ) expected

    /tmp/tmpnazzgicj.cs(63,51): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = true;\n        bool isLastConsonant = true;\n\
    \        bool isLastConsonantLastWord = true;\n        bool isLastConsonantLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWord = true;\n    \
    \    bool isLastConsonantLastWordLastWordLastWordLastWord = true;\n        bool\
    \ isLastConsonantLastWordLastWordLastWordLastWordLastWord = true;\n        bool\
    \ isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord = true;\n  \
    \      bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = true;\n        bool isLastCon\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpk8fzesvy.cs(54,23): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        bool isConsonant = false;\n        foreach\
    \ (char c in s) {\n            if (char.IsLetter(c)) {\n                word +=\
    \ c;\n            }\n            if (char.IsUpper(c)) {\n                isConsonant\
    \ = true;\n            }\n            if (char.IsLower(c)) {\n               \
    \ isConsonant = false;\n            }\n            if (isConsonant) {\n      \
    \          if (word.Length == n) {\n                    result.Add(word);\n  \
    \                  word = string.Empty;\n                }\n            }\n  \
    \      }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fca4ad88f85467bb7ebc62908bdc323>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8fca4ad88f85467bb7ebc62908bdc323>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        int[] count = new int[26];\n        bool isConsonant\
    \ = true;\n        foreach (char c in chars) {\n            count[c - 'a']++;\n\
    \            if (count[c - 'a'] == n) {\n                isConsonant = true;\n\
    \            }\n            else {\n                isConsonant = false;\n   \
    \         }\n        }\n        if (isConsonant) {\n            result.Add(s);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64\
    \ n) [0x00040] in <d5187f181e6c41a4b049cceff6915865>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <d5187f181e6c41a4b049cceff6915865>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x00040]\
    \ in <d5187f181e6c41a4b049cceff6915865>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <d5187f181e6c41a4b049cceff6915865>:0 \n"
  stdout: ''
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        List<string> words = new List<string>();\n       \
    \ string word = \"\";\n        foreach (char c in chars) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            }\n            if (word.Length ==\
    \ n) {\n                words.Add(word);\n                word = \"\";\n     \
    \       }\n        }\n        if (word.Length > 0) {\n            words.Add(word);\n\
    \        }\n        return words;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <926b5c92ed954d9f809952d3b95fabe2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <926b5c92ed954d9f809952d3b95fabe2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n\
    \                count++;\n            }\n        }\n        if (count != n) {\n\
    \            return result;\n        }\n        if (word == string.Empty) {\n\
    \            return result;\n        }\n        string temp = word;\n        string\
    \ temp2 = word;\n        string temp3 = word;\n        string temp4 = word;\n\
    \        string temp5 = word;\n        string temp6 = word;\n        string temp7\
    \ = word;\n        string temp8 = word;\n        string temp9 = word;\n      \
    \  string temp10 = word;\n        string temp11 = word;\n        string temp12\
    \ = word;\n        string temp13 = word;\n        string temp14 = word;\n    \
    \    string temp15 = word;\n        string temp16 = word;\n        string temp17\
    \ = word;\n        string temp18 = word;\n        string temp19 = word;\n    \
    \    string temp20 = word;\n        string temp21 = word;\n        string temp22\
    \ = word;\n        string temp23 = word;\n        string temp24 = word;\n    \
    \    string temp25 = word;\n        string temp26 = word;\n        string temp27\
    \ = word;\n        string temp28 = word;\n        string temp29 = word;\n    \
    \    string temp30 = word;\n        string temp31 = word;\n        string temp32\
    \ = word;\n        string temp33 = word;\n        string temp34 = word;\n    \
    \    string temp35 = word;\n        string temp36 = word;\n        string temp37\
    \ = word;\n        string temp38 = word;\n        string temp39 = word;\n    \
    \    string temp40 = word;\n        string temp41 = word;\n        string temp42\
    \ = word;\n        string temp43 = word;\n        string temp44 = word;\n    \
    \    string temp45 = word;\n        string temp46 = word;\n        string temp47\
    \ = word;\n        string temp48 = word;\n        string temp49 = word;\n    \
    \    string temp50 = word;\n        string temp51 = word;\n        string temp52\
    \ = word;\n        string temp53 = word;\n        string temp54 = word;\n    \
    \    string temp55 = word;\n        \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm3yyc8of.cs(25,32): error CS0161: ''Problem.SelectWords(string, long)'':
    not all code paths return a value

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        if (word != \"\") {\n            result.Add(word);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in chars) {\n\
    \            if (char.IsLetterOrDigit(c)) {\n                word += c;\n    \
    \            count++;\n            }\n            if (count == n) {\n        \
    \        result.Add(word);\n                word = \"\";\n                count\
    \ = 0;\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff63ab4bec4544e9bf6f9d9bceb61f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ff63ab4bec4544e9bf6f9d9bceb61f46>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   long count = 0;\n        bool isFirst = true;\n        foreach (char c in\
    \ s) {\n            if (char.IsLetter(c)) {\n                count++;\n      \
    \          if (count == n) {\n                    isFirst = true;\n          \
    \          lastWord = word;\n                    word = string.Empty;\n      \
    \          }\n                word += c;\n            } else {\n             \
    \   if (isFirst) {\n                    isFirst = false;\n                } else\
    \ {\n                    result.Add(lastWord);\n                    lastWord =\
    \ word;\n                    word = string.Empty;\n                }\n       \
    \     }\n        }\n        if (word != string.Empty) {\n            result.Add(lastWord);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0ae9e4a64df441297ec90d690bb3274>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0ae9e4a64df441297ec90d690bb3274>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   bool isLastWord = false;\n        bool isWord = false;\n        bool isWordWithConsonant\
    \ = false;\n        bool isConsonant = false;\n        bool isConsonantWithConsonant\
    \ = false;\n        bool isConsonantWithConsonants = false;\n        bool isConsonantWithConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonants = false;\n    \
    \    bool isConsonantWithConsonantAndConsonantAndConsonant = false;\n        bool\
    \ isConsonantWithConsonantAndConsonantAndConsonants = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonants\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n        bool isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonant\
    \ = false;\n\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu5xi64qb.cs(32,14): warning CS0219: The variable ''isLastWord'' is assigned
    but its value is never used

    /tmp/tmpu5xi64qb.cs(33,14): warning CS0219: The variable ''isWord'' is assigned
    but its value is never used

    /tmp/tmpu5xi64qb.cs(34,14): warning CS0219: The variable ''isWordWithConsonant''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(35,14): warning CS0219: The variable ''isConsonant'' is assigned
    but its value is never used

    /tmp/tmpu5xi64qb.cs(36,14): warning CS0219: The variable ''isConsonantWithConsonant''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(37,14): warning CS0219: The variable ''isConsonantWithConsonants''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(38,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonant''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(39,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonants''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(40,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonantAndConsonant''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(41,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonantAndConsonants''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(42,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonantAndConsonantAndConsonant''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(43,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonantAndConsonantAndConsonants''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(44,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonant''
    is assigned but its value is never used

    /tmp/tmpu5xi64qb.cs(45,14): warning CS0219: The variable ''isConsonantWithConsonantAndConsonantAndConsonantAndConsonantAndConsonantAndConsonant''
    is assigned but its'
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        if (word != \"\") {\n            result.Add(word);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        long count = 0;\n        foreach (char c in s)\
    \ {\n            if (char.IsLetter(c)) {\n                word += c;\n       \
    \         count++;\n            }\n        }\n        if (count == n) {\n    \
    \        result.Add(word);\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <427cb6e8f59044e0aac8d235c72f66b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <427cb6e8f59044e0aac8d235c72f66b6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string lastWord = \"\";\n        bool isFirst = true;\n\
    \        bool isLast = true;\n        bool isMiddle = true;\n        bool isFirstMiddle\
    \ = true;\n        bool isLastMiddle = true;\n        bool isFirstLast = true;\n\
    \        bool isLastLast = true;\n        bool isFirstLastMiddle = true;\n   \
    \     bool isLastLastMiddle = true;\n        bool isFirstLastLast = true;\n  \
    \      bool isLastLastLast = true;\n        bool isFirstLastLastMiddle = true;\n\
    \        bool isLastLastLastMiddle = true;\n        bool isFirstLastLastLast =\
    \ true;\n        bool isLastLastLastLast = true;\n        bool isFirstLastLastLastMiddle\
    \ = true;\n        bool isLastLastLastLastMiddle = true;\n        bool isFirstLastLastLastLast\
    \ = true;\n        bool isLastLastLastLastLast = true;\n        bool isFirstLastLastLastLastMiddle\
    \ = true;\n        bool isLastLastLastLastLastMiddle = true;\n        bool isFirstLastLastLastLastLast\
    \ = true;\n        bool isLastLastLastLastLastLast = true;\n        bool isFirstLastLastLastLastLastMiddle\
    \ = true;\n        bool isLastLastLastLastLastLastMiddle = true;\n        bool\
    \ isFirstLastLastLastLastLastLast = true;\n        bool isLastLastLastLastLastLastLast\
    \ = true;\n        bool isFirstLastLastLastLastLastLastMiddle = true;\n      \
    \  bool isLastLastLastLastLastLastLastMiddle = true;\n        bool isFirstLastLastLastLastLastLastLastMiddle\
    \ = true;\n        bool isLastLastLastLastLastLastLastMiddle = true;\n       \
    \ bool isFirstLastLastLastLastLastLastLastMiddle = true;\n        bool isLastLastLastLastLastLastLastLastMiddle\
    \ = true;\n        bool isFirstLastLastLastLastLastLastLastLastMiddle = true;\n\
    \        bool isLastLastLastLastLastLastLastLastLastMiddle = true;\n        bool\
    \ isFirstLastLastLastLastLastLastLastLastLastMiddle = true;\n        bool isLastLastLastLastLastLastLastLastLastMiddle\
    \ = true;\n        bool isFirstLastLastLastLastLastLastLastLastLastMiddle = true;\n\
    \        bool isLastLastLastLastLastLastLastLastLastLastMiddle = true;\n     \
    \   bool isFirstLastLastLastLastLastLastLastLastLastMiddle = true;\n        bool\
    \ isLastLastLastLastLastLastLastLastLastLastMiddle = true;\n        bool isFirstLastLastLastLastLastLastLastLastLastLastMiddle\
    \ = true;\n        bool isLastLastLastLastLastLastLastLastLastLastLastMiddle =\
    \ true;\n        bool isFirstLast\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpac45443x.cs(72,25): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ string.Empty;\n        string lastWord = string.Empty;\n        string nextWord\
    \ = string.Empty;\n        string lastNextWord = string.Empty;\n        string\
    \ nextLastWord = string.Empty;\n        string lastNextNextWord = string.Empty;\n\
    \        string nextLastNextWord = string.Empty;\n        string lastNextNextNextWord\
    \ = string.Empty;\n        string nextLastNextNextWord = string.Empty;\n     \
    \   string lastNextNextNextNextWord = string.Empty;\n        string nextLastNextNextNextWord\
    \ = string.Empty;\n        string lastNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextWord = string.Empty;\n        string lastNextNextNextNextNextNextWord\
    \ = string.Empty;\n        string nextLastNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextWord = string.Empty;\n       \
    \ string nextLastNextNextNextNextNextNextWord = string.Empty;\n        string\
    \ lastNextNextNextNextNextNextNextNextWord = string.Empty;\n        string nextLastNextNextNextNextNextNextNextWord\
    \ = string.Empty;\n        string lastNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextWord = string.Empty;\n   \
    \     string lastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n  \
    \      string nextLastNextNextNextNextNextNextNextNextWord = string.Empty;\n \
    \       string lastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNext\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9zgwnv0g.cs(62,52): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string wordWithCount = \"\";\n        string wordWithCountAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpaces = \"\";\n        string\
    \ wordWithCountAndSpacesAndSpacesAndSpaces = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        string wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces\
    \ = \"\";\n        \n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new List<string>(new\
    \ string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"Mary\"\
    , (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpztp2_o5j.cs(27,16): warning CS0219: The variable ''word'' is assigned
    but its value is never used

    /tmp/tmpztp2_o5j.cs(28,16): warning CS0219: The variable ''wordWithCount'' is
    assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(29,16): warning CS0219: The variable ''wordWithCountAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(30,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(31,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(32,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(33,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(34,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(35,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(36,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(37,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(38,16): warning CS0219: The variable ''wordWithCountAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpacesAndSpaces''
    is assigned but its value is never used

    /tmp/tmpztp2_o5j.cs(39,16): warning CS0219: The vari'
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = false;\n        bool isConsonantLast =\
    \ false;\n        bool isConsonantLastLast = false;\n        bool isConsonantLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLastLastLast = false;\n      \
    \  bool isConsonantLastLastLastLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLastLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLast = false;\n     \
    \   bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n      \
    \  bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n       \
    \ bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n        bool\
    \ isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLastLastLastLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLastLastLastLastLastLastLast =\
    \ false;\n        bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n \
    \       bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLastLastLast\
    \ = false;\n        bool is\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1n6esyrg.cs(59,14): error CS1001: Identifier expected

    /tmp/tmp1n6esyrg.cs(59,14): error CS1002: ; expected

    /tmp/tmp1n6esyrg.cs(59,14): error CS1525: Invalid expression term ''is''

    /tmp/tmp1n6esyrg.cs(59,16): error CS1031: Type expected

    /tmp/tmp1n6esyrg.cs(59,16): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = \"\";\n    \
    \    string lastWord = \"\";\n        bool isFirst = true;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                if (isFirst)\
    \ {\n                    isFirst = false;\n                    word += c;\n  \
    \              } else {\n                    lastWord += c;\n                \
    \    if (lastWord.Length == n) {\n                        result.Add(word);\n\
    \                        word = \"\";\n                        lastWord = \"\"\
    ;\n                    }\n                }\n            }\n        }\n      \
    \  return result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57d931093f4340199d96358e7e4a9c54>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <57d931093f4340199d96358e7e4a9c54>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s;\n        string lastWord = \"\";\n        string lastChar = \"\";\n     \
    \   long count = 0;\n        bool isWord = false;\n        bool isLastChar = false;\n\
    \        bool isLastWord = false;\n        bool isLastWordInWord = false;\n  \
    \      bool isLastWordInChar = false;\n        bool isLastCharInWord = false;\n\
    \        bool isLastCharInChar = false;\n        bool isLastCharInLastWord = false;\n\
    \        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastCharInLastChar = false;\n        bool isLastWordInLastWord\
    \ = false;\n        bool isLastWordInLastChar = false;\n        bool isLastCharInLastWord\
    \ = false;\n        bool isLastChar\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_llypzly.cs(82,24): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetterOrDigit(c)) {\n                word\
    \ += c;\n                count++;\n            }\n        }\n        if (count\
    \ == n) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f143b8331be446bace824b2ecb26211>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3f143b8331be446bace824b2ecb26211>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string rest = s.Substring(s.Length\
    \ - 1);\n        List<string> words = SelectWords(word, n);\n        foreach (string\
    \ word in words) {\n            if (word.Length == n) {\n                result.Add(word);\n\
    \            }\n        }\n        foreach (string word in words) {\n        \
    \    if (word.Length > n) {\n                result.Add(word);\n            }\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpz3asz865.cs(33,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    /tmp/tmpz3asz865.cs(38,25): error CS0136: A local or parameter named ''word''
    cannot be declared in this scope because that name is used in an enclosing local
    scope to define a local or parameter

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetterOrDigit(c)) {\n                count++;\n\
    \                if (count == n) {\n                    result.Add(word);\n  \
    \                  word = string.Empty;\n                    count = 0;\n    \
    \            }\n                word += c;\n            }\n        }\n       \
    \ if (count > 0) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f22be9e66cd74a59aeb448642f6f3ad2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f22be9e66cd74a59aeb448642f6f3ad2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = false;\n        bool isLastConsonant =\
    \ false;\n        bool isLastConsonantOrLastWord = false;\n        bool isLastConsonantOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWord = false;\n\
    \        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWord = false;\n\
    \        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastWordOrLastWordOrLastWordOrLastWordOr\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo3pdd21l.cs(48,81): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        bool flag = false;\n        for\
    \ (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == 'a') {\n \
    \               flag = true;\n            }\n            if (flag) {\n       \
    \         word += chars[i];\n                count++;\n                if (count\
    \ == n) {\n                    result.Add(word);\n                    word = \"\
    \";\n                    count = 0;\n                    flag = false;\n     \
    \           }\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3ea28fb016e4730afa389bf06e872ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f3ea28fb016e4730afa389bf06e872ff>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string vowels = \"aeiou\";\n        string consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n        string vowelsAndConsonants = vowels + consonants;\n        string vowelsAndConsonantsWithVowelsAndConsonantsRemoved\
    \ = vowelsAndConsonants.Replace(vowels, \"\");\n        string vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemoved\
    \ = vowelsAndConsonantsWithVowelsAndConsonantsRemoved.Replace(\" \", \"\");\n\
    \        string vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemoved\
    \ = vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemoved.Replace(\"\
    0\", \"\");\n        string vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemovedAndNumbersRemoved\
    \ = vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemoved.Replace(\"\
    1\", \"\");\n        string vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemoved\
    \ = vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemovedAndNumbersRemoved.Replace(\"\
    2\", \"\");\n        string vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemoved\
    \ = vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemoved.Replace(\"\
    3\", \"\");\n        string vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemoved\
    \ = vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemovedAndNumbersRemoved.Replace(\"\
    4\", \"\");\n        string vowelsAndConsonantsWithVowelsAndConsonantsRemovedAndSpaceRemoved\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb9rfu_bt.cs(40,80): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in chars) {\n\
    \            if (char.IsLetterOrDigit(c)) {\n                word += c;\n    \
    \            count++;\n            }\n            if (count == n) {\n        \
    \        result.Add(word);\n                count = 0;\n                word =\
    \ \"\";\n            }\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <879036e6b8184a1daa33d0e2ac6da477>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <879036e6b8184a1daa33d0e2ac6da477>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isLastWordConsonant = lastWord.ToUpper().Contains(\"\
    A\") || lastWord.ToUpper().Contains(\"E\") || lastWord.ToUpper().Contains(\"I\"\
    ) || lastWord.ToUpper().Contains(\"O\") || lastWord.ToUpper().Contains(\"U\");\n\
    \        bool isWordConsonant = word.ToUpper().Contains(\"A\") || word.ToUpper().Contains(\"\
    E\") || word.ToUpper().Contains(\"I\") || word.ToUpper().Contains(\"O\") || word.ToUpper().Contains(\"\
    U\");\n        if (isWordConsonant && isLastWordConsonant) {\n            result.Add(word);\n\
    \        }\n        if (word.Length > 0 && word.ToUpper().Contains(\"A\") && word.ToUpper().Contains(\"\
    E\") && word.ToUpper().Contains(\"I\") && word.ToUpper().Contains(\"O\") && word.ToUpper().Contains(\"\
    U\")) {\n            result.Add(word);\n        }\n        if (word.Length > 0\
    \ && word.ToUpper().Contains(\"A\") && word.ToUpper().Contains(\"E\") && word.ToUpper().Contains(\"\
    I\") && word.ToUpper().Contains(\"O\") && word.ToUpper().Contains(\"U\")) {\n\
    \            result.Add(word);\n        }\n        if (word.Length > 0 && word.ToUpper().Contains(\"\
    A\") && word.ToUpper().Contains(\"E\") && word.ToUpper().Contains(\"I\") && word.ToUpper().Contains(\"\
    O\") && word.ToUpper().Contains(\"U\")) {\n            result.Add(word);\n   \
    \     }\n        if (word.Length > 0 && word.ToUpper().Contains(\"A\") && word.ToUpper().Contains(\"\
    E\") && word.ToUpper().Contains(\"I\") && word.ToUpper().Contains(\"O\") && word.ToUpper().Contains(\"\
    U\")) {\n            result.Add(word);\n        }\n        if (word.Length > 0\
    \ && word.ToUpper().Contains(\"A\") && word.ToUpper().Contains(\"E\") && word.ToUpper().Contains(\"\
    I\") && word.ToUpper().Contains(\"O\") && word.ToUpper().Contains(\"U\")) {\n\
    \            result.Add(word);\n        }\n        if (word.Length > 0 && word.ToUpper().Contains(\"\
    A\") && word.ToUpper().Contains(\"E\") && word.ToUpper().Contains(\"I\") && word.ToUpper().Contains(\"\
    O\") && word.To\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt1f1i_4_.cs(52,167): error CS1026: ) expected

    /tmp/tmpt1f1i_4_.cs(52,167): error CS1525: Invalid expression term ''}''

    /tmp/tmpt1f1i_4_.cs(52,167): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = false;\n        bool isConsonantLast =\
    \ false;\n        bool isConsonantLastLast = false;\n        bool isConsonantLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLastLastLast = false;\n      \
    \  bool isConsonantLastLastLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLast = false;\n        bool\
    \ isConsonantLastLastLastLastLastLastLastLastLast = false;\n        bool isConsonantLastLastLastLastLastLastLastLastLast\
    \ = false;\n        bool isConsonantLastLastLastLastLastLastLastLastLastLast =\
    \ false;\n        bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n \
    \       bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n  \
    \      bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLast = false;\n \
    \       bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLastLastLastLastLastLastLast = false;\n\
    \        bool isConsonantLastLastLastLastLastLast\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpaoghoyor.cs(60,49): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n            if (count == n) {\n                result.Add(word);\n\
    \                word = \"\";\n                count = 0;\n            }\n   \
    \     }\n        if (word != \"\") {\n            result.Add(word);\n        }\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b6fbbfd6f74e4028824b8daf93c6bd62>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805314
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        string word = s.Substring(0, s.Length -\
    \ 1);\n        string lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant\
    \ = false;\n        bool isConsonantLast = false;\n        bool isConsonantNext\
    \ = false;\n        bool isConsonantPrev = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool isConsonantPrevNext = false;\n        bool isConsonantPrevPrev\
    \ = false;\n        bool isConsonantNextNext = false;\n        bool isConsonantNextPrev\
    \ = false;\n        bool \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2pmco07n.cs(75,13): error CS1001: Identifier expected

    /tmp/tmp2pmco07n.cs(75,13): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        string word = s.Substring(0, s.Length -\
    \ 1);\n        string lastWord = s.Substring(s.Length - 1, 1);\n        bool isConsonant\
    \ = false;\n        bool isLastConsonant = false;\n        bool isLastConsonantOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonant = false;\n \
    \       bool isLastConsonantOrLastWordOrLastConsonantOrLastWord = false;\n   \
    \     bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonant =\
    \ false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonant\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonant\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonant\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWord\
    \ = false;\n        bool isLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastConsonantOrLastWordOrLastCon\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm0p2ceq2.cs(44,98): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        string lastWord = string.Empty;\n        string nextWord\
    \ = string.Empty;\n        string lastNextWord = string.Empty;\n        string\
    \ nextLastWord = string.Empty;\n        string lastNextNextWord = string.Empty;\n\
    \        string nextLastNextWord = string.Empty;\n        string lastNextNextNextWord\
    \ = string.Empty;\n        string nextLastNextNextWord = string.Empty;\n     \
    \   string lastNextNextNextNextWord = string.Empty;\n        string nextLastNextNextNextWord\
    \ = string.Empty;\n        string lastNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextWord = string.Empty;\n        string lastNextNextNextNextNextNextWord\
    \ = string.Empty;\n        string nextLastNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextWord = string.Empty;\n       \
    \ string nextLastNextNextNextNextNextNextWord = string.Empty;\n        string\
    \ lastNextNextNextNextNextNextNextNextWord = string.Empty;\n        string nextLastNextNextNextNextNextNextNextWord\
    \ = string.Empty;\n        string lastNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextWord = string.Empty;\n   \
    \     string lastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n  \
    \      string nextLastNextNextNextNextNextNextNextNextWord = string.Empty;\n \
    \       string lastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string lastNextNextNextNextNextNextNextNextNextNextNextWord = string.Empty;\n\
    \        string nextLastNextNextNextNextNext\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp37yn76nf.cs(61,44): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        List<char> consonants = new List<char>();\n      \
    \  List<char> vowels = new List<char>();\n        foreach (char c in chars) {\n\
    \            if (char.IsLetter(c)) {\n                if (char.IsLower(c)) {\n\
    \                    vowels.Add(c);\n                } else {\n              \
    \      consonants.Add(c);\n                }\n            }\n        }\n     \
    \   long vowelsCount = vowels.Count;\n        long consonantsCount = consonants.Count;\n\
    \        long vowelsSum = 0;\n        long consonantsSum = 0;\n        long vowelsCountSum\
    \ = 0;\n        long consonantsCountSum = 0;\n        long vowelsSum2 = 0;\n \
    \       long consonantsSum2 = 0;\n        long vowelsCountSum2 = 0;\n        long\
    \ consonantsCountSum2 = 0;\n        long vowelsSum3 = 0;\n        long consonantsSum3\
    \ = 0;\n        long vowelsCountSum3 = 0;\n        long consonantsCountSum3 =\
    \ 0;\n        long vowelsSum4 = 0;\n        long consonantsSum4 = 0;\n       \
    \ long vowelsCountSum4 = 0;\n        long consonantsCountSum4 = 0;\n        long\
    \ vowelsSum5 = 0;\n        long consonantsSum5 = 0;\n        long vowelsCountSum5\
    \ = 0;\n        long consonantsCountSum5 = 0;\n        long vowelsSum6 = 0;\n\
    \        long consonantsSum6 = 0;\n        long vowelsCountSum6 = 0;\n       \
    \ long consonantsCountSum6 = 0;\n        long vowelsSum7 = 0;\n        long consonantsSum7\
    \ = 0;\n        long vowelsCountSum7 = 0;\n        long consonantsCountSum7 =\
    \ 0;\n        long vowelsSum8 = 0;\n        long consonantsSum8 = 0;\n       \
    \ long vowelsCountSum8 = 0;\n        long consonantsCountSum8 = 0;\n        long\
    \ vowelsSum9 = 0;\n        long consonantsSum9 = 0;\n        long vowelsCountSum9\
    \ = 0;\n        long consonantsCountSum9 = 0;\n        long vowelsSum10 = 0;\n\
    \        long consonantsSum10 = 0;\n        long vowelsCountSum10 = 0;\n     \
    \   long consonantsCountSum10 = 0;\n        long vowelsSum11 = 0;\n        long\
    \ consonantsSum11 = 0;\n        long vowelsCountSum11 = 0;\n        long consonantsCountSum11\
    \ = 0;\n        long vowelsSum12 = 0;\n        long consonantsSum12\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbmipta1g.cs(89,29): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ string.Empty;\n        bool isWord = false;\n        long counter = 0;\n   \
    \     foreach (char c in s) {\n            if (char.IsLetter(c)) {\n         \
    \       isWord = true;\n                word += c;\n                counter++;\n\
    \            }\n            if (isWord) {\n                if (counter == n) {\n\
    \                    result.Add(word);\n                    isWord = false;\n\
    \                    counter = 0;\n                    word = string.Empty;\n\
    \                }\n            }\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15c13b056b804c91ac72d08fba5ca795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <15c13b056b804c91ac72d08fba5ca795>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        long\
    \ counter = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                counter++;\n            }\n        }\n        if (counter\
    \ == n) {\n            result.Add(s);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04c1657cd0a74e2a824354ff69473391>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04c1657cd0a74e2a824354ff69473391>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ long max = 0;\n        foreach (char c in s) {\n            max = Math.Max(max,\
    \ (int)c);\n        }\n        long min = max - n;\n        long mid = max / 2;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (c >=\
    \ min && c <= mid) {\n                count++;\n            }\n        }\n   \
    \     if (count == 0) {\n            return result;\n        }\n        long mid2\
    \ = mid / 2;\n        long count = 0;\n        foreach (char c in s) {\n     \
    \       if (c >= mid && c <= mid2) {\n                count++;\n            }\n\
    \        }\n        if (count == 0) {\n            return result;\n        }\n\
    \        long mid3 = mid2 / 2;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (c >= mid2 && c <= mid3) {\n                count++;\n\
    \            }\n        }\n        if (count == 0) {\n            return result;\n\
    \        }\n        long mid4 = mid3 / 2;\n        long count = 0;\n        foreach\
    \ (char c in s) {\n            if (c >= mid3 && c <= mid4) {\n               \
    \ count++;\n            }\n        }\n        if (count == 0) {\n            return\
    \ result;\n        }\n        long mid5 = mid4 / 2;\n        long count = 0;\n\
    \        foreach (char c in s) {\n            if (c >= mid4 && c <= mid5) {\n\
    \                count++;\n            }\n        }\n        if (count == 0) {\n\
    \            return result;\n        }\n        long mid6 = mid5 / 2;\n      \
    \  long count = 0;\n        foreach (char c in s) {\n            if (c >= mid5\
    \ && c <= mid6) {\n                count++;\n            }\n        }\n      \
    \  if (count == 0) {\n            return result;\n        }\n        long mid7\
    \ = mid6 / 2;\n        long count = 0;\n        foreach (char c in s) {\n    \
    \        if (c >= mid6 && c <= mid7) {\n                count++;\n           \
    \ }\n        }\n        if (count == 0) {\n            return result;\n      \
    \  }\n        long mid8 = mid7 / 2;\n        long count = 0;\n        foreach\
    \ (char c in s) {\n            if (c >= mid7 && c <= mid8) {\n               \
    \ count++;\n            }\n        }\n        if (count == 0) {\n            return\
    \ result;\n        }\n        long mid9 = mid8 / 2;\n        long count = 0;\n\
    \        foreach (char c in s) {\n            if (c >= mid8 && c <= mid9) {\n\
    \                count++;\n            }\n        }\n        if (count == 0) {\n\
    \            return result;\n        }\n        long mid10 = mid9 / 2;\n     \
    \   long count = 0;\n        foreach (char c in s) {\n            if (c >= mid9\
    \ && c <= mid10) {\n                count++;\n\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe6y_7abm.cs(132,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpe6y_7abm.cs(142,2): error CS1513: } expected

    '
  timestamp: 1659805316
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        long count = new BigInteger(s, 36).ModPow(BigInteger.One,\
    \ BigInteger.ValueOf(n)).ToString(\"36\").Length;\n        string word = \"\"\
    ;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n    \
    \            word += c;\n            }\n            if (word.Length == count)\
    \ {\n                result.Add(word);\n                word = \"\";\n       \
    \     }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_dips_7l.cs(28,37): error CS1503: Argument 1: cannot convert from ''string''
    to ''System.ReadOnlySpan<byte>''

    /tmp/tmp_dips_7l.cs(28,40): error CS1503: Argument 2: cannot convert from ''int''
    to ''bool''

    /tmp/tmp_dips_7l.cs(28,78): error CS0117: ''BigInteger'' does not contain a definition
    for ''ValueOf''

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isLastWordConsonant = false;\n        bool isWordConsonant\
    \ = false;\n        bool isLastWordConsonant2 = false;\n        bool isWordConsonant2\
    \ = false;\n        bool isLastWordConsonant3 = false;\n        bool isWordConsonant3\
    \ = false;\n        bool isLastWordConsonant4 = false;\n        bool isWordConsonant4\
    \ = false;\n        bool isLastWordConsonant5 = false;\n        bool isWordConsonant5\
    \ = false;\n        bool isLastWordConsonant6 = false;\n        bool isWordConsonant6\
    \ = false;\n        bool isLastWordConsonant7 = false;\n        bool isWordConsonant7\
    \ = false;\n        bool isLastWordConsonant8 = false;\n        bool isWordConsonant8\
    \ = false;\n        bool isLastWordConsonant9 = false;\n        bool isWordConsonant9\
    \ = false;\n        bool isLastWordConsonant10 = false;\n        bool isWordConsonant10\
    \ = false;\n        bool isLastWordConsonant11 = false;\n        bool isWordConsonant11\
    \ = false;\n        bool isLastWordConsonant12 = false;\n        bool isWordConsonant12\
    \ = false;\n        bool isLastWordConsonant13 = false;\n        bool isWordConsonant13\
    \ = false;\n        bool isLastWordConsonant14 = false;\n        bool isWordConsonant14\
    \ = false;\n        bool isLastWordConsonant15 = false;\n        bool isWordConsonant15\
    \ = false;\n        bool isLastWordConsonant16 = false;\n        bool isWordConsonant16\
    \ = false;\n        bool isLastWordConsonant17 = false;\n        bool isWordConsonant17\
    \ = false;\n        bool isLastWordConsonant18 = false;\n        bool isWordConsonant18\
    \ = false;\n        bool isLastWordConsonant19 = false;\n        bool isWordConsonant19\
    \ = false;\n        bool isLastWordConsonant20 = false;\n        bool isWordConsonant20\
    \ = false;\n        bool isLastWordConsonant21 = false;\n        bool isWordConsonant21\
    \ = false;\n        bool isLastWordConsonant22 = false;\n        bool isWordConsonant22\
    \ = false;\n        bool \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpy56w9iu6.cs(76,13): error CS1001: Identifier expected

    /tmp/tmpy56w9iu6.cs(76,13): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        long count = 0;\n        bool isWord =\
    \ false;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n\
    \                isWord = true;\n                word += c;\n                count++;\n\
    \                if (count == n) {\n                    result.Add(word);\n  \
    \                  isWord = false;\n                    count = 0;\n         \
    \           word = string.Empty;\n                }\n            }\n        }\n\
    \        if (isWord) {\n            result.Add(word);\n        }\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fcb9eac97584b3e893da731c23536ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5fcb9eac97584b3e893da731c23536ed>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        List<char> consonants = new List<char>();\n      \
    \  foreach (char c in chars) {\n            if (char.IsLetter(c)) {\n        \
    \        consonants.Add(c);\n            }\n        }\n        List<string> words\
    \ = new List<string>();\n        foreach (char c in consonants) {\n          \
    \  string word = s.Substring(0, s.IndexOf(c));\n            words.Add(word);\n\
    \            s = s.Substring(word.Length);\n        }\n        List<string> result\
    \ = new List<string>();\n        foreach (string word in words) {\n          \
    \  int count = 0;\n            foreach (char c in word) {\n                if\
    \ (char.IsLetter(c)) {\n                    count++;\n                }\n    \
    \        }\n            if (count == n) {\n                result.Add(word);\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcvd46g01.cs(43,22): error CS0128: A local variable or function named ''result''
    is already defined in this scope

    '
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n      \
    \          if (word.Length == n) result.Add(word);\n                word = string.Empty;\n\
    \                word += c;\n            }\n            else if (char.IsWhiteSpace(c))\
    \ {\n                if (word.Length == n) result.Add(word);\n               \
    \ word = string.Empty;\n            }\n            else {\n                word\
    \ += c;\n            }\n        }\n        if (word.Length == n) result.Add(word);\n\
    \        return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad4f80ef83a546d7b229b23400915914>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ad4f80ef83a546d7b229b23400915914>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = \"\";\n    \
    \    string lastWord = \"\";\n        bool isWord = false;\n        long count\
    \ = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n\
    \                isWord = true;\n                word += c;\n                count++;\n\
    \            }\n            else if (char.IsWhiteSpace(c)) {\n               \
    \ if (isWord) {\n                    result.Add(word);\n                    isWord\
    \ = false;\n                    word = \"\";\n                    count = 1;\n\
    \                }\n            }\n            else if (char.IsLetterOrDigit(c))\
    \ {\n                if (isWord) {\n                    result.Add(word);\n  \
    \                  isWord = false;\n                    word = \"\";\n       \
    \             count = 1;\n                }\n            }\n            else {\n\
    \                isWord = false;\n                word = \"\";\n             \
    \   count = 1;\n            }\n            if (count == n) break;\n        }\n\
    \        if (isWord) result.Add(word);\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13d5f91c758f45ec9cdbddf5ec57ab07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13d5f91c758f45ec9cdbddf5ec57ab07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        string rest = s.Substring(s.Length -\
    \ 1);\n        string lastWord = s.Substring(0, s.Length - 1);\n        string\
    \ lastRest = s.Substring(s.Length - 1);\n        string lastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string lastLastRest = s.Substring(s.Length - 1);\n \
    \       string lastLastLastWord = s.Substring(0, s.Length - 1);\n        string\
    \ lastLastLastRest = s.Substring(s.Length - 1);\n        string lastLastLastLastWord\
    \ = s.Substring(0, s.Length - 1);\n        string lastLastLastLastRest = s.Substring(s.Length\
    \ - 1);\n        string lastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n\
    \        string lastLastLastLastLastRest = s.Substring(s.Length - 1);\n      \
    \  string lastLastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n     \
    \   string lastLastLastLastLastLastRest = s.Substring(s.Length - 1);\n       \
    \ string lastLastLastLastLastLastLastWord = s.Substring(0, s.Length - 1);\n  \
    \      string lastLastLastLastLastLastLastRest = s.Substring(s.Length - 1);\n\
    \        string lastLastLastLastLastLastLastLastWord = s.Substring(0, s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string lastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string lastLastLastLastLastLastLastLastLastRest = s.Substring(s.Length\
    \ - 1);\n        string lastLastLastLastLastLastLastLastLastLastWord = s.Substring(0,\
    \ s.Length - 1);\n        string last\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphrjlgr3a.cs(57,20): error CS1002: ; expected

    '
  timestamp: 1659805316
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   bool isConsonant = false;\n        foreach (char c in s) {\n            if\
    \ (char.IsLetter(c)) {\n                word += c;\n            }\n          \
    \  if (char.IsUpper(c)) {\n                isConsonant = true;\n            }\n\
    \            if (char.IsLower(c)) {\n                isConsonant = false;\n  \
    \          }\n            if (isConsonant) {\n                lastWord = word;\n\
    \                word = string.Empty;\n            }\n        }\n        if (lastWord.Length\
    \ == n) {\n            result.Add(lastWord);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c3875becc47475ab90a4a917705cc1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c3875becc47475ab90a4a917705cc1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                word += c;\n            } else {\n                if (word.Length\
    \ == n) {\n                    result.Add(word);\n                    word = \"\
    \";\n                }\n            }\n        }\n        if (word.Length > 0)\
    \ {\n            result.Add(word);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a69fc82bdb94a9c8d21eda2fdee640a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4a69fc82bdb94a9c8d21eda2fdee640a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        string temp = \"\";\n       \
    \ foreach (char c in s) {\n            if (char.IsLetter(c)) {\n             \
    \   word += c;\n                count++;\n            }\n            if (count\
    \ == n) {\n                result.Add(word);\n                word = \"\";\n \
    \               count = 0;\n            }\n        }\n        if (word != \"\"\
    ) {\n            result.Add(word);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25d68851989e46cbb3d468b2903dc0b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25d68851989e46cbb3d468b2903dc0b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<char> consonants = new List<char>();\n\
    \        foreach (char c in chars) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                consonants.Add(c);\n            }\n        }\n        List<string>\
    \ words = new List<string>();\n        foreach (char c in consonants) {\n    \
    \        words.AddRange(SelectWords(s, n, c));\n        }\n        return words;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6v2v9h2q.cs(39,28): error CS1501: No overload for method ''SelectWords''
    takes 3 arguments

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = false;\n        bool isLastConsonant =\
    \ false;\n        bool isLastConsonantLastWord = false;\n        bool isLastConsonantLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWord = false;\n  \
    \      bool isLastConsonantLastWordLastWordLastWordLastWord = false;\n       \
    \ bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n    \
    \    bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n \
    \       bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord =\
    \ false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool \n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_2_gaxf2.cs(55,13): error CS1001: Identifier expected

    /tmp/tmp_2_gaxf2.cs(55,13): error CS1002: ; expected

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        char[] chars =\
    \ s.ToCharArray();\n        int[] count = new int[26];\n        Array.Sort(chars,\
    \ count);\n        string word = \"\";\n        foreach (char c in chars) {\n\
    \            if (count[(int)c] >= n) {\n                word += c;\n         \
    \   }\n        }\n        result.Add(word);\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.IndexOutOfRangeException: Index was outside\
    \ the bounds of the array.\n  at Problem.SelectWords (System.String s, System.Int64\
    \ n) [0x0004c] in <667f4a82bee5411fa367dd64d706c8c7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <667f4a82bee5411fa367dd64d706c8c7>:0 \n[ERROR] FATAL UNHANDLED\
    \ EXCEPTION: System.IndexOutOfRangeException: Index was outside the bounds of\
    \ the array.\n  at Problem.SelectWords (System.String s, System.Int64 n) [0x0004c]\
    \ in <667f4a82bee5411fa367dd64d706c8c7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00001] in <667f4a82bee5411fa367dd64d706c8c7>:0 \n"
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isConsonant = false;\n        bool isWord = false;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c))\
    \ {\n                isWord = true;\n                word += c;\n            \
    \    count++;\n            }\n            if (char.IsWhiteSpace(c)) {\n      \
    \          if (isWord) {\n                    result.Add(word);\n            \
    \        isWord = false;\n                    word = \"\";\n                 \
    \   count = 0;\n                }\n            }\n            if (char.IsConsonant(c))\
    \ {\n                isConsonant = true;\n            }\n            if (char.IsLetterOrDigit(c))\
    \ {\n                if (isConsonant && count >= n) {\n                    result.Add(word);\n\
    \                    isWord = false;\n                    word = \"\";\n     \
    \               count = 0;\n                }\n            }\n        }\n    \
    \    if (isWord) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp90x9im_d.cs(45,22): error CS0117: ''char'' does not contain a definition
    for ''IsConsonant''

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) return result;\n        string word = s;\n       \
    \ long count = 0;\n        string lastWord = \"\";\n        bool isWord = false;\n\
    \        string lastChar = \"\";\n        bool isLastChar = false;\n        bool\
    \ isLastWord = false;\n        bool isLastWordOrSpace = false;\n        bool isLastCharOrSpace\
    \ = false;\n        bool isLastCharOrSpaceOrNewLine = false;\n        bool isLastCharOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLine = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLine = false;\n\
    \        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine = false;\n\
    \        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLineOrNewLine\
    \ = false;\n        bool isLastCharOrNewLineOrNewLineOrNewLine\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcx3_4uuw.cs(52,51): error CS1002: ; expected

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s))\n            return result;\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        long count = 0;\n        foreach (char\
    \ c in word) {\n            if (char.IsLetter(c))\n                count++;\n\
    \        }\n        if (count == n)\n            result.Add(word);\n        if\
    \ (count > n)\n            return result;\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        long lastCount = 0;\n        foreach (char c in lastWord)\
    \ {\n            if (char.IsLetter(c))\n                lastCount++;\n       \
    \ }\n        if (lastCount == n)\n            result.Add(lastWord);\n        if\
    \ (lastCount > n)\n            return result;\n        string lastWord2 = s.Substring(0,\
    \ s.Length - 1);\n        long lastCount2 = 0;\n        foreach (char c in lastWord2)\
    \ {\n            if (char.IsLetter(c))\n                lastCount2++;\n      \
    \  }\n        if (lastCount2 == n)\n            result.Add(lastWord2);\n     \
    \   if (lastCount2 > n)\n            return result;\n        string lastWord3\
    \ = s.Substring(s.Length - 1, 1);\n        long lastCount3 = 0;\n        foreach\
    \ (char c in lastWord3) {\n            if (char.IsLetter(c))\n               \
    \ lastCount3++;\n        }\n        if (lastCount3 == n)\n            result.Add(lastWord3);\n\
    \        if (lastCount3 > n)\n            return result;\n        string lastWord4\
    \ = s.Substring(0, s.Length - 1);\n        long lastCount4 = 0;\n        foreach\
    \ (char c in lastWord4) {\n            if (char.IsLetter(c))\n               \
    \ lastCount4++;\n        }\n        if (lastCount4 == n)\n            result.Add(lastWord4);\n\
    \        if (lastCount4 > n)\n            return result;\n        string lastWord5\
    \ = s.Substring(s.Length - 1, 1);\n        long lastCount5 = 0;\n        foreach\
    \ (char c in lastWord5) {\n            if (char.IsLetter(c))\n               \
    \ lastCount5++;\n        }\n        if (lastCount5 == n)\n            result.Add(lastWord5);\n\
    \        if (lastCount5 > n)\n            return result;\n        string lastWord6\
    \ = s.Substring(0, s.Length - 1);\n        long lastCount6 = 0;\n        foreach\
    \ (char c in lastWord6) {\n            if (char.IsLetter(c))\n               \
    \ lastCount6++;\n        }\n        if (lastCount6 == n)\n            result.Add(lastWord6);\n\
    \        if (lastCount6 > n)\n            return result;\n        string lastWord7\
    \ = s.Substring(s.Length - 1, 1);\n        long lastCount7 = 0;\n        foreach\
    \ (char c in lastWord7) {\n            if (char.IsLetter\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpshbzzw8w.cs(102,30): error CS1026: ) expected

    /tmp/tmpshbzzw8w.cs(102,30): error CS1525: Invalid expression term ''}''

    /tmp/tmpshbzzw8w.cs(102,30): error CS1002: ; expected

    /tmp/tmpshbzzw8w.cs(104,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpshbzzw8w.cs(114,2): error CS1513: } expected

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        long n = Convert.ToInt64(n);\n        string\
    \ word = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        bool isConsonant = false;\n        bool isLastConsonant =\
    \ false;\n        bool isLastConsonantLastWord = false;\n        bool isLastConsonantLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWord = false;\n  \
    \      bool isLastConsonantLastWordLastWordLastWordLastWord = false;\n       \
    \ bool isLastConsonantLastWordLastWordLastWordLastWordLastWord = false;\n    \
    \    bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWord = false;\n\
    \        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWordLastWord\
    \ = false;\n        bool isLastConsonantLastWordLastWordLastWord\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiqezr4pm.cs(52,53): error CS1002: ; expected

    '
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in chars) {\n\
    \            if (char.IsLetter(c)) {\n                word += c;\n           \
    \     count++;\n            }\n            if (count == n) {\n               \
    \ result.Add(word);\n                word = \"\";\n                count = 0;\n\
    \            }\n        }\n        return result;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <930d337f5a6f493ea845f0967ca17b94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <930d337f5a6f493ea845f0967ca17b94>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        long count = 0;\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                count++;\n                if (count == n) {\n           \
    \         result.Add(word);\n                    word = string.Empty;\n      \
    \              count = 0;\n                }\n                word += c;\n   \
    \         }\n        }\n        if (count != n) result.Add(word);\n        return\
    \ result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ff26c9270b149ebb801df89e7764684>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ff26c9270b149ebb801df89e7764684>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        bool isConsonant = false;\n        foreach (char\
    \ c in s) {\n            if (Char.IsLetter(c)) {\n                word += c;\n\
    \                isConsonant = true;\n            }\n            if (isConsonant)\
    \ {\n                if (n == 1L) {\n                    result.Add(word);\n \
    \               }\n                word = \"\";\n                isConsonant =\
    \ false;\n            }\n        }\n        return result;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had\
    \ a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"\
    }))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <375f791c73ac41ebbe894382e129da79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <375f791c73ac41ebbe894382e129da79>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") {\n            return result;\n        }\n        string word =\
    \ s.Substring(0, s.Length - 1);\n        bool isConsonant = true;\n        string\
    \ lastWord = \"\";\n        foreach (char c in word) {\n            if (char.IsLetter(c))\
    \ {\n                isConsonant = false;\n            }\n            if (isConsonant)\
    \ {\n                lastWord = lastWord + c;\n            }\n        }\n    \
    \    long count = 0;\n        foreach (char c in lastWord) {\n            if (char.IsLetter(c))\
    \ {\n                count++;\n            }\n        }\n        if (count ==\
    \ n) {\n            result.Add(word);\n        }\n        return result;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ab21ab67e10432183b1731bae024f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6ab21ab67e10432183b1731bae024f97>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        string lastWord = string.Empty;\n     \
    \   string nextWord = string.Empty;\n        string nextLastWord = string.Empty;\n\
    \        string lastWordNextWord = string.Empty;\n        string nextLastWordNextWord\
    \ = string.Empty;\n        string lastWordNextWordNextWord = string.Empty;\n \
    \       string nextLastWordNextWordNextWord = string.Empty;\n        string lastWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string nextLastWordNextWordNextWordNextWord = string.Empty;\n\
    \        string lastWordNextWordNextWordNextWordNextWord = string.Empty;\n   \
    \     string nextLastWordNextWordNextWordNextWordNextWord = string.Empty;\n  \
    \      string lastWordNextWordNextWordNextWordNextWordNextWord = string.Empty;\n\
    \        string nextLastWordNextWordNextWordNextWordNextWordNextWord = string.Empty;\n\
    \        string lastWordNextWordNextWordNextWordNextWordNextWordNextWord = string.Empty;\n\
    \        string nextLastWordNextWordNextWordNextWordNextWordNextWordNextWord =\
    \ string.Empty;\n        string lastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string nextLastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string lastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string nextLastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string lastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string nextLastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string lastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string nextLastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWord\
    \ = string.Empty;\n        string lastWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNextWordNext\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgc0cvhu7.cs(54,100): error CS1002: ; expected

    '
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        bool isConsonant = false;\n        long count =\
    \ 0;\n        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n \
    \               word += c;\n                isConsonant = false;\n           \
    \     count++;\n            }\n            else {\n                if (isConsonant)\
    \ {\n                    result.Add(word);\n                    word = \"\";\n\
    \                    isConsonant = false;\n                    count = 1;\n  \
    \              }\n                else {\n                    isConsonant = true;\n\
    \                }\n            }\n            if (count == n) {\n           \
    \     result.Add(word);\n                word = \"\";\n                isConsonant\
    \ = false;\n                count = 1;\n            }\n        }\n        if (word\
    \ != \"\") {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3873fe51845843949b4979cba31615f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3873fe51845843949b4979cba31615f8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        string\
    \ word = \"\";\n        bool isWord = false;\n        long count = 0;\n      \
    \  for (int i = 0; i < chars.Length; i++) {\n            if (chars[i] == '\\'')\
    \ {\n                isWord = true;\n                count++;\n              \
    \  if (count == n) {\n                    result.Add(word);\n                \
    \    isWord = false;\n                    count = 0;\n                }\n    \
    \            word = \"\";\n            }\n            if (chars[i] == '\\'') {\n\
    \                isWord = true;\n                count++;\n                if\
    \ (count == n) {\n                    result.Add(word);\n                    isWord\
    \ = false;\n                    count = 0;\n                }\n              \
    \  word = \"\";\n            }\n            if (chars[i] == ' ') {\n         \
    \       isWord = true;\n                count++;\n                if (count ==\
    \ n) {\n                    result.Add(word);\n                    isWord = false;\n\
    \                    count = 0;\n                }\n                word = \"\"\
    ;\n            }\n            if (chars[i] == '\\'') {\n                isWord\
    \ = true;\n                count++;\n                if (count == n) {\n     \
    \               result.Add(word);\n                    isWord = false;\n     \
    \               count = 0;\n                }\n                word = \"\";\n\
    \            }\n            if (chars[i] == ' ') {\n                isWord = true;\n\
    \                count++;\n                if (count == n) {\n               \
    \     result.Add(word);\n                    isWord = false;\n               \
    \     count = 0;\n                }\n                word = \"\";\n          \
    \  }\n            if (chars[i] == '\\'') {\n                isWord = true;\n \
    \               count++;\n                if (count == n) {\n                \
    \    result.Add(word);\n                    isWord = false;\n                \
    \    count = 0;\n                }\n                word = \"\";\n           \
    \ }\n            if (chars[i] == ' ') {\n                isWord = true;\n    \
    \            count++;\n                if (count == n) {\n                   \
    \ result.Add(word);\n                    isWord = false;\n                   \
    \ count = 0;\n                }\n                word = \"\";\n            }\n\
    \            if (chars[i] == '\\'') {\n                isWord = true;\n      \
    \          count++;\n                if (count == n) {\n                    result.Add(word);\n\
    \                    isWord = false;\n                    count = 0;\n       \
    \         }\n                word = \"\";\n            }\n            if (chars[i]\
    \ == ' ') {\n                isWord = true;\n                count++;\n      \
    \          if (count == n) {\n                    result.Add(word);\n        \
    \            isWord = false;\n                    count = 0;\n               \
    \ }\n                word = \"\";\n            }\n            if (chars[i] ==\
    \ '\\'') {\n                isWord = true;\n                count++;\n       \
    \         if (count == n) {\n                    result.Add(word);\n         \
    \           isWord = false;\n                    count = 0;\n                }\n\
    \                word = \"\";\n            }\n            if (chars[i] == ' ')\
    \ {\n                isWord = true;\n                count++;\n              \
    \  if (count == n) {\n                    result.\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"\
    ), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyq24yqg_.cs(140,28): error CS1001: Identifier expected

    /tmp/tmpyq24yqg_.cs(140,28): error CS1002: ; expected

    /tmp/tmpyq24yqg_.cs(142,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmpyq24yqg_.cs(152,2): error CS1513: } expected

    '
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        List<string> words = new List<string>();\n\
    \        string word = \"\";\n        bool isWord = false;\n        foreach (char\
    \ c in chars) {\n            if (char.IsLetterOrDigit(c)) {\n                word\
    \ += c;\n                isWord = true;\n            }\n            if (isWord)\
    \ {\n                if (word.Length == n) {\n                    words.Add(word);\n\
    \                    word = \"\";\n                    isWord = false;\n     \
    \           }\n            }\n        }\n        if (words.Count > 0) {\n    \
    \        result.AddRange(words);\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f72066247f5e43f8907fa1117e3a4a27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f72066247f5e43f8907fa1117e3a4a27>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string lastWord = \"\";\n        string lastWord2 = \"\
    \";\n        string lastWord3 = \"\";\n        string lastWord4 = \"\";\n    \
    \    string lastWord5 = \"\";\n        string lastWord6 = \"\";\n        string\
    \ lastWord7 = \"\";\n        string lastWord8 = \"\";\n        string lastWord9\
    \ = \"\";\n        string lastWord10 = \"\";\n        string lastWord11 = \"\"\
    ;\n        string lastWord12 = \"\";\n        string lastWord13 = \"\";\n    \
    \    string lastWord14 = \"\";\n        string lastWord15 = \"\";\n        string\
    \ lastWord16 = \"\";\n        string lastWord17 = \"\";\n        string lastWord18\
    \ = \"\";\n        string lastWord19 = \"\";\n        string lastWord20 = \"\"\
    ;\n        string lastWord21 = \"\";\n        string lastWord22 = \"\";\n    \
    \    string lastWord23 = \"\";\n        string lastWord24 = \"\";\n        string\
    \ lastWord25 = \"\";\n        string lastWord26 = \"\";\n        string lastWord27\
    \ = \"\";\n        string lastWord28 = \"\";\n        string lastWord29 = \"\"\
    ;\n        string lastWord30 = \"\";\n        string lastWord31 = \"\";\n    \
    \    string lastWord32 = \"\";\n        string lastWord33 = \"\";\n        string\
    \ lastWord34 = \"\";\n        string lastWord35 = \"\";\n        string lastWord36\
    \ = \"\";\n        string lastWord37 = \"\";\n        string lastWord38 = \"\"\
    ;\n        string lastWord39 = \"\";\n        string lastWord40 = \"\";\n    \
    \    string lastWord41 = \"\";\n        string lastWord42 = \"\";\n        string\
    \ lastWord43 = \"\";\n        string lastWord44 = \"\";\n        string lastWord45\
    \ = \"\";\n        string lastWord46 = \"\";\n        string lastWord47 = \"\"\
    ;\n        string lastWord48 = \"\";\n        string lastWord49 = \"\";\n    \
    \    string lastWord50 = \"\";\n        string lastWord51 = \"\";\n        string\
    \ lastWord52 = \"\";\n        string lastWord53 = \"\";\n        string lastWord54\
    \ = \"\";\n        string lastWord55 = \"\";\n        string lastWord56 = \"\"\
    ;\n        string lastWord57 = \"\";\n        string lastWord58 = \"\";\n    \
    \    string lastWord59 = \"\";\n        string lastWord60 = \"\";\n        string\
    \ lastWord61 = \"\";\n        string lastWord62 = \"\";\n        string lastWord63\
    \ = \"\";\n        string lastWord64 = \"\";\n        string lastWord65 = \"\"\
    ;\n        string lastWord66 = \"\";\n        string lastWord67 = \"\";\n    \
    \    string lastWord68 = \"\";\n        string lastWord69 = \"\";\n        string\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9srqjun8.cs(97,15): error CS1001: Identifier expected

    /tmp/tmp9srqjun8.cs(97,15): error CS1002: ; expected

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isConsonant = false;\n        bool isSpace = false;\n\
    \        foreach (char c in s) {\n            if (char.IsLetter(c)) {\n      \
    \          word += c;\n                isSpace = false;\n                isConsonant\
    \ = false;\n            }\n            else if (char.IsWhiteSpace(c)) {\n    \
    \            isSpace = true;\n            }\n            else if (char.IsConsonant(c))\
    \ {\n                isConsonant = true;\n            }\n            else if (isConsonant\
    \ && isSpace) {\n                result.Add(word);\n                word = \"\"\
    ;\n                isSpace = false;\n                isConsonant = false;\n  \
    \          }\n        }\n        if (word != \"\") {\n            result.Add(word);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqlygpn9a.cs(39,27): error CS0117: ''char'' does not contain a definition
    for ''IsConsonant''

    '
  timestamp: 1659805317
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s == \"\") return result;\n        string word = s;\n        long count = 0;\n\
    \        string lastWord = \"\";\n        string lastWord2 = \"\";\n        bool\
    \ first = true;\n        bool first2 = true;\n        bool first3 = true;\n  \
    \      bool first4 = true;\n        bool first5 = true;\n        bool first6 =\
    \ true;\n        bool first7 = true;\n        bool first8 = true;\n        bool\
    \ first9 = true;\n        bool first10 = true;\n        bool first11 = true;\n\
    \        bool first12 = true;\n        bool first13 = true;\n        bool first14\
    \ = true;\n        bool first15 = true;\n        bool first16 = true;\n      \
    \  bool first17 = true;\n        bool first18 = true;\n        bool first19 =\
    \ true;\n        bool first20 = true;\n        bool first21 = true;\n        bool\
    \ first22 = true;\n        bool first23 = true;\n        bool first24 = true;\n\
    \        bool first25 = true;\n        bool first26 = true;\n        bool first27\
    \ = true;\n        bool first28 = true;\n        bool first29 = true;\n      \
    \  bool first30 = true;\n        bool first31 = true;\n        bool first32 =\
    \ true;\n        bool first33 = true;\n        bool first34 = true;\n        bool\
    \ first35 = true;\n        bool first36 = true;\n        bool first37 = true;\n\
    \        bool first38 = true;\n        bool first39 = true;\n        bool first40\
    \ = true;\n        bool first41 = true;\n        bool first42 = true;\n      \
    \  bool first43 = true;\n        bool first44 = true;\n        bool first45 =\
    \ true;\n        bool first46 = true;\n        bool first47 = true;\n        bool\
    \ first48 = true;\n        bool first49 = true;\n        bool first50 = true;\n\
    \        bool first51 = true;\n        bool first52 = true;\n        bool first53\
    \ = true;\n        bool first54 = true;\n        bool first55 = true;\n      \
    \  bool first56 = true;\n        bool first57 = true;\n        bool first58 =\
    \ true;\n        bool first59 = true;\n        bool first60 = true;\n        bool\
    \ first61 = true;\n        bool first62 = true;\n        bool first63 = true;\n\
    \        bool first64 = true;\n        bool first65 = true;\n        bool first66\
    \ = true;\n        bool first67 = true;\n        bool first68 = true;\n      \
    \  bool first69 = true;\n        bool first70 = true;\n        bool first71 =\
    \ true;\n        bool first72 = true;\n        bool first73 = true;\n        bool\
    \ first74 = true;\n        bool first75 = true;\n        bool first76 = true;\n\
    \        bool \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpenpctjwm.cs(108,13): error CS1001: Identifier expected

    /tmp/tmpenpctjwm.cs(108,13): error CS1002: ; expected

    '
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) return result;\n        string word = string.Empty;\n\
    \        bool isConsonant = false;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                isConsonant\
    \ = true;\n                word += c;\n                count++;\n            }\n\
    \            if (count == n) {\n                result.Add(word);\n          \
    \      word = string.Empty;\n                isConsonant = false;\n          \
    \      count = 0;\n            }\n        }\n        return result;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e02ced0e692c42fd98c5bbc9f60a620d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e02ced0e692c42fd98c5bbc9f60a620d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                count++;\n \
    \               if (count == n) {\n                    result.Add(word);\n   \
    \                 word = string.Empty;\n                    count = 0;\n     \
    \           }\n                word += c;\n            }\n        }\n        if\
    \ (count > 0) {\n            result.Add(word);\n        }\n        return result;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a6670ad50cd4aedbc795ede6328a8aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a6670ad50cd4aedbc795ede6328a8aa>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = string.Empty;\n        long count = 0;\n        foreach (char\
    \ c in s) {\n            if (char.IsLetter(c)) {\n                word += c;\n\
    \                count++;\n            }\n        }\n        if (count == n) {\n\
    \            result.Add(word);\n        }\n        return result;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary\
    \ had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6baf24f8876343cfa3585eee42df0325>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6baf24f8876343cfa3585eee42df0325>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isConsonant = false;\n        foreach (char c in\
    \ s) {\n            if (char.IsLetter(c)) {\n                word += c;\n    \
    \        }\n            else {\n                isConsonant = true;\n        \
    \    }\n        }\n        if (isConsonant) {\n            long count = 0;\n \
    \           foreach (char c in word) {\n                if (char.IsLetter(c))\
    \ {\n                    count++;\n                }\n            }\n        \
    \    if (count == n) {\n                result.Add(word);\n            }\n   \
    \     }\n        return result;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df1aeb91de1b467aa7c0087df253e1b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <df1aeb91de1b467aa7c0087df253e1b5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        long count = 0;\n        foreach (char c in s) {\n   \
    \         if (char.IsLetter(c)) {\n                word += c;\n              \
    \  count++;\n            }\n        }\n        if (count != n) {\n           \
    \ result.Add(word);\n        }\n        return result;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(SelectWords((\"Mary had a little\
    \ lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"little\"}))));\n\
    \    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0c93281c3564bf9a857e2411adee8af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f0c93281c3564bf9a857e2411adee8af>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (string.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ string word = \"\";\n        foreach (char c in s) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word += c;\n            }\n        }\n        string word2\
    \ = \"\";\n        foreach (char c in word) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word2 += c;\n            }\n        }\n        List<string>\
    \ words = new List<string>();\n        string word3 = \"\";\n        foreach (char\
    \ c in word2) {\n            if (char.IsLetterOrDigit(c)) {\n                word3\
    \ += c;\n            }\n        }\n        string word4 = \"\";\n        foreach\
    \ (char c in word3) {\n            if (char.IsLetterOrDigit(c)) {\n          \
    \      word4 += c;\n            }\n        }\n        string word5 = \"\";\n \
    \       foreach (char c in word4) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word5 += c;\n            }\n        }\n        string word6\
    \ = \"\";\n        foreach (char c in word5) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word6 += c;\n            }\n        }\n        string word7\
    \ = \"\";\n        foreach (char c in word6) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word7 += c;\n            }\n        }\n        string word8\
    \ = \"\";\n        foreach (char c in word7) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word8 += c;\n            }\n        }\n        string word9\
    \ = \"\";\n        foreach (char c in word8) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word9 += c;\n            }\n        }\n        string word10\
    \ = \"\";\n        foreach (char c in word9) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word10 += c;\n            }\n        }\n        string word11\
    \ = \"\";\n        foreach (char c in word10) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word11 += c;\n            }\n        }\n        string word12\
    \ = \"\";\n        foreach (char c in word11) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word12 += c;\n            }\n        }\n        string word13\
    \ = \"\";\n        foreach (char c in word12) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word13 += c;\n            }\n        }\n        string word14\
    \ = \"\";\n        foreach (char c in word13) {\n            if (char.IsLetterOrDigit(c))\
    \ {\n                word14 += c;\n            }\n        }\n        string word15\
    \ = \"\";\n        foreach (char c in \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpm36nggi2.cs(116,27): error CS1525: Invalid expression term ''}''

    /tmp/tmpm36nggi2.cs(116,27): error CS1026: ) expected

    /tmp/tmpm36nggi2.cs(116,27): error CS1002: ; expected

    '
  timestamp: 1659805317
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        bool isWord = false;\n        long count = 1;\n      \
    \  foreach (char c in s) {\n            if (char.IsLetter(c)) {\n            \
    \    word += c;\n                isWord = true;\n                count++;\n  \
    \          } else {\n                isWord = false;\n            }\n        \
    \    if (count == n) {\n                result.Add(word);\n                word\
    \ = \"\";\n                count = 1;\n            }\n        }\n        if (!string.IsNullOrEmpty(word))\
    \ {\n            result.Add(word);\n        }\n        return result;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25a541321ae84808a5b828ec8744043e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <25a541321ae84808a5b828ec8744043e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (String.IsNullOrEmpty(s)) {\n            return result;\n        }\n       \
    \ char[] chars = s.ToCharArray();\n        Array.Sort(chars);\n        List<char>\
    \ consonants = new List<char>();\n        foreach (char c in chars) {\n      \
    \      if (char.IsLower(c)) {\n                consonants.Add(c);\n          \
    \  }\n        }\n        List<string> words = new List<string>();\n        foreach\
    \ (char c in consonants) {\n            words.AddRange(SelectWords(s, n - 1));\n\
    \        }\n        foreach (string word in words) {\n            string newWord\
    \ = word;\n            foreach (char c in consonants) {\n                newWord\
    \ = newWord.Replace(c, \"\");\n            }\n            result.Add(newWord);\n\
    \        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpj_p9wls1.cs(45,46): error CS1503: Argument 2: cannot convert from ''string''
    to ''char''

    '
  timestamp: 1659805318
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        long\
    \ total = 0;\n        foreach (string word in s.Split(' '))\n        {\n     \
    \       total += word.Length;\n            if (total >= n)\n            {\n  \
    \              result.Add(word);\n                total -= word.Length;\n    \
    \        }\n        }\n        return result;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (4L)).Equals((new\
    \ List<string>(new string[]{(string)\"little\"}))));\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (3L)).Equals((new List<string>(new string[]{(string)\"\
    Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"simple white space\"\
    ), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"Hello\
    \ world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"}))));\n\
    \    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c75682aacf64fb7919a88d96b335f8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3c75682aacf64fb7919a88d96b335f8d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659805318
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        if\
    \ (s.Length == 0) {\n            return result;\n        }\n        string word\
    \ = s.Substring(0, s.Length - 1);\n        string lastWord = s.Substring(s.Length\
    \ - 1, 1);\n        string lastWord2 = s.Substring(s.Length - 2, 1);\n       \
    \ string lastWord3 = s.Substring(s.Length - 3, 1);\n        string lastWord4 =\
    \ s.Substring(s.Length - 4, 1);\n        string lastWord5 = s.Substring(s.Length\
    \ - 5, 1);\n        string lastWord6 = s.Substring(s.Length - 6, 1);\n       \
    \ string lastWord7 = s.Substring(s.Length - 7, 1);\n        string lastWord8 =\
    \ s.Substring(s.Length - 8, 1);\n        string lastWord9 = s.Substring(s.Length\
    \ - 9, 1);\n        string lastWord10 = s.Substring(s.Length - 10, 1);\n     \
    \   string lastWord11 = s.Substring(s.Length - 11, 1);\n        string lastWord12\
    \ = s.Substring(s.Length - 12, 1);\n        string lastWord13 = s.Substring(s.Length\
    \ - 13, 1);\n        string lastWord14 = s.Substring(s.Length - 14, 1);\n    \
    \    string lastWord15 = s.Substring(s.Length - 15, 1);\n        string lastWord16\
    \ = s.Substring(s.Length - 16, 1);\n        string lastWord17 = s.Substring(s.Length\
    \ - 17, 1);\n        string lastWord18 = s.Substring(s.Length - 18, 1);\n    \
    \    string lastWord19 = s.Substring(s.Length - 19, 1);\n        string lastWord20\
    \ = s.Substring(s.Length - 20, 1);\n        string lastWord21 = s.Substring(s.Length\
    \ - 21, 1);\n        string lastWord22 = s.Substring(s.Length - 22, 1);\n    \
    \    string lastWord23 = s.Substring(s.Length - 23, 1);\n        string lastWord24\
    \ = s.Substring(s.Length - 24, 1);\n        string lastWord25 = s.Substring(s.Length\
    \ - 25, 1);\n        string lastWord26 = s.Substring(s.Length - 26, 1);\n    \
    \    string lastWord27 = s.Substring(s.Length - 27, 1);\n        string lastWord28\
    \ = s.Substring(s.Length - 28, 1);\n        string lastWord29 = s.Substring(s.Length\
    \ - 29, 1);\n        string lastWord30 = s.Substring(s.Length - 30, 1);\n    \
    \    string lastWord31 = s.Substring(s.Length - 31, 1);\n        string lastWord32\
    \ = s.Substring(s.Length - 32, 1);\n        string lastWord33 = s.Substring(s.Length\
    \ - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnazzgicj.cs(63,51): error CS1525: Invalid expression term ''}''

    /tmp/tmpnazzgicj.cs(63,51): error CS1026: ) expected

    /tmp/tmpnazzgicj.cs(63,51): error CS1002: ; expected

    '
  timestamp: 1659805315
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Given a string s and a natural number n, you have been\
    \ tasked to implement \n    // a function that returns a list of all words from\
    \ string s that contain exactly \n    // n consonants, in order these words appear\
    \ in the string s.\n    // If the string s is empty then the function should return\
    \ an empty list.\n    // Note: you may assume the input string contains only letters\
    \ and spaces.\n    // Examples:\n    // >>> SelectWords((\"Mary had a little lamb\"\
    ), (4L))\n    // (new List<string>(new string[]{(string)\"little\"}))\n    //\
    \ >>> SelectWords((\"Mary had a little lamb\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Mary\", (string)\"lamb\"}))\n    // >>> SelectWords((\"simple\
    \ white space\"), (2L))\n    // (new List<string>())\n    // >>> SelectWords((\"\
    Hello world\"), (4L))\n    // (new List<string>(new string[]{(string)\"world\"\
    }))\n    // >>> SelectWords((\"Uncle sam\"), (3L))\n    // (new List<string>(new\
    \ string[]{(string)\"Uncle\"}))\n    public static List<string> SelectWords(string\
    \ s, long n) {\n        List<string> result = new List<string>();\n        string\
    \ word = \"\";\n        string lastWord = \"\";\n        string lastWord2 = \"\
    \";\n        string lastWord3 = \"\";\n        string lastWord4 = \"\";\n    \
    \    string lastWord5 = \"\";\n        string lastWord6 = \"\";\n        string\
    \ lastWord7 = \"\";\n        string lastWord8 = \"\";\n        string lastWord9\
    \ = \"\";\n        string lastWord10 = \"\";\n        string lastWord11 = \"\"\
    ;\n        string lastWord12 = \"\";\n        string lastWord13 = \"\";\n    \
    \    string lastWord14 = \"\";\n        string lastWord15 = \"\";\n        string\
    \ lastWord16 = \"\";\n        string lastWord17 = \"\";\n        string lastWord18\
    \ = \"\";\n        string lastWord19 = \"\";\n        string lastWord20 = \"\"\
    ;\n        string lastWord21 = \"\";\n        string lastWord22 = \"\";\n    \
    \    string lastWord23 = \"\";\n        string lastWord24 = \"\";\n        string\
    \ lastWord25 = \"\";\n        string lastWord26 = \"\";\n        string lastWord27\
    \ = \"\";\n        string lastWord28 = \"\";\n        string lastWord29 = \"\"\
    ;\n        string lastWord30 = \"\";\n        string lastWord31 = \"\";\n    \
    \    string lastWord32 = \"\";\n        string lastWord33 = \"\";\n        string\
    \ lastWord34 = \"\";\n        string lastWord35 = \"\";\n        string lastWord36\
    \ = \"\";\n        string lastWord37 = \"\";\n        string lastWord38 = \"\"\
    ;\n        string lastWord39 = \"\";\n        string lastWord40 = \"\";\n    \
    \    string lastWord41 = \"\";\n        string lastWord42 = \"\";\n        string\
    \ lastWord43 = \"\";\n        string lastWord44 = \"\";\n        string lastWord45\
    \ = \"\";\n        string lastWord46 = \"\";\n        string lastWord47 = \"\"\
    ;\n        string lastWord48 = \"\";\n        string lastWord49 = \"\";\n    \
    \    string lastWord50 = \"\";\n        string lastWord51 = \"\";\n        string\
    \ lastWord52 = \"\";\n        string lastWord53 = \"\";\n        string lastWord54\
    \ = \"\";\n        string lastWord55 = \"\";\n        string lastWord56 = \"\"\
    ;\n        string lastWord57 = \"\";\n        string lastWord58 = \"\";\n    \
    \    string lastWord59 = \"\";\n        string lastWord60 = \"\";\n        string\
    \ lastWord61 = \"\";\n        string lastWord62 = \"\";\n        string lastWord63\
    \ = \"\";\n        string lastWord64 = \"\";\n        string lastWord65 = \"\"\
    ;\n        string lastWord66 = \"\";\n        string lastWord67 = \"\";\n    \
    \    string lastWord68 = \"\";\n        string lastWord69 = \"\";\n        string\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(SelectWords((\"\
    Mary had a little lamb\"), (4L)).Equals((new List<string>(new string[]{(string)\"\
    little\"}))));\n    Debug.Assert(SelectWords((\"Mary had a little lamb\"), (3L)).Equals((new\
    \ List<string>(new string[]{(string)\"Mary\", (string)\"lamb\"}))));\n    Debug.Assert(SelectWords((\"\
    simple white space\"), (2L)).Equals((new List<string>())));\n    Debug.Assert(SelectWords((\"\
    Hello world\"), (4L)).Equals((new List<string>(new string[]{(string)\"world\"\
    }))));\n    Debug.Assert(SelectWords((\"Uncle sam\"), (3L)).Equals((new List<string>(new\
    \ string[]{(string)\"Uncle\"}))));\n    Debug.Assert(SelectWords((\"\"), (4L)).Equals((new\
    \ List<string>())));\n    Debug.Assert(SelectWords((\"a b c d e f\"), (1L)).Equals((new\
    \ List<string>(new string[]{(string)\"b\", (string)\"c\", (string)\"d\", (string)\"\
    f\"}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9srqjun8.cs(97,15): error CS1001: Identifier expected

    /tmp/tmp9srqjun8.cs(97,15): error CS1002: ; expected

    '
  timestamp: 1659805317
