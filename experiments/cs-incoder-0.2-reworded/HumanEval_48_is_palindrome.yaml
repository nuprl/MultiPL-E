name: HumanEval_48_is_palindrome
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Checks if given string is a palindrome\n    // >>> IsPalindrome((\"\
  \"))\n    // (true)\n    // >>> IsPalindrome((\"aba\"))\n    // (true)\n    // >>>\
  \ IsPalindrome((\"aaaaa\"))\n    // (true)\n    // >>> IsPalindrome((\"zbcd\"))\n\
  \    // (false)\n    public static bool IsPalindrome(string text) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(IsPalindrome((\"\
  \")) == (true));\n    Debug.Assert(IsPalindrome((\"aba\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  aaaaa\")) == (true));\n    Debug.Assert(IsPalindrome((\"zbcd\")) == (false));\n\
  \    Debug.Assert(IsPalindrome((\"xywyx\")) == (true));\n    Debug.Assert(IsPalindrome((\"\
  xywyz\")) == (false));\n    Debug.Assert(IsPalindrome((\"xywzx\")) == (false));\n\
  \    }\n\n}\n"
completions: ["        if (text == null || text.Length <= 1) {\n            return\
    \ true;\n        }\n        char[] charArray = text.ToCharArray();\n        Array.Sort(charArray);\n\
    \        StringBuilder builder = new StringBuilder();\n        foreach (char c\
    \ in charArray) {\n            builder.Append(c);\n        }\n        return builder.ToString()\
    \ == text;", "        if (string.IsNullOrEmpty(text))\n            return true;\n\
    \        var charArray = text.ToCharArray();\n        var reverseArray = charArray.Reverse().ToArray();\n\
    \        return string.Join(\"\", charArray) == string.Join(\"\", charArray);",
  "        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return charArray.SequenceEqual(text);", "        if (text == null ||\
    \ text.Length <= 1)\n            return true;\n        var reversed = new StringBuilder(text).Reverse().ToString();\n\
    \        return text == reversed;", "        if (text == null || text.Length <=\
    \ 1) {\n            return true;\n        }\n        var chars = text.ToCharArray();\n\
    \        var reversed = new char[chars.Length];\n        for (int i = 0; i < chars.Length;\
    \ i++) {\n            reversed[chars.Length - i - 1] = chars[i];\n        }\n\
    \        return chars.SequenceEqual(reversed);", "        char[] charArray = text.ToCharArray();\n\
    \        Array.Reverse(charArray);\n        return charArray.SequenceEqual(text);",
  "        if (text == null || text.Length <= 1) {\n            return true;\n   \
    \     }\n        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        string reversed = new string(charArray);\n        return text == reversed;",
  "        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return new string(charArray) == text;", "        if (text == null ||\
    \ text.Length <= 1) {\n            return true;\n        }\n        var charArray\
    \ = text.ToCharArray();\n        Array.Reverse(charArray);\n        return charArray.SequenceEqual(charArray);",
  "        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return charArray.SequenceEqual(text);", "        char[] charArray = text.ToCharArray();\n\
    \        Array.Reverse(charArray);\n        string reverse = new string(charArray);\n\
    \        return text == reverse;", "        char[] chars = text.ToCharArray();\n\
    \        Array.Reverse(chars);\n        return chars.SequenceEqual(text);", " \
    \       string reverse = text.Reverse().ToString();\n        return text == reverse;",
  "        if (text == null || text.Length <= 1)\n            return true;\n     \
    \   var reversed = new StringBuilder(text).Reverse().ToString();\n        return\
    \ text == reversed;", "        if (string.IsNullOrEmpty(text))\n            return\
    \ true;\n        var reversed = new StringBuilder(text).Reverse().ToString();\n\
    \        return text == reversed;", "        if (text == null || text.Length <=\
    \ 1)\n            return true;\n        var firstChar = text[0];\n        var\
    \ lastChar = text[text.Length - 1];\n        var firstCharCharCode = firstChar.ToCharArray()[0];\n\
    \        var lastCharCharCode = lastChar.ToCharArray()[0];\n        if (firstCharCharCode\
    \ == lastCharCharCode)\n            return IsPalindrome(text.Substring(1, text.Length\
    \ - 2));\n        else\n            return false;", "        if (text == null\
    \ || text.Length < 1)\n            return true;\n        char[] chars = text.ToCharArray();\n\
    \        Array.Reverse(chars);\n        string reverse = new string(chars);\n\
    \        return text == reverse;", "        char[] charArray = text.ToCharArray();\n\
    \        Array.Reverse(charArray);\n        return charArray.SequenceEqual(text);",
  "        if (string.IsNullOrEmpty(text))\n            return true;\n        char[]\
    \ charArray = text.ToCharArray();\n        Array.Sort(charArray);\n        string\
    \ reversed = new string(charArray);\n        return text == reversed;", "    \
    \    if (text == null || text.Length <= 1) {\n            return true;\n     \
    \   }\n        char[] charArray = text.ToCharArray();\n        Array.Reverse(charArray);\n\
    \        return new string(charArray) == text;"]
stop_tokens:
- "\n    }\n"
