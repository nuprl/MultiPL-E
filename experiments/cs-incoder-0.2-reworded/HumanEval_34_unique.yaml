name: HumanEval_34_unique
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // Return sorted unique elements in a list\n    // >>> Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L})))\n    // (new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))\n    public static List<long>\
  \ Unique(List<long> l) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(Unique((new\
  \ List<long>(new long[]{(long)5L, (long)3L, (long)5L, (long)2L, (long)3L, (long)3L,\
  \ (long)9L, (long)0L, (long)123L}))).Equals((new List<long>(new long[]{(long)0L,\
  \ (long)2L, (long)3L, (long)5L, (long)9L, (long)123L}))));\n    }\n\n}\n"
completions: ["        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long x in l) {\n            if\
    \ (set.Add(x)) {\n                result.Add(x);\n            }\n        }\n \
    \       return result;", "        List<long> result = new List<long>();\n    \
    \    HashSet<long> set = new HashSet<long>();\n        foreach (long i in l) {\n\
    \            if (set.Add(i)) {\n                result.Add(i);\n            }\n\
    \        }\n        return result;", "        List<long> result = new List<long>();\n\
    \        HashSet<long> set = new HashSet<long>();\n        foreach (long i in\
    \ l) {\n            if (!set.Add(i)) {\n                result.Add(i);\n     \
    \       }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long x in l) {\n            if (set.Add(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n    \
    \    foreach (long i in l) {\n            if (!set.Add(i)) {\n               \
    \ result.Add(i);\n            }\n        }\n        return result;", "       \
    \ List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (set.Add(i)) {\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> unique = new List<long>();\n        foreach (long x in l)\n  \
    \      {\n            if (!unique.Contains(x))\n            {\n              \
    \  unique.Add(x);\n            }\n        }\n        return unique;", "      \
    \  List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long x in l) {\n            if (set.Add(x)) {\n            \
    \    result.Add(x);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        HashSet<long> set = new HashSet<long>();\n\
    \        foreach (long i in l) {\n            if (set.Add(i)) {\n            \
    \    result.Add(i);\n            }\n        }\n        return result;", "    \
    \    List<long> result = new List<long>();\n        foreach (long x in l) {\n\
    \            if (!result.Contains(x)) {\n                result.Add(x);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        foreach (long i in l) {\n            if (!result.Contains(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Contains(i)) {\n                result.Add(i);\n                set.Add(i);\n\
    \            }\n        }\n        return result;", "        List<long> result\
    \ = new List<long>();\n        HashSet<long> hs = new HashSet<long>();\n     \
    \   foreach (long x in l) {\n            if (!hs.Contains(x)) {\n            \
    \    hs.Add(x);\n                result.Add(x);\n            }\n        }\n  \
    \      return result;", "        List<long> result = new List<long>();\n     \
    \   foreach (long n in l) {\n            if (!result.Contains(n)) {\n        \
    \        result.Add(n);\n            }\n        }\n        return result;", " \
    \       List<long> result = new List<long>();\n        foreach (long i in l) {\n\
    \            if (!result.Contains(i)) {\n                result.Add(i);\n    \
    \        }\n        }\n        return result;", "        List<long> result = new\
    \ List<long>();\n        HashSet<long> set = new HashSet<long>();\n        foreach\
    \ (long i in l) {\n            if (!set.Contains(i)) {\n                result.Add(i);\n\
    \                set.Add(i);\n            }\n        }\n        return result;",
  "        List<long> result = new List<long>();\n        HashSet<long> set = new\
    \ HashSet<long>();\n        foreach (long i in l) {\n            if (!set.Add(i))\
    \ {\n                result.Add(i);\n            }\n        }\n        return\
    \ result;", "        List<long> result = new List<long>();\n        foreach (long\
    \ x in l) {\n            if (!result.Contains(x)) {\n                result.Add(x);\n\
    \            }\n        }\n        return result;", "        List<long> unique\
    \ = new List<long>();\n        foreach (long x in l) {\n            if (!unique.Contains(x))\
    \ {\n                unique.Add(x);\n            }\n        }\n        return\
    \ unique;", "        List<long> result = new List<long>();\n        HashSet<long>\
    \ set = new HashSet<long>();\n        foreach (long i in l) {\n            if\
    \ (!set.Add(i)) {\n                result.Add(i);\n            }\n        }\n\
    \        return result;"]
stop_tokens:
- "\n    }\n"
