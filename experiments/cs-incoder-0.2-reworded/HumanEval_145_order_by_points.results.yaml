language: cs
name: HumanEval_145_order_by_points
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 1) return nums;\n        long sum = 0;\n        long maxSum = nums.Max();\n
    \       foreach (long num in nums) {\n            sum += num;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        List<long>
    result = new List<long>();\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum == maxSum) {\n                result.Add(num);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2edfac144218408a81de350c3575b298>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2edfac144218408a81de350c3575b298>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme5xm5y6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpme5xm5y6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme5xm5y6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpme5xm5y6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (long num in nums) {\n            sum += num;\n        }\n
    \       List<long> result = new List<long>();\n        long curSum = 0;\n        foreach
    (long num in nums) {\n            curSum += num;\n            if (curSum > sum)
    {\n                result.Add(num);\n            }\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1658cf6fa63a442d992cec64664f886b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <1658cf6fa63a442d992cec64664f886b>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x + y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpadaho4ws.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpadaho4ws.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, new Comparison<long>((x, y) => { return SumDigits(x)
    - SumDigits(y); }));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp985xcrbc.cs(25,68): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmp985xcrbc.cs(25,83): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr50wtm6m.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpr50wtm6m.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n
    \       }\n        long maxSum = sum;\n        long maxSumIndex = 0;\n        foreach
    (long n in result) {\n            sum += n;\n            if (sum > maxSum) {\n
    \               maxSum = sum;\n                maxSumIndex = result.IndexOf(n);\n
    \           }\n        }\n        List<long> sortedResult = new List<long>();\n
    \       foreach (long n in result) {\n            if (n == maxSum) {\n                sortedResult.Add(maxSumIndex);\n
    \           } else {\n                sortedResult.Add(n);\n            }\n        }\n
    \       return sortedResult;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37215c856229422ab10ae96021ca77c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <37215c856229422ab10ae96021ca77c7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => sum - x);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe92aqkmo.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpe92aqkmo.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphovpa72k.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphovpa72k.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbjb0uye.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpmbjb0uye.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8mcdy2fb.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp8mcdy2fb.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, new Comparison<long>((x, y) => { return SumOfDigits(x)
    - SumOfDigits(y); }));\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpha6gl145.cs(25,68): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpha6gl145.cs(25,85): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => sum - x - y));\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn2_7ub5e.cs(25,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpn2_7ub5e.cs(25,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 2) return nums;\n        List<long> result = new List<long>();\n        long
    sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n            result.Add(num);\n
    \       }\n        long maxSum = sum;\n        long maxIndex = -1;\n        foreach
    (long num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n
    \               maxSum = sum;\n                maxIndex = num;\n            }\n
    \       }\n        List<long> sortedNums = new List<long>();\n        sortedNums.Add(maxIndex);\n
    \       sortedNums.AddRange(nums.Where(num => num != maxIndex).OrderBy(num =>
    num).ToList());\n        return sortedNums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc366ffccf5e43059c7b490f2c7b5f8a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <cc366ffccf5e43059c7b490f2c7b5f8a>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1or2ketu.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp1or2ketu.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => { return SumOfDigits(a) - SumOfDigits(b); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_1e46im.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpb_1e46im.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => sum - x - y));\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprscmg1d8.cs(25,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprscmg1d8.cs(25,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => SumOfDigits(a) - SumOfDigits(b));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6h1a72tl.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp6h1a72tl.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> sorted = new List<long>();\n        long
    sum = 0;\n        foreach (long num in nums) {\n            sum += num;\n            sorted.Add(num);\n
    \       }\n        sorted.Sort((x, y) => SumDigits(x) - SumDigits(y));\n        return
    sorted;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4km561bt.cs(26,31): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmp4km561bt.cs(26,46): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (long n in nums) {\n            sum += n;\n        }\n        List<long>
    result = new List<long>();\n        foreach (long n in nums) {\n            int
    digit = n % 10;\n            long newSum = sum - n * digit;\n            if (newSum
    < 0) {\n                newSum = sum + n * digit;\n            }\n            if
    (newSum == sum) {\n                result.Add(n);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr5xx1r_r.cs(25,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjdrs3yqe.cs(25,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpjdrs3yqe.cs(25,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (long n in nums) {\n            sum += n;\n        }\n        List<long>
    result = new List<long>();\n        foreach (long n in nums) {\n            int
    index = Convert.ToInt32(Math.Floor(Math.Log10(n)));\n            long temp = sum
    - n;\n            if (temp < 0) {\n                temp = temp + Math.Pow(10,
    index);\n            }\n            result.Add(temp);\n        }\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpryng7crc.cs(28,24): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> result = new List<long>();\n        long
    sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n
    \       }\n        Array.Sort(result, new Comparison<long>((x, y) => SumDigits(x)
    - SumDigits(y)));\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptdq7ig8k.cs(26,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmptdq7ig8k.cs(26,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n
    \       long maxSumIndex = 0;\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex
    = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in nums)
    {\n            if (num == maxSumIndex) {\n                result.Add(num);\n            }\n
    \       }\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <257f867a47be444eb073cf7b458559a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <257f867a47be444eb073cf7b458559a2>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 2)\n            return nums;\n        List<long> result = new List<long>();\n
    \       long sum = 0;\n        long maxSum = nums.Max();\n        foreach (long
    num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n                result.Add(num);\n
    \               sum = num;\n            }\n        }\n        if (sum != 0)\n
    \           result.Add(sum);\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99b05badd9ab4f579854d1f2fecb2ff5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <99b05badd9ab4f579854d1f2fecb2ff5>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, (a, b) => sum - a - b);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8mcdy2fb.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp8mcdy2fb.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n
    \       long maxSumIndex = 0;\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex
    = num;\n            }\n        }\n        foreach (long num in nums) {\n            if
    (num == maxSumIndex) {\n                result.Add(num);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eee34618a94c420399923c31a67278ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eee34618a94c420399923c31a67278ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => SumDigits(a) - SumDigits(b));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpco1rul9w.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpco1rul9w.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n
    \       long maxIndex = 0;\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxIndex
    = num;\n            }\n        }\n        foreach (long num in nums) {\n            if
    (num == maxIndex) {\n                result.Add(num);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90687f7ccba84c08bbe8a8750b0c5fbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90687f7ccba84c08bbe8a8750b0c5fbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7jm5_8v7.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp7jm5_8v7.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme5xm5y6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpme5xm5y6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> result = new List<long>();\n        long
    sum = 0;\n        long maxSum = nums.Max();\n        long minSum = nums.Min();\n
    \       foreach (long num in nums) {\n            sum += num;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n            }\n            if
    (sum < minSum) {\n                minSum = sum;\n            }\n        }\n        long
    maxSumIndex = nums.FindIndex(n => n == maxSum);\n        long minSumIndex = nums.FindIndex(n
    => n == minSum);\n        long maxSumSum = maxSum - minSum;\n        long minSumSum
    = maxSum - nums[maxSumIndex];\n        long maxSumIndex = nums.FindIndex(n =>
    n == maxSum);\n        long minSumIndex = nums.FindIndex(n => n == minSum);\n
    \       long maxSumSum = maxSum - minSum;\n        long minSumSum = maxSum - nums[maxSumIndex];\n
    \       long maxSumIndex = nums.FindIndex(n => n == maxSum);\n        long minSumIndex
    = nums.FindIndex(n => n == minSum);\n        long maxSumSum = maxSum - minSum;\n
    \       long minSumSum = maxSum - nums[maxSumIndex];\n        long maxSumIndex
    = nums.FindIndex(n => n == maxSum);\n        long minSumIndex = nums.FindIndex(n
    => n == minSum);\n        long maxSumSum = maxSum - minSum;\n        long minSumSum
    = maxSum - nums[maxSumIndex];\n        long maxSumIndex = nums.FindIndex(n =>
    n == maxSum);\n        long minSumIndex = nums.FindIndex(n => n == minSum);\n
    \       long maxSumSum = maxSum - minSum;\n        long minSumSum = maxSum - nums[maxSumIndex];\n
    \       long maxSumIndex = nums.FindIndex(n => n == maxSum);\n        long minSumIndex
    = nums.FindIndex(n => n == minSum);\n        long maxSumSum = maxSum - minSum;\n
    \       long minSumSum = maxSum - nums[maxSumIndex];\n        long maxSumIndex
    = nums.FindIndex(n => n == maxSum);\n        long minSumIndex = nums.FindIndex(n
    => n == minSum);\n        long maxSumSum = maxSum - minSum;\n        long minSumSum
    = maxSum - \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4jjeal13.cs(60,34): error CS1525: Invalid expression term ''}''

    /tmp/tmp4jjeal13.cs(60,34): error CS1002: ; expected

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        long
    maxSum = sum;\n        long maxIndex = 0;\n        foreach (long n in nums) {\n
    \           sum += n;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n                maxIndex = n;\n            }\n        }\n        List<long>
    sortedResult = new List<long>();\n        sortedResult.Add(maxIndex);\n        foreach
    (long n in nums) {\n            if (n != maxIndex) {\n                sortedResult.Add(n);\n
    \           }\n        }\n        return sortedResult;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f39d78f23564a6ba17c2779362f1a3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <4f39d78f23564a6ba17c2779362f1a3e>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        long sum = 0;\n        long maxSum = nums.Max();\n
    \       foreach (long num in nums) {\n            sum += num;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        List<long>
    result = new List<long>();\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum > maxSum) {\n                result.Add(num);\n                sum
    -= num;\n            }\n        }\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <876ae2fc1d254bb78cdb31014ff27959>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <876ae2fc1d254bb78cdb31014ff27959>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        long sum = 0;\n        List<long> result = new List<long>();\n
    \       foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n
    \       }\n        Array.Sort(result, new Comparison<long>((x, y) => { return
    SumOfDigits(x) - SumOfDigits(y); }));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9cv23bxk.cs(26,68): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmp9cv23bxk.cs(26,85): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, delegate(long a, long b) {\n            return sum
    - a - b;\n        });\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpo7pjcjoc.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpo7pjcjoc.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpjdrs3yqe.cs(25,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpjdrs3yqe.cs(25,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    delegate (long a, long b) {\n            return sum - a - b;\n        });\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpoxwjj1te.cs(26,20): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpoxwjj1te.cs(26,20): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu9m3_nh8.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpu9m3_nh8.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqwgqlydg.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpqwgqlydg.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbjb0uye.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpmbjb0uye.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n
    \       long maxIndex = 0;\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxIndex
    = num;\n            }\n        }\n        foreach (long num in nums) {\n            if
    (num == maxIndex) {\n                result.Add(num);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90687f7ccba84c08bbe8a8750b0c5fbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90687f7ccba84c08bbe8a8750b0c5fbb>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        long
    maxSum = sum;\n        List<long> sortedList = new List<long>();\n        foreach
    (long n in result) {\n            sum += n;\n            if (sum > maxSum) {\n
    \               maxSum = sum;\n                sortedList.Clear();\n                sortedList.Add(n);\n
    \           } else if (sum == maxSum) {\n                sortedList.Add(n);\n
    \           }\n        }\n        return sortedList;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a4197989e164850b7a5a53fa993a3e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <3a4197989e164850b7a5a53fa993a3e7>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1a_b5yfb.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmp1a_b5yfb.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (long num in nums) {\n            sum += num;\n        }\n
    \       List<long> result = new List<long>();\n        foreach (long num in nums)
    {\n            int digit = num % 10;\n            int index = sum - digit;\n            if
    (index >= 0) {\n                result.Insert(index, num);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1eng_t8j.cs(25,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp1eng_t8j.cs(26,25): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0)\n            return nums;\n        List<long> result = new List<long>();\n
    \       long sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n
    \       long maxSumDigit = 0;\n        long maxSumDigitIndex = 0;\n        long
    maxSumDigitDigit = 0;\n        long maxSumDigitDigitIndex = 0;\n        foreach
    (long num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n
    \               maxSum = sum;\n                maxSumIndex = nums.IndexOf(num);\n
    \               maxSumDigit = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n
    \               maxSumDigitDigit = num;\n                maxSumDigitDigitIndex
    = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in nums)
    {\n            sum += num;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n                maxSumIndex = nums.IndexOf(num);\n                maxSumDigit
    = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n                maxSumDigitDigit
    = num;\n                maxSumDigitDigitIndex = nums.IndexOf(num);\n            }\n
    \       }\n        foreach (long num in nums) {\n            sum += num;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex =
    nums.IndexOf(num);\n                maxSumDigit = num;\n                maxSumDigitIndex
    = nums.IndexOf(num);\n                maxSumDigitDigit = num;\n                maxSumDigitDigitIndex
    = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in nums)
    {\n            sum += num;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n                maxSumIndex = nums.IndexOf(num);\n                maxSumDigit
    = num;\n                maxSumDigitIndex = nums.IndexOf(num);\n                maxSumDigitDigit
    = num;\n                maxSumDigitDigitIndex = nums.IndexOf(num);\n            }\n
    \       }\n        foreach (long num in nums) {\n            sum += num;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex =
    nums.IndexOf(num);\n                maxSumDigit = num;\n                maxSumDigitIndex
    = nums.IndexOf(num);\n                maxSumDigitDigit = num;\n                maxSumDigitDigitIndex
    = nums.IndexOf(num);\n            }\n        }\n        foreach (long num in nums)
    {\n            sum += num;\n            if (sum > maxSum) {\n                \n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8pa1fz_e.cs(89,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp8pa1fz_e.cs(98,2): error CS1513: } expected

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => SumOfDigits(a) - SumOfDigits(b));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6h1a72tl.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp6h1a72tl.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n
    \       foreach (long num in nums) {\n            sum += num;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n            }\n            result.Add(num);\n
    \       }\n        List<long> sortedResult = new List<long>();\n        foreach
    (long num in result) {\n            sortedResult.Add(num);\n        }\n        sortedResult.Sort();\n
    \       return sortedResult;\n    }\n    public static void Main(string[] args)
    {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90465cafaf844008aad8d470f71d945f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <90465cafaf844008aad8d470f71d945f>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqwgqlydg.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpqwgqlydg.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, (x, y) => { return SumDigits(x) - SumDigits(y); });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7r5x1sgm.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp7r5x1sgm.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> result = new List<long>();\n        long
    sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        foreach
    (long num in nums) {\n            sum += num;\n            if (sum > maxSum) {\n
    \               maxSum = sum;\n                maxSumIndex = num;\n            }\n
    \       }\n        long maxSumIndexInOriginalList = 0;\n        foreach (long
    num in nums) {\n            if (num == maxSumIndex) {\n                maxSumIndexInOriginalList++;\n
    \           }\n        }\n        foreach (long num in nums) {\n            if
    (num == maxSumIndex) result.Add(num);\n        }\n        if (maxSumIndexInOriginalList
    > 0) result.Insert(maxSumIndexInOriginalList, maxSumIndex);\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgu7l3prn.cs(40,58): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> result = new List<long>();\n        long
    sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        long
    maxSumDigit = 0;\n        long maxSumDigitIndex = 0;\n        long maxSumDigitIndex2
    = 0;\n        long maxSumDigitIndex3 = 0;\n        long maxSumDigitIndex4 = 0;\n
    \       long maxSumDigitIndex5 = 0;\n        long maxSumDigitIndex6 = 0;\n        long
    maxSumDigitIndex7 = 0;\n        long maxSumDigitIndex8 = 0;\n        long maxSumDigitIndex9
    = 0;\n        long maxSumDigitIndex10 = 0;\n        long maxSumDigitIndex11 =
    0;\n        long maxSumDigitIndex12 = 0;\n        long maxSumDigitIndex13 = 0;\n
    \       long maxSumDigitIndex14 = 0;\n        long maxSumDigitIndex15 = 0;\n        long
    maxSumDigitIndex16 = 0;\n        long maxSumDigitIndex17 = 0;\n        long maxSumDigitIndex18
    = 0;\n        long maxSumDigitIndex19 = 0;\n        long maxSumDigitIndex20 =
    0;\n        long maxSumDigitIndex21 = 0;\n        long maxSumDigitIndex22 = 0;\n
    \       long maxSumDigitIndex23 = 0;\n        long maxSumDigitIndex24 = 0;\n        long
    maxSumDigitIndex25 = 0;\n        long maxSumDigitIndex26 = 0;\n        long maxSumDigitIndex27
    = 0;\n        long maxSumDigitIndex28 = 0;\n        long maxSumDigitIndex29 =
    0;\n        long maxSumDigitIndex30 = 0;\n        long maxSumDigitIndex31 = 0;\n
    \       long maxSumDigitIndex32 = 0;\n        long maxSumDigitIndex33 = 0;\n        long
    maxSumDigitIndex34 = 0;\n        long maxSumDigitIndex35 = 0;\n        long maxSumDigitIndex36
    = 0;\n        long maxSumDigitIndex37 = 0;\n        long maxSumDigitIndex38 =
    0;\n        long maxSumDigitIndex39 = 0;\n        long maxSumDigitIndex40 = 0;\n
    \       long maxSumDigitIndex41 = 0;\n        long maxSumDigitIndex42 = 0;\n        long
    maxSumDigitIndex43 = 0;\n        long maxSumDigitIndex44 = 0;\n        long maxSumDigitIndex45
    = 0;\n        long maxSumDigitIndex46 = 0;\n        long maxSumDigitIndex47 =
    0;\n        long maxSumDigitIndex48 = 0;\n        long maxSumDigitIndex49 = 0;\n
    \       long maxSumDigitIndex50 = 0;\n        long maxSumDigitIndex51 = 0;\n        long
    maxSumDigitIndex52 = 0;\n        long maxSum\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_my8e4uh.cs(77,20): error CS1002: ; expected

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1or2ketu.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp1or2ketu.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr50wtm6m.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmpr50wtm6m.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => sum - x);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe92aqkmo.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpe92aqkmo.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyveay7kx.cs(25,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpyveay7kx.cs(25,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, (a, b) => sum - sum);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpzfbfnnum.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpzfbfnnum.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => { return SumDigits(a) - SumDigits(b); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp7xicqee7.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp7xicqee7.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmq5ks40r.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpmq5ks40r.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, (a, b) => { return SumDigits(a) - SumDigits(b); });\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp9ihjejtg.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp9ihjejtg.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> result = new List<long>();\n        long
    sum = 0;\n        long maxSum = 0;\n        long maxSumIndex = 0;\n        long
    maxSumDigit = 0;\n        foreach (long num in nums) {\n            sum += num;\n
    \           if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex
    = nums.IndexOf(num);\n                maxSumDigit = num;\n            }\n        }\n
    \       foreach (long num in nums) {\n            sum += num;\n            if
    (sum == maxSum) {\n                result.Add(num);\n            }\n        }\n
    \       if (maxSumDigit != 0) {\n            int index = nums.IndexOf(maxSumDigit);\n
    \           result.Insert(index, maxSumDigit);\n        }\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: Exception
  stderr: "\nUnhandled Exception:\nSystem.ArgumentOutOfRangeException: Index must
    be within the bounds of the List.\nParameter name: index\n  at System.Collections.Generic.List`1[T].Insert
    (System.Int32 index, T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0
    \n  at Problem.OrderByPoints (System.Collections.Generic.List`1[T] nums) [0x000dd]
    in <b064a2c411bc4546b025820f769c907d>:0 \n  at Problem.Main (System.String[] args)
    [0x00017] in <b064a2c411bc4546b025820f769c907d>:0 \n[ERROR] FATAL UNHANDLED EXCEPTION:
    System.ArgumentOutOfRangeException: Index must be within the bounds of the List.\nParameter
    name: index\n  at System.Collections.Generic.List`1[T].Insert (System.Int32 index,
    T item) [0x00009] in <aa5dff9b31c64fce86559bbbf6cd364f>:0 \n  at Problem.OrderByPoints
    (System.Collections.Generic.List`1[T] nums) [0x000dd] in <b064a2c411bc4546b025820f769c907d>:0
    \n  at Problem.Main (System.String[] args) [0x00017] in <b064a2c411bc4546b025820f769c907d>:0
    \n"
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long num
    in nums) {\n            sum += num;\n            result.Add(num);\n        }\n
    \       Array.Sort(result, (x, y) => sum - x - y);\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqz38yoc3.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpqz38yoc3.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1wg2wyzb.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp1wg2wyzb.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    delegate(long x, long y) { return sum - x - y; });\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpv9er8e3p.cs(25,62): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmpv9er8e3p.cs(25,62): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => sum - x - y));\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprscmg1d8.cs(25,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprscmg1d8.cs(25,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    < 1) return nums;\n        long sum = 0;\n        long maxSum = nums.Max();\n
    \       foreach (long num in nums) {\n            sum += num;\n            if
    (sum > maxSum) {\n                maxSum = sum;\n            }\n        }\n        List<long>
    result = new List<long>();\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum == maxSum) {\n                result.Add(num);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2edfac144218408a81de350c3575b298>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <2edfac144218408a81de350c3575b298>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmphuclakgn.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmphuclakgn.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1a_b5yfb.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmp1a_b5yfb.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        long maxSum = 0;\n
    \       long maxSumIndex = 0;\n        foreach (long num in nums) {\n            sum
    += num;\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxSumIndex
    = num;\n            }\n        }\n        foreach (long num in nums) {\n            if
    (num == maxSumIndex) {\n                result.Add(num);\n            }\n        }\n
    \       return result;\n    }\n    public static void Main(string[] args) {\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eee34618a94c420399923c31a67278ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <eee34618a94c420399923c31a67278ee>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => SumOfDigits(x) - SumOfDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmbjb0uye.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpmbjb0uye.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        foreach (long n in nums) {\n            sum += n;\n        }\n        List<long>
    result = new List<long>();\n        long curSum = 0;\n        foreach (long n
    in nums) {\n            curSum += n;\n            if (curSum > sum) {\n                result.Add(n);\n
    \           }\n        }\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String
    message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d75f7bcbf1074725bc58e2fb71a637ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at
    System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceInternal.Assert (System.Boolean condition) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.Debug.Assert
    (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n
    \ at Problem.Main (System.String[] args) [0x00000] in <d75f7bcbf1074725bc58e2fb71a637ab>:0
    \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String message,
    System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0
    \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]
    in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail
    (System.String "
  stdout: ''
  timestamp: 1659797930
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => sum - x - y));\n        return result;\n    }\n
    \   public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprscmg1d8.cs(25,59): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmprscmg1d8.cs(25,59): error CS1662: Cannot convert lambda expression to
    intended delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4i6fxp8x.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp4i6fxp8x.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbubgfpdc.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpbubgfpdc.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumOfDigits(x) - SumOfDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1a_b5yfb.cs(25,59): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    /tmp/tmp1a_b5yfb.cs(25,76): error CS0103: The name ''SumOfDigits'' does not exist
    in the current context

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => SumDigits(a) - SumDigits(b));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpco1rul9w.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpco1rul9w.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - b);\n        return result;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprule9u7q.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmprule9u7q.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnkyduw02.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnkyduw02.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    delegate(long x, long y) { return (sum - x) * (sum - y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2va3el9p.cs(25,62): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    /tmp/tmp2va3el9p.cs(25,62): error CS1662: Cannot convert anonymous method to intended
    delegate type because some of the return types in the block are not implicitly
    convertible to the delegate return type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => { return SumDigits(x) - SumDigits(y); });\n        return result;\n
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyio4dng2.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpyio4dng2.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    new Comparison<long>((x, y) => SumDigits(x) - SumDigits(y)));\n        return
    result;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpyveay7kx.cs(25,59): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    /tmp/tmpyveay7kx.cs(25,74): error CS0103: The name ''SumDigits'' does not exist
    in the current context

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        if (nums.Count
    == 0) return nums;\n        List<long> result = new List<long>();\n        long
    sum = 0;\n        foreach (long n in nums) {\n            sum += n;\n            result.Add(n);\n
    \       }\n        long maxSum = sum;\n        long maxIndex = -1;\n        for
    (int i = 0; i < nums.Count; i++) {\n            long n = nums[i];\n            sum
    += n;\n            if (sum > maxSum) {\n                maxSum = sum;\n                maxIndex
    = i;\n            }\n        }\n        if (maxSum < 0) return nums;\n        List<long>
    newNums = new List<long>();\n        newNums.Add(nums[maxIndex]);\n        for
    (int i = maxIndex + 1; i < nums.Count; i++) {\n            long n = nums[i];\n
    \           sum += n;\n            if (sum > maxSum) {\n                maxSum
    = sum;\n                maxIndex = i;\n            }\n            newNums.Add(n);\n
    \       }\n        return newNums;\n    }\n    public static void Main(string[]
    args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)11L,
    (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnhhz6psi.cs(38,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmpnhhz6psi.cs(39,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => sum - x - y);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpme5xm5y6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpme5xm5y6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => { return a - b; });\n        return result;\n    }\n    public static
    void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpvk5jzfvk.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpvk5jzfvk.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797929
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (x, y) => SumDigits(x) - SumDigits(y));\n        return result;\n    }\n    public
    static void Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new
    List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1234L, (long)423L,
    (long)463L, (long)145L, (long)2L, (long)423L, (long)423L, (long)53L, (long)6L,
    (long)37L, (long)3457L, (long)3L, (long)56L, (long)0L, (long)46L}))).Equals((new
    List<long>(new long[]{(long)0L, (long)2L, (long)3L, (long)6L, (long)53L, (long)423L,
    (long)423L, (long)423L, (long)1234L, (long)145L, (long)37L, (long)46L, (long)56L,
    (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new List<long>())).Equals((new
    List<long>())));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)-11L, (long)-32L, (long)43L, (long)54L, (long)-98L, (long)2L, (long)-3L}))).Equals((new
    List<long>(new long[]{(long)-3L, (long)-32L, (long)-98L, (long)-11L, (long)1L,
    (long)2L, (long)43L, (long)54L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new
    long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L,
    (long)9L, (long)10L, (long)11L}))).Equals((new List<long>(new long[]{(long)1L,
    (long)10L, (long)2L, (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L,
    (long)8L, (long)9L}))));\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L,
    (long)6L, (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new
    List<long>(new long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L,
    (long)6L}))));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpnyw_0_4y.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpnyw_0_4y.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpcyk_p2s6.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpcyk_p2s6.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        List<long>
    result = new List<long>();\n        long sum = 0;\n        foreach (long num in
    nums) {\n            sum += num;\n            result.Add(num);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5kmtbjnz.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmp5kmtbjnz.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing
    System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass
    Problem {\n    // Write a function which sorts the given list of integers\n    //
    in ascending order according to the sum of their digits.\n    // Note: if there
    are several items with similar sum of their digits,\n    // order them based on
    their index in original list.\n    // For example:\n    // >>> OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)11L, (long)-1L, (long)-11L, (long)-12L})))\n
    \   // (new List<long>(new long[]{(long)-1L, (long)-11L, (long)1L, (long)-12L,
    (long)11L}))\n    // >>> OrderByPoints((new List<long>()))\n    // (new List<long>())\n
    \   public static List<long> OrderByPoints(List<long> nums) {\n        long sum
    = 0;\n        List<long> result = new List<long>();\n        foreach (long n in
    nums) {\n            sum += n;\n            result.Add(n);\n        }\n        Array.Sort(result,
    (a, b) => sum - a - b);\n        return result;\n    }\n    public static void
    Main(string[] args) {\n    Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L,
    (long)11L, (long)-1L, (long)-11L, (long)-12L}))).Equals((new List<long>(new long[]{(long)-1L,
    (long)-11L, (long)1L, (long)-12L, (long)11L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1234L, (long)423L, (long)463L, (long)145L, (long)2L,
    (long)423L, (long)423L, (long)53L, (long)6L, (long)37L, (long)3457L, (long)3L,
    (long)56L, (long)0L, (long)46L}))).Equals((new List<long>(new long[]{(long)0L,
    (long)2L, (long)3L, (long)6L, (long)53L, (long)423L, (long)423L, (long)423L, (long)1234L,
    (long)145L, (long)37L, (long)46L, (long)56L, (long)463L, (long)3457L}))));\n    Debug.Assert(OrderByPoints((new
    List<long>())).Equals((new List<long>())));\n    Debug.Assert(OrderByPoints((new
    List<long>(new long[]{(long)1L, (long)-11L, (long)-32L, (long)43L, (long)54L,
    (long)-98L, (long)2L, (long)-3L}))).Equals((new List<long>(new long[]{(long)-3L,
    (long)-32L, (long)-98L, (long)-11L, (long)1L, (long)2L, (long)43L, (long)54L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)1L, (long)2L,
    (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L, (long)10L,
    (long)11L}))).Equals((new List<long>(new long[]{(long)1L, (long)10L, (long)2L,
    (long)11L, (long)3L, (long)4L, (long)5L, (long)6L, (long)7L, (long)8L, (long)9L}))));\n
    \   Debug.Assert(OrderByPoints((new List<long>(new long[]{(long)0L, (long)6L,
    (long)6L, (long)-76L, (long)-21L, (long)23L, (long)4L}))).Equals((new List<long>(new
    long[]{(long)-76L, (long)-21L, (long)0L, (long)4L, (long)23L, (long)6L, (long)6L}))));\n
    \   }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpuba_1d1f.cs(25,20): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.List<long>''
    to ''System.Array''

    /tmp/tmpuba_1d1f.cs(25,28): error CS1660: Cannot convert lambda expression to
    type ''IComparer'' because it is not a delegate type

    '
  timestamp: 1659797928
