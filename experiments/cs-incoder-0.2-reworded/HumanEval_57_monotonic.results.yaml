language: cs
name: HumanEval_57_monotonic
results:
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool result = true;\n        foreach (long cur in\
    \ l.Skip(1)) {\n            if (prev < cur) {\n                result = false;\n\
    \                break;\n            }\n            prev = cur;\n        }\n \
    \       return result;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <527d790289a840b2b5b9e71efedbf2a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <527d790289a840b2b5b9e71efedbf2a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ddac4wj.cs(61,22): error CS1026: ) expected

    /tmp/tmp4ddac4wj.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ foreach (long x in l.Skip(1).Take(l.Count - 1)) {\n            if (x > mid)\
    \ {\n                isIncreasing = false;\n            }\n            if (x <\
    \ mid) {\n                isDecreasing = false;\n            }\n            if\
    \ (x == mid) {\n                isMonotonic = false;\n            }\n        }\n\
    \        return isIncreasing || isDecreasing || isMonotonic;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr2d96py8.cs(19,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        if (first == last)\n            return true;\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = l.Take(1).All(x\
    \ => x <= mid);\n        bool isDecreasing = l.Take(l.Count - 1).All(x => x >=\
    \ mid);\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf4dfe5d44640b7a52274802563580b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbf4dfe5d44640b7a52274802563580b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = (max + min)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasing = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMon\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpbxa4bn0i.cs(40,96): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool increasing = (max > min);\n        bool decreasing = (min > max);\n\
    \        if (increasing && decreasing)\n            return true;\n        if (increasing\
    \ && !decreasing)\n            return false;\n        if (!increasing && decreasing)\n\
    \            return true;\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1d4h93w4.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) {\n    \
    \        return false;\n        }\n        long mid = l.Count / 2;\n        long\
    \ midVal = l[mid];\n        long midPrevVal = l[mid - 1];\n        long midNextVal\
    \ = l[mid + 1];\n        long midPrevPrevVal = l[mid - 2];\n        long midNextNextVal\
    \ = l[mid + 2];\n        long midPrevNextPrevVal = l[mid - 3];\n        long midNextNextNextVal\
    \ = l[mid + 3];\n        long midPrevNextNextPrevVal = l[mid - 4];\n        long\
    \ midNextNextNextNextVal = l[mid + 4];\n        long midPrevNextNextNextPrevVal\
    \ = l[mid - 5];\n        long midNextNextNextNextPrevVal = l[mid + 5];\n     \
    \   long midPrevNextNextNextNextPrevVal = l[mid - 6];\n        long midNextNextNextNextNextPrevVal\
    \ = l[mid + 6];\n        long midPrevNextNextNextNextNextPrevVal = l[mid - 7];\n\
    \        long midNextNextNextNextNextNextPrevVal = l[mid + 7];\n        long midPrevNextNextNextNextNextNextPrevVal\
    \ = l[mid - 8];\n        long midNextNextNextNextNextNextNextPrevVal = l[mid +\
    \ 8];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 9];\n\
    \        long midNextNextNextNextNextNextNextPrevVal = l[mid + 9];\n        long\
    \ midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 10];\n        long midNextNextNextNextNextNextNextPrevVal\
    \ = l[mid + 10];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid\
    \ - 11];\n        long midNextNextNextNextNextNextNextPrevVal = l[mid + 11];\n\
    \        long midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 12];\n    \
    \    long midNextNextNextNextNextNextNextPrevVal = l[mid + 12];\n        long\
    \ midPrevNextNextNextNextNextNextNextPrevVal = l[mid - 13];\n        long midNextNextNextNextNextNextNextPrevVal\
    \ = l[mid + 13];\n        long midPrevNextNextNextNextNextNextNextPrevVal = l[m\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpb_y5_gbe.cs(50,62): error CS1003: Syntax error, '']'' expected

    /tmp/tmpb_y5_gbe.cs(50,62): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long prev = l[0];\n        bool increasing = true;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < prev) {\n                increasing = false;\n    \
    \        }\n            prev = current;\n        }\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5073ffb99e83450a9aa9c984990a56ab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5073ffb99e83450a9aa9c984990a56ab>:0 \n"
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < max) {\n    \
    \        long mid = l.Find((x) => x > min && x < max);\n            if (mid >\
    \ max) {\n                return false;\n            }\n            if (mid <\
    \ min) {\n                return true;\n            }\n            return Monotonic(l.Skip(1).Take(l.Count\
    \ - 1).Concat(new List<long>() { mid }));\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpigm4wd5j.cs(27,30): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ mid) {\n                isIncreasing = false;\n            } else if (l[i] >\
    \ mid) {\n                isDecreasing = false;\n            } else {\n      \
    \          isIncreasing = isDecreasing = true;\n            }\n        }\n   \
    \     return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84be572fac024138b09a0e161a61033c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84be572fac024138b09a0e161a61033c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf_38fgud.cs(53,13): error CS1001: Identifier expected

    /tmp/tmpf_38fgud.cs(53,13): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ddac4wj.cs(61,22): error CS1026: ) expected

    /tmp/tmp4ddac4wj.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n        }\n        return false;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4023425f68a04ad8b7cd5805310edf24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4023425f68a04ad8b7cd5805310edf24>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first == last)\n\
    \            return true;\n        if (first < last)\n            return false;\n\
    \        long mid = first + ((last - first) / 2);\n        bool isIncreasing =\
    \ Monotonic(l, first, mid);\n        bool isDecreasing = Monotonic(l, mid, last);\n\
    \        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpdoitztzz.cs(24,29): error CS1501: No overload for method ''Monotonic''
    takes 3 arguments

    /tmp/tmpdoitztzz.cs(25,29): error CS1501: No overload for method ''Monotonic''
    takes 3 arguments

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long x in l) {\n        \
    \    if (x < min) {\n                isDecreasing = false;\n            }\n  \
    \          if (x > max) {\n                isIncreasing = false;\n           \
    \ }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84f4890441cb4dfeac4631329c722995>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84f4890441cb4dfeac4631329c722995>:0 \n"
  stdout: ''
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            mid = current;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a592a6de22e47c797064c80631efc71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a592a6de22e47c797064c80631efc71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return true;\n        if (first > last)\n            return false;\n\
    \        long mid = l.Count / 2;\n        if (mid < 1)\n            return false;\n\
    \        long mid2 = mid / 2;\n        long mid3 = mid2 / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpf9u_x3ji.cs(73,17): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < max) {\n    \
    \        long mid = (max + min) / 2;\n            if (mid < min)\n           \
    \     return false;\n            if (mid > max)\n                return true;\n\
    \            long mid2 = mid + 1;\n            while (true) {\n              \
    \  if (l[mid2] < mid)\n                    mid++;\n                else\n    \
    \                mid--;\n                if (mid < min)\n                    return\
    \ false;\n                if (mid > max)\n                    return true;\n \
    \               if (mid == mid2)\n                    break;\n            }\n\
    \            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4xhla9p6.cs(27,23): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        foreach (long x in l) {\n            if (x > mid) {\n     \
    \           isDecreasing = false;\n            }\n            if (x < mid) {\n\
    \                isIncreasing = false;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46f04f8eeb3d4949a11d52956b756575>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <46f04f8eeb3d4949a11d52956b756575>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 0; i < l.Count - 1; i++) {\n            long current\
    \ = l[i];\n            long next = l[i + 1];\n            if (current > mid) {\n\
    \                isIncreasing = false;\n            } else if (current < mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && next > mid) {\n                isIncreasing = false;\n            } else\
    \ if (isDecreasing && next < mid) {\n                isDecreasing = false;\n \
    \           } else {\n                isIncreasing = isDecreasing = true;\n  \
    \          }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a37254566c5401fa285479820ec84bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9a37254566c5401fa285479820ec84bc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool increasing\
    \ = (mid > first);\n        bool decreasing = (mid < last);\n        if (increasing\
    \ || decreasing) {\n            bool increasing2 = Monotonic(l.Skip(1).Take(l.Count\
    \ - 1));\n            bool decreasing2 = Monotonic(l.Take(1).Skip(l.Count - 1));\n\
    \            return increasing && decreasing && increasing2 && decreasing2;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3ddbjfdc.cs(24,42): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmp3ddbjfdc.cs(25,42): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        long midVal = mid;\n        long midVal2\
    \ = mid;\n        long midVal3 = mid;\n        long midVal4 = mid;\n        long\
    \ midVal5 = mid;\n        long midVal6 = mid;\n        long midVal7 = mid;\n \
    \       long midVal8 = mid;\n        long midVal9 = mid;\n        long midVal10\
    \ = mid;\n        long midVal11 = mid;\n        long midVal12 = mid;\n       \
    \ long midVal13 = mid;\n        long midVal14 = mid;\n        long midVal15 =\
    \ mid;\n        long midVal16 = mid;\n        long midVal17 = mid;\n        long\
    \ midVal18 = mid;\n        long midVal19 = mid;\n        long midVal20 = mid;\n\
    \        long midVal21 = mid;\n        long midVal22 = mid;\n        long midVal23\
    \ = mid;\n        long midVal24 = mid;\n        long midVal25 = mid;\n       \
    \ long midVal26 = mid;\n        long midVal27 = mid;\n        long midVal28 =\
    \ mid;\n        long midVal29 = mid;\n        long midVal30 = mid;\n        long\
    \ midVal31 = mid;\n        long midVal32 = mid;\n        long midVal33 = mid;\n\
    \        long midVal34 = mid;\n        long midVal35 = mid;\n        long midVal36\
    \ = mid;\n        long midVal37 = mid;\n        long midVal38 = mid;\n       \
    \ long midVal39 = mid;\n        long midVal40 = mid;\n        long midVal41 =\
    \ mid;\n        long midVal42 = mid;\n        long midVal43 = mid;\n        long\
    \ midVal44 = mid;\n        long midVal45 = mid;\n        long midVal46 = mid;\n\
    \        long midVal47 = mid;\n        long midVal48 = mid;\n        long midVal49\
    \ = mid;\n        long midVal50 = mid;\n        long midVal51 = mid;\n       \
    \ long midVal52 = mid;\n        long midVal5\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpktu6ty3h.cs(75,21): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = first + ((last - first) / 2);\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l)\n        {\n            if (x > mid)\n            {\n\
    \                isDecreasing = false;\n                break;\n            }\n\
    \            if (x < mid)\n            {\n                isIncreasing = false;\n\
    \                break;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d061012f9a1546cd960e8fb8459cf904>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d061012f9a1546cd960e8fb8459cf904>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ if (l.Count == 2) return l[0] == l[1] && l[1] == l[2];\n        if (l.Count\
    \ == 3) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3];\n        if (l.Count\
    \ == 4) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4];\n\
    \        if (l.Count == 5) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3]\
    \ && l[3] == l[4] && l[4] == l[5];\n        if (l.Count == 6) return l[0] == l[1]\
    \ && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == l[6];\n\
    \        if (l.Count == 7) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3]\
    \ && l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7];\n        if\
    \ (l.Count == 8) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] ==\
    \ l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == l[8];\n    \
    \    if (l.Count == 9) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] &&\
    \ l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == l[8]\
    \ && l[8] == l[9];\n        if (l.Count == 10) return l[0] == l[1] && l[1] ==\
    \ l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5] == l[6] && l[6]\
    \ == l[7] && l[7] == l[8] && l[8] == l[9] && l[9] == l[10];\n        if (l.Count\
    \ == 11) return l[0] == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] &&\
    \ l[4] == l[5] && l[5] == l[6] && l[6] == l[7] && l[7] == l[8] && l[8] == l[9]\
    \ && l[9] == l[10] && l[10] == l[11];\n        if (l.Count == 12) return l[0]\
    \ == l[1] && l[1] == l[2] && l[2] == l[3] && l[3] == l[4] && l[4] == l[5] && l[5]\
    \ == l[6] && l[6] == l[7] && l[7] == l[8] && l[8\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6xy22jxl.cs(29,166): error CS1003: Syntax error, '']'' expected

    /tmp/tmp6xy22jxl.cs(29,166): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        long current;\n        long previous;\n\
    \        foreach (long element in l) {\n            current = element;\n     \
    \       previous = current;\n            if (current > max) {\n              \
    \  isIncreasing = false;\n            }\n            if (current < min) {\n  \
    \              isDecreasing = false;\n            }\n        }\n        if (isIncreasing\
    \ && isDecreasing) {\n            return true;\n        }\n        if (isIncreasing\
    \ && !isDecreasing) {\n            return false;\n        }\n        if (!isIncreasing\
    \ && isDecreasing) {\n            return false;\n        }\n        return isIncreasing\
    \ ? true : false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe5c17a6c0304077b04ad8ad8d847468>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe5c17a6c0304077b04ad8ad8d847468>:0 \n"
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Count\
    \ / 2;\n        long middle2 = middle + middle;\n        long middle3 = middle2\
    \ + middle;\n        long middle4 = middle3 + middle;\n        long middle5 =\
    \ middle4 + middle;\n        long middle6 = middle5 + middle;\n        long middle7\
    \ = middle6 + middle;\n        long middle8 = middle7 + middle;\n        long\
    \ middle9 = middle8 + middle;\n        long middle10 = middle9 + middle;\n   \
    \     long middle11 = middle10 + middle;\n        long middle12 = middle11 + middle;\n\
    \        long middle13 = middle12 + middle;\n        long middle14 = middle13\
    \ + middle;\n        long middle15 = middle14 + middle;\n        long middle16\
    \ = middle15 + middle;\n        long middle17 = middle16 + middle;\n        long\
    \ middle18 = middle17 + middle;\n        long middle19 = middle18 + middle;\n\
    \        long middle20 = middle19 + middle;\n        long middle21 = middle20\
    \ + middle;\n        long middle22 = middle21 + middle;\n        long middle23\
    \ = middle22 + middle;\n        long middle24 = middle23 + middle;\n        long\
    \ middle25 = middle24 + middle;\n        long middle26 = middle25 + middle;\n\
    \        long middle27 = middle26 + middle;\n        long middle28 = middle27\
    \ + middle;\n        long middle29 = middle28 + middle;\n        long middle30\
    \ = middle29 + middle;\n        long middle31 = middle30 + middle;\n        long\
    \ middle32 = middle31 + middle;\n        long middle33 = middle32 + middle;\n\
    \        long middle34 = middle33 + middle;\n        long middle35 = middle34\
    \ + middle;\n        long middle36 = middle35 + middle;\n        long middle37\
    \ = middle36 + middle;\n        long middle38 = middle37 + middle;\n        long\
    \ middle39 = middle38 + middle;\n        long middle40 = middle39 + middle;\n\
    \        long middle41 = middle40 + middle;\n        long middle42 = middle41\
    \ + middle;\n        long middle43 = middle42 + middle;\n        long middle44\
    \ = middle43 + middle;\n        long middle45 = middle44 + middle;\n        long\
    \ middle46 = middle45 + middle;\n        long middle47 = middle46 + middle;\n\
    \        long middle48 = middle47 + middle;\n        long middle49 = middle48\
    \ + middle;\n        long middle50 = middle49 + middle;\n        long middle51\
    \ = middle50 + middle;\n        long middle5\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0_d0lhnq.cs(70,21): error CS1002: ; expected

    '
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing = true;\n\
    \        bool isMonotonicDecreasingMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingMonotonicIncreas\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpt9zqt4w8.cs(41,51): error CS1002: ; expected

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long x in l.Skip(1))\n\
    \        {\n            if (x < prev)\n            {\n                increasing\
    \ = false;\n                break;\n            }\n            prev = x;\n   \
    \     }\n        return increasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ceb55332727476085616facf8b313fb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ceb55332727476085616facf8b313fb>:0 \n"
  stdout: ''
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool increasing = true;\n        foreach (long el\
    \ in l.Skip(1))\n            if (el < prev)\n                increasing = false;\n\
    \            else\n                prev = el;\n        return increasing;\n  \
    \  }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f48e53ef9605420882c281d1dbf6f1c2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f48e53ef9605420882c281d1dbf6f1c2>:0 \n"
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ % 2 == 0);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 2);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp72d5kdjm.cs(61,22): error CS1026: ) expected

    /tmp/tmp72d5kdjm.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        bool isIncreasing2\
    \ = true;\n        bool isDecreasing2 = true;\n        bool isMonotonic2 = true;\n\
    \        bool isIncreasing3 = true;\n        bool isDecreasing3 = true;\n    \
    \    bool isMonotonic3 = true;\n        bool isIncreasing4 = true;\n        bool\
    \ isDecreasing4 = true;\n        bool isMonotonic4 = true;\n        bool isIncreasing5\
    \ = true;\n        bool isDecreasing5 = true;\n        bool isMonotonic5 = true;\n\
    \        bool isIncreasing6 = true;\n        bool isDecreasing6 = true;\n    \
    \    bool isMonotonic6 = true;\n        bool isIncreasing7 = true;\n        bool\
    \ isDecreasing7 = true;\n        bool isMonotonic7 = true;\n        bool isIncreasing8\
    \ = true;\n        bool isDecreasing8 = true;\n        bool isMonotonic8 = true;\n\
    \        bool isIncreasing9 = true;\n        bool isDecreasing9 = true;\n    \
    \    bool isMonotonic9 = true;\n        bool isIncreasing10 = true;\n        bool\
    \ isDecreasing10 = true;\n        bool isMonotonic10 = true;\n        bool isIncreasing11\
    \ = true;\n        bool isDecreasing11 = true;\n        bool isMonotonic11 = true;\n\
    \        bool isIncreasing12 = true;\n        bool isDecreasing12 = true;\n  \
    \      bool isMonotonic12 = true;\n        bool isIncreasing13 = true;\n     \
    \   bool isDecreasing13 = true;\n        bool isMonotonic13 = true;\n        bool\
    \ isIncreasing14 = true;\n        bool isDecreasing14 = true;\n        bool isMonotonic14\
    \ = true;\n        bool isIncreasing15 = true;\n        bool isDecreasing15 =\
    \ true;\n        bool isMonotonic15 = true;\n        bool isIncreasing16 = true;\n\
    \        bool isDecreasing16 = true;\n        bool isMonotonic16 = true;\n   \
    \     bool isIncreasing17 = true;\n        bool isDecreasing17 = true;\n     \
    \   bool isMonotonic17 = true;\n        bool isIncreasing18 = true;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0dixfzrm.cs(21,14): warning CS0219: The variable ''isIncreasing'' is assigned
    but its value is never used

    /tmp/tmp0dixfzrm.cs(22,14): warning CS0219: The variable ''isDecreasing'' is assigned
    but its value is never used

    /tmp/tmp0dixfzrm.cs(23,14): warning CS0219: The variable ''isMonotonic'' is assigned
    but its value is never used

    /tmp/tmp0dixfzrm.cs(24,14): warning CS0219: The variable ''isIncreasing2'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(25,14): warning CS0219: The variable ''isDecreasing2'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(26,14): warning CS0219: The variable ''isMonotonic2'' is assigned
    but its value is never used

    /tmp/tmp0dixfzrm.cs(27,14): warning CS0219: The variable ''isIncreasing3'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(28,14): warning CS0219: The variable ''isDecreasing3'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(29,14): warning CS0219: The variable ''isMonotonic3'' is assigned
    but its value is never used

    /tmp/tmp0dixfzrm.cs(30,14): warning CS0219: The variable ''isIncreasing4'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(31,14): warning CS0219: The variable ''isDecreasing4'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(32,14): warning CS0219: The variable ''isMonotonic4'' is assigned
    but its value is never used

    /tmp/tmp0dixfzrm.cs(33,14): warning CS0219: The variable ''isIncreasing5'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(34,14): warning CS0219: The variable ''isDecreasing5'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(35,14): warning CS0219: The variable ''isMonotonic5'' is assigned
    but its value is never used

    /tmp/tmp0dixfzrm.cs(36,14): warning CS0219: The variable ''isIncreasing6'' is
    assigned but its value is never used

    /tmp/tmp0dixfzrm.cs(37,14): warning CS0219: The variable ''isDecreasing6'' is
    assigned but its value is never used

    /tmp/tmp'
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) return false;\n\
    \        if (min == max) return true;\n        long mid = min + (max - min) /\
    \ 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n \
    \       foreach (long x in l) {\n            if (x > mid) {\n                isIncreasing\
    \ = false;\n            }\n            if (x < mid) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78f16cd6f53a4f19a98c535b39990b96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <78f16cd6f53a4f19a98c535b39990b96>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[0];\n       \
    \ long max = l[0];\n        bool increasing = true;\n        bool decreasing =\
    \ true;\n        foreach (long x in l.Skip(1)) {\n            if (x > max) {\n\
    \                increasing = false;\n                max = x;\n            }\n\
    \            if (x < min) {\n                decreasing = false;\n           \
    \     min = x;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1j65mdwa.cs(27,21): error CS0103: The name ''min'' does not exist in the
    current context

    /tmp/tmp1j65mdwa.cs(29,17): error CS0103: The name ''min'' does not exist in the
    current context

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) >> 1);\n        bool increasing\
    \ = (mid > first);\n        bool decreasing = (mid < last);\n        if (increasing\
    \ && decreasing) return true;\n        if (increasing && !decreasing) return true;\n\
    \        if (!increasing && decreasing) return true;\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e712ee0a06a44afdae7b9c657af50092>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e712ee0a06a44afdae7b9c657af50092>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = l.Skip(1).Take(2).Last();\n   \
    \     if (mid < first || mid > last)\n            return false;\n        long\
    \ mid2 = l.Skip(2).Take(2).Last();\n        if (mid2 < first || mid2 > last)\n\
    \            return false;\n        long mid3 = l.Skip(3).Take(2).Last();\n  \
    \      if (mid3 < first || mid3 > last)\n            return false;\n        long\
    \ mid4 = l.Skip(4).Take(2).Last();\n        if (mid4 < first || mid4 > last)\n\
    \            return false;\n        long mid5 = l.Skip(5).Take(2).Last();\n  \
    \      if (mid5 < first || mid5 > last)\n            return false;\n        long\
    \ mid6 = l.Skip(6).Take(2).Last();\n        if (mid6 < first || mid6 > last)\n\
    \            return false;\n        long mid7 = l.Skip(7).Take(2).Last();\n  \
    \      if (mid7 < first || mid7 > last)\n            return false;\n        long\
    \ mid8 = l.Skip(8).Take(2).Last();\n        if (mid8 < first || mid8 > last)\n\
    \            return false;\n        long mid9 = l.Skip(9).Take(2).Last();\n  \
    \      if (mid9 < first || mid9 > last)\n            return false;\n        long\
    \ mid10 = l.Skip(10).Take(2).Last();\n        if (mid10 < first || mid10 > last)\n\
    \            return false;\n        long mid11 = l.Skip(11).Take(2).Last();\n\
    \        if (mid11 < first || mid11 > last)\n            return false;\n     \
    \   long mid12 = l.Skip(12).Take(2).Last();\n        if (mid12 < first || mid12\
    \ > last)\n            return false;\n        long mid13 = l.Skip(13).Take(2).Last();\n\
    \        if (mid13 < first || mid13 > last)\n            return false;\n     \
    \   long mid14 = l.Skip(14).Take(2).Last();\n        if (mid14 < first || mid14\
    \ > last)\n            return false;\n        long mid15 = l.Skip(15).Take(2).Last();\n\
    \        if (mid15 < first || mid15 > last)\n            return false;\n     \
    \   long mid16 = l.Skip(16).Take(2).Last();\n        if (mid16 < first || mid16\
    \ > last)\n            return false;\n        long mid17 = l.Skip(17).Take\n \
    \   }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3w54vvpn.cs(69,37): error CS1002: ; expected

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long first = l[0];\n        long last = l[l.Count - 1];\n        long mid =\
    \ first + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        foreach (long\
    \ x in l) {\n            if (x < mid) {\n                isIncreasing = false;\n\
    \            } else if (x > mid) {\n                isDecreasing = false;\n  \
    \          } else if (x == mid) {\n                isMonotonic = false;\n    \
    \        }\n        }\n        return isIncreasing || isDecreasing || isMonotonic;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8c60e10cee34184894932b08bbd1769>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f8c60e10cee34184894932b08bbd1769>:0 \n"
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return false;\n        long mid = first + ((last - first) >> 1);\n\
    \        bool isIncreasing = l.TakeWhile(x => x <= mid).All(x => x <= mid);\n\
    \        bool isDecreasing = l.TakeWhile(x => x >= mid).All(x => x >= mid);\n\
    \        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dab8b5db95a341e4b1e41a1b5fe583d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dab8b5db95a341e4b1e41a1b5fe583d3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return true;\n        if (first > last)\n            return false;\n\
    \        long mid = l.Skip(1).Take(2).Last();\n        if (mid < first)\n    \
    \        return true;\n        if (mid > last)\n            return false;\n  \
    \      long mid2 = l.Skip(1).Take(2).Last();\n        if (mid2 < first)\n    \
    \        return true;\n        if (mid2 > last)\n            return false;\n \
    \       long mid3 = l.Skip(1).Take(2).Last();\n        if (mid3 < first)\n   \
    \         return true;\n        if (mid3 > last)\n            return false;\n\
    \        long mid4 = l.Skip(1).Take(2).Last();\n        if (mid4 < first)\n  \
    \          return true;\n        if (mid4 > last)\n            return false;\n\
    \        long mid5 = l.Skip(1).Take(2).Last();\n        if (mid5 < first)\n  \
    \          return true;\n        if (mid5 > last)\n            return false;\n\
    \        long mid6 = l.Skip(1).Take(2).Last();\n        if (mid6 < first)\n  \
    \          return true;\n        if (mid6 > last)\n            return false;\n\
    \        long mid7 = l.Skip(1).Take(2).Last();\n        if (mid7 < first)\n  \
    \          return true;\n        if (mid7 > last)\n            return false;\n\
    \        long mid8 = l.Skip(1).Take(2).Last();\n        if (mid8 < first)\n  \
    \          return true;\n        if (mid8 > last)\n            return false;\n\
    \        long mid9 = l.Skip(1).Take(2).Last();\n        if (mid9 < first)\n  \
    \          return true;\n        if (mid9 > last)\n            return false;\n\
    \        long mid10 = l.Skip(1).Take(2).Last();\n        if (mid10 < first)\n\
    \            return true;\n        if (mid10 > last)\n            return false;\n\
    \        long mid11 = l.Skip(1).Take(2).Last();\n        if (mid11 < first)\n\
    \            return true;\n        if (mid11 > last)\n            return false;\n\
    \        long mid12 = l.Skip(1).Take(2).Last();\n        if (mid12 < first)\n\
    \            return true;\n        if (mid12 > last)\n            return false;\n\
    \        long mid13 = l.Skip(1).Take(2).Last();\n        if (mid13 < first)\n\
    \            return true;\n        if (mid13 > last)\n            return false;\n\
    \        long mid14 = l.Skip(1).Take(2).Last();\n        if (mid14 < first)\n\
    \            return true;\n        if (mid14 > last)\n            return false;\n\
    \        long mid15\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_bk6o6wv.cs(93,19): error CS1002: ; expected

    '
  timestamp: 1659799620
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        if (min > max) {\n    \
    \        long tmp = min;\n            min = max;\n            max = tmp;\n   \
    \     }\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        long lastValue = min;\n        foreach (long value in l) {\n        \
    \    if (value > lastValue) {\n                isDecreasing = false;\n       \
    \     }\n            if (value < lastValue) {\n                isIncreasing =\
    \ false;\n            }\n            if (value == lastValue) {\n             \
    \   isIncreasing &= (lastValue < value);\n                isDecreasing &= (lastValue\
    \ > value);\n            }\n            lastValue = value;\n        }\n      \
    \  return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24d7062d5122402aaf2a89789c713bb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <24d7062d5122402aaf2a89789c713bb4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n  \
    \          long current = l[i];\n            if (current < first) {\n        \
    \        increasing = false;\n            }\n            if (current > last) {\n\
    \                increasing = true;\n            }\n        }\n        return\
    \ increasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed97c7ad39b2444bba940184036e2746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ed97c7ad39b2444bba940184036e2746>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long prev = l[0];\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] <\
    \ prev) {\n                isIncreasing = false;\n            }\n            if\
    \ (l[i] > prev) {\n                isDecreasing = false;\n            }\n    \
    \        prev = l[i];\n        }\n        if (isIncreasing && isDecreasing) return\
    \ true;\n        if (isIncreasing && !isDecreasing) return false;\n        if\
    \ (!isIncreasing && isDecreasing) return false;\n        return isIncreasing ?\
    \ true : false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59f1daa8b3b34f9ea4535fc6efa5709a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59f1daa8b3b34f9ea4535fc6efa5709a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return false;\n        if (first == last)\n            return true;\n\
    \        long mid = first + (last - first) / 2;\n        long mid2 = l.ElementAt(mid);\n\
    \        if (mid2 < mid)\n            return false;\n        if (mid2 == mid)\n\
    \            return true;\n        long mid3 = l.ElementAt(mid + 1);\n       \
    \ if (mid3 < mid)\n            return false;\n        if (mid3 == mid)\n     \
    \       return true;\n        long mid4 = l.ElementAt(mid + 2);\n        if (mid4\
    \ < mid)\n            return false;\n        if (mid4 == mid)\n            return\
    \ true;\n        long mid5 = l.ElementAt(mid + 3);\n        if (mid5 < mid)\n\
    \            return false;\n        if (mid5 == mid)\n            return true;\n\
    \        long mid6 = l.ElementAt(mid + 4);\n        if (mid6 < mid)\n        \
    \    return false;\n        if (mid6 == mid)\n            return true;\n     \
    \   long mid7 = l.ElementAt(mid + 5);\n        if (mid7 < mid)\n            return\
    \ false;\n        if (mid7 == mid)\n            return true;\n        long mid8\
    \ = l.ElementAt(mid + 6);\n        if (mid8 < mid)\n            return false;\n\
    \        if (mid8 == mid)\n            return true;\n        long mid9 = l.ElementAt(mid\
    \ + 7);\n        if (mid9 < mid)\n            return false;\n        if (mid9\
    \ == mid)\n            return true;\n        long mid10 = l.ElementAt(mid + 8);\n\
    \        if (mid10 < mid)\n            return false;\n        if (mid10 == mid)\n\
    \            return true;\n        long mid11 = l.ElementAt(mid + 9);\n      \
    \  if (mid11 < mid)\n            return false;\n        if (mid11 == mid)\n  \
    \          return true;\n        long mid12 = l.ElementAt(mid + 10);\n       \
    \ if (mid12 < mid)\n            return false;\n        if (mid12 == mid)\n   \
    \         return true;\n        long mid13 = l.ElementAt(mid + 11);\n        if\
    \ (mid13 < mid)\n            return false;\n        if (mid13 == mid)\n      \
    \      return true;\n        long mid14 = l.ElementAt(mid + 12);\n        if (mid14\
    \ < mid)\n            return false;\n        if (mid14 == mid)\n            return\
    \ true;\n        long mid15 = l.ElementAt(mid + 13);\n        if (mid15 < mid)\n\
    \            return false;\n        if (mid15 == mid)\n            return true;\n\
    \        long mid16 = l.ElementAt(mid + 14);\n        if (mid16 < mid)\n     \
    \       return false;\n        if (mid16 == mid)\n            return true;\n \
    \       long mid17\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpthw3x50u.cs(99,19): error CS1002: ; expected

    '
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min == max) {\n   \
    \         return true;\n        }\n        long mid = l.Count / 2;\n        long\
    \ midVal = l[mid];\n        long midVal2 = l[mid+1];\n        if (midVal < midVal2)\
    \ {\n            return true;\n        }\n        long midVal3 = l[mid-1];\n \
    \       if (midVal > midVal3) {\n            return true;\n        }\n       \
    \ return false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptgm9dw_c.cs(23,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptgm9dw_c.cs(24,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmptgm9dw_c.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long current = l[1];\n\
    \        for (int i = 2; i < l.Count; i++) {\n            long next = l[i];\n\
    \            if (current < next) {\n                return false;\n          \
    \  }\n            if (current > prev) {\n                return true;\n      \
    \      }\n            prev = current;\n            current = next;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <662fb4d64c9c4c9984c4783d09f18cab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <662fb4d64c9c4c9984c4783d09f18cab>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long midDiff = max - mid;\n        bool\
    \ isIncreasing = (diff < 0) == (midDiff < 0);\n        return isIncreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpfwllm_r9.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b0eb21c57254a15a62c294e5dabe669>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2b0eb21c57254a15a62c294e5dabe669>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n    \
    \        if (current < mid) {\n                isIncreasing = false;\n       \
    \     } else if (current > mid) {\n                isDecreasing = false;\n   \
    \         } else {\n                isMonotonic = false;\n            }\n    \
    \    }\n        if (isIncreasing && isDecreasing) return isMonotonic;\n      \
    \  if (isIncreasing && !isDecreasing) return isMonotonic;\n        if (!isIncreasing\
    \ && isDecreasing) return isMonotonic;\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <573d8fadb9cc4bb3b13381d44d296e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <573d8fadb9cc4bb3b13381d44d296e98>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long current = first;\n\
    \        long previous = first;\n        foreach (long item in l) {\n        \
    \    if (item < current) {\n                isDecreasing = false;\n          \
    \  }\n            if (item > current) {\n                isIncreasing = false;\n\
    \            }\n            if (item == current) {\n                if (item <\
    \ previous) {\n                    isDecreasing = false;\n                }\n\
    \                if (item > previous) {\n                    isIncreasing = false;\n\
    \                }\n            }\n            previous = current;\n         \
    \   current = item;\n        }\n        if (isIncreasing && isDecreasing) {\n\
    \            return true;\n        }\n        if (isIncreasing && !isDecreasing)\
    \ {\n            return true;\n        }\n        if (!isIncreasing && isDecreasing)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long element in l) {\n  \
    \          if (element < min) {\n                isDecreasing = false;\n     \
    \       }\n            if (element > max) {\n                isIncreasing = false;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7691630d338a4b32bc43b4576dad8908>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7691630d338a4b32bc43b4576dad8908>:0 \n"
  stdout: ''
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing = true;\n\
    \        bool isMonotonicIncreasingDecreasing = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonot\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpab34veqk.cs(54,21): error CS1002: ; expected

    '
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        var first = l[0];\n        var last = l[l-1];\n\
    \        if (first > last) return true;\n        if (first == last) return true;\n\
    \        if (first < last) return false;\n        var mid = l.Count / 2;\n   \
    \     var midVal = l[mid];\n        var midNext = l[mid + 1];\n        if (midVal\
    \ < midNext) return Monotonic(l);\n        if (midVal > midNext) return Monotonic(l.Take(mid).Concat(l.Skip(mid+1)));\n\
    \        return Monotonic(l.Take(mid).Concat(l.Skip(mid+1)).Concat(l.Take(mid+1).Concat(l.Skip(mid))));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpd9_916f4.cs(19,22): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmpd9_916f4.cs(27,48): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpd9_916f4.cs(28,26): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        foreach (long num in l) {\n\
    \            if (num < mid) {\n                isDecreasing = false;\n       \
    \     }\n            if (num > mid) {\n                isIncreasing = false;\n\
    \            }\n            if (num == mid) {\n                isMonotonic = false;\n\
    \            }\n        }\n        if (isIncreasing && isDecreasing && isMonotonic)\
    \ {\n            return true;\n        }\n        if (isIncreasing && !isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isMonotonic)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d56138e0f2447bdb537002506d8e710>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9d56138e0f2447bdb537002506d8e710>:0 \n"
  stdout: ''
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool increasing = (max\
    \ > min);\n        bool decreasing = (min > max);\n        if (increasing || decreasing)\n\
    \            return true;\n        long mid = l.Count / 2;\n        long midVal\
    \ = l[mid];\n        bool leftIncreasing = (l[mid] > midVal);\n        bool rightIncreasing\
    \ = (midVal > l[mid]);\n        if (leftIncreasing || rightIncreasing)\n     \
    \       return true;\n        bool leftDecreasing = (l[mid] < midVal);\n     \
    \   bool rightDecreasing = (midVal < l[mid]);\n        if (leftDecreasing || rightDecreasing)\n\
    \            return true;\n        bool leftMonotonic = Monotonic(l);\n      \
    \  bool rightMonotonic = Monotonic(l);\n        return leftMonotonic && rightMonotonic;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6jpp156y.cs(24,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6jpp156y.cs(25,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6jpp156y.cs(26,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6jpp156y.cs(29,34): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6jpp156y.cs(30,44): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        if (min > max) {\n    \
    \        throw new ArgumentException(\"List elements must be monotonically increasing\
    \ or decreasing\");\n        }\n        if (min == max) {\n            return\
    \ true;\n        }\n        long mid = min + (max - min) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long element in\
    \ l) {\n            if (element < mid) {\n                isIncreasing = false;\n\
    \            }\n            if (element > mid) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02c85bc425d846e69ceafdf5d93767b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <02c85bc425d846e69ceafdf5d93767b8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0)\n            return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        if (first > last)\n            return false;\n  \
    \      long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] < mid)\n                isIncreasing = false;\n    \
    \        else if (l[i] > mid)\n                isDecreasing = false;\n       \
    \     else\n                break;\n        }\n        return isIncreasing ||\
    \ isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c21b488aabc64866aed4b144c23b306d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c21b488aabc64866aed4b144c23b306d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = (max + min)\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isDecreasing = false;\n            } else if (x < mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f79ba7818934171aab01aca628fc5f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7f79ba7818934171aab01aca628fc5f5>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < mid) {\n                isIncreasing = false;\n\
    \                break;\n            }\n            if (current > mid) {\n   \
    \             isIncreasing = true;\n                break;\n            }\n  \
    \      }\n        return isIncreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d399405d08ad4c2b82b8551acd027729>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d399405d08ad4c2b82b8551acd027729>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) {\n    \
    \        long tmp = min;\n            min = max;\n            max = tmp;\n   \
    \     }\n        long mid = min + (max - min) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l) {\n\
    \            if (x > mid) {\n                isIncreasing = false;\n         \
    \   }\n            if (x < mid) {\n                isDecreasing = false;\n   \
    \         }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cceffa708b9499ba3df4289040fd523>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <9cceffa708b9499ba3df4289040fd523>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        long midVal = l[mid];\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        if (min < midVal) {\n            isIncreasing\
    \ = false;\n        }\n        if (max > midVal) {\n            isDecreasing =\
    \ false;\n        }\n        if (isIncreasing && isDecreasing) {\n           \
    \ return true;\n        }\n        if (isIncreasing) {\n            return false;\n\
    \        }\n        if (isDecreasing) {\n            return true;\n        }\n\
    \        return false;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmprl83ifx0.cs(20,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        if (l.Count == 1) {\n            return true;\n        }\n  \
    \      long min = l.Min();\n        long max = l.Max();\n        if (min == max)\
    \ {\n            return true;\n        }\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        long lastElement = min;\n        foreach\
    \ (long element in l) {\n            if (element < last) {\n                isDecreasing\
    \ = false;\n            }\n            if (element > last) {\n               \
    \ isIncreasing = false;\n            }\n            lastElement = element;\n \
    \       }\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        if (isIncreasing && !isDecreasing) {\n            return false;\n\
    \        }\n        if (!isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmptst35w41.cs(30,27): error CS0103: The name ''last'' does not exist in
    the current context

    /tmp/tmptst35w41.cs(33,27): error CS0103: The name ''last'' does not exist in
    the current context

    '
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long midValue = l[l.Count\
    \ - 1];\n        long midValue2 = l[l.Count - 2];\n        long midValue3 = l[l.Count\
    \ - 3];\n        long midValue4 = l[l.Count - 4];\n        long midValue5 = l[l.Count\
    \ - 5];\n        long midValue6 = l[l.Count - 6];\n        long midValue7 = l[l.Count\
    \ - 7];\n        long midValue8 = l[l.Count - 8];\n        long midValue9 = l[l.Count\
    \ - 9];\n        long midValue10 = l[l.Count - 10];\n        long midValue11 =\
    \ l[l.Count - 11];\n        long midValue12 = l[l.Count - 12];\n        long midValue13\
    \ = l[l.Count - 13];\n        long midValue14 = l[l.Count - 14];\n        long\
    \ midValue15 = l[l.Count - 15];\n        long midValue16 = l[l.Count - 16];\n\
    \        long midValue17 = l[l.Count - 17];\n        long midValue18 = l[l.Count\
    \ - 18];\n        long midValue19 = l[l.Count - 19];\n        long midValue20\
    \ = l[l.Count - 20];\n        long midValue21 = l[l.Count - 21];\n        long\
    \ midValue22 = l[l.Count - 22];\n        long midValue23 = l[l.Count - 23];\n\
    \        long midValue24 = l[l.Count - 24];\n        long midValue25 = l[l.Count\
    \ - 25];\n        long midValue26 = l[l.Count - 26];\n        long midValue27\
    \ = l[l.Count - 27];\n        long midValue28 = l[l.Count - 28];\n        long\
    \ midValue29 = l[l.Count - 29];\n        long midValue30 = l[l.Count - 30];\n\
    \        long midValue31 = l[l.Count - 31];\n        long midValue32 = l[l.Count\
    \ - 32];\n        long midValue33 = l[l.Count - 33];\n        long midValue34\
    \ = l[l.Count \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsfnkp03w.cs(56,36): error CS1003: Syntax error, '']'' expected

    /tmp/tmpsfnkp03w.cs(56,36): error CS1002: ; expected

    '
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        var min = l.Min();\n        var max = l.Max();\n\
    \        if (min > max) return false;\n        var mid = l.Count / 2;\n      \
    \  var l1 = l.GetRange(0, mid);\n        var l2 = l.GetRange(mid, l.Count - mid);\n\
    \        if (l1.SequenceEqual(l2)) return true;\n        return Monotonic(l1)\
    \ || Monotonic(l2);\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b9e5a5217ee43ea8c85b36af311309f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3b9e5a5217ee43ea8c85b36af311309f>:0 \n"
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        bool isIncreasing = (min\
    \ < max);\n        bool isDecreasing = (max < min);\n        if (isIncreasing\
    \ && isDecreasing)\n            return true;\n        if (isIncreasing)\n    \
    \        return false;\n        if (isDecreasing)\n            return true;\n\
    \        bool isMonotonic = true;\n        foreach (long x in l)\n        {\n\
    \            long y = x - min;\n            if (y > 0)\n            {\n      \
    \          isMonotonic = false;\n                break;\n            }\n     \
    \   }\n        return isMonotonic;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e12cd392b95f46ec935eb52bf9430f6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e12cd392b95f46ec935eb52bf9430f6c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = first + (last - first) / 2;\n \
    \       long mid2 = mid + (mid - first) / 2;\n        long mid3 = mid2 + (mid2\
    \ - first) / 2;\n        long mid4 = mid3 + (mid3 - first) / 2;\n        long\
    \ mid5 = mid4 + (mid4 - first) / 2;\n        long mid6 = mid5 + (mid5 - first)\
    \ / 2;\n        long mid7 = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7\
    \ + (mid7 - first) / 2;\n        long mid9 = mid8 + (mid8 - first) / 2;\n    \
    \    long mid10 = mid9 + (mid9 - first) / 2;\n        long mid11 = mid10 + (mid10\
    \ - first) / 2;\n        long mid12 = mid11 + (mid11 - first) / 2;\n        long\
    \ mid13 = mid12 + (mid12 - first) / 2;\n        long mid14 = mid13 + (mid13 -\
    \ first) / 2;\n        long mid15 = mid14 + (mid14 - first) / 2;\n        long\
    \ mid16 = mid15 + (mid15 - first) / 2;\n        long mid17 = mid16 + (mid16 -\
    \ first) / 2;\n        long mid18 = mid17 + (mid17 - first) / 2;\n        long\
    \ mid19 = mid18 + (mid18 - first) / 2;\n        long mid20 = mid19 + (mid19 -\
    \ first) / 2;\n        long mid21 = mid20 + (mid20 - first) / 2;\n        long\
    \ mid22 = mid21 + (mid21 - first) / 2;\n        long mid23 = mid22 + (mid22 -\
    \ first) / 2;\n        long mid24 = mid23 + (mid23 - first) / 2;\n        long\
    \ mid25 = mid24 + (mid24 - first) / 2;\n        long mid26 = mid25 + (mid25 -\
    \ first) / 2;\n        long mid27 = mid26 + (mid26 - first) / 2;\n        long\
    \ mid28 = mid27 + (mid27 - first) / 2;\n        long mid29 = mid28 + (mid28 -\
    \ first) / 2;\n        long mid30 = mid29 + (mid29 - first) / 2;\n        long\
    \ mid31 = mid30 + (mid30 - first) / 2;\n        long mid32 = mid31 + (mid31 -\
    \ first) / 2;\n        long mid33 = mid32 + (mid32 - first) / 2;\n        long\
    \ mid34 = mid33 + (mid33 - first\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpthvr_l3i.cs(54,44): error CS1026: ) expected

    /tmp/tmpthvr_l3i.cs(54,44): error CS1002: ; expected

    '
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first == last)\
    \ return true;\n        if (first > last) return true;\n        if (first < last)\
    \ return false;\n        long mid = first + ((last - first) / 2);\n        bool\
    \ isIncreasing = Monotonic(l, first, mid);\n        bool isDecreasing = Monotonic(l,\
    \ mid, last);\n        return isIncreasing || isDecreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr143eibb.cs(23,29): error CS1501: No overload for method ''Monotonic''
    takes 3 arguments

    /tmp/tmpr143eibb.cs(24,29): error CS1501: No overload for method ''Monotonic''
    takes 3 arguments

    '
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicDecreasingIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicDecreasingDe\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp0eh02byd.cs(50,37): error CS1002: ; expected

    '
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                decreasing = false;\n\
    \            }\n            if (l[i] > mid) {\n                increasing = false;\n\
    \            }\n        }\n        return increasing || decreasing;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dd6fe13d84648f9bc3dafd2d7d78030>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4dd6fe13d84648f9bc3dafd2d7d78030>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] > l[1];\n        long\
    \ first = l[0];\n        long last = l[l.Count - 1];\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        foreach (long x in l) {\n\
    \            if (x < mid) {\n                isIncreasing = false;\n         \
    \   }\n            if (x > mid) {\n                isDecreasing = false;\n   \
    \         }\n            if (x == mid) {\n                isMonotonic = false;\n\
    \            }\n        }\n        if (isIncreasing && isDecreasing && isMonotonic)\
    \ {\n            return true;\n        }\n        if (isIncreasing && !isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && !isIncreasing && !isMonotonic) {\n            return true;\n        }\n \
    \       if (isMonotonic) {\n            return true;\n        }\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <723a8495451b4479970b882f113eb845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <723a8495451b4479970b882f113eb845>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (max\
    \ < min);\n        if (isIncreasing) {\n            long current = l.First();\n\
    \            bool isIncreasing2 = true;\n            foreach (long item in l)\
    \ {\n                if (item < current) {\n                    isIncreasing2\
    \ = false;\n                    break;\n                }\n                current\
    \ = item;\n            }\n            return isIncreasing2;\n        } else {\n\
    \            long current = l.First();\n            bool isIncreasing2 = true;\n\
    \            foreach (long item in l) {\n                if (item > current) {\n\
    \                    isIncreasing2 = false;\n                    break;\n    \
    \            }\n                current = item;\n            }\n            return\
    \ isIncreasing2;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5af621a106af4a27902b947a27c4293c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5af621a106af4a27902b947a27c4293c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            } else if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adf50f6d3ef542b084311c258fed6e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <adf50f6d3ef542b084311c258fed6e58>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long current = l[1];\n\
    \        bool increasing = true;\n        for (int i = 2; i < l.Count; i++) {\n\
    \            long next = l[i];\n            if (current > next) {\n          \
    \      increasing = false;\n            }\n            if (current < prev) {\n\
    \                increasing = true;\n            }\n            prev = current;\n\
    \            current = next;\n        }\n        return increasing;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853dc8f39e534901b813180dad59d5ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <853dc8f39e534901b813180dad59d5ef>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max == min) {\n   \
    \         return true;\n        }\n        long mid = max / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isIncreasingOrDecreasing = true;\n        bool isMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonic = true;\n        bool isMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonic = true;\n        bool\
    \ isMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing = true;\n        bool\
    \ isMonotonicOrMonotonicOrMonotonicOrMonotonic = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1brejllk.cs(43,91): error CS1002: ; expected

    '
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (min < mid);\n        bool isDecreasing = (max >\
    \ mid);\n        if (isIncreasing && isDecreasing)\n            return true;\n\
    \        if (isIncreasing && !isDecreasing)\n            return false;\n     \
    \   if (!isIncreasing && isDecreasing)\n            return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpapehcutd.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing = true;\n\
    \        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasing\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpp1mcxott.cs(38,35): error CS1002: ; expected

    '
  timestamp: 1659799621
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return false;\n            if (!isIncreasing && isDecreasing) return false;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cacc4c2b7f5d4b35ac988aa424e2c3a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cacc4c2b7f5d4b35ac988aa424e2c3a4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        bool decreasing = true;\n  \
    \      for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < first) {\n                decreasing = false;\n   \
    \         } else if (current > last) {\n                increasing = false;\n\
    \            } else {\n                if (current < first) decreasing = false;\n\
    \                if (current > last) increasing = false;\n            }\n    \
    \    }\n        return increasing || decreasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c57a93f50b4dd1bddc451793187ab7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b8c57a93f50b4dd1bddc451793187ab7>:0 \n"
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n            mid = current;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5t0zcdmn.cs(19,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659799621
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = max / 2;\n        long mid2\
    \ = min / 2;\n        long mid3 = mid / 2;\n        long mid4 = mid3 / 2;\n  \
    \      long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n        long mid7\
    \ = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9 = mid8 / 2;\n\
    \        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n        long\
    \ mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long mid14 = mid13\
    \ / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15 / 2;\n   \
    \     long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n        long mid19\
    \ = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21 = mid20 /\
    \ 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 / 2;\n     \
    \   long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n        long mid26\
    \ = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28 = mid27 /\
    \ 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 / 2;\n     \
    \   long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n        long mid33\
    \ = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35 = mid34 /\
    \ 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 / 2;\n     \
    \   long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n        long mid40\
    \ = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42 = mid41 /\
    \ 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 / 2;\n     \
    \   long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n        long mid47\
    \ = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49 = mid48 /\
    \ 2;\n        long mid50 = mid49 / 2;\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmph__xxgau.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool isIncreasing = true;\n        foreach (long x in\
    \ l.Skip(1)) {\n            if (x < prev) {\n                isIncreasing = false;\n\
    \            }\n            prev = x;\n        }\n        return isIncreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a2e7bcbde464be298e18e9f0a184223>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8a2e7bcbde464be298e18e9f0a184223>:0 \n"
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) return false;\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        for (int i = 0; i < mid; i++) {\n            if\
    \ (l[i] > max) return false;\n            if (l[i] < min) {\n                isIncreasing\
    \ = false;\n                isDecreasing = false;\n                break;\n  \
    \          }\n        }\n        for (int i = mid; i < l.Count; i++) {\n     \
    \       if (l[i] > max) return false;\n            if (l[i] < min) {\n       \
    \         isIncreasing = false;\n                isDecreasing = false;\n     \
    \           break;\n            }\n        }\n        if (isIncreasing && isDecreasing)\
    \ return true;\n        if (isIncreasing && !isDecreasing) return true;\n    \
    \    if (!isIncreasing && isDecreasing) return true;\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2imzve08.cs(31,22): error CS0266: Cannot implicitly convert type ''long''
    to ''int''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            long current\
    \ = l[i];\n            if (current < mid) {\n                isIncreasing = false;\n\
    \            } else if (current > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <809b37cf750847c6b39e87b171861451>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <809b37cf750847c6b39e87b171861451>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long el in l.Skip(1))\n\
    \            if (el < prev)\n                increasing = false;\n           \
    \ else\n                prev = el;\n        return increasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84bf113fc47a4161bde554dca4604c9b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84bf113fc47a4161bde554dca4604c9b>:0 \n"
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < max) {\n    \
    \        long mid = (max + min) / 2;\n            bool isIncreasing = l.Skip(1).All(x\
    \ => x >= mid);\n            bool isDecreasing = l.Skip(1).All(x => x <= mid);\n\
    \            return isIncreasing || isDecreasing;\n        }\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29485897f03c4f49842190ddb62cee69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <29485897f03c4f49842190ddb62cee69>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Count\
    \ / 2;\n        bool increasing = (first < last);\n        bool decreasing = (first\
    \ > last);\n        if (increasing || decreasing) {\n            long middleValue\
    \ = l.ElementAt(middle);\n            if (increasing) {\n                if (middleValue\
    \ < first) {\n                    return false;\n                }\n         \
    \   }\n            if (decreasing) {\n                if (middleValue > last)\
    \ {\n                    return false;\n                }\n            }\n   \
    \     }\n        return true;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplv7d_saa.cs(23,44): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first == last) return true;\n        if (first > last) return\
    \ Monotonic(l.Skip(1).ToList());\n        if (first < last) return Monotonic(l.Take(l.Count\
    \ - 1).ToList());\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f08f8747cc9400590c4d1a9b1c04447>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f08f8747cc9400590c4d1a9b1c04447>:0 \n"
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        if (l.Count == 1) return true;\n        long first = l[0], last\
    \ = l[0];\n        bool increasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < first) increasing\
    \ = false;\n            if (current > last) increasing = true;\n            last\
    \ = current;\n        }\n        return increasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84d58f92d0a047edac0b7d7b831ca8eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84d58f92d0a047edac0b7d7b831ca8eb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            }\n            if (l[i] > mid) {\n                isDecreasing =\
    \ false;\n            }\n        }\n        if (isIncreasing && isDecreasing)\
    \ return true;\n        if (isIncreasing && !isDecreasing) return false;\n   \
    \     if (!isIncreasing && isDecreasing) return false;\n        return true;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe0ebf1b91e64d2c8615d47a05605032>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <fe0ebf1b91e64d2c8615d47a05605032>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = (first + last) / 2;\n        bool isIncreasing = true;\n \
    \       bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n\
    \            long current = l[i];\n            if (current < mid) {\n        \
    \        isIncreasing = false;\n            } else if (current > mid) {\n    \
    \            isDecreasing = false;\n            } else {\n                isIncreasing\
    \ = isDecreasing = true;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmppm1no1z3.cs(19,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = min + (max - min) / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l) {\n            if (x > mid) {\n                isDecreasing\
    \ = false;\n            }\n            if (x < mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9d21f6601b44e7da56d3c123a735b07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a9d21f6601b44e7da56d3c123a735b07>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool increasing = mid > max || mid < min;\n        bool decreasing =\
    \ mid < max || mid > min;\n        return increasing || decreasing;\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpr562o5ht.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long middle = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < middle) {\n                isIncreasing = false;\n\
    \            }\n            if (l[i] > middle) {\n                isDecreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae330e52e8b24a538f1e6778b41ebad6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae330e52e8b24a538f1e6778b41ebad6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l.Skip(1).Take(l.Count\
    \ - 1)) {\n            if (x > mid) isDecreasing = false;\n            if (x <\
    \ mid) isIncreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7002461dc77149aeb414d50165179be2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7002461dc77149aeb414d50165179be2>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        long mid2 = mid\
    \ + (mid - last) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonic2 = true;\n\
    \        bool isMonotonic3 = true;\n        bool isMonotonic4 = true;\n      \
    \  bool isMonotonic5 = true;\n        bool isMonotonic6 = true;\n        bool\
    \ isMonotonic7 = true;\n        bool isMonotonic8 = true;\n        bool isMonotonic9\
    \ = true;\n        bool isMonotonic10 = true;\n        bool isMonotonic11 = true;\n\
    \        bool isMonotonic12 = true;\n        bool isMonotonic13 = true;\n    \
    \    bool isMonotonic14 = true;\n        bool isMonotonic15 = true;\n        bool\
    \ isMonotonic16 = true;\n        bool isMonotonic17 = true;\n        bool isMonotonic18\
    \ = true;\n        bool isMonotonic19 = true;\n        bool isMonotonic20 = true;\n\
    \        bool isMonotonic21 = true;\n        bool isMonotonic22 = true;\n    \
    \    bool isMonotonic23 = true;\n        bool isMonotonic24 = true;\n        bool\
    \ isMonotonic25 = true;\n        bool isMonotonic26 = true;\n        bool isMonotonic27\
    \ = true;\n        bool isMonotonic28 = true;\n        bool isMonotonic29 = true;\n\
    \        bool isMonotonic30 = true;\n        bool isMonotonic31 = true;\n    \
    \    bool isMonotonic32 = true;\n        bool isMonotonic33 = true;\n        bool\
    \ isMonotonic34 = true;\n        bool isMonotonic35 = true;\n        bool isMonotonic36\
    \ = true;\n        bool isMonotonic37 = true;\n        bool isMonotonic38 = true;\n\
    \        bool isMonotonic39 = true;\n        bool isMonotonic40 = true;\n    \
    \    bool isMonotonic41 = true;\n        bool isMonotonic42 = true;\n        bool\
    \ isMonotonic43 = true;\n        bool isMonotonic44 = true;\n        bool isMonotonic45\
    \ = true;\n        bool isMonotonic46 = true;\n        bool isMonotonic47 = true;\n\
    \        bool isMonotonic48 = true;\n        bool isMonotonic49 = true;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp3lvjd916.cs(22,14): warning CS0219: The variable ''isIncreasing'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(23,14): warning CS0219: The variable ''isDecreasing'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(24,14): warning CS0219: The variable ''isMonotonic'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(25,14): warning CS0219: The variable ''isMonotonic2'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(26,14): warning CS0219: The variable ''isMonotonic3'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(27,14): warning CS0219: The variable ''isMonotonic4'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(28,14): warning CS0219: The variable ''isMonotonic5'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(29,14): warning CS0219: The variable ''isMonotonic6'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(30,14): warning CS0219: The variable ''isMonotonic7'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(31,14): warning CS0219: The variable ''isMonotonic8'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(32,14): warning CS0219: The variable ''isMonotonic9'' is assigned
    but its value is never used

    /tmp/tmp3lvjd916.cs(33,14): warning CS0219: The variable ''isMonotonic10'' is
    assigned but its value is never used

    /tmp/tmp3lvjd916.cs(34,14): warning CS0219: The variable ''isMonotonic11'' is
    assigned but its value is never used

    /tmp/tmp3lvjd916.cs(35,14): warning CS0219: The variable ''isMonotonic12'' is
    assigned but its value is never used

    /tmp/tmp3lvjd916.cs(36,14): warning CS0219: The variable ''isMonotonic13'' is
    assigned but its value is never used

    /tmp/tmp3lvjd916.cs(37,14): warning CS0219: The variable ''isMonotonic14'' is
    assigned but its value is never used

    /tmp/tmp3lvjd916.cs(38,14): warning CS0219: The variable ''isMonotonic15'' is
    assigned but its value is never used

    /tmp/tmp3lvj'
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = (min + max)\
    \ / 2;\n        bool isIncreasing = (mid > min);\n        bool isDecreasing =\
    \ (mid < max);\n        if (isIncreasing && isDecreasing)\n            return\
    \ true;\n        if (isIncreasing && !isDecreasing)\n            return false;\n\
    \        if (!isIncreasing && isDecreasing)\n            return false;\n     \
    \   bool isMonotonic = true;\n        foreach (long x in l) {\n            if\
    \ (x < mid)\n                isMonotonic = false;\n        }\n        return isMonotonic;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d9e4fbb9ea54ca9a5d20bb4a86e75d7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6d9e4fbb9ea54ca9a5d20bb4a86e75d7>:0 \n"
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool isIncreasing = true;\n        foreach (long el in\
    \ l.Skip(1)) {\n            if (el < prev) {\n                isIncreasing = false;\n\
    \            }\n            prev = el;\n        }\n        return isIncreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63b1a188439d4521a25babbc74cf8d90>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <63b1a188439d4521a25babbc74cf8d90>:0 \n"
  stdout: ''
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0], last = l[l.Count - 1];\n     \
    \   long middle = first + (last - first) / 2;\n        bool increasing = (first\
    \ <= middle) && (middle <= last);\n        bool decreasing = (first >= middle)\
    \ && (middle >= last);\n        return increasing || decreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fcd8f72a1d84ab085226cc74d90d036>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1fcd8f72a1d84ab085226cc74d90d036>:0 \n"
  stdout: ''
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (mid > max);\n        bool isDecreasing = (mid <\
    \ min);\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpykztbhpg.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = (first\
    \ + last) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing =\
    \ true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonicOrMonotonicIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasing\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwdb9mcor.cs(36,47): error CS1002: ; expected

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            mid = current;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a592a6de22e47c797064c80631efc71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0a592a6de22e47c797064c80631efc71>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799620
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ (first < last);\n        bool decreasing = (first > last);\n        if (increasing\
    \ && decreasing)\n            return false;\n        if (increasing)\n       \
    \     return true;\n        if (decreasing)\n            return false;\n     \
    \   long mid = l.Count / 2;\n        long midVal = l.ElementAt(mid);\n       \
    \ bool increasingMidVal = (midVal < first);\n        bool decreasingMidVal = (midVal\
    \ > last);\n        if (increasingMidVal && decreasingMidVal)\n            return\
    \ false;\n        if (increasingMidVal)\n            return true;\n        if\
    \ (decreasingMidVal)\n            return false;\n        bool increasingMidValAndLast\
    \ = (midVal < last);\n        bool decreasingMidValAndFirst = (midVal > first);\n\
    \        if (increasingMidValAndLast && decreasingMidValAndFirst)\n          \
    \  return false;\n        if (increasingMidValAndLast)\n            return true;\n\
    \        if (decreasingMidValAndFirst)\n            return false;\n        bool\
    \ increasingMidValAndLastAndFirst = (midVal < first && midVal > last);\n     \
    \   if (increasingMidValAndLastAndFirst)\n            return false;\n        if\
    \ (increasingMidValAndLastAndFirst)\n            return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu77lx_et.cs(28,35): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        long mid2 = mid\
    \ + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n     \
    \   long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 -\
    \ first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7\
    \ = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n\
    \        long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long\
    \ mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long\
    \ mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 -\
    \ first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long\
    \ mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long\
    \ mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long\
    \ mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 -\
    \ first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long\
    \ mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long\
    \ mid33 = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 -\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqyy__2fh.cs(53,38): error CS1525: Invalid expression term ''}''

    /tmp/tmpqyy__2fh.cs(53,38): error CS1026: ) expected

    /tmp/tmpqyy__2fh.cs(53,38): error CS1002: ; expected

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x < mid) {\n               \
    \ isDecreasing = false;\n            } else if (x > mid) {\n                isIncreasing\
    \ = false;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84a1cba5a2ea4e7b8e8366b8ad88049f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <84a1cba5a2ea4e7b8e8366b8ad88049f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        foreach (long x in l.Skip(1)) {\n            if (prev\
    \ < x) {\n                return false;\n            }\n            prev = x;\n\
    \        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1825b15f9a2147088abffee37fc35e0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1825b15f9a2147088abffee37fc35e0a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (min\
    \ <= max);\n        bool isDecreasing = (max >= min);\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6719b3d7a5da48bd99d8dffefefdabd3>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6719b3d7a5da48bd99d8dffefefdabd3>:0 \n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return false;\n        if (first == last)\n            return true;\n\
    \        long mid = l.Skip(1).Take(2).Last();\n        if (mid < first || mid\
    \ > last)\n            return false;\n        long mid2 = l.Skip(2).Take(2).Last();\n\
    \        if (mid2 < first || mid2 > last)\n            return false;\n       \
    \ long mid3 = l.Skip(3).Take(2).Last();\n        if (mid3 < first || mid3 > last)\n\
    \            return false;\n        long mid4 = l.Skip(4).Take(2).Last();\n  \
    \      if (mid4 < first || mid4 > last)\n            return false;\n        long\
    \ mid5 = l.Skip(5).Take(2).Last();\n        if (mid5 < first || mid5 > last)\n\
    \            return false;\n        long mid6 = l.Skip(6).Take(2).Last();\n  \
    \      if (mid6 < first || mid6 > last)\n            return false;\n        long\
    \ mid7 = l.Skip(7).Take(2).Last();\n        if (mid7 < first || mid7 > last)\n\
    \            return false;\n        long mid8 = l.Skip(8).Take(2).Last();\n  \
    \      if (mid8 < first || mid8 > last)\n            return false;\n        long\
    \ mid9 = l.Skip(9).Take(2).Last();\n        if (mid9 < first || mid9 > last)\n\
    \            return false;\n        long mid10 = l.Skip(10).Take(2).Last();\n\
    \        if (mid10 < first || mid10 > last)\n            return false;\n     \
    \   return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <930732b03dd2433aad145b152dcb64bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <930732b03dd2433aad145b152dcb64bb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = (min\
    \ <= max);\n        if (isIncreasing) {\n            long current = l.First();\n\
    \            bool isIncreasing2 = true;\n            foreach (long x in l.Skip(1))\
    \ {\n                if (current < x) {\n                    isIncreasing2 = false;\n\
    \                    break;\n                }\n                current = x;\n\
    \            }\n            return isIncreasing2;\n        } else {\n        \
    \    long current = l.First();\n            bool isIncreasing2 = true;\n     \
    \       foreach (long x in l.Skip(1)) {\n                if (current > x) {\n\
    \                    isIncreasing2 = false;\n                    break;\n    \
    \            }\n                current = x;\n            }\n            return\
    \ isIncreasing2;\n        }\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7341fd43ca3b40fda895b717ec879017>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7341fd43ca3b40fda895b717ec879017>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool increasing = max >\
    \ min;\n        bool decreasing = max < min;\n        if (increasing || decreasing)\
    \ {\n            Debug.Assert(increasing || decreasing);\n            Debug.Assert(min\
    \ >= 0);\n            Debug.Assert(max >= 0);\n            Debug.Assert(min <=\
    \ max);\n            Debug.Assert(min <= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min >= max);\n            Debug.Assert(min >=\
    \ max);\n            Debug.Assert(min \n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp_vj9ltl1.cs(64,29): error CS1026: ) expected

    /tmp/tmp_vj9ltl1.cs(64,29): error CS1002: ; expected

    /tmp/tmp_vj9ltl1.cs(66,5): error CS0106: The modifier ''public'' is not valid
    for this item

    /tmp/tmp_vj9ltl1.cs(77,2): error CS1513: } expected

    '
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l\
    \ != null);\n        Debug.Assert(l.Count > 0);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ <= 10000);\n        Debug.Assert(l.Count >= 1);\n        Debug.Assert(l.Count\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpu6marajk.cs(61,29): error CS1026: ) expected

    /tmp/tmpu6marajk.cs(61,29): error CS1002: ; expected

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88f278715c054d8f8ae6cf175e273e7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <88f278715c054d8f8ae6cf175e273e7f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool increasing\
    \ = (mid > first);\n        bool decreasing = (mid < last);\n        if (increasing\
    \ && decreasing) return true;\n        if (increasing) return Monotonic(l.Skip(1).ToList());\n\
    \        if (decreasing) return Monotonic(l.Take(l.Count - 1).ToList());\n   \
    \     return false;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d96bab33bdb45228d9c7bd9d2e413f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4d96bab33bdb45228d9c7bd9d2e413f4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        long mid2 = mid\
    \ + (mid - first) / 2;\n        long mid3 = mid2 + (mid2 - first) / 2;\n     \
    \   long mid4 = mid3 + (mid3 - first) / 2;\n        long mid5 = mid4 + (mid4 -\
    \ first) / 2;\n        long mid6 = mid5 + (mid5 - first) / 2;\n        long mid7\
    \ = mid6 + (mid6 - first) / 2;\n        long mid8 = mid7 + (mid7 - first) / 2;\n\
    \        long mid9 = mid8 + (mid8 - first) / 2;\n        long mid10 = mid9 + (mid9\
    \ - first) / 2;\n        long mid11 = mid10 + (mid10 - first) / 2;\n        long\
    \ mid12 = mid11 + (mid11 - first) / 2;\n        long mid13 = mid12 + (mid12 -\
    \ first) / 2;\n        long mid14 = mid13 + (mid13 - first) / 2;\n        long\
    \ mid15 = mid14 + (mid14 - first) / 2;\n        long mid16 = mid15 + (mid15 -\
    \ first) / 2;\n        long mid17 = mid16 + (mid16 - first) / 2;\n        long\
    \ mid18 = mid17 + (mid17 - first) / 2;\n        long mid19 = mid18 + (mid18 -\
    \ first) / 2;\n        long mid20 = mid19 + (mid19 - first) / 2;\n        long\
    \ mid21 = mid20 + (mid20 - first) / 2;\n        long mid22 = mid21 + (mid21 -\
    \ first) / 2;\n        long mid23 = mid22 + (mid22 - first) / 2;\n        long\
    \ mid24 = mid23 + (mid23 - first) / 2;\n        long mid25 = mid24 + (mid24 -\
    \ first) / 2;\n        long mid26 = mid25 + (mid25 - first) / 2;\n        long\
    \ mid27 = mid26 + (mid26 - first) / 2;\n        long mid28 = mid27 + (mid27 -\
    \ first) / 2;\n        long mid29 = mid28 + (mid28 - first) / 2;\n        long\
    \ mid30 = mid29 + (mid29 - first) / 2;\n        long mid31 = mid30 + (mid30 -\
    \ first) / 2;\n        long mid32 = mid31 + (mid31 - first) / 2;\n        long\
    \ mid33 = mid32 + (mid32 - first) / 2;\n        long mid34 = mid33 + (mid33 -\
    \ \n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqyy__2fh.cs(53,38): error CS1525: Invalid expression term ''}''

    /tmp/tmpqyy__2fh.cs(53,38): error CS1026: ) expected

    /tmp/tmpqyy__2fh.cs(53,38): error CS1002: ; expected

    '
  timestamp: 1659799622
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        bool isMonotonic = true;\n       \
    \ bool isIncreasingOrDecreasing = false;\n        bool isMonotonicOrIncreasingOrDecreasing\
    \ = false;\n        bool isMonotonicOrMonotonic = false;\n        bool isMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonic\
    \ = false;\n        bool isMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrMonotonicOrIncreasingOrDecreasingOrMonotonicOrMonotonicOrMonotonicOrMonotonicOr\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpn1rgqc2x.cs(34,194): error CS1002: ; expected

    '
  timestamp: 1659799622
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool isIncreasing = true;\n        foreach (long el in\
    \ l.Skip(1))\n            if (el < prev)\n                isIncreasing = false;\n\
    \            else\n                prev = el;\n        return isIncreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d7262a856434439ac17dae3be5cface>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0d7262a856434439ac17dae3be5cface>:0 \n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        long current = first;\n\
    \        long previous = first;\n        foreach (long x in l) {\n           \
    \ if (current < x) {\n                isIncreasing = false;\n            }\n \
    \           if (current > x) {\n                isDecreasing = false;\n      \
    \      }\n            current = x;\n            previous = x;\n        }\n   \
    \     if (isIncreasing && isDecreasing) {\n            return true;\n        }\n\
    \        if (isIncreasing && !isDecreasing) {\n            return false;\n   \
    \     }\n        if (!isIncreasing && isDecreasing) {\n            return false;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <221a0f53e71948ee9ee00b7cccb7a250>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <221a0f53e71948ee9ee00b7cccb7a250>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        if (min == max) {\n            return true;\n\
    \        }\n        if (min < max) {\n            isIncreasing = false;\n    \
    \        isDecreasing = false;\n            isMonotonic = false;\n        }\n\
    \        if (min > max) {\n            isIncreasing = true;\n            isDecreasing\
    \ = true;\n            isMonotonic = false;\n        }\n        if (mid < max)\
    \ {\n            isIncreasing = true;\n            isDecreasing = false;\n   \
    \         isMonotonic = false;\n        }\n        if (mid > max) {\n        \
    \    isIncreasing = false;\n            isDecreasing = true;\n            isMonotonic\
    \ = false;\n        }\n        if (isIncreasing && isDecreasing) {\n         \
    \   isMonotonic = false;\n        }\n        if (isIncreasing && !isDecreasing)\
    \ {\n            isMonotonic = true;\n        }\n        if (!isIncreasing &&\
    \ isDecreasing) {\n            isMonotonic = true;\n        }\n        return\
    \ isMonotonic;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da0617f646c444894ed2ffd87ee9c45>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2da0617f646c444894ed2ffd87ee9c45>:0 \n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long diff = last\
    \ - first;\n        if (diff == 0) return true;\n        if (diff > 0) return\
    \ false;\n        long mid = first + (diff / 2);\n        bool isIncreasing =\
    \ Monotonic(l.Take(mid).ToList());\n        bool isDecreasing = Monotonic(l.Skip(mid).ToList());\n\
    \        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp8aazuths.cs(23,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmp8aazuths.cs(24,46): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = min + (max - min) / 2;\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long e in l) {\n            if (e < mid) {\n                decreasing = false;\n\
    \            }\n            else if (e > mid) {\n                increasing =\
    \ false;\n            }\n            else {\n                return false;\n \
    \           }\n        }\n        return increasing || decreasing;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae4776ab3e1644ba8889f3adbff97e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ae4776ab3e1644ba8889f3adbff97e08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = l.Count\
    \ / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        if (first < mid) {\n            isIncreasing = false;\n        }\n  \
    \      if (last > mid) {\n            isDecreasing = false;\n        }\n     \
    \   if (isIncreasing && isDecreasing) {\n            return true;\n        }\n\
    \        if (isIncreasing && !isDecreasing) {\n            return false;\n   \
    \     }\n        if (!isIncreasing && isDecreasing) {\n            return false;\n\
    \        }\n        if (isIncreasing && isDecreasing) {\n            return true;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <273574e6f7864891bef2c3d3dfa25a1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <273574e6f7864891bef2c3d3dfa25a1f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (max < min) {\n    \
    \        return false;\n        }\n        long mid = max / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l) {\n\
    \            if (x > mid) {\n                isIncreasing = false;\n         \
    \   }\n            if (x < mid) {\n                isDecreasing = false;\n   \
    \         }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9e976202d2d483a8cf43da81e37bb88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e9e976202d2d483a8cf43da81e37bb88>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long el in l.Skip(1))\
    \ {\n            if (el < prev) {\n                increasing = false;\n     \
    \       }\n            prev = el;\n        }\n        return increasing;\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30bc7ce2d5d045d68f21b71b5eb1783e>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <30bc7ce2d5d045d68f21b71b5eb1783e>:0 \n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 0; i < l.Count\
    \ - 1; i++) {\n            long current = l[i];\n            if (current < mid)\
    \ {\n                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n        }\n        return\
    \ isIncreasing || isDecreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e504eb62b6b435fb9a2a2d416138853>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e504eb62b6b435fb9a2a2d416138853>:0 \n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return true;\n        if (first > last)\n            return false;\n\
    \        bool increasing = true;\n        bool decreasing = true;\n        foreach\
    \ (long x in l.Skip(1))\n            if (x < first)\n                decreasing\
    \ = false;\n            else if (x > last)\n                increasing = false;\n\
    \            else\n                return false;\n        if (increasing)\n  \
    \          return true;\n        if (decreasing)\n            return false;\n\
    \        increasing = true;\n        decreasing = true;\n        foreach (long\
    \ x in l.Skip(1))\n            if (x > last)\n                increasing = false;\n\
    \            else if (x < first)\n                decreasing = false;\n      \
    \      else\n                return false;\n        if (increasing)\n        \
    \    return true;\n        if (decreasing)\n            return false;\n      \
    \  increasing = true;\n        decreasing = true;\n        foreach (long x in\
    \ l.Skip(1))\n            if (x < first)\n                decreasing = false;\n\
    \            else if (x > last)\n                increasing = false;\n       \
    \     else\n                return false;\n        if (increasing)\n         \
    \   return true;\n        if (decreasing)\n            return false;\n       \
    \ increasing = true;\n        decreasing = true;\n        foreach (long x in l.Skip(1))\n\
    \            if (x > last)\n                increasing = false;\n            else\
    \ if (x < first)\n                decreasing = false;\n            else\n    \
    \            return false;\n        if (increasing)\n            return true;\n\
    \        if (decreasing)\n            return false;\n        increasing = true;\n\
    \        decreasing = true;\n        foreach (long x in l.Skip(1))\n         \
    \   if (x < first)\n                decreasing = false;\n            else if (x\
    \ > last)\n                increasing = false;\n            else\n           \
    \     return false;\n        if (increasing)\n            return true;\n     \
    \   if (decreasing)\n            return false;\n        increasing = true;\n \
    \       decreasing = true;\n        foreach (long x in l.Skip(1))\n          \
    \  if (x > last)\n                increasing = false;\n            else if (x\
    \ < first)\n                decreasing = false;\n            else\n          \
    \      return false;\n        if (increasing)\n            return true;\n    \
    \    if (decreasing)\n            return false;\n        increasing = true;\n\
    \        decreasing = true;\n        foreach (long x in l.Skip(1))\n         \
    \   if (x < first)\n                decreasing = false;\n            else if (x\
    \ > last)\n                increasing = false;\n            else\n           \
    \     return false;\n        if (increasing)\n            return true;\n     \
    \   if (decreasing)\n            return false;\n        increasing = true;\n \
    \       decreasing = true;\n        foreach (long x in \n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpmv0_zu6g.cs(116,27): error CS1525: Invalid expression term ''}''

    /tmp/tmpmv0_zu6g.cs(116,27): error CS1026: ) expected

    /tmp/tmpmv0_zu6g.cs(116,27): error CS1002: ; expected

    '
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && isDecreasing) return true;\n            if (isIncreasing && !isDecreasing)\
    \ return false;\n            if (!isIncreasing && isDecreasing) return false;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cbe0a6dadb0040bc8d29f6740f10d392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cbe0a6dadb0040bc8d29f6740f10d392>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = (first + last) / 2;\n        bool increasing = (first\
    \ < mid);\n        bool decreasing = (last > mid);\n        if (increasing &&\
    \ decreasing) return true;\n        if (increasing && !decreasing) return true;\n\
    \        if (decreasing && !increasing) return true;\n        return false;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbe4e8b5ffd24883a1721908e724faf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <dbe4e8b5ffd24883a1721908e724faf6>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long first = l[0];\n        long last = l[0];\n        bool increasing = true;\n\
    \        bool decreasing = true;\n        foreach (long x in l.Skip(1))\n    \
    \    {\n            if (x < first)\n            {\n                increasing\
    \ = false;\n            }\n            else if (x > last)\n            {\n   \
    \             decreasing = false;\n            }\n            else\n         \
    \   {\n                if (x < last)\n                {\n                    increasing\
    \ = false;\n                }\n                else\n                {\n     \
    \               decreasing = false;\n                }\n            }\n      \
    \      last = x;\n        }\n        return increasing || decreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            long current = l[i];\n            if (current < mid) {\n    \
    \            isIncreasing = false;\n            } else if (current > mid) {\n\
    \                isDecreasing = false;\n            } else {\n               \
    \ isIncreasing = isDecreasing = true;\n            }\n            mid = current;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4wq7jpmy.cs(19,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonic = true;\n   \
    \     bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicDecreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingIncreasingMonotonic = true;\n   \
    \     bool isMonotonicIncreasingIncreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicDecreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingMonotonic = true;\n        bool isMonotonicIncreasingMonotonic\
    \ = true;\n        bool is\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmponm8f1xp.cs(55,14): error CS1001: Identifier expected

    /tmp/tmponm8f1xp.cs(55,14): error CS1002: ; expected

    /tmp/tmponm8f1xp.cs(55,14): error CS1525: Invalid expression term ''is''

    /tmp/tmponm8f1xp.cs(55,16): error CS1031: Type expected

    /tmp/tmponm8f1xp.cs(55,16): error CS1002: ; expected

    '
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        if (first < last) return true;\n        if (first > last) return false;\n\
    \        long mid = first + (last - first) / 2;\n        bool isIncreasing = Monotonic(l.Skip(1).Take(l.Count\
    \ - 1));\n        bool isDecreasing = Monotonic(l.Take(l.Count - 1).Skip(1).Reverse());\n\
    \        return isIncreasing || isDecreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp2forsfb6.cs(19,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmp2forsfb6.cs(23,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmp2forsfb6.cs(24,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long max = l[0];\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        long current = l[0];\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] > max) {\n                isIncreasing = false;\n\
    \                max = l[i];\n            } else if (l[i] < current) {\n     \
    \           isDecreasing = false;\n                current = l[i];\n         \
    \   }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f560cc0930ae4dbea86c6722acc0b546>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <f560cc0930ae4dbea86c6722acc0b546>:0 \n"
  stdout: ''
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0)\n            return true;\n        long first = l[0];\n        long last\
    \ = l[l.Count - 1];\n        long mid = first + ((last - first) / 2);\n      \
    \  bool isIncreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n  \
    \          if (l[i] < mid)\n                isIncreasing = false;\n        }\n\
    \        return isIncreasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e4810da567a454ab5fc85b9526b8584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0e4810da567a454ab5fc85b9526b8584>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x > mid) {\n               \
    \ isDecreasing = false;\n            } else if (x < mid) {\n                isIncreasing\
    \ = false;\n            } else {\n                isIncreasing = isDecreasing\
    \ = true;\n            }\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <827cb5d5feb84f08a489ce96c8e21b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <827cb5d5feb84f08a489ce96c8e21b84>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long middle = l.Skip(1).Take(2).Last();\n\
    \        bool isIncreasing = (middle > last);\n        bool isDecreasing = (middle\
    \ < first);\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6fa6767ef524e81a7af20370b880db7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d6fa6767ef524e81a7af20370b880db7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[0];\n        bool increasing\
    \ = true;\n        foreach (long e in l.Skip(1))\n            if (e < first) increasing\
    \ = false;\n            else if (e > last) increasing = true;\n            else\
    \ if (e == first) increasing = true;\n            else if (e == last) increasing\
    \ = false;\n            else last = e;\n        return increasing;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ce26421494d46eb80d1303ed74bb342>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2ce26421494d46eb80d1303ed74bb342>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + (last - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        foreach (long x in l) {\n\
    \            if (x > mid) {\n                isIncreasing = false;\n         \
    \   }\n            if (x < mid) {\n                isDecreasing = false;\n   \
    \         }\n            if (x == mid) {\n                isMonotonic = false;\n\
    \            }\n        }\n        if (isIncreasing && isDecreasing && isMonotonic)\
    \ {\n            return true;\n        }\n        if (isIncreasing && !isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && isMonotonic) {\n            return true;\n        }\n        if (isDecreasing\
    \ && !isMonotonic) {\n            return true;\n        }\n        if (isMonotonic)\
    \ {\n            return true;\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14714f740ea94658beef37d1ac920f80>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <14714f740ea94658beef37d1ac920f80>:0 \n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first < last) return\
    \ false;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = Monotonic(l.Skip(1).Take(l.Count - 1));\n        bool isDecreasing = Monotonic(l.Skip(1).Take(l.Count\
    \ - 1));\n        return isIncreasing && isDecreasing && mid < first || mid >\
    \ last;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpkc3x9fq_.cs(23,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpkc3x9fq_.cs(24,39): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] >= l[1];\n       \
    \ long max = l[0];\n        bool increasing = true;\n        bool decreasing =\
    \ true;\n        long current = l[0];\n        for (int i = 1; i < l.Count; i++)\
    \ {\n            if (l[i] > max) {\n                max = l[i];\n            \
    \    increasing = false;\n            }\n            if (l[i] < current) {\n \
    \               current = l[i];\n                decreasing = false;\n       \
    \     }\n        }\n        if (increasing && decreasing) return true;\n     \
    \   if (increasing && !decreasing) return true;\n        if (decreasing && !increasing)\
    \ return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59c504568b9942c7990d2e89ad4014e7>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <59c504568b9942c7990d2e89ad4014e7>:0 \n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                isIncreasing = false;\n            } else if (current > mid)\
    \ {\n                isDecreasing = false;\n            } else {\n           \
    \     isIncreasing = isDecreasing = true;\n            }\n            if (isIncreasing\
    \ && current < mid) break;\n            if (isDecreasing && current > mid) break;\n\
    \        }\n        return isIncreasing || isDecreasing;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a2f58148a474e4f9a23e05d57f725bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3a2f58148a474e4f9a23e05d57f725bf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        long mid = min + (max -\
    \ min) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing = true;\n\
    \        foreach (long x in l) {\n            if (x < mid) {\n               \
    \ isIncreasing = false;\n            }\n            if (x > mid) {\n         \
    \       isDecreasing = false;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5353c372ac384be38ebe5d6af014f401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <5353c372ac384be38ebe5d6af014f401>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l\
    \ != null);\n        if (l.Count == 0) return true;\n        if (l.Count == 1)\
    \ return l[0] >= l[1];\n        long m = l[0];\n        bool first = true;\n \
    \       foreach (long n in l.Skip(1))\n        {\n            if (first)\n   \
    \         {\n                first = false;\n            }\n            else\n\
    \            {\n                if (n >= m) return true;\n            }\n    \
    \        m = n;\n        }\n        return false;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1b06c87f2d04d8d8732bd434f769beb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c1b06c87f2d04d8d8732bd434f769beb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        bool isMonotonicIncreasing = true;\n        bool isMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingMonotonic = true;\n        bool isMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonic\
    \ = true;\n        bool isMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasingDecreasingMonotonicIncreasing\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp91ulr1fx.cs(37,151): error CS1002: ; expected

    '
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long min = l[0];\n        long max = l[0];\n        foreach (long x in l)\n\
    \            if (x < min) min = x;\n            if (x > max) max = x;\n      \
    \  if (min > max) return false;\n        long mid = (min + max) / 2;\n       \
    \ bool leftIsMonotonic = Monotonic(l.Take(l.Count - 1));\n        bool rightIsMonotonic\
    \ = Monotonic(l.Take(l.Count - 1).Reverse());\n        return leftIsMonotonic\
    \ && rightIsMonotonic && mid == l[l.Count - 1];\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpxsslepcc.cs(23,17): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpxsslepcc.cs(23,32): error CS0103: The name ''x'' does not exist in the
    current context

    /tmp/tmpxsslepcc.cs(26,42): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpxsslepcc.cs(27,43): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    bool increasing = true;\n        bool decreasing = true;\n        for (int\
    \ i = 1; i < l.Count; i++) {\n            long current = l[i];\n            if\
    \ (current < first) {\n                increasing = false;\n            }\n  \
    \          if (current > last) {\n                decreasing = false;\n      \
    \      }\n        }\n        if (increasing && decreasing) return true;\n    \
    \    if (increasing && !decreasing) return true;\n        if (decreasing && !increasing)\
    \ return true;\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2c33b391adc4fafb95bb839f6bcf239>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e2c33b391adc4fafb95bb839f6bcf239>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        var first = l[0];\n        var last = l[l-1];\n\
    \        var mid = first + (last - first) / 2;\n        var mid2 = mid + (mid\
    \ - first) / 2;\n        var mid3 = mid2 + (mid2 - first) / 2;\n        var mid4\
    \ = mid3 + (mid3 - first) / 2;\n        var mid5 = mid4 + (mid4 - first) / 2;\n\
    \        var mid6 = mid5 + (mid5 - first) / 2;\n        var mid7 = mid6 + (mid6\
    \ - first) / 2;\n        var mid8 = mid7 + (mid7 - first) / 2;\n        var mid9\
    \ = mid8 + (mid8 - first) / 2;\n        var mid10 = mid9 + (mid9 - first) / 2;\n\
    \        var mid11 = mid10 + (mid10 - first) / 2;\n        var mid12 = mid11 +\
    \ (mid11 - first) / 2;\n        var mid13 = mid12 + (mid12 - first) / 2;\n   \
    \     var mid14 = mid13 + (mid13 - first) / 2;\n        var mid15 = mid14 + (mid14\
    \ - first) / 2;\n        var mid16 = mid15 + (mid15 - first) / 2;\n        var\
    \ mid17 = mid16 + (mid16 - first) / 2;\n        var mid18 = mid17 + (mid17 - first)\
    \ / 2;\n        var mid19 = mid18 + (mid18 - first) / 2;\n        var mid20 =\
    \ mid19 + (mid19 - first) / 2;\n        var mid21 = mid20 + (mid20 - first) /\
    \ 2;\n        var mid22 = mid21 + (mid21 - first) / 2;\n        var mid23 = mid22\
    \ + (mid22 - first) / 2;\n        var mid24 = mid23 + (mid23 - first) / 2;\n \
    \       var mid25 = mid24 + (mid24 - first) / 2;\n        var mid26 = mid25 +\
    \ (mid25 - first) / 2;\n        var mid27 = mid26 + (mid26 - first) / 2;\n   \
    \     var mid28 = mid27 + (mid27 - first) / 2;\n        var mid29 = mid28 + (mid28\
    \ - first) / 2;\n        var mid30 = mid29 + (mid29 - first) / 2;\n        var\
    \ mid31 = mid30 + (mid30 - first) / 2;\n        var mid32 = mid31 + (mid31 - first)\
    \ / 2;\n        var mid33 = mid32 + (mid32 - first) / 2;\n        var mid34 =\
    \ mid33 + (mid33 - first) / 2;\n        var mid35 = mid34 + (mid34 - first) /\
    \ 2;\n        var mid36 = mid35 + (mid35 - first) / 2;\n        var mid37 = mid36\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpsiekuz_p.cs(56,26): error CS1002: ; expected

    '
  timestamp: 1659799623
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        long midVal = l[mid];\n        bool isIncreasing = (mid > 0 && midVal\
    \ > max) || (mid < l.Count - 1 && midVal < min);\n        return isIncreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpodxk3uzu.cs(20,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long max = l.Max();\n        long min = l.Min();\n        long mid = max / 2;\n\
    \        long mid2 = min / 2;\n        long mid3 = mid / 2;\n        long mid4\
    \ = mid3 / 2;\n        long mid5 = mid4 / 2;\n        long mid6 = mid5 / 2;\n\
    \        long mid7 = mid6 / 2;\n        long mid8 = mid7 / 2;\n        long mid9\
    \ = mid8 / 2;\n        long mid10 = mid9 / 2;\n        long mid11 = mid10 / 2;\n\
    \        long mid12 = mid11 / 2;\n        long mid13 = mid12 / 2;\n        long\
    \ mid14 = mid13 / 2;\n        long mid15 = mid14 / 2;\n        long mid16 = mid15\
    \ / 2;\n        long mid17 = mid16 / 2;\n        long mid18 = mid17 / 2;\n   \
    \     long mid19 = mid18 / 2;\n        long mid20 = mid19 / 2;\n        long mid21\
    \ = mid20 / 2;\n        long mid22 = mid21 / 2;\n        long mid23 = mid22 /\
    \ 2;\n        long mid24 = mid23 / 2;\n        long mid25 = mid24 / 2;\n     \
    \   long mid26 = mid25 / 2;\n        long mid27 = mid26 / 2;\n        long mid28\
    \ = mid27 / 2;\n        long mid29 = mid28 / 2;\n        long mid30 = mid29 /\
    \ 2;\n        long mid31 = mid30 / 2;\n        long mid32 = mid31 / 2;\n     \
    \   long mid33 = mid32 / 2;\n        long mid34 = mid33 / 2;\n        long mid35\
    \ = mid34 / 2;\n        long mid36 = mid35 / 2;\n        long mid37 = mid36 /\
    \ 2;\n        long mid38 = mid37 / 2;\n        long mid39 = mid38 / 2;\n     \
    \   long mid40 = mid39 / 2;\n        long mid41 = mid40 / 2;\n        long mid42\
    \ = mid41 / 2;\n        long mid43 = mid42 / 2;\n        long mid44 = mid43 /\
    \ 2;\n        long mid45 = mid44 / 2;\n        long mid46 = mid45 / 2;\n     \
    \   long mid47 = mid46 / 2;\n        long mid48 = mid47 / 2;\n        long mid49\
    \ = mid48 / 2;\n        long \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4pjrn9l8.cs(70,13): error CS1001: Identifier expected

    /tmp/tmp4pjrn9l8.cs(70,13): error CS1002: ; expected

    '
  timestamp: 1659799623
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] >= l[1];\n       \
    \ long max = l[0];\n        long min = l[0];\n        bool changed = false;\n\
    \        for (int i = 1; i < l.Count; i++) {\n            long curr = l[i];\n\
    \            if (curr < min) min = curr;\n            if (curr > max) max = curr;\n\
    \            if (curr != max) {\n                changed = true;\n           \
    \ }\n        }\n        return changed;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3be63d35d4a24b74a7e88373470af046>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3be63d35d4a24b74a7e88373470af046>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < 0L) {\n     \
    \       min = -l;\n        }\n        if (max > 0L) {\n            max = +l;\n\
    \        }\n        if (min > max) {\n            return false;\n        }\n \
    \       long mid = (max + min) / 2;\n        if (mid < 0L) {\n            mid\
    \ = -l;\n        }\n        if (mid > 0L) {\n            mid = +l;\n        }\n\
    \        if (mid == 0L) {\n            return true;\n        }\n        bool left\
    \ = true;\n        bool right = true;\n        bool midLeft = true;\n        bool\
    \ midRight = true;\n        foreach (long x in l) {\n            if (left && right\
    \ && midLeft && midRight) {\n                return false;\n            }\n  \
    \          if (left && x > 0) {\n                left = false;\n            }\n\
    \            if (right && x < 0) {\n                right = false;\n         \
    \   }\n            if (midLeft && x > 0) {\n                midLeft = false;\n\
    \            }\n            if (midRight && x < 0) {\n                midRight\
    \ = false;\n            }\n        }\n        if (left) {\n            return\
    \ Monotonic(l.Take(l.Count / 2));\n        }\n        if (right) {\n         \
    \   return Monotonic(l.Skip(l.Count / 2).Take(l.Count / 2));\n        }\n    \
    \    if (midLeft) {\n            return Monotonic(l.Take(l.Count / 2));\n    \
    \    }\n        if (midRight) {\n            return Monotonic(l.Skip(l.Count /\
    \ 2).Take(l.Count / 2));\n        }\n        return true;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpotbqk_p1.cs(20,19): error CS0023: Operator ''-'' cannot be applied to
    operand of type ''List<long>''

    /tmp/tmpotbqk_p1.cs(23,19): error CS0023: Operator ''+'' cannot be applied to
    operand of type ''List<long>''

    /tmp/tmpotbqk_p1.cs(30,19): error CS0023: Operator ''-'' cannot be applied to
    operand of type ''List<long>''

    /tmp/tmpotbqk_p1.cs(33,19): error CS0023: Operator ''+'' cannot be applied to
    operand of type ''List<long>''

    /tmp/tmpotbqk_p1.cs(60,30): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpotbqk_p1.cs(63,30): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpotbqk_p1.cs(66,30): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpotbqk_p1.cs(69,30): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        long mid = first\
    \ + ((last - first) / 2);\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        bool isMonotonic = true;\n        bool isMonotonicUp = true;\n\
    \        bool isMonotonicDown = true;\n        bool isMonotonicLeft = true;\n\
    \        bool isMonotonicRight = true;\n        bool isMonotonicUpLeft = true;\n\
    \        bool isMonotonicUpRight = true;\n        bool isMonotonicDownLeft = true;\n\
    \        bool isMonotonicDownRight = true;\n        bool isMonotonicLeftUp = true;\n\
    \        bool isMonotonicLeftDown = true;\n        bool isMonotonicRightUp = true;\n\
    \        bool isMonotonicRightDown = true;\n        bool isMonotonicUpLeftUp =\
    \ true;\n        bool isMonotonicUpLeftDown = true;\n        bool isMonotonicUpRightUp\
    \ = true;\n        bool isMonotonicUpRightDown = true;\n        bool isMonotonicDownLeftUp\
    \ = true;\n        bool isMonotonicDownLeftDown = true;\n        bool isMonotonicDownRightUp\
    \ = true;\n        bool isMonotonicDownRightDown = true;\n        bool isMonotonicLeftUpUp\
    \ = true;\n        bool isMonotonicLeftUpDown = true;\n        bool isMonotonicLeftDownUp\
    \ = true;\n        bool isMonotonicLeftDownDown = true;\n        bool isMonotonicRightUpUp\
    \ = true;\n        bool isMonotonicRightUpDown = true;\n        bool isMonotonicRightDownUp\
    \ = true;\n        bool isMonotonicRightDownDown = true;\n        bool isMonotonicUpLeftUpUp\
    \ = true;\n        bool isMonotonicUpLeftUpDown = true;\n        bool isMonotonicUpLeftDownUp\
    \ = true;\n        bool isMonotonicUpLeftDownDown = true;\n        bool isMonotonicUpRightUpUp\
    \ = true;\n        bool isMonotonicUpRightUpDown = true;\n        bool isMonotonicUpRightDownUp\
    \ = true;\n        bool isMonotonicUpRightDownDown = true;\n        bool isMonotonicDownLeftUpUp\
    \ = true;\n        bool isMonotonicDownLeftUpDown = true;\n        bool isMonotonicDownLeftDownUp\
    \ = true;\n        bool isMonotonicDownLeftDownDown = true;\n        bool isMonotonicDownRightUpUp\
    \ = true;\n        bool isMonotonicDownRightUpDown = true;\n\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp29qtz3_u.cs(20,14): warning CS0219: The variable ''isIncreasing'' is assigned
    but its value is never used

    /tmp/tmp29qtz3_u.cs(21,14): warning CS0219: The variable ''isDecreasing'' is assigned
    but its value is never used

    /tmp/tmp29qtz3_u.cs(22,14): warning CS0219: The variable ''isMonotonic'' is assigned
    but its value is never used

    /tmp/tmp29qtz3_u.cs(23,14): warning CS0219: The variable ''isMonotonicUp'' is
    assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(24,14): warning CS0219: The variable ''isMonotonicDown'' is
    assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(25,14): warning CS0219: The variable ''isMonotonicLeft'' is
    assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(26,14): warning CS0219: The variable ''isMonotonicRight''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(27,14): warning CS0219: The variable ''isMonotonicUpLeft''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(28,14): warning CS0219: The variable ''isMonotonicUpRight''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(29,14): warning CS0219: The variable ''isMonotonicDownLeft''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(30,14): warning CS0219: The variable ''isMonotonicDownRight''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(31,14): warning CS0219: The variable ''isMonotonicLeftUp''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(32,14): warning CS0219: The variable ''isMonotonicLeftDown''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(33,14): warning CS0219: The variable ''isMonotonicRightUp''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(34,14): warning CS0219: The variable ''isMonotonicRightDown''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(35,14): warning CS0219: The variable ''isMonotonicUpLeftUp''
    is assigned but its value is never used

    /tmp/tmp29qtz3_u.cs(36,14): warning CS0219: The variable ''is'
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        bool monotonic = true;\n \
    \       for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < mid) {\n                increasing = false;\n     \
    \       } else if (current > mid) {\n                decreasing = false;\n   \
    \         } else {\n                monotonic = false;\n            }\n      \
    \  }\n        if (increasing && decreasing) return true;\n        if (increasing\
    \ && !decreasing) return true;\n        if (decreasing && !increasing) return\
    \ true;\n        if (increasing && decreasing && monotonic) return true;\n   \
    \     return false;\n    }\n    public static void Main(string[] args) {\n   \
    \ Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4302f11ea1924fcd9282a6d63bd028f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <4302f11ea1924fcd9282a6d63bd028f1>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long prev = l[0];\n        long curr = l[1];\n  \
    \      long next = l[l.Count - 1];\n        bool isIncreasing = true;\n      \
    \  bool isDecreasing = true;\n        for (int i = 2; i < l.Count; i++) {\n  \
    \          long cur = l[i];\n            if (prev > curr) {\n                isIncreasing\
    \ = false;\n            }\n            if (prev < curr) {\n                isDecreasing\
    \ = false;\n            }\n            prev = curr;\n            curr = next;\n\
    \            next = cur;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2e144424173f4754b44477ad0e6effc6>:0 \n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = (min < mid);\n        bool isDecreasing = (max >\
    \ mid);\n        if (isIncreasing && isDecreasing) return true;\n        if (isIncreasing\
    \ && !isDecreasing) return true;\n        if (!isIncreasing && isDecreasing) return\
    \ true;\n        return false;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp5v3ssstw.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return false;\n        long mid = l.Count / 2;\n        if (mid <\
    \ 1)\n            return true;\n        long mid2 = mid / 2;\n        long mid3\
    \ = mid2 / 2;\n        long mid4 = mid3 / 2;\n        long mid5 = mid4 / 2;\n\
    \        long mid6 = mid5 / 2;\n        long mid7 = mid6 / 2;\n        long mid8\
    \ = mid7 / 2;\n        long mid9 = mid8 / 2;\n        long mid10 = mid9 / 2;\n\
    \        long mid11 = mid10 / 2;\n        long mid12 = mid11 / 2;\n        long\
    \ mid13 = mid12 / 2;\n        long mid14 = mid13 / 2;\n        long mid15 = mid14\
    \ / 2;\n        long mid16 = mid15 / 2;\n        long mid17 = mid16 / 2;\n   \
    \     long mid18 = mid17 / 2;\n        long mid19 = mid18 / 2;\n        long mid20\
    \ = mid19 / 2;\n        long mid21 = mid20 / 2;\n        long mid22 = mid21 /\
    \ 2;\n        long mid23 = mid22 / 2;\n        long mid24 = mid23 / 2;\n     \
    \   long mid25 = mid24 / 2;\n        long mid26 = mid25 / 2;\n        long mid27\
    \ = mid26 / 2;\n        long mid28 = mid27 / 2;\n        long mid29 = mid28 /\
    \ 2;\n        long mid30 = mid29 / 2;\n        long mid31 = mid30 / 2;\n     \
    \   long mid32 = mid31 / 2;\n        long mid33 = mid32 / 2;\n        long mid34\
    \ = mid33 / 2;\n        long mid35 = mid34 / 2;\n        long mid36 = mid35 /\
    \ 2;\n        long mid37 = mid36 / 2;\n        long mid38 = mid37 / 2;\n     \
    \   long mid39 = mid38 / 2;\n        long mid40 = mid39 / 2;\n        long mid41\
    \ = mid40 / 2;\n        long mid42 = mid41 / 2;\n        long mid43 = mid42 /\
    \ 2;\n        long mid44 = mid43 / 2;\n        long mid45 = mid44 / 2;\n     \
    \   long mid46 = mid45 / 2;\n        long mid47 = mid46 / 2;\n        long mid48\
    \ = mid47 / 2;\n        long mid49 = mid48 / 2;\n        long \n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpe_xg0ovk.cs(72,13): error CS1001: Identifier expected

    /tmp/tmpe_xg0ovk.cs(72,13): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = first + (last - first) / 2;\n \
    \       bool isIncreasing = true;\n        bool isDecreasing = true;\n       \
    \ foreach (long x in l.Skip(1))\n            if (x > mid)\n                isDecreasing\
    \ = false;\n            else if (x < mid)\n                isIncreasing = false;\n\
    \            else\n                return false;\n        if (isIncreasing &&\
    \ isDecreasing)\n            return true;\n        if (isIncreasing)\n       \
    \     return false;\n        if (isDecreasing)\n            return false;\n  \
    \      throw new Exception(\"Should never get here\");\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: "\nUnhandled Exception:\nSystem.Exception: Should never get here\n  at Problem.Monotonic\
    \ (System.Collections.Generic.List`1[T] l) [0x000ad] in <2e3c4e27b86e4528ab1e4a30f9bb16ef>:0\
    \ \n  at Problem.Main (System.String[] args) [0x00017] in <2e3c4e27b86e4528ab1e4a30f9bb16ef>:0\
    \ \n[ERROR] FATAL UNHANDLED EXCEPTION: System.Exception: Should never get here\n\
    \  at Problem.Monotonic (System.Collections.Generic.List`1[T] l) [0x000ad] in\
    \ <2e3c4e27b86e4528ab1e4a30f9bb16ef>:0 \n  at Problem.Main (System.String[] args)\
    \ [0x00017] in <2e3c4e27b86e4528ab1e4a30f9bb16ef>:0 \n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] > l[1];\n        long\
    \ prev = l[0];\n        bool increasing = true;\n        foreach (long x in l.Skip(1))\n\
    \            if (prev < x) increasing = false;\n            else if (prev == x)\
    \ increasing = true;\n            else return false;\n        return increasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d96283a7235c4a6487ebbd253c0c1265>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d96283a7235c4a6487ebbd253c0c1265>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first > last)\n\
    \            return false;\n        long mid = first + ((last - first) / 2);\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  foreach (long x in l)\n        {\n            if (x > mid)\n            {\n\
    \                isIncreasing = false;\n                break;\n            }\n\
    \            if (x < mid)\n            {\n                isDecreasing = false;\n\
    \                break;\n            }\n        }\n        return isIncreasing\
    \ || isDecreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1137c8d89372458e90a8dfaceb48ed6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <1137c8d89372458e90a8dfaceb48ed6f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long x in l) {\n        \
    \    if (x > max) {\n                isIncreasing = false;\n            }\n  \
    \          if (x < min) {\n                isDecreasing = false;\n           \
    \ }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a039697c25534e318ccc69d54ae59790>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a039697c25534e318ccc69d54ae59790>:0 \n"
  stdout: ''
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        bool increasing =\
    \ (first < last);\n        if (increasing) {\n            long mid = first + (last\
    \ - first) / 2;\n            increasing = mid > first && mid < last;\n       \
    \ }\n        return increasing;\n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f8c746484c24b5a80bb783e1e0e4992>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8f8c746484c24b5a80bb783e1e0e4992>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first < last) return true;\n        long mid = first + ((last\
    \ - first) / 2);\n        if (mid < last) return Monotonic(l);\n        if (mid\
    \ > first) return Monotonic(l);\n        return false;\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d470094c4f4c4410a8dadeaf34153322>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <d470094c4f4c4410a8dadeaf34153322>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        long diff = max - min;\n        long diff2 = mid - min;\n        long\
    \ diff3 = max - mid;\n        long diff4 = mid - max;\n        long diff5 = min\
    \ - mid;\n        long diff6 = max - min;\n        long diff7 = mid - min;\n \
    \       long diff8 = max - mid;\n        long diff9 = mid - max;\n        long\
    \ diff10 = min - mid;\n        long diff11 = max - min;\n        long diff12 =\
    \ mid - min;\n        long diff13 = mid - max;\n        long diff14 = max - mid;\n\
    \        long diff15 = mid - max;\n        long diff16 = max - min;\n        long\
    \ diff17 = mid - min;\n        long diff18 = max - mid;\n        long diff19 =\
    \ mid - max;\n        long diff20 = max - min;\n        long diff21 = mid - min;\n\
    \        long diff22 = max - mid;\n        long diff23 = mid - max;\n        long\
    \ diff24 = max - min;\n        long diff25 = mid - min;\n        long diff26 =\
    \ max - mid;\n        long diff27 = mid - max;\n        long diff28 = max - min;\n\
    \        long diff29 = mid - min;\n        long diff30 = max - mid;\n        long\
    \ diff31 = mid - max;\n        long diff32 = max - min;\n        long diff33 =\
    \ mid - min;\n        long diff34 = max - mid;\n        long diff35 = mid - max;\n\
    \        long diff36 = max - min;\n        long diff37 = mid - min;\n        long\
    \ diff38 = max - mid;\n        long diff39 = mid - max;\n        long diff40 =\
    \ max - min;\n        long diff41 = mid - min;\n        long diff42 = max - mid;\n\
    \        long diff43 = mid - max;\n        long diff44 = max - min;\n        long\
    \ diff45 = mid - min;\n        long diff46 = max - mid;\n        long diff47 =\
    \ mid - max;\n        long diff48 = max - min;\n        long diff49 = mid - min;\n\
    \        long diff50 = max - mid;\n        long diff51 = mid - max;\n        long\
    \ diff52 = max - min\n    }\n    public static void Main(string[] args) {\n  \
    \  Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpiuewfzpo.cs(71,32): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Average();\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        if (min < mid) {\n            isIncreasing\
    \ = false;\n        }\n        if (max > mid) {\n            isDecreasing = false;\n\
    \        }\n        if (min < max) {\n            isMonotonic = false;\n     \
    \   }\n        return isIncreasing || isDecreasing || isMonotonic;\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4lpf4bk8.cs(19,20): error CS0266: Cannot implicitly convert type ''double''
    to ''long''. An explicit conversion exists (are you missing a cast?)

    '
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        foreach (long x in l.Skip(1).Take(l.Count\
    \ - 1)) {\n            if (x > mid) isDecreasing = false;\n            if (x <\
    \ mid) isIncreasing = false;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfd360926f2445e7a0b0fe959ec9d13c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <cfd360926f2445e7a0b0fe959ec9d13c>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            } else if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6cefd3cd4e84006b6b96a2acbc31b42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c6cefd3cd4e84006b6b96a2acbc31b42>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] > l[1];\n        long\
    \ max = l[0];\n        long min = l[0];\n        foreach (long x in l.Skip(1))\n\
    \            if (x > max) max = x;\n            else if (x < min) min = x;\n \
    \       return max > min;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <905755dd87514f51ab3eb5f5769b24d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <905755dd87514f51ab3eb5f5769b24d4>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        if (first < last) return true;\n        if (first > last) return false;\n\
    \        long mid = first + (last - first) / 2;\n        if (mid < first) return\
    \ true;\n        if (mid > last) return false;\n        long mid2 = mid + (mid\
    \ - last) / 2;\n        if (mid2 < first) return true;\n        if (mid2 > last)\
    \ return false;\n        long mid3 = mid2 + (mid2 - last) / 2;\n        if (mid3\
    \ < first) return true;\n        if (mid3 > last) return false;\n        long\
    \ mid4 = mid3 + (mid3 - last) / 2;\n        if (mid4 < first) return true;\n \
    \       if (mid4 > last) return false;\n        long mid5 = mid4 + (mid4 - last)\
    \ / 2;\n        if (mid5 < first) return true;\n        if (mid5 > last) return\
    \ false;\n        long mid6 = mid5 + (mid5 - last) / 2;\n        if (mid6 < first)\
    \ return true;\n        if (mid6 > last) return false;\n        long mid7 = mid6\
    \ + (mid6 - last) / 2;\n        if (mid7 < first) return true;\n        if (mid7\
    \ > last) return false;\n        long mid8 = mid7 + (mid7 - last) / 2;\n     \
    \   if (mid8 < first) return true;\n        if (mid8 > last) return false;\n \
    \       long mid9 = mid8 + (mid8 - last) / 2;\n        if (mid9 < first) return\
    \ true;\n        if (mid9 > last) return false;\n        long mid10 = mid9 + (mid9\
    \ - last) / 2;\n        if (mid10 < first) return true;\n        if (mid10 > last)\
    \ return false;\n        long mid11 = mid10 + (mid10 - last) / 2;\n        if\
    \ (mid11 < first) return true;\n        if (mid11 > last) return false;\n    \
    \    long mid12 = mid11 + (mid11 - last) / 2;\n        if (mid12 < first) return\
    \ true;\n        if (mid12 > last) return false;\n        long mid13 = mid12 +\
    \ (mid12 - last) / 2;\n        if (mid13 < first) return true;\n        if (mid13\
    \ > last) return false;\n        long mid14 = mid13 + (mid13 - last) / 2;\n  \
    \      if (mid14 < first) return true;\n        if (mid14 > last) return false;\n\
    \        long mid15 = mid14 + (mid14 - last) / 2;\n        if (mid15 < first)\
    \ return true;\n        if (mid15 > last) return false;\n        long mid16 =\
    \ mid15 + (mid15 - last) / 2;\n        if (mid16 < first) return true;\n     \
    \   if (mid16 > last) return false;\n        long mid17 = mid16 + (mid16 - last)\
    \ / 2;\n        if (mid\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpls5g1vqw.cs(71,16): error CS1026: ) expected

    /tmp/tmpls5g1vqw.cs(71,16): error CS1525: Invalid expression term ''}''

    /tmp/tmpls5g1vqw.cs(71,16): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return false;\n        long first\
    \ = l[0];\n        long last = l[l.Count - 1];\n        long mid = first + (last\
    \ - first) / 2;\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 0; i < l.Count - 1; i++) {\n            long current\
    \ = l[i];\n            if (current < mid) {\n                isIncreasing = false;\n\
    \            } else if (current > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2154b89bd5a240aba0c63ddd5d087083>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2154b89bd5a240aba0c63ddd5d087083>:0 \n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        bool decreasing = true;\n  \
    \      for (int i = 1; i < l.Count; i++) {\n            if (l[i] < first) increasing\
    \ = false;\n            if (l[i] > last) decreasing = false;\n        }\n    \
    \    return increasing || decreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6aeca89fdfa74314a0ac9a3bd6f15b9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <6aeca89fdfa74314a0ac9a3bd6f15b9d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: -1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        long mid = first + ((last - first) >> 1);\n        bool isIncreasing\
    \ = Monotonic(l);\n        if (isIncreasing && mid < first || !isIncreasing &&\
    \ mid > last)\n            return false;\n        bool isDecreasing = Monotonic(l);\n\
    \        if (isDecreasing && mid > first || !isDecreasing && mid < last)\n   \
    \         return false;\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Timeout
  stderr: ''
  stdout: None
  timestamp: 1659799630
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        foreach (long cur in l.Skip(1)) {\n            if\
    \ (prev < cur) {\n                return false;\n            }\n            prev\
    \ = cur;\n        }\n        return true;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee25e1afd79a491bbf5e604b51b095cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <ee25e1afd79a491bbf5e604b51b095cf>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0], last = l[l.Count - 1];\n    \
    \    for (int i = 1; i < l.Count; i++) {\n            if (l[i] < first) return\
    \ false;\n            if (l[i] > last) return false;\n        }\n        return\
    \ true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3947785dbac4bcc88f5e78515f346cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <b3947785dbac4bcc88f5e78515f346cb>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0)\n            return true;\n        if (l.Count == 1)\n            return\
    \ l[0] == l[1];\n        long max = l.Max();\n        long min = l.Min();\n  \
    \      long mid = l.Count / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        bool isMonotonic = true;\n        bool isMonotonicIncreasing\
    \ = true;\n        bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasing = true;\n        bool\
    \ isMonotonicIncreasingDecreasingDecreasing = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasing =\
    \ true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicDecreasingIncreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasingDecreasing\
    \ = true;\n        bool isMonotonicIncreasingDecreasingDecreasingDe\n    }\n \
    \   public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp415mhhei.cs(43,57): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        var first = l[0];\n        var last = l[l.Count\
    \ - 1];\n        var mid = (first + last) / 2;\n        var isIncreasing = true;\n\
    \        var isDecreasing = true;\n        for (var i = 1; i < l.Count; i++) {\n\
    \            if (l[i] < mid) {\n                isIncreasing = false;\n      \
    \      } else if (l[i] > mid) {\n                isDecreasing = false;\n     \
    \       } else {\n                isIncreasing = isDecreasing = true;\n      \
    \      }\n        }\n        return isIncreasing || isDecreasing;\n    }\n   \
    \ public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <061b4013853b471b9061fad26f7aea76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <061b4013853b471b9061fad26f7aea76>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  bool isMonotonic = true;\n        bool isMonotonicIncreasing = true;\n    \
    \    bool isMonotonicDecreasing = true;\n        bool isMonotonicIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicDecreasingOrMonotonic = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonic = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing = true;\n\
    \        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasing = true;\n\
    \        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasing = true;\n\
    \        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasing\
    \ = true;\n        bool isMonotonicIncreasingOrDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDecreasingOrMonotonic\
    \ = true;\n        bool isMonotonicDecreasingOrMonotonicOrIncreasingOrDe\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmplnij85tq.cs(42,62): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + ((last - first) / 2);\n        long mid2 =\
    \ mid + ((last - mid) / 2);\n        long mid3 = mid2 + ((last - mid2) / 2);\n\
    \        long mid4 = mid3 + ((last - mid3) / 2);\n        long mid5 = mid4 + ((last\
    \ - mid4) / 2);\n        long mid6 = mid5 + ((last - mid5) / 2);\n        long\
    \ mid7 = mid6 + ((last - mid6) / 2);\n        long mid8 = mid7 + ((last - mid7)\
    \ / 2);\n        long mid9 = mid8 + ((last - mid8) / 2);\n        long mid10 =\
    \ mid9 + ((last - mid9) / 2);\n        long mid11 = mid10 + ((last - mid10) /\
    \ 2);\n        long mid12 = mid11 + ((last - mid11) / 2);\n        long mid13\
    \ = mid12 + ((last - mid12) / 2);\n        long mid14 = mid13 + ((last - mid13)\
    \ / 2);\n        long mid15 = mid14 + ((last - mid14) / 2);\n        long mid16\
    \ = mid15 + ((last - mid15) / 2);\n        long mid17 = mid16 + ((last - mid16)\
    \ / 2);\n        long mid18 = mid17 + ((last - mid17) / 2);\n        long mid19\
    \ = mid18 + ((last - mid18) / 2);\n        long mid20 = mid19 + ((last - mid19)\
    \ / 2);\n        long mid21 = mid20 + ((last - mid20) / 2);\n        long mid22\
    \ = mid21 + ((last - mid21) / 2);\n        long mid23 = mid22 + ((last - mid22)\
    \ / 2);\n        long mid24 = mid23 + ((last - mid23) / 2);\n        long mid25\
    \ = mid24 + ((last - mid24) / 2);\n        long mid26 = mid25 + ((last - mid25)\
    \ / 2);\n        long mid27 = mid26 + ((last - mid26) / 2);\n        long mid28\
    \ = mid27 + ((last - mid27) / 2);\n        long mid29 = mid28 + ((last - mid28)\
    \ / 2);\n        long mid30 = mid29 + ((last - mid29) / 2);\n        long mid31\
    \ = mid30 + ((last - mid30) / 2);\n        long mid32 = mid31 + ((\n    }\n  \
    \  public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwapdwy4w.cs(51,32): error CS1525: Invalid expression term ''}''

    /tmp/tmpwapdwy4w.cs(51,32): error CS1026: ) expected

    /tmp/tmpwapdwy4w.cs(51,32): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long max = l.Max();\n        long min = l.Min();\n\
    \        long mid = l.Count / 2;\n        long midVal = l[mid];\n        long\
    \ midVal2 = l[mid+1];\n        long midVal3 = l[mid+2];\n        long midVal4\
    \ = l[mid+3];\n        long midVal5 = l[mid+4];\n        long midVal6 = l[mid+5];\n\
    \        long midVal7 = l[mid+6];\n        long midVal8 = l[mid+7];\n        long\
    \ midVal9 = l[mid+8];\n        long midVal10 = l[mid+9];\n        long midVal11\
    \ = l[mid+10];\n        long midVal12 = l[mid+11];\n        long midVal13 = l[mid+12];\n\
    \        long midVal14 = l[mid+13];\n        long midVal15 = l[mid+14];\n    \
    \    long midVal16 = l[mid+15];\n        long midVal17 = l[mid+16];\n        long\
    \ midVal18 = l[mid+17];\n        long midVal19 = l[mid+18];\n        long midVal20\
    \ = l[mid+19];\n        long midVal21 = l[mid+20];\n        long midVal22 = l[mid+21];\n\
    \        long midVal23 = l[mid+22];\n        long midVal24 = l[mid+23];\n    \
    \    long midVal25 = l[mid+24];\n        long midVal26 = l[mid+25];\n        long\
    \ midVal27 = l[mid+26];\n        long midVal28 = l[mid+27];\n        long midVal29\
    \ = l[mid+28];\n        long midVal30 = l[mid+29];\n        long midVal31 = l[mid+30];\n\
    \        long midVal32 = l[mid+31];\n        long midVal33 = l[mid+32];\n    \
    \    long midVal34 = l[mid+33];\n        long midVal35 = l[mid+34];\n        long\
    \ midVal36 = l[mid+35];\n        long midVal37 = l[mid+36];\n        long midVal38\
    \ = l[mid+37];\n        long \n    }\n    public static void Main(string[] args)\
    \ {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpac7_mrog.cs(59,13): error CS1001: Identifier expected

    /tmp/tmpac7_mrog.cs(59,13): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ <= 100000);\n        Debug.Assert(l.Count <= 1000000);\n        Debug.Assert(l.Count\
    \ <= 10000000);\n        Debug.Assert(l.Count <= 100000000);\n        Debug.Assert(l.Count\
    \ <= 1000000000);\n        Debug.Assert(l.Count <= 10000000000);\n        Debug.Assert(l.Count\
    \ <= 100000000000);\n        Debug.Assert(l.Count <= 1000000000000);\n       \
    \ Debug.Assert(l.Count <= 10000000000000);\n        Debug.Assert(l.Count <= 100000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 10000000000000000000000000000000);\n        Debug.Assert(l.Count <= 100000000000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 1000000000000000000000000000000000);\n      \
    \  Debug.Assert(l.Count <= 10000000000000000000000000000000000);\n        Debug.Assert(l.Count\
    \ <= 100000000000000000000000000000000000);\n        Debug.Assert(l.Count <= 1000000000000000000000000000000000000);\n\
    \        Debug.Assert(l.Count <= 10000000000000000000000000000000000000);\n  \
    \      Debug.Assert(l.Count <= 100000000000000000000000000000000000000);\n   \
    \     Debug.Assert(l.Count <= 1000000000000000000\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpwqw7npcb.cs(34,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(35,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(36,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(37,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(38,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(39,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(40,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(41,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(42,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(43,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(44,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(45,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(46,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(47,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(48,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(49,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(50,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(51,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(52,33): error CS1021: Integral constant is too large

    /tmp/tmpwqw7npcb.cs(53,52): error CS1026: ) expected

    /tmp/tmpwqw7npcb.cs(53,52): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long i in l) {\n        \
    \    if (i < min) {\n                isDecreasing = false;\n            }\n  \
    \          if (i > max) {\n                isIncreasing = false;\n           \
    \ }\n        }\n        return isIncreasing || isDecreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ea9fabc864942e19da1ff0ab45b629a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <0ea9fabc864942e19da1ff0ab45b629a>:0 \n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            long current = l[i];\n            if (current < mid) {\n\
    \                decreasing = false;\n            } else if (current > mid) {\n\
    \                increasing = false;\n            } else {\n                mid\
    \ = current;\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ac803114a274d409316c4c275db981b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <8ac803114a274d409316c4c275db981b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return true;\n        if (first > last)\n            return false;\n\
    \        long mid = l.Skip(1).Take(2).Last();\n        if (mid < first)\n    \
    \        return true;\n        if (mid > last)\n            return false;\n  \
    \      long mid2 = l.Skip(2).Take(2).Last();\n        if (mid2 < first)\n    \
    \        return true;\n        if (mid2 > last)\n            return false;\n \
    \       long mid3 = l.Skip(3).Take(2).Last();\n        if (mid3 < first)\n   \
    \         return true;\n        if (mid3 > last)\n            return false;\n\
    \        long mid4 = l.Skip(4).Take(2).Last();\n        if (mid4 < first)\n  \
    \          return true;\n        if (mid4 > last)\n            return false;\n\
    \        long mid5 = l.Skip(5).Take(2).Last();\n        if (mid5 < first)\n  \
    \          return true;\n        if (mid5 > last)\n            return false;\n\
    \        long mid6 = l.Skip(6).Take(2).Last();\n        if (mid6 < first)\n  \
    \          return true;\n        if (mid6 > last)\n            return false;\n\
    \        long mid7 = l.Skip(7).Take(2).Last();\n        if (mid7 < first)\n  \
    \          return true;\n        if (mid7 > last)\n            return false;\n\
    \        long mid8 = l.Skip(8).Take(2).Last();\n        if (mid8 < first)\n  \
    \          return true;\n        if (mid8 > last)\n            return false;\n\
    \        long mid9 = l.Skip(9).Take(2).Last();\n        if (mid9 < first)\n  \
    \          return true;\n        if (mid9 > last)\n            return false;\n\
    \        long mid10 = l.Skip(10).Take(2).Last();\n        if (mid10 < first)\n\
    \            return true;\n        if (mid10 > last)\n            return false;\n\
    \        long mid11 = l.Skip(11).Take(2).Last();\n        if (mid11 < first)\n\
    \            return true;\n        if (mid11 > last)\n            return false;\n\
    \        long mid12 = l.Skip(12).Take(2).Last();\n        if (mid12 < first)\n\
    \            return true;\n        if (mid12 > last)\n            return false;\n\
    \        long mid13 = l.Skip(13).Take(2).Last();\n        if (mid13 < first)\n\
    \            return true;\n        if (mid13 > last)\n            return false;\n\
    \        long mid14 = l.Skip(14).Take(2).Last();\n        if (mid14 < first)\n\
    \            return true;\n        if (mid14 > \n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpqtlqflxy.cs(91,20): error CS1525: Invalid expression term ''}''

    /tmp/tmpqtlqflxy.cs(91,20): error CS1026: ) expected

    /tmp/tmpqtlqflxy.cs(91,20): error CS1002: ; expected

    '
  timestamp: 1659799624
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        long mid = l.Count / 2;\n\
    \        bool isIncreasing = true;\n        bool isDecreasing = true;\n      \
    \  long midVal = l[mid];\n        long midVal2 = l[mid];\n        long midVal3\
    \ = l[mid];\n        long midVal4 = l[mid];\n        long midVal5 = l[mid];\n\
    \        long midVal6 = l[mid];\n        long midVal7 = l[mid];\n        long\
    \ midVal8 = l[mid];\n        long midVal9 = l[mid];\n        long midVal10 = l[mid];\n\
    \        long midVal11 = l[mid];\n        long midVal12 = l[mid];\n        long\
    \ midVal13 = l[mid];\n        long midVal14 = l[mid];\n        long midVal15 =\
    \ l[mid];\n        long midVal16 = l[mid];\n        long midVal17 = l[mid];\n\
    \        long midVal18 = l[mid];\n        long midVal19 = l[mid];\n        long\
    \ midVal20 = l[mid];\n        long midVal21 = l[mid];\n        long midVal22 =\
    \ l[mid];\n        long midVal23 = l[mid];\n        long midVal24 = l[mid];\n\
    \        long midVal25 = l[mid];\n        long midVal26 = l[mid];\n        long\
    \ midVal27 = l[mid];\n        long midVal28 = l[mid];\n        long midVal29 =\
    \ l[mid];\n        long midVal30 = l[mid];\n        long midVal31 = l[mid];\n\
    \        long midVal32 = l[mid];\n        long midVal33 = l[mid];\n        long\
    \ midVal34 = l[mid];\n        long midVal35 = l[mid];\n        long midVal36 =\
    \ l[mid];\n        long midVal37 = l[mid];\n        long midVal38 = l[mid];\n\
    \        long midVal39 = l[mid];\n        long midVal40 = l[mid];\n        long\
    \ midVal41 = l[mid];\n        long midVal42 = l[mid];\n        long midVal43 =\
    \ l[mid];\n        long midVal44 = l[mid];\n\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp6eq6tjlh.cs(22,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(23,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(24,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(25,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(27,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(29,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(30,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(31,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(32,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(34,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(35,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(36,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(37,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(38,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(39,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(40,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(41,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(42,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp6eq6tjlh.cs(43,27): err'
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min < max) {\n    \
    \        long mid = min + (max - min) / 2;\n            bool isIncreasing = l.TakeWhile(x\
    \ => x <= mid).All(x => x >= mid);\n            bool isDecreasing = l.TakeWhile(x\
    \ => x >= mid).All(x => x <= mid);\n            return isIncreasing || isDecreasing;\n\
    \        }\n        return false;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70e5bd87ba624573af9c09041c858c08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <70e5bd87ba624573af9c09041c858c08>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        var first = l[0];\n        var last = l[l-1];\n \
    \       if (first < last) return true;\n        if (first > last) return false;\n\
    \        var mid = l.Count / 2;\n        var midVal = l[mid];\n        if (midVal\
    \ < first) return true;\n        if (midVal > last) return false;\n        var\
    \ left = new List<long>(l.Take(mid));\n        var right = new List<long>(l.Skip(mid).Take(l.Count\
    \ - mid));\n        return Monotonic(left) && Monotonic(right);\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp17n55923.cs(19,22): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    '
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(l.Count\
    \ >= 1);\n        Debug.Assert(l.Count <= 10000);\n        Debug.Assert(\n   \
    \ }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4ddac4wj.cs(61,22): error CS1026: ) expected

    /tmp/tmp4ddac4wj.cs(61,22): error CS1002: ; expected

    '
  timestamp: 1659799619
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        if (l.Count == 1) return l[0] == l[1];\n       \
    \ long max = l[0];\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        for (int i = 1; i < l.Count; i++) {\n            if (l[i] >\
    \ max) {\n                isIncreasing = false;\n                max = l[i];\n\
    \            }\n            if (l[i] < max) {\n                isDecreasing =\
    \ false;\n                max = l[i];\n            }\n        }\n        if (isIncreasing\
    \ && isDecreasing) return true;\n        if (isIncreasing && !isDecreasing) return\
    \ true;\n        if (!isIncreasing && isDecreasing) return true;\n        return\
    \ false;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long first = l[0], last = l[l.Count - 1];\n     \
    \   bool increasing = true;\n        for (int i = 1; i < l.Count; i++) {\n   \
    \         long current = l[i];\n            if (current < first) increasing =\
    \ false;\n            if (current > last) increasing = false;\n        }\n   \
    \     return increasing;\n    }\n    public static void Main(string[] args) {\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20d6c516969b4707b9b5a574f0b5e32a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <20d6c516969b4707b9b5a574f0b5e32a>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l-1];\n\
    \        if (first < last) return true;\n        if (first > last) return false;\n\
    \        long mid = first + ((last - first) / 2);\n        if (mid < first) return\
    \ true;\n        if (mid > last) return false;\n        long mid2 = mid + ((last\
    \ - mid) / 2);\n        if (mid2 < first) return true;\n        if (mid2 > last)\
    \ return false;\n        long mid3 = mid2 + ((last - mid2) / 2);\n        if (mid3\
    \ < first) return true;\n        if (mid3 > last) return false;\n        long\
    \ mid4 = mid3 + ((last - mid3) / 2);\n        if (mid4 < first) return true;\n\
    \        if (mid4 > last) return false;\n        long mid5 = mid4 + ((last - mid4)\
    \ / 2);\n        if (mid5 < first) return true;\n        if (mid5 > last) return\
    \ false;\n        long mid6 = mid5 + ((last - mid5) / 2);\n        if (mid6 <\
    \ first) return true;\n        if (mid6 > last) return false;\n        long mid7\
    \ = mid6 + ((last - mid6) / 2);\n        if (mid7 < first) return true;\n    \
    \    if (mid7 > last) return false;\n        long mid8 = mid7 + ((last - mid7)\
    \ / 2);\n        if (mid8 < first) return true;\n        if (mid8 > last) return\
    \ false;\n        long mid9 = mid8 + ((last - mid8) / 2);\n        if (mid9 <\
    \ first) return true;\n        if (mid9 > last) return false;\n        long mid10\
    \ = mid9 + ((last - mid9) / 2);\n        if (mid10 < first) return true;\n   \
    \     if (mid10 > last) return false;\n        long mid11 = mid10 + ((last - mid10)\
    \ / 2);\n        if (mid11 < first) return true;\n        if (mid11 > last) return\
    \ false;\n        long mid12 = mid11 + ((last - mid11) / 2);\n        if (mid12\
    \ < first) return true;\n        if (mid12 > last) return false;\n        long\
    \ mid13 = mid12 + ((last - mid12) / 2);\n        if (mid13 < first) return true;\n\
    \        if (mid13 > last) return false;\n        long mid14 = mid13 + ((last\
    \ - mid13) / 2);\n        if (mid14 < first) return true;\n        if (mid14 >\
    \ last) return false;\n        long mid15 = mid14 + ((last - mid14) / 2);\n  \
    \      if (mid15 < first) return true;\n        if (mid15 > last) return false;\n\
    \        long mid16 = mid15 + ((last - mid15) / 2);\n        if (mid16 < first)\
    \ return true;\n        if (mid16 > last) return false;\n\n    }\n    public static\
    \ void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp1q2xvjrz.cs(19,23): error CS0019: Operator ''-'' cannot be applied to
    operands of type ''List<long>'' and ''int''

    /tmp/tmp1q2xvjrz.cs(16,24): error CS0161: ''Problem.Monotonic(List<long>)'': not
    all code paths return a value

    '
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool increasing\
    \ = true;\n        bool decreasing = true;\n        bool monotonic = true;\n \
    \       foreach (long e in l) {\n            if (e < mid) {\n                decreasing\
    \ = false;\n            } else if (e > mid) {\n                increasing = false;\n\
    \            } else {\n                monotonic = false;\n            }\n   \
    \     }\n        return increasing || decreasing || monotonic;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e742fd30faf842a4a705f1d0d77db87f>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <e742fd30faf842a4a705f1d0d77db87f>:0 \n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ max = l.Max();\n        long min = l.Min();\n        if (min > max) {\n    \
    \        return false;\n        }\n        long mid = l.Count / 2;\n        long\
    \ midVal = l[mid];\n        long midVal2 = l[mid+1];\n        long midVal3 = l[mid+2];\n\
    \        long midVal4 = l[mid+3];\n        long midVal5 = l[mid+4];\n        long\
    \ midVal6 = l[mid+5];\n        long midVal7 = l[mid+6];\n        long midVal8\
    \ = l[mid+7];\n        long midVal9 = l[mid+8];\n        long midVal10 = l[mid+9];\n\
    \        long midVal11 = l[mid+10];\n        long midVal12 = l[mid+11];\n    \
    \    long midVal13 = l[mid+12];\n        long midVal14 = l[mid+13];\n        long\
    \ midVal15 = l[mid+14];\n        long midVal16 = l[mid+15];\n        long midVal17\
    \ = l[mid+16];\n        long midVal18 = l[mid+17];\n        long midVal19 = l[mid+18];\n\
    \        long midVal20 = l[mid+19];\n        long midVal21 = l[mid+20];\n    \
    \    long midVal22 = l[mid+21];\n        long midVal23 = l[mid+22];\n        long\
    \ midVal24 = l[mid+23];\n        long midVal25 = l[mid+24];\n        long midVal26\
    \ = l[mid+25];\n        long midVal27 = l[mid+26];\n        long midVal28 = l[mid+27];\n\
    \        long midVal29 = l[mid+28];\n        long midVal30 = l[mid+29];\n    \
    \    long midVal31 = l[mid+30];\n        long midVal32 = l[mid+31];\n        long\
    \ midVal33 = l[mid+32];\n        long midVal34 = l[mid+33];\n        long midVal35\
    \ = l[mid+34];\n        long midVal36 = l[mid+35];\n        long midVal37 = l[mid+36];\n\
    \        long midVal38 = l[mid+37];\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmp4znpz3pt.cs(23,25): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(24,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(25,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(26,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(27,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(28,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(29,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(30,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(31,26): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(32,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(33,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(34,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(35,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(36,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(37,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(38,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(39,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(40,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(41,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(42,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(43,27): error CS1503: Argument 1: cannot convert from ''long''
    to ''int''

    /tmp/tmp4znpz3pt.cs(44,27): err'
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long prev = l[0];\n        long current = l[1];\n\
    \        bool isIncreasing = true;\n        for (int i = 2; i < l.Count; i++)\
    \ {\n            long next = l[i];\n            if (next < current) {\n      \
    \          isIncreasing = false;\n            }\n            if (next > current)\
    \ {\n                return false;\n            }\n            current = next;\n\
    \        }\n        return isIncreasing;\n    }\n    public static void Main(string[]\
    \ args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)20L, (long)4L, (long)10L}))) == (false));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L,\
    \ (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)1L, (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)2L, (long)5L, (long)60L})))\
    \ == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)4L, (long)5L, (long)60L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)9L, (long)9L, (long)9L, (long)9L}))) == (true));\n\
    \    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc2d4d8e78094b35944c832c46630e47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <bc2d4d8e78094b35944c832c46630e47>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        var first = l[0];\n        var last = l[l.Count\
    \ - 1];\n        if (first < last) return true;\n        if (first > last) return\
    \ false;\n        var mid = l.Count / 2;\n        var midVal = l[mid];\n     \
    \   if (midVal < first) return Monotonic(l.Take(mid).Concat(l.Skip(mid)));\n \
    \       if (midVal > last) return Monotonic(l.Take(mid).Concat(l.Skip(mid).Reverse()));\n\
    \        return Monotonic(l.Take(mid).Concat(l.Skip(mid).Reverse()).Concat(l.Take(mid)));\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpgqqtbcbg.cs(24,46): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpgqqtbcbg.cs(25,45): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    /tmp/tmpgqqtbcbg.cs(26,26): error CS1503: Argument 1: cannot convert from ''System.Collections.Generic.IEnumerable<long>''
    to ''System.Collections.Generic.List<long>''

    '
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ min = l.Min();\n        long max = l.Max();\n        if (min > max) {\n    \
    \        long tmp = min;\n            min = max;\n            max = tmp;\n   \
    \     }\n        bool increasing = true;\n        bool decreasing = true;\n  \
    \      foreach (long x in l)\n        {\n            if (x < min)\n          \
    \  {\n                decreasing = false;\n            }\n            else if\
    \ (x > max)\n            {\n                increasing = false;\n            }\n\
    \            else\n            {\n                if (x == min)\n            \
    \    {\n                    decreasing = false;\n                }\n         \
    \       else if (x == max)\n                {\n                    increasing\
    \ = false;\n                }\n                else\n                {\n     \
    \               decreasing = true;\n                    increasing = true;\n \
    \               }\n            }\n        }\n        return increasing || decreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2150fd6a220a470fb16b149d379c7fa8>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <2150fd6a220a470fb16b149d379c7fa8>:0 \n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l.Count\
    \ > 0);\n        if (l.Count == 1) {\n            return true;\n        }\n  \
    \      long first = l[0];\n        long last = l[l.Count - 1];\n        long mid\
    \ = first + (last - first) / 2;\n        bool isIncreasing = true;\n        bool\
    \ isDecreasing = true;\n        for (int i = 1; i < l.Count; i++) {\n        \
    \    long current = l[i];\n            if (current < mid) {\n                isIncreasing\
    \ = false;\n            } else if (current > mid) {\n                isDecreasing\
    \ = false;\n            } else {\n                return isIncreasing && isDecreasing;\n\
    \            }\n        }\n        return isIncreasing && isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <257cd7a5aa05415481d6a4f6a1a0e61d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <257cd7a5aa05415481d6a4f6a1a0e61d>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        bool increasing = true;\n        bool decreasing = true;\n  \
    \      for (int i = 1; i < l.Count; i++) {\n            long current = l[i];\n\
    \            if (current < first) {\n                decreasing = false;\n   \
    \         } else if (current > last) {\n                increasing = false;\n\
    \            } else {\n                if (current < last) {\n               \
    \     decreasing = false;\n                } else {\n                    increasing\
    \ = true;\n                }\n            }\n        }\n        return increasing\
    \ || decreasing;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b12e188f674ba3ac074bed9da6f5ce>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <04b12e188f674ba3ac074bed9da6f5ce>:0 \n"
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ prev = l.First();\n        bool isIncreasing = true;\n        bool isDecreasing\
    \ = true;\n        foreach (long current in l.Skip(1)) {\n            if (current\
    \ < prev) {\n                isIncreasing = false;\n            }\n          \
    \  if (current > prev) {\n                isDecreasing = false;\n            }\n\
    \            prev = current;\n        }\n        return isIncreasing || isDecreasing;\n\
    \    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: OK
  stderr: None
  stdout: ''
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long prev = l[0];\n        bool first = true;\n\
    \        foreach (long x in l.Skip(1))\n        {\n            if (first)\n  \
    \          {\n                first = false;\n                if (prev < x)\n\
    \                    return false;\n            }\n            else if (prev >\
    \ x)\n                return false;\n            prev = x;\n        }\n      \
    \  return true;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7dd1c25f1a54c7c8ca3bdc2238121fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <c7dd1c25f1a54c7c8ca3bdc2238121fc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799626
- exit_code: 1
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        long\
    \ first = l.First();\n        long last = l.Last();\n        if (first < last)\n\
    \            return true;\n        if (first > last)\n            return false;\n\
    \        long mid = l.Count / 2;\n        long midValue = l.ElementAt(mid);\n\
    \        if (midValue < first)\n            return Monotonic(l.Take(mid));\n \
    \       if (midValue > last)\n            return Monotonic(l.Skip(mid).Take(l.Count\
    \ - mid - 1));\n        return Monotonic(l.Take(mid).Concat(l.Skip(mid).Take(l.Count\
    \ - mid - 1)));\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: SyntaxError
  stderr: ''
  stdout: 'Microsoft (R) Visual C# Compiler version 3.6.0-4.20224.5 (ec77c100)

    Copyright (C) Microsoft Corporation. All rights reserved.


    /tmp/tmpa494h5vi.cs(24,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpa494h5vi.cs(26,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpa494h5vi.cs(28,37): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpa494h5vi.cs(29,33): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    /tmp/tmpa494h5vi.cs(29,52): error CS1503: Argument 2: cannot convert from ''long''
    to ''int''

    '
  timestamp: 1659799625
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        Debug.Assert(l\
    \ != null);\n        if (l.Count == 0) return true;\n        if (l.Count == 1)\
    \ return l[0] == l[0];\n        long max = l[0];\n        long min = l[0];\n \
    \       foreach (long x in l)\n        {\n            if (x > max) max = x;\n\
    \            if (x < min) min = x;\n        }\n        if (min > max) return false;\n\
    \        long mid = min + (max - min) / 2;\n        bool isIncreasing = true;\n\
    \        bool isDecreasing = true;\n        foreach (long x in l)\n        {\n\
    \            if (x > mid)\n            {\n                if (isDecreasing) return\
    \ false;\n                isDecreasing = true;\n            }\n            else\
    \ if (x < mid)\n            {\n                if (isIncreasing) return false;\n\
    \                isIncreasing = true;\n            }\n            else\n     \
    \       {\n                if (isIncreasing && isDecreasing) return true;\n  \
    \              if (isIncreasing) return true;\n                if (isDecreasing)\
    \ return false;\n            }\n        }\n        return false;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dafd3b3ef1e4ebe8854486374576c5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <3dafd3b3ef1e4ebe8854486374576c5b>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799626
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return true;\n        long prev = l[0];\n        long current = l[1];\n\
    \        long next = 0;\n        bool increasing = true;\n        for (int i =\
    \ 2; i < l.Count; i++) {\n            next = l[i];\n            if (current <\
    \ next) {\n                increasing = false;\n            }\n            current\
    \ = next;\n        }\n        return increasing;\n    }\n    public static void\
    \ Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <084b27e7f7954ab7bc8ab3f06d2a5d70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <084b27e7f7954ab7bc8ab3f06d2a5d70>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799626
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        bool increasing = true;\n        bool decreasing = true;\n  \
    \      long mid = first + (last - first) / 2;\n        foreach (long x in l.Skip(1))\
    \ {\n            if (x > mid) decreasing = false;\n            else if (x < mid)\
    \ increasing = false;\n            else if (x == mid) break;\n            else\
    \ mid = x;\n        }\n        return increasing || decreasing;\n    }\n    public\
    \ static void Main(string[] args) {\n    Debug.Assert(Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)20L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)20L, (long)4L,\
    \ (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L,\
    \ (long)1L, (long)0L, (long)-10L}))) == (true));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)1L, (long)0L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)3L,\
    \ (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13baffeb3a7342229bbd762ccfdb5384>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <13baffeb3a7342229bbd762ccfdb5384>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799626
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ < 2) return false;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        bool isMonotonic = true;\n\
    \        foreach (long x in l.Skip(1))\n        {\n            if (x > mid)\n\
    \            {\n                isIncreasing = false;\n            }\n       \
    \     else if (x < mid)\n            {\n                isDecreasing = false;\n\
    \            }\n            else\n            {\n                isMonotonic =\
    \ false;\n            }\n        }\n        return isIncreasing || isDecreasing\
    \ || isMonotonic;\n    }\n    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c4100ac8d13490eaa8ed6b9f6a41866>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <7c4100ac8d13490eaa8ed6b9f6a41866>:0 \n"
  stdout: ''
  timestamp: 1659799626
- exit_code: 0
  program: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing\
    \ System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\n\
    class Problem {\n    // Return true is list elements are monotonically increasing\
    \ or decreasing.\n    // >>> Monotonic((new List<long>(new long[]{(long)1L, (long)2L,\
    \ (long)4L, (long)20L})))\n    // (true)\n    // >>> Monotonic((new List<long>(new\
    \ long[]{(long)1L, (long)20L, (long)4L, (long)10L})))\n    // (false)\n    //\
    \ >>> Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L})))\n\
    \    // (true)\n    public static bool Monotonic(List<long> l) {\n        if (l.Count\
    \ == 0) return true;\n        long first = l[0];\n        long last = l[l.Count\
    \ - 1];\n        if (first > last) return true;\n        if (first == last) return\
    \ true;\n        long mid = first + (last - first) / 2;\n        bool isIncreasing\
    \ = true;\n        bool isDecreasing = true;\n        for (int i = 1; i < l.Count;\
    \ i++) {\n            if (l[i] < mid) {\n                isIncreasing = false;\n\
    \            } else if (l[i] > mid) {\n                isDecreasing = false;\n\
    \            } else {\n                isIncreasing = isDecreasing = true;\n \
    \           }\n        }\n        return isIncreasing || isDecreasing;\n    }\n\
    \    public static void Main(string[] args) {\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)4L, (long)10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L, (long)2L, (long)4L,\
    \ (long)20L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)20L, (long)4L, (long)10L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)4L, (long)1L, (long)0L, (long)-10L}))) == (true));\n\
    \    Debug.Assert(Monotonic((new List<long>(new long[]{(long)4L, (long)1L, (long)1L,\
    \ (long)0L}))) == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)1L,\
    \ (long)2L, (long)3L, (long)2L, (long)5L, (long)60L}))) == (false));\n    Debug.Assert(Monotonic((new\
    \ List<long>(new long[]{(long)1L, (long)2L, (long)3L, (long)4L, (long)5L, (long)60L})))\
    \ == (true));\n    Debug.Assert(Monotonic((new List<long>(new long[]{(long)9L,\
    \ (long)9L, (long)9L, (long)9L}))) == (true));\n    }\n\n}\n"
  status: Exception
  stderr: "Fail: \n  at System.Diagnostics.DefaultTraceListener.Fail (System.String\
    \ message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72434bdf25e4dcdbd62389abc999fcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0 \n\
    \  at System.Diagnostics.TraceInternal.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.TraceInternal.Assert\
    \ (System.Boolean condition) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.Debug.Assert (System.Boolean condition) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at Problem.Main (System.String[]\
    \ args) [0x00000] in <a72434bdf25e4dcdbd62389abc999fcc>:0 \nFail: \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String message, System.String detailMessage) [0x00000] in <4932fe0df07342e1823cac360f8a44f7>:0\
    \ \n  at System.Diagnostics.TraceListener.Fail (System.String message) [0x00000]\
    \ in <4932fe0df07342e1823cac360f8a44f7>:0 \n  at System.Diagnostics.DefaultTraceListener.Fail\
    \ (System.String "
  stdout: ''
  timestamp: 1659799626
