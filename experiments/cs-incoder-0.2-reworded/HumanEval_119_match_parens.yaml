name: HumanEval_119_match_parens
language: cs
prompt: "using System;\nusing System.Numerics;\nusing System.Diagnostics;\nusing System.Collections.Generic;\n\
  using System.Linq;\nusing System.Text;\nusing System.Security.Cryptography;\nclass\
  \ Problem {\n    // You are given a list of two strings, both strings consist of\
  \ open\n    // parentheses '(' or close parentheses ')' only.\n    // Your job is\
  \ to check if it is possible to concatenate the two strings in\n    // some order,\
  \ that the resulting string will be good.\n    // A string S is considered to be\
  \ good if and only if all parentheses in S\n    // are balanced. For example: the\
  \ string '(())()' is good, while the string\n    // '())' is not.\n    // Return\
  \ 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n   \
  \ // Examples:\n    // >>> MatchParens((new List<string>(new string[]{(string)\"\
  ()(\", (string)\")\"})))\n    // (\"Yes\")\n    // >>> MatchParens((new List<string>(new\
  \ string[]{(string)\")\", (string)\")\"})))\n    // (\"No\")\n    public static\
  \ string MatchParens(List<string> lst) {\n"
tests: "    }\n    public static void Main(string[] args) {\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\"()(\", (string)\")\"}))).Equals((\"Yes\")));\n\
  \    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")\", (string)\"\
  )\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"\
  (()(())\", (string)\"())())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\")())\", (string)\"(()()(\"}))).Equals((\"\
  Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"\
  (())))\", (string)\"(()())((\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\"()\", (string)\"())\"}))).Equals((\"No\")));\n\
  \    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\"(()(\", (string)\"\
  ()))()\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new List<string>(new\
  \ string[]{(string)\"((((\", (string)\"((())\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\")(()\", (string)\"(()(\"}))).Equals((\"No\"\
  )));\n    Debug.Assert(MatchParens((new List<string>(new string[]{(string)\")(\"\
  , (string)\")(\"}))).Equals((\"No\")));\n    Debug.Assert(MatchParens((new List<string>(new\
  \ string[]{(string)\"(\", (string)\")\"}))).Equals((\"Yes\")));\n    Debug.Assert(MatchParens((new\
  \ List<string>(new string[]{(string)\")\", (string)\"(\"}))).Equals((\"Yes\")));\n\
  \    }\n\n}\n"
completions: ["        string s = \"\";\n        Stack<string> stack = new Stack<string>();\n\
    \        foreach (string str in lst) {\n            if (str.Equals(\"(\")) {\n\
    \                stack.Add(str);\n            } else if (str.Equals(\")\")) {\n\
    \                if (stack.Count > 0) {\n                    string top = stack.Pop();\n\
    \                    s += top + str;\n                } else {\n             \
    \       return \"No\";\n                }\n            } else {\n            \
    \    s += str;\n            }\n        }\n        if (s.Length > 0) {\n      \
    \      return \"Yes\";\n        } else {\n            return \"No\";\n       \
    \ }", "        string result = \"\";\n        Stack<string> stack = new Stack<string>();\n\
    \        foreach (string s in lst) {\n            if (s.Equals(\"(\")) {\n   \
    \             stack.Add(s);\n            } else if (s.Equals(\")\")) {\n     \
    \           if (stack.Count > 0) {\n                    string top = stack.Pop();\n\
    \                    while (stack.Count > 0) {\n                        string\
    \ next = stack.Pop();\n                        result += top + next;\n       \
    \             }\n                } else {\n                    result += \"()\"\
    ;\n                }\n            } else {\n                result += s;\n   \
    \         }\n        }\n        if (result.Length > 0) {\n            return \"\
    No\";\n        } else {\n            return \"Yes\";\n        }", "        string\
    \ s = \"\";\n        bool flag = false;\n        foreach (string str in lst) {\n\
    \            if (str.Contains(\"(\")) {\n                flag = true;\n      \
    \          s += \"(\";\n            }\n            if (str.Contains(\")\")) {\n\
    \                flag = false;\n                s += \")\";\n            }\n \
    \           if (flag) {\n                s += str;\n            }\n        }\n\
    \        if (s.Contains(\"(\")) {\n            return \"No\";\n        }\n   \
    \     return \"Yes\";", "        string result = \"\";\n        Stack<string>\
    \ stack = new Stack<string>();\n        foreach (string s in lst) {\n        \
    \    if (s.Equals(\"(\")) {\n                stack.Add(s);\n            } else\
    \ if (s.Equals(\")\")) {\n                if (stack.Count > 0) {\n           \
    \         string top = stack.Pop();\n                    result += top + s;\n\
    \                } else {\n                    result += \"No\";\n           \
    \     }\n            } else {\n                result += \"No\";\n           \
    \ }\n        }\n        if (result.Equals(\"No\")) {\n            result = \"\
    Yes\";\n        }\n        return result;", "        string s = lst.First();\n\
    \        string t = lst.Last();\n        string result = \"\";\n        bool isGood\
    \ = true;\n        Stack<string> stack = new Stack<string>();\n        stack.Push(s);\n\
    \        while (stack.Count > 0) {\n            string cur = stack.Pop();\n  \
    \          if (cur.Length > 0) {\n                for (int i = 0; i < cur.Length;\
    \ i++) {\n                    if (cur[i] == '(') {\n                        stack.Push(cur.Substring(0,\
    \ i));\n                    } else if (cur[i] == ')') {\n                    \
    \    stack.Pop();\n                        if (stack.Count == 0) {\n         \
    \                   isGood = false;\n                        }\n             \
    \       }\n                }\n            }\n        }\n        if (isGood) {\n\
    \            result = \"Yes\";\n        } else {\n            result = \"No\"\
    ;\n        }\n        return result;", "        string s = lst.First();\n    \
    \    string t = lst.Last();\n        bool isMatch = false;\n        for (int i\
    \ = 0; i < s.Length; i++) {\n            if (s[i] == '(') {\n                isMatch\
    \ = true;\n                for (int j = i; j < t.Length; j++) {\n            \
    \        if (t[j] == '(') {\n                        isMatch = false;\n      \
    \                  break;\n                    }\n                }\n        \
    \    }\n            if (s[i] == ')') {\n                isMatch = false;\n   \
    \             break;\n            }\n        }\n        if (isMatch)\n       \
    \     return \"Yes\";\n        else\n            return \"No\";", "        string\
    \ s = \"\";\n        foreach (string str in lst) {\n            s += str;\n  \
    \      }\n        string result = \"\";\n        Stack<string> stack = new Stack<string>();\n\
    \        foreach (char c in s) {\n            if (c == '(') {\n              \
    \  stack.Add(c);\n            } else if (c == ')') {\n                if (stack.Count\
    \ == 0) {\n                    result += \"(\";\n                } else {\n  \
    \                  result += \"(\";\n                    result += stack.Pop();\n\
    \                }\n            } else {\n                result += c;\n     \
    \       }\n        }\n        if (result.StartsWith(\"(\")) {\n            return\
    \ \"No\";\n        } else {\n            return \"Yes\";\n        }", "      \
    \  if (lst.Count < 2) {\n            return \"No\";\n        }\n        string\
    \ s = lst[0];\n        string t = lst[1];\n        string result = \"\";\n   \
    \     Stack<string> stack = new Stack<string>();\n        Stack<string> stack2\
    \ = new Stack<string>();\n        stack.Push(s);\n        stack2.Push(t);\n  \
    \      while (stack.Count != 0) {\n            string temp = stack.Pop();\n  \
    \          string temp2 = stack2.Pop();\n            if (temp == \"(\" && temp2\
    \ == \"(\") {\n                result += \"(\";\n                stack.Push(temp\
    \ + temp2);\n                stack2.Push(temp + temp2);\n            } else if\
    \ (temp == \")\" && temp2 == \")\") {\n                result += \")\";\n    \
    \            stack.Push(temp + temp2);\n                stack2.Push(temp + temp2);\n\
    \            } else if (temp == \"(\" && temp2 == \")\") {\n                result\
    \ += \"(\";\n                stack.Push(temp + temp2);\n                stack2.Push(temp\
    \ + temp2);\n            } else if (temp == \")\" && temp2 == \"(\") {\n     \
    \           result += \")\";\n                stack.Push(temp + temp2);\n    \
    \            stack2.Push(temp + temp2);\n            } else if (temp == \"(\"\
    \ && temp2 == \")\") {\n                result += \"(\";\n                stack.Push(temp\
    \ + temp2);\n                stack2.Push(temp + temp2);\n            } else if\
    \ (temp == \"(\" && temp2 == \"(\") {\n                result += \"(\";\n    \
    \            stack.Push(temp + temp2);\n                stack2.Push(temp + temp2);\n\
    \            } else if (temp == \")\" && temp2 == \"(\") {\n                result\
    \ += \")\";\n                stack.Push(temp + temp2);\n                stack2.Push(temp\
    \ + temp2);\n            } else if (temp == \"(\" && temp2 == \"(\") {\n     \
    \           result += \"(\";\n                stack.Push(temp + temp2);\n    \
    \            stack2.Push(temp + temp2);\n            } else if (temp == \")\"\
    \ && temp2 == \"(\") {\n                result += \")\";\n                stack.Push(temp\
    \ + temp2);\n                stack2.Push(temp + temp2);\n            } else if\
    \ (temp == \"(\" && temp2 == \"(\") {\n                result += \"(\";\n    \
    \            stack.Push(temp + temp2);\n                stack2.Push(temp + temp2);\n\
    \            } else if (temp == \")\" && temp2 == \"(\") {\n                result\
    \ += \")\";\n                stack.Push(temp + temp2);\n                stack2.Push(temp\
    \ + temp2);\n            } else if (temp == \"(\" && temp2 == \")\") {\n     \
    \           result += \"(\";\n                stack.Push(", "        string result\
    \ = \"\";\n        bool flag = false;\n        foreach (string s in lst) {\n \
    \           if (s.Contains(\"(\")) {\n                flag = true;\n         \
    \   }\n            if (s.Contains(\")\")) {\n                flag = false;\n \
    \           }\n            if (flag) {\n                result += s;\n       \
    \     }\n        }\n        if (result.Length > 0) {\n            return \"Yes\"\
    ;\n        }\n        return \"No\";", "        string result = \"\";\n      \
    \  Stack<string> stack = new Stack<string>();\n        foreach (string s in lst)\
    \ {\n            if (s.Equals(\"(\")) {\n                stack.Add(s);\n     \
    \       } else if (s.Equals(\")\")) {\n                while (stack.Count > 0)\
    \ {\n                    string top = stack.Pop();\n                    if (top.Equals(\"\
    (\")) {\n                        stack.Add(top);\n                    } else if\
    \ (top.Equals(\")\")) {\n                        result = result + top + \"(\"\
    ;\n                        break;\n                    } else {\n            \
    \            result = result + top + \")\";\n                    }\n         \
    \       }\n            }\n        }\n        if (stack.Count > 0) {\n        \
    \    result = \"No\";\n        }\n        return result;", "        string s =\
    \ \"\";\n        foreach (string str in lst) {\n            s += str;\n      \
    \  }\n        string result = \"\";\n        Stack<string> stack = new Stack<string>();\n\
    \        foreach (char c in s) {\n            if (c == '(') {\n              \
    \  stack.Add(c);\n            } else if (c == ')') {\n                if (stack.Count\
    \ == 0) {\n                    result += \"()\";\n                } else {\n \
    \                   string temp = stack.Pop();\n                    result +=\
    \ temp;\n                }\n            }\n        }\n        if (result.Length\
    \ > 0) {\n            return \"Yes\";\n        } else {\n            return \"\
    No\";\n        }", "        string result = \"\";\n        Stack<string> stack\
    \ = new Stack<string>();\n        foreach (string s in lst) {\n            if\
    \ (s.Equals(\"(\")) {\n                stack.Add(s);\n            } else if (s.Equals(\"\
    )\")) {\n                while (stack.Count > 0) {\n                    string\
    \ top = stack.Pop();\n                    if (!top.Equals(\"(\")) {\n        \
    \                result += \"(\" + top + \")\";\n                    } else {\n\
    \                        result += \"(\" + top;\n                        stack.Clear();\n\
    \                    }\n                }\n            }\n        }\n        return\
    \ result;", "        string s = \"\";\n        foreach (string str in lst) {\n\
    \            if (str.Contains(\"(\")) {\n                s += \"(\";\n       \
    \     }\n            if (str.Contains(\")\")) {\n                s += \")\";\n\
    \            }\n        }\n        if (s.Length > 0) {\n            return \"\
    Yes\";\n        }\n        return \"No\";", "        string s = \"\";\n      \
    \  foreach (string str in lst) {\n            s += str;\n        }\n        string\
    \ sb = \"\";\n        bool flag = true;\n        for (int i = 0; i < s.Length;\
    \ i++) {\n            if (s[i] == '(') {\n                sb = sb + s[i];\n  \
    \              flag = false;\n            }\n            if (s[i] == ')') {\n\
    \                if (flag) {\n                    sb = sb + s[i];\n          \
    \      }\n                else {\n                    flag = true;\n         \
    \       }\n            }\n        }\n        if (sb.Length == s.Length) {\n  \
    \          return \"Yes\";\n        }\n        return \"No\";", "        string\
    \ result = \"\";\n        Stack<string> stack = new Stack<string>();\n       \
    \ foreach (string s in lst) {\n            if (s.Equals(\"(\")) {\n          \
    \      stack.Add(s);\n            } else if (s.Equals(\")\")) {\n            \
    \    if (stack.Count > 0) {\n                    string top = stack.Pop();\n \
    \                   result += top + s;\n                } else {\n           \
    \         result += \"No\";\n                }\n            } else {\n       \
    \         result += \"No\";\n            }\n        }\n        if (result.Equals(\"\
    No\")) {\n            result = \"Yes\";\n        }\n        return result;", " \
    \       string s = \"\";\n        bool flag = true;\n        foreach (string str\
    \ in lst) {\n            if (str.Length > 0) {\n                if (str[0] ==\
    \ '(') {\n                    flag = true;\n                } else if (str[str.Length\
    \ - 1] == ')') {\n                    flag = false;\n                }\n     \
    \           if (flag) {\n                    s += str;\n                }\n  \
    \          }\n        }\n        if (s.Length > 0) {\n            if (s.Length\
    \ % 2 == 0) {\n                return \"Yes\";\n            } else {\n       \
    \         return \"No\";\n            }\n        } else {\n            return\
    \ \"No\";\n        }", "        string result = \"\";\n        bool isGood = true;\n\
    \        foreach (string s in lst) {\n            int openParen = s.IndexOf('(');\n\
    \            int closeParen = s.IndexOf(')');\n            if (openParen == -1\
    \ || closeParen == -1) {\n                isGood = false;\n                break;\n\
    \            }\n            if (openParen > closeParen) {\n                isGood\
    \ = false;\n                break;\n            }\n            int openCount =\
    \ 1;\n            int closeCount = 1;\n            int index = 0;\n          \
    \  while (index < s.Length) {\n                if (s[index] == '(') {\n      \
    \              openCount++;\n                } else if (s[index] == ')') {\n \
    \                   closeCount++;\n                }\n                index++;\n\
    \            }\n            if (openCount != closeCount) {\n                isGood\
    \ = false;\n                break;\n            }\n        }\n        if (isGood)\
    \ {\n            result = \"Yes\";\n        } else {\n            result = \"\
    No\";\n        }\n        return result;", "        string result = \"\";\n  \
    \      Stack<string> stack = new Stack<string>();\n        foreach (string s in\
    \ lst) {\n            if (s.Equals(\"(\")) {\n                stack.Add(s);\n\
    \            } else if (s.Equals(\")\")) {\n                if (stack.Count ==\
    \ 0) {\n                    result += \"No\";\n                } else {\n    \
    \                string top = stack.Pop();\n                    result += \"Yes\"\
    ;\n                    foreach (string s in stack) {\n                       \
    \ result += top + s;\n                    }\n                }\n            }\n\
    \        }\n        return result;", "        string s = lst.First();\n      \
    \  string t = lst.Last();\n        string result = \"\";\n        Stack<string>\
    \ stack = new Stack<string>();\n        Stack<string> stack2 = new Stack<string>();\n\
    \        stack.Push(s);\n        stack2.Push(t);\n        bool flag = false;\n\
    \        while (stack.Count > 0 || stack2.Count > 0) {\n            string s1\
    \ = stack.Peek();\n            string s2 = stack2.Peek();\n            if (s1\
    \ == \"\" && s2 == \"\") {\n                flag = true;\n                break;\n\
    \            }\n            if (s1 == \"\") {\n                stack2.Pop();\n\
    \                stack.Pop();\n            }\n            if (s2 == \"\") {\n\
    \                stack.Pop();\n                stack2.Pop();\n            }\n\
    \            if (s1.Equals(\"(\") && s2.Equals(\")\")) {\n                stack.Pop();\n\
    \                stack2.Pop();\n            }\n            if (s1.Equals(\")\"\
    ) && s2.Equals(\"(\")) {\n                stack.Pop();\n                stack2.Pop();\n\
    \            }\n            if (s1.Equals(\"(\")) {\n                stack.Push(s2);\n\
    \                stack2.Push(s1);\n            }\n            if (s2.Equals(\"\
    )\")) {\n                stack.Push(s1);\n                stack2.Push(s2);\n \
    \           }\n        }\n        if (flag) {\n            result = \"Yes\";\n\
    \        } else {\n            result = \"No\";\n        }\n        return result;",
  "        string result = \"\";\n        Stack<string> stack = new Stack<string>();\n\
    \        foreach (string s in lst) {\n            if (s.Equals(\"(\")) {\n   \
    \             stack.Add(s);\n            } else if (s.Equals(\")\")) {\n     \
    \           while (stack.Count > 0) {\n                    string top = stack.Pop();\n\
    \                    if (top.Equals(\"(\")) {\n                        stack.Add(top);\n\
    \                    } else if (top.Equals(\")\")) {\n                       \
    \ result += top;\n                    }\n                }\n            }\n  \
    \      }\n        if (stack.Count > 0) {\n            result = \"No\";\n     \
    \   }\n        return result;"]
stop_tokens:
- "\n    }\n"
